
ROBOT_CMSIS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  08015bd0  08015bd0  00025bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016860  08016860  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08016860  08016860  00026860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016868  08016868  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016868  08016868  00026868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801686c  0801686c  0002686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08016870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          000176e8  200001a0  200001a0  000301a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20017888  20017888  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033ab3  00000000  00000000  0003020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a023  00000000  00000000  00063cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028a8  00000000  00000000  0006dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001eb4  00000000  00000000  00070590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003485e  00000000  00000000  00072444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000417e6  00000000  00000000  000a6ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0b59  00000000  00000000  000e8488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a974  00000000  00000000  001d8fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  001e3958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015bb8 	.word	0x08015bb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	08015bb8 	.word	0x08015bb8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <blinky_task>:
 */

#include "blinky_task.h"


void blinky_task (void const *argument){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	uint32_t t = osKernelSysTick();
 8000ea0:	f00e f9ab 	bl	800f1fa <osKernelSysTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60bb      	str	r3, [r7, #8]
	uint32_t period = 100;
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	60fb      	str	r3, [r7, #12]
	for(;;){

		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <blinky_task+0xb8>)
 8000eb2:	f006 fa0a 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	68f9      	ldr	r1, [r7, #12]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00e fa73 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4822      	ldr	r0, [pc, #136]	; (8000f50 <blinky_task+0xb8>)
 8000ec6:	f006 fa00 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	68f9      	ldr	r1, [r7, #12]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00e fa69 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <blinky_task+0xb8>)
 8000eda:	f006 f9f6 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	68f9      	ldr	r1, [r7, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00e fa5f 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 8000eea:	2120      	movs	r1, #32
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <blinky_task+0xb8>)
 8000eee:	f006 f9ec 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	68f9      	ldr	r1, [r7, #12]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00e fa55 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 8000efe:	2110      	movs	r1, #16
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <blinky_task+0xb8>)
 8000f02:	f006 f9e2 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	68f9      	ldr	r1, [r7, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00e fa4b 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 8000f12:	2108      	movs	r1, #8
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <blinky_task+0xb8>)
 8000f16:	f006 f9d8 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00e fa41 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000f26:	2104      	movs	r1, #4
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <blinky_task+0xb8>)
 8000f2a:	f006 f9ce 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00e fa37 	bl	800f3a8 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <blinky_task+0xb8>)
 8000f3e:	f006 f9c4 	bl	80072ca <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00e fa2d 	bl	800f3a8 <osDelayUntil>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000f4e:	e7ad      	b.n	8000eac <blinky_task+0x14>
 8000f50:	40021800 	.word	0x40021800

08000f54 <chassis_task>:

float follow_relative_angle;
struct pid pid_follow = {0}; //angle control

void chassis_task(void const *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 8000f5c:	f00e f94d 	bl	800f1fa <osKernelSysTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	60bb      	str	r3, [r7, #8]
  chassis_t pchassis = NULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  rc_device_t prc_dev = NULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  rc_info_t prc_info = NULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  pchassis = chassis_find("chassis");
 8000f70:	4887      	ldr	r0, [pc, #540]	; (8001190 <chassis_task+0x23c>)
 8000f72:	f012 fa8f 	bl	8013494 <chassis_find>
 8000f76:	6138      	str	r0, [r7, #16]
  prc_dev = rc_device_find("uart_rc");
 8000f78:	4886      	ldr	r0, [pc, #536]	; (8001194 <chassis_task+0x240>)
 8000f7a:	f011 fb55 	bl	8012628 <rc_device_find>
 8000f7e:	60f8      	str	r0, [r7, #12]

  if (prc_dev != NULL)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <chassis_task+0x3a>
  {
    prc_info = rc_device_get_info(prc_dev);
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f011 fb3d 	bl	8012606 <rc_device_get_info>
 8000f8c:	6178      	str	r0, [r7, #20]
  }
  else
  {
  }

  soft_timer_register(chassis_push_info, (void *)pchassis, 10);
 8000f8e:	220a      	movs	r2, #10
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	4881      	ldr	r0, [pc, #516]	; (8001198 <chassis_task+0x244>)
 8000f94:	f000 fd34 	bl	8001a00 <soft_timer_register>

  pid_struct_init(&pid_follow, MAX_CHASSIS_VW_SPEED, 50, 8.0f, 0.0f, 2.0f);
 8000f98:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8000f9c:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800119c <chassis_task+0x248>
 8000fa0:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8000fa4:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80011a0 <chassis_task+0x24c>
 8000fa8:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80011a4 <chassis_task+0x250>
 8000fac:	487e      	ldr	r0, [pc, #504]	; (80011a8 <chassis_task+0x254>)
 8000fae:	f011 f9af 	bl	8012310 <pid_struct_init>

  while (1)
  {
    if (rc_device_get_state(prc_dev, RC_S2_DOWN) != RM_OK)
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f011 fae1 	bl	801257e <rc_device_get_state>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80dc 	beq.w	800117c <chassis_task+0x228>
    {
      if (rc_device_get_state(prc_dev, RC_S2_UP) == RM_OK)
 8000fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f011 fad8 	bl	801257e <rc_device_get_state>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d14f      	bne.n	8001074 <chassis_task+0x120>
      {
        vx = (float)prc_info->ch2 / 660 * MAX_CHASSIS_VX_SPEED;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	eddf 6a72 	vldr	s13, [pc, #456]	; 80011ac <chassis_task+0x258>
 8000fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fea:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80011b0 <chassis_task+0x25c>
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <chassis_task+0x260>)
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
        vy = -(float)prc_info->ch1 / 660 * MAX_CHASSIS_VY_SPEED;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001006:	eeb1 7a67 	vneg.f32	s14, s15
 800100a:	eddf 6a68 	vldr	s13, [pc, #416]	; 80011ac <chassis_task+0x258>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80011b0 <chassis_task+0x25c>
 8001016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <chassis_task+0x264>)
 800101c:	edc3 7a00 	vstr	s15, [r3]
        wz = -pid_calculate(&pid_follow, follow_relative_angle, 0);
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <chassis_task+0x268>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800119c <chassis_task+0x248>
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	485e      	ldr	r0, [pc, #376]	; (80011a8 <chassis_task+0x254>)
 8001030:	f011 f8e5 	bl	80121fe <pid_calculate>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	eef1 7a67 	vneg.f32	s15, s15
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <chassis_task+0x26c>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
        chassis_set_offset(pchassis, ROTATE_X_OFFSET, ROTATE_Y_OFFSET);
 8001042:	eddf 0a56 	vldr	s1, [pc, #344]	; 800119c <chassis_task+0x248>
 8001046:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800104a:	6938      	ldr	r0, [r7, #16]
 800104c:	f012 f944 	bl	80132d8 <chassis_set_offset>
        chassis_set_speed(pchassis, vx, vy, wz);
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <chassis_task+0x260>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <chassis_task+0x264>)
 8001058:	ed93 7a00 	vldr	s14, [r3]
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <chassis_task+0x26c>)
 800105e:	edd3 6a00 	vldr	s13, [r3]
 8001062:	eeb0 1a66 	vmov.f32	s2, s13
 8001066:	eef0 0a47 	vmov.f32	s1, s14
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	6938      	ldr	r0, [r7, #16]
 8001070:	f012 f8f0 	bl	8013254 <chassis_set_speed>
      }

      if (rc_device_get_state(prc_dev, RC_S2_MID) == RM_OK)
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f011 fa80 	bl	801257e <rc_device_get_state>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d152      	bne.n	800112a <chassis_task+0x1d6>
      {
        vx = (float)prc_info->ch2 / 660 * MAX_CHASSIS_VX_SPEED;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	eddf 6a46 	vldr	s13, [pc, #280]	; 80011ac <chassis_task+0x258>
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80011b0 <chassis_task+0x25c>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <chassis_task+0x260>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
        vy = -(float)prc_info->ch1 / 660 * MAX_CHASSIS_VY_SPEED;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b6:	eeb1 7a67 	vneg.f32	s14, s15
 80010ba:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80011ac <chassis_task+0x258>
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80011b0 <chassis_task+0x25c>
 80010c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <chassis_task+0x264>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]
        wz = -(float)prc_info->ch3 / 660 * MAX_CHASSIS_VW_SPEED;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	eeb1 7a67 	vneg.f32	s14, s15
 80010e2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80011ac <chassis_task+0x258>
 80010e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ea:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80011a4 <chassis_task+0x250>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <chassis_task+0x26c>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
        chassis_set_offset(pchassis, 0, 0);
 80010f8:	eddf 0a28 	vldr	s1, [pc, #160]	; 800119c <chassis_task+0x248>
 80010fc:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800119c <chassis_task+0x248>
 8001100:	6938      	ldr	r0, [r7, #16]
 8001102:	f012 f8e9 	bl	80132d8 <chassis_set_offset>
        chassis_set_speed(pchassis, vx, vy, wz);
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <chassis_task+0x260>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <chassis_task+0x264>)
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <chassis_task+0x26c>)
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	eeb0 1a66 	vmov.f32	s2, s13
 800111c:	eef0 0a47 	vmov.f32	s1, s14
 8001120:	eeb0 0a67 	vmov.f32	s0, s15
 8001124:	6938      	ldr	r0, [r7, #16]
 8001126:	f012 f895 	bl	8013254 <chassis_set_speed>
      }

      if (rc_device_get_state(prc_dev, RC_S2_MID2DOWN) == RM_OK)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f011 fa26 	bl	801257e <rc_device_get_state>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <chassis_task+0x1f6>
      {
        chassis_set_speed(pchassis, 0, 0, 0);
 8001138:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800119c <chassis_task+0x248>
 800113c:	eddf 0a17 	vldr	s1, [pc, #92]	; 800119c <chassis_task+0x248>
 8001140:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800119c <chassis_task+0x248>
 8001144:	6938      	ldr	r0, [r7, #16]
 8001146:	f012 f885 	bl	8013254 <chassis_set_speed>
      }

      if (rc_device_get_state(prc_dev, RC_S2_MID2UP) == RM_OK)
 800114a:	2120      	movs	r1, #32
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f011 fa16 	bl	801257e <rc_device_get_state>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <chassis_task+0x216>
      {
        chassis_set_speed(pchassis, 0, 0, 0);
 8001158:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800119c <chassis_task+0x248>
 800115c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800119c <chassis_task+0x248>
 8001160:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800119c <chassis_task+0x248>
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f012 f875 	bl	8013254 <chassis_set_speed>
      }

      chassis_set_acc(pchassis, 0, 0, 0);
 800116a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800119c <chassis_task+0x248>
 800116e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800119c <chassis_task+0x248>
 8001172:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800119c <chassis_task+0x248>
 8001176:	6938      	ldr	r0, [r7, #16]
 8001178:	f012 f88c 	bl	8013294 <chassis_set_acc>
    }

    chassis_execute(pchassis);
 800117c:	6938      	ldr	r0, [r7, #16]
 800117e:	f011 ff6f 	bl	8013060 <chassis_execute>
    osDelayUntil(&period, 2);
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f00e f90d 	bl	800f3a8 <osDelayUntil>
    if (rc_device_get_state(prc_dev, RC_S2_DOWN) != RM_OK)
 800118e:	e710      	b.n	8000fb2 <chassis_task+0x5e>
 8001190:	08015bd0 	.word	0x08015bd0
 8001194:	08015bd8 	.word	0x08015bd8
 8001198:	08001581 	.word	0x08001581
 800119c:	00000000 	.word	0x00000000
 80011a0:	42480000 	.word	0x42480000
 80011a4:	43960000 	.word	0x43960000
 80011a8:	200001cc 	.word	0x200001cc
 80011ac:	44250000 	.word	0x44250000
 80011b0:	454e4000 	.word	0x454e4000
 80011b4:	200001bc 	.word	0x200001bc
 80011b8:	200001c0 	.word	0x200001c0
 80011bc:	200001c8 	.word	0x200001c8
 80011c0:	200001c4 	.word	0x200001c4

080011c4 <usb_rcv_callback>:
static int32_t usb_interface_send(uint8_t *p_data, uint32_t len);

extern osThreadId communicate_task_t;

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  protocol_uart_rcv_data(PROTOCOL_USB_PORT, buf, len);
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	2000      	movs	r0, #0
 80011d4:	f001 f848 	bl	8002268 <protocol_uart_rcv_data>
  osSignalSet(communicate_task_t, RECV_PROTOCOL_SIGNAL);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <usb_rcv_callback+0x2c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f00e f856 	bl	800f290 <osSignalSet>
  return len;
 80011e4:	683b      	ldr	r3, [r7, #0]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000690 	.word	0x20000690

080011f4 <manifold2_heart_package>:

int32_t manifold2_heart_package(uint8_t *buff, uint16_t len)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
  return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <report_firmware_version>:

int32_t report_firmware_version(uint8_t *buff, uint16_t len)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
  return FIRMWARE_VERSION;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <report_firmware_version+0x1c>)
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	01000106 	.word	0x01000106

08001230 <communicate_task>:

void communicate_task(void const *argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
  uint8_t app;
  app = get_sys_cfg();
 8001238:	f000 fa16 	bl	8001668 <get_sys_cfg>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]

  protocol_local_init(CHASSIS_ADDRESS);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 fcfb 	bl	8001c3c <protocol_local_init>
  protocol_uart_interface_register("manifold2", 4096, 1, PROTOCOL_USB_PORT, usb_interface_send);
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <communicate_task+0x8c>)
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001252:	481b      	ldr	r0, [pc, #108]	; (80012c0 <communicate_task+0x90>)
 8001254:	f000 ff84 	bl	8002160 <protocol_uart_interface_register>
  protocol_set_route(MANIFOLD2_ADDRESS, "manifold2");
 8001258:	4919      	ldr	r1, [pc, #100]	; (80012c0 <communicate_task+0x90>)
 800125a:	2000      	movs	r0, #0
 800125c:	f001 f842 	bl	80022e4 <protocol_set_route>

  protocol_rcv_cmd_register(CMD_MANIFOLD2_HEART, manifold2_heart_package);
 8001260:	4918      	ldr	r1, [pc, #96]	; (80012c4 <communicate_task+0x94>)
 8001262:	2001      	movs	r0, #1
 8001264:	f000 fcae 	bl	8001bc4 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_REPORT_VERSION, report_firmware_version);
 8001268:	4917      	ldr	r1, [pc, #92]	; (80012c8 <communicate_task+0x98>)
 800126a:	2002      	movs	r0, #2
 800126c:	f000 fcaa 	bl	8001bc4 <protocol_rcv_cmd_register>

  usb_vcp_rx_callback_register(usb_rcv_callback);
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <communicate_task+0x9c>)
 8001272:	f00f fe53 	bl	8010f1c <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush, NULL, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <communicate_task+0xa0>)
 800127c:	f000 fbc0 	bl	8001a00 <soft_timer_register>
	protocol_send_list_add_callback_reg(protocol_send_success_callback);
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <communicate_task+0xa4>)
 8001282:	f000 fe99 	bl	8001fb8 <protocol_send_list_add_callback_reg>

  while (1)
  {
    osEvent event;

    event = osSignalWait(SEND_PROTOCOL_SIGNAL | RECV_PROTOCOL_SIGNAL, osWaitForever);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800128e:	2103      	movs	r1, #3
 8001290:	4618      	mov	r0, r3
 8001292:	f00e f83d 	bl	800f310 <osSignalWait>

    if (event.status == osEventSignal)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b08      	cmp	r3, #8
 800129a:	d1f4      	bne.n	8001286 <communicate_task+0x56>
    {
      if (event.value.signals & SEND_PROTOCOL_SIGNAL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <communicate_task+0x7a>
      {
        protocol_send_flush();
 80012a6:	f000 fdbd 	bl	8001e24 <protocol_send_flush>
      }

      if (event.value.signals & RECV_PROTOCOL_SIGNAL)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0e8      	beq.n	8001286 <communicate_task+0x56>
      {
        protocol_unpack_flush();
 80012b4:	f000 fe0a 	bl	8001ecc <protocol_unpack_flush>
  {
 80012b8:	e7e5      	b.n	8001286 <communicate_task+0x56>
 80012ba:	bf00      	nop
 80012bc:	080012d9 	.word	0x080012d9
 80012c0:	08015be0 	.word	0x08015be0
 80012c4:	080011f5 	.word	0x080011f5
 80012c8:	08001211 	.word	0x08001211
 80012cc:	080011c5 	.word	0x080011c5
 80012d0:	08010e81 	.word	0x08010e81
 80012d4:	080012f9 	.word	0x080012f9

080012d8 <usb_interface_send>:
    }
  }
}

static int32_t usb_interface_send(uint8_t *p_data, uint32_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  CDC_Transmit_FS(p_data, len);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f00f fdb3 	bl	8010e54 <CDC_Transmit_FS>
  return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <protocol_send_success_callback>:

static void protocol_send_success_callback(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <protocol_send_success_callback+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f00d ffc4 	bl	800f290 <osSignalSet>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000690 	.word	0x20000690

08001310 <infantry_cmd_task>:

int32_t chassis_speed_ctrl(uint8_t *buff, uint16_t len);
int32_t chassis_spd_acc_ctrl(uint8_t *buff, uint16_t len);

void infantry_cmd_task(void const *argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint8_t app;
  osEvent event;
  app = get_sys_cfg();
 8001318:	f000 f9a6 	bl	8001668 <get_sys_cfg>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  rc_device_t prc_dev = NULL;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  chassis_t pchassis = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]

  pchassis = chassis_find("chassis");
 800132a:	4871      	ldr	r0, [pc, #452]	; (80014f0 <infantry_cmd_task+0x1e0>)
 800132c:	f012 f8b2 	bl	8013494 <chassis_find>
 8001330:	61f8      	str	r0, [r7, #28]

  protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPEED, chassis_speed_ctrl);
 8001332:	4970      	ldr	r1, [pc, #448]	; (80014f4 <infantry_cmd_task+0x1e4>)
 8001334:	f240 2003 	movw	r0, #515	; 0x203
 8001338:	f000 fc44 	bl	8001bc4 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPD_ACC, chassis_spd_acc_ctrl);
 800133c:	496e      	ldr	r1, [pc, #440]	; (80014f8 <infantry_cmd_task+0x1e8>)
 800133e:	f240 2005 	movw	r0, #517	; 0x205
 8001342:	f000 fc3f 	bl	8001bc4 <protocol_rcv_cmd_register>

  while (1)
  {
    event = osSignalWait(MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL, 500);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800134e:	2111      	movs	r1, #17
 8001350:	4618      	mov	r0, r3
 8001352:	f00d ffdd 	bl	800f310 <osSignalWait>

    if (event.status == osEventSignal)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b08      	cmp	r3, #8
 800135a:	f040 80b5 	bne.w	80014c8 <infantry_cmd_task+0x1b8>
    {
      if (event.value.signals & MANIFOLD2_CHASSIS_SIGNAL)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d046      	beq.n	80013f6 <infantry_cmd_task+0xe6>
      {
        struct cmd_chassis_speed *pspeed;
        pspeed = &manifold_cmd.chassis_speed;
 8001368:	4b64      	ldr	r3, [pc, #400]	; (80014fc <infantry_cmd_task+0x1ec>)
 800136a:	61bb      	str	r3, [r7, #24]
        chassis_set_offset(pchassis, pspeed->rotate_x_offset, pspeed->rotate_x_offset);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001372:	b21b      	sxth	r3, r3
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001382:	b21b      	sxth	r3, r3
 8001384:	ee07 3a10 	vmov	s14, r3
 8001388:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800138c:	eef0 0a47 	vmov.f32	s1, s14
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	69f8      	ldr	r0, [r7, #28]
 8001396:	f011 ff9f 	bl	80132d8 <chassis_set_offset>
        chassis_set_acc(pchassis, 0, 0, 0);
 800139a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8001500 <infantry_cmd_task+0x1f0>
 800139e:	eddf 0a58 	vldr	s1, [pc, #352]	; 8001500 <infantry_cmd_task+0x1f0>
 80013a2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001500 <infantry_cmd_task+0x1f0>
 80013a6:	69f8      	ldr	r0, [r7, #28]
 80013a8:	f011 ff74 	bl	8013294 <chassis_set_acc>
        chassis_set_speed(pchassis, pspeed->vx, pspeed->vy, pspeed->vw / 10.0f);
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80013e0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80013e4:	eeb0 1a46 	vmov.f32	s2, s12
 80013e8:	eef0 0a66 	vmov.f32	s1, s13
 80013ec:	eeb0 0a47 	vmov.f32	s0, s14
 80013f0:	69f8      	ldr	r0, [r7, #28]
 80013f2:	f011 ff2f 	bl	8013254 <chassis_set_speed>
      }

      if (event.value.signals & MANIFOLD2_CHASSIS_ACC_SIGNAL)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0a2      	beq.n	8001346 <infantry_cmd_task+0x36>
      {
        struct cmd_chassis_spd_acc *pacc;
        pacc = &manifold_cmd.chassis_spd_acc;
 8001400:	4b40      	ldr	r3, [pc, #256]	; (8001504 <infantry_cmd_task+0x1f4>)
 8001402:	617b      	str	r3, [r7, #20]
        chassis_set_offset(pchassis, pacc->rotate_x_offset, pacc->rotate_x_offset);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800140a:	b21b      	sxth	r3, r3
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800141a:	b21b      	sxth	r3, r3
 800141c:	ee07 3a10 	vmov	s14, r3
 8001420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001424:	eef0 0a47 	vmov.f32	s1, s14
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	f011 ff53 	bl	80132d8 <chassis_set_offset>
        chassis_set_acc(pchassis, pacc->ax, pacc->ay, pacc->wz / 10.0f);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001438:	b21b      	sxth	r3, r3
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001448:	b21b      	sxth	r3, r3
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001458:	b21b      	sxth	r3, r3
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001466:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800146a:	eeb0 1a46 	vmov.f32	s2, s12
 800146e:	eef0 0a66 	vmov.f32	s1, s13
 8001472:	eeb0 0a47 	vmov.f32	s0, s14
 8001476:	69f8      	ldr	r0, [r7, #28]
 8001478:	f011 ff0c 	bl	8013294 <chassis_set_acc>
        chassis_set_speed(pchassis, pacc->vx, pacc->vy, pacc->vw / 10.0f);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	b21b      	sxth	r3, r3
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001492:	b21b      	sxth	r3, r3
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80014b0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80014b4:	eeb0 1a46 	vmov.f32	s2, s12
 80014b8:	eef0 0a66 	vmov.f32	s1, s13
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	69f8      	ldr	r0, [r7, #28]
 80014c2:	f011 fec7 	bl	8013254 <chassis_set_speed>
 80014c6:	e73e      	b.n	8001346 <infantry_cmd_task+0x36>
      }
    }
    else
    {
      chassis_set_speed(pchassis, 0, 0, 0);
 80014c8:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001500 <infantry_cmd_task+0x1f0>
 80014cc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001500 <infantry_cmd_task+0x1f0>
 80014d0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001500 <infantry_cmd_task+0x1f0>
 80014d4:	69f8      	ldr	r0, [r7, #28]
 80014d6:	f011 febd 	bl	8013254 <chassis_set_speed>
      chassis_set_acc(pchassis, 0, 0, 0);
 80014da:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8001500 <infantry_cmd_task+0x1f0>
 80014de:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001500 <infantry_cmd_task+0x1f0>
 80014e2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001500 <infantry_cmd_task+0x1f0>
 80014e6:	69f8      	ldr	r0, [r7, #28]
 80014e8:	f011 fed4 	bl	8013294 <chassis_set_acc>
    event = osSignalWait(MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL, 500);
 80014ec:	e72b      	b.n	8001346 <infantry_cmd_task+0x36>
 80014ee:	bf00      	nop
 80014f0:	08015bec 	.word	0x08015bec
 80014f4:	08001509 	.word	0x08001509
 80014f8:	08001545 	.word	0x08001545
 80014fc:	20000220 	.word	0x20000220
 8001500:	00000000 	.word	0x00000000
 8001504:	2000022a 	.word	0x2000022a

08001508 <chassis_speed_ctrl>:
    }
  }
}

int32_t chassis_speed_ctrl(uint8_t *buff, uint16_t len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  if (len == sizeof(struct cmd_chassis_speed))
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d10b      	bne.n	8001532 <chassis_speed_ctrl+0x2a>
  {
    memcpy(&manifold_cmd.chassis_speed, buff, len);
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	461a      	mov	r2, r3
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <chassis_speed_ctrl+0x34>)
 8001522:	f013 fa55 	bl	80149d0 <memcpy>
    osSignalSet(cmd_task_t, MANIFOLD2_CHASSIS_SIGNAL);
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <chassis_speed_ctrl+0x38>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f00d feaf 	bl	800f290 <osSignalSet>
  }
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000220 	.word	0x20000220
 8001540:	20000694 	.word	0x20000694

08001544 <chassis_spd_acc_ctrl>:

int32_t chassis_spd_acc_ctrl(uint8_t *buff, uint16_t len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  if (len == sizeof(struct cmd_chassis_spd_acc))
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d10b      	bne.n	800156e <chassis_spd_acc_ctrl+0x2a>
  {
    memcpy(&manifold_cmd.chassis_spd_acc, buff, len);
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	461a      	mov	r2, r3
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <chassis_spd_acc_ctrl+0x34>)
 800155e:	f013 fa37 	bl	80149d0 <memcpy>
    osSignalSet(cmd_task_t, MANIFOLD2_CHASSIS_ACC_SIGNAL);
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <chassis_spd_acc_ctrl+0x38>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2110      	movs	r1, #16
 8001568:	4618      	mov	r0, r3
 800156a:	f00d fe91 	bl	800f290 <osSignalSet>
  }
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000022a 	.word	0x2000022a
 800157c:	20000694 	.word	0x20000694

08001580 <chassis_push_info>:

int32_t chassis_push_info(void *argc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  struct chassis_info info;
  chassis_t pchassis = (chassis_t)argc;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  chassis_get_info(pchassis, &info);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001594:	f011 febc 	bl	8013310 <chassis_get_info>

  cmd_chassis_info.angle_deg = info.angle_deg * 10;
 8001598:	edd7 7a08 	vldr	s15, [r7, #32]
 800159c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	ee17 3a90 	vmov	r3, s15
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <chassis_push_info+0xc4>)
 80015b0:	819a      	strh	r2, [r3, #12]
  cmd_chassis_info.gyro_angle = info.yaw_gyro_angle * 10;
 80015b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c2:	ee17 3a90 	vmov	r3, s15
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <chassis_push_info+0xc4>)
 80015ca:	801a      	strh	r2, [r3, #0]
  cmd_chassis_info.gyro_palstance = info.yaw_gyro_rate * 10;
 80015cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015dc:	ee17 3a90 	vmov	r3, s15
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <chassis_push_info+0xc4>)
 80015e4:	805a      	strh	r2, [r3, #2]
  cmd_chassis_info.position_x_mm = info.position_x_mm;
 80015e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ee:	ee17 2a90 	vmov	r2, s15
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <chassis_push_info+0xc4>)
 80015f4:	605a      	str	r2, [r3, #4]
  cmd_chassis_info.position_y_mm = info.position_y_mm;
 80015f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <chassis_push_info+0xc4>)
 8001604:	609a      	str	r2, [r3, #8]
  cmd_chassis_info.v_x_mm = info.v_x_mm;
 8001606:	edd7 7a03 	vldr	s15, [r7, #12]
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <chassis_push_info+0xc4>)
 8001616:	81da      	strh	r2, [r3, #14]
  cmd_chassis_info.v_y_mm = info.v_y_mm;
 8001618:	edd7 7a04 	vldr	s15, [r7, #16]
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	b21a      	sxth	r2, r3
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <chassis_push_info+0xc4>)
 8001628:	821a      	strh	r2, [r3, #16]

  protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &cmd_chassis_info, sizeof(cmd_chassis_info));
 800162a:	2312      	movs	r3, #18
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <chassis_push_info+0xc4>)
 800162e:	f240 2101 	movw	r1, #513	; 0x201
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fb72 	bl	8001d1c <protocol_send>

  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3740      	adds	r7, #64	; 0x40
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000020c 	.word	0x2000020c

08001648 <system_config>:
static uint8_t glb_sys_cfg;

extern int ulog_console_backend_init(void);

void system_config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  glb_sys_cfg = HAL_GPIO_ReadPin(SYS_CFG_GPIO_Port, SYS_CFG_Pin);
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <system_config+0x18>)
 8001650:	f005 fe0a 	bl	8007268 <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <system_config+0x1c>)
 800165a:	701a      	strb	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40020c00 	.word	0x40020c00
 8001664:	20000684 	.word	0x20000684

08001668 <get_sys_cfg>:

uint8_t get_sys_cfg(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return glb_sys_cfg;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <get_sys_cfg+0x14>)
 800166e:	781b      	ldrb	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000684 	.word	0x20000684

08001680 <hw_init>:

void hw_init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  cali_param_init();
 8001684:	f000 f962 	bl	800194c <cali_param_init>
  board_config();
 8001688:	f001 ffa2 	bl	80035d0 <board_config>
  test_init();
 800168c:	f012 ff30 	bl	80144f0 <test_init>
  system_config();
 8001690:	f7ff ffda 	bl	8001648 <system_config>
  ulog_init();
 8001694:	f013 f8a2 	bl	80147dc <ulog_init>
  ulog_console_backend_init();
 8001698:	f013 f8d0 	bl	801483c <ulog_console_backend_init>

  chassis_pid_register(&chassis, "chassis", DEVICE_CAN1);
 800169c:	2200      	movs	r2, #0
 800169e:	4905      	ldr	r1, [pc, #20]	; (80016b4 <hw_init+0x34>)
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <hw_init+0x38>)
 80016a2:	f011 fb5f 	bl	8012d64 <chassis_pid_register>
  chassis_disable(&chassis);
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <hw_init+0x38>)
 80016a8:	f011 ff02 	bl	80134b0 <chassis_disable>

  offline_init();
 80016ac:	f000 f87a 	bl	80017a4 <offline_init>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08015bf4 	.word	0x08015bf4
 80016b8:	2000023c 	.word	0x2000023c

080016bc <task_init>:
osThreadId communicate_task_t;
osThreadId cmd_task_t;
osThreadId blinky_task_t;

void task_init(void)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b09a      	sub	sp, #104	; 0x68
 80016c0:	af00      	add	r7, sp, #0
  uint8_t app;
  app = get_sys_cfg();
 80016c2:	f7ff ffd1 	bl	8001668 <get_sys_cfg>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  osThreadDef(TIMER_1MS, timer_task, osPriorityHigh, 0, 512);
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <task_init+0xc0>)
 80016ce:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 80016dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00d fd99 	bl	800f21a <osThreadCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <task_init+0xc4>)
 80016ec:	6013      	str	r3, [r2, #0]

  osThreadDef(COMMUNICATE_TASK, communicate_task, osPriorityHigh, 0, 4096);
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <task_init+0xc8>)
 80016f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	6023      	str	r3, [r4, #0]
  communicate_task_t = osThreadCreate(osThread(COMMUNICATE_TASK), NULL);
 80016fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f00d fd88 	bl	800f21a <osThreadCreate>
 800170a:	4603      	mov	r3, r0
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <task_init+0xcc>)
 800170e:	6013      	str	r3, [r2, #0]

  osThreadDef(CMD_TASK, infantry_cmd_task, osPriorityNormal, 0, 4096);
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <task_init+0xd0>)
 8001712:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001716:	461d      	mov	r5, r3
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	6023      	str	r3, [r4, #0]
  cmd_task_t = osThreadCreate(osThread(CMD_TASK), NULL);
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00d fd77 	bl	800f21a <osThreadCreate>
 800172c:	4603      	mov	r3, r0
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <task_init+0xd4>)
 8001730:	6013      	str	r3, [r2, #0]

  osThreadDef(CHASSIS_TASK, chassis_task, osPriorityRealtime, 0, 512);
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <task_init+0xd8>)
 8001734:	f107 0414 	add.w	r4, r7, #20
 8001738:	461d      	mov	r5, r3
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	6023      	str	r3, [r4, #0]
  chassis_task_t = osThreadCreate(osThread(CHASSIS_TASK), NULL);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00d fd66 	bl	800f21a <osThreadCreate>
 800174e:	4603      	mov	r3, r0
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <task_init+0xdc>)
 8001752:	6013      	str	r3, [r2, #0]

  osThreadDef(BLINKY_TASK, blinky_task, osPriorityRealtime, 0, 512);
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <task_init+0xe0>)
 8001756:	463c      	mov	r4, r7
 8001758:	461d      	mov	r5, r3
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	6023      	str	r3, [r4, #0]
  blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 8001762:	463b      	mov	r3, r7
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00d fd57 	bl	800f21a <osThreadCreate>
 800176c:	4603      	mov	r3, r0
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <task_init+0xe4>)
 8001770:	6013      	str	r3, [r2, #0]
}
 8001772:	bf00      	nop
 8001774:	3768      	adds	r7, #104	; 0x68
 8001776:	46bd      	mov	sp, r7
 8001778:	bdb0      	pop	{r4, r5, r7, pc}
 800177a:	bf00      	nop
 800177c:	08015c08 	.word	0x08015c08
 8001780:	20000688 	.word	0x20000688
 8001784:	08015c30 	.word	0x08015c30
 8001788:	20000690 	.word	0x20000690
 800178c:	08015c50 	.word	0x08015c50
 8001790:	20000694 	.word	0x20000694
 8001794:	08015c74 	.word	0x08015c74
 8001798:	2000068c 	.word	0x2000068c
 800179c:	08015c94 	.word	0x08015c94
 80017a0:	20000698 	.word	0x20000698

080017a4 <offline_init>:
}

static chassis_t pchassis = NULL;

void offline_init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af02      	add	r7, sp, #8
  uint8_t app;
  app = get_sys_cfg();
 80017aa:	f7ff ff5d 	bl	8001668 <get_sys_cfg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	70fb      	strb	r3, [r7, #3]

  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e009      	b.n	80017cc <offline_init+0x28>
  {
    offline_beep_times[i] = i;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a23      	ldr	r2, [pc, #140]	; (800184c <offline_init+0xa8>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	460a      	mov	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b13      	cmp	r3, #19
 80017d0:	ddf2      	ble.n	80017b8 <offline_init+0x14>
  }

  pchassis = chassis_find("chassis");
 80017d2:	481f      	ldr	r0, [pc, #124]	; (8001850 <offline_init+0xac>)
 80017d4:	f011 fe5e 	bl	8013494 <chassis_find>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <offline_init+0xb0>)
 80017dc:	6013      	str	r3, [r2, #0]

  detect_device_register(&offline_dev, "detect", 0, 0);
 80017de:	2300      	movs	r3, #0
 80017e0:	2200      	movs	r2, #0
 80017e2:	491d      	ldr	r1, [pc, #116]	; (8001858 <offline_init+0xb4>)
 80017e4:	481d      	ldr	r0, [pc, #116]	; (800185c <offline_init+0xb8>)
 80017e6:	f010 ff3a 	bl	801265e <detect_device_register>

  detect_device_add_event(&offline_dev, GYRO_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[8]);
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <offline_init+0xbc>)
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <offline_init+0xc0>)
 80017f0:	2264      	movs	r2, #100	; 0x64
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4819      	ldr	r0, [pc, #100]	; (800185c <offline_init+0xb8>)
 80017f8:	f010 ff92 	bl	8012720 <detect_device_add_event>

  detect_device_add_event(&offline_dev, MOTOR1_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[1]);
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <offline_init+0xc4>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <offline_init+0xc0>)
 8001802:	2264      	movs	r2, #100	; 0x64
 8001804:	2102      	movs	r1, #2
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <offline_init+0xb8>)
 8001808:	f010 ff8a 	bl	8012720 <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR2_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[2]);
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <offline_init+0xc8>)
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <offline_init+0xc0>)
 8001812:	2264      	movs	r2, #100	; 0x64
 8001814:	2104      	movs	r1, #4
 8001816:	4811      	ldr	r0, [pc, #68]	; (800185c <offline_init+0xb8>)
 8001818:	f010 ff82 	bl	8012720 <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR3_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[3]);
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <offline_init+0xcc>)
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <offline_init+0xc0>)
 8001822:	2264      	movs	r2, #100	; 0x64
 8001824:	2108      	movs	r1, #8
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <offline_init+0xb8>)
 8001828:	f010 ff7a 	bl	8012720 <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR4_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[4]);
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <offline_init+0xd0>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <offline_init+0xc0>)
 8001832:	2264      	movs	r2, #100	; 0x64
 8001834:	2110      	movs	r1, #16
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <offline_init+0xb8>)
 8001838:	f010 ff72 	bl	8012720 <detect_device_add_event>

  // soft_timer_register(offline_check, NULL, 20);
  can_fifo0_rx_callback_register(&can1_manage, can1_detect_update);
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <offline_init+0xd4>)
 800183e:	480f      	ldr	r0, [pc, #60]	; (800187c <offline_init+0xd8>)
 8001840:	f002 f808 	bl	8003854 <can_fifo0_rx_callback_register>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200008e0 	.word	0x200008e0
 8001850:	08015ca8 	.word	0x08015ca8
 8001854:	200008f4 	.word	0x200008f4
 8001858:	08015cb0 	.word	0x08015cb0
 800185c:	2000069c 	.word	0x2000069c
 8001860:	200008e8 	.word	0x200008e8
 8001864:	08001881 	.word	0x08001881
 8001868:	200008e1 	.word	0x200008e1
 800186c:	200008e2 	.word	0x200008e2
 8001870:	200008e3 	.word	0x200008e3
 8001874:	200008e4 	.word	0x200008e4
 8001878:	0800189d 	.word	0x0800189d
 800187c:	200012e8 	.word	0x200012e8

08001880 <offline_beep_set_times>:
{
  return detect_device_get_event(&offline_dev);
}

int32_t offline_beep_set_times(void *argc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return beep_set_times(*(uint8_t *)argc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fd15 	bl	80042bc <beep_set_times>
 8001892:	4603      	mov	r3, r0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <can1_detect_update>:

int32_t can1_detect_update(CAN_RxHeaderTypeDef *header, uint8_t *rx_data)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  switch (header->StdId)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d833      	bhi.n	800191a <can1_detect_update+0x7e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <can1_detect_update+0x1c>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018d5 	.word	0x080018d5
 80018bc:	080018df 	.word	0x080018df
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	080018f3 	.word	0x080018f3
 80018c8:	080018fd 	.word	0x080018fd
 80018cc:	08001907 	.word	0x08001907
 80018d0:	08001911 	.word	0x08001911
  {
  case 0x201:
    detect_device_update(&offline_dev, MOTOR1_OFFLINE_EVENT);
 80018d4:	2102      	movs	r1, #2
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <can1_detect_update+0x8c>)
 80018d8:	f010 feee 	bl	80126b8 <detect_device_update>
    break;
 80018dc:	e01e      	b.n	800191c <can1_detect_update+0x80>
  case 0x202:
    detect_device_update(&offline_dev, MOTOR2_OFFLINE_EVENT);
 80018de:	2104      	movs	r1, #4
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <can1_detect_update+0x8c>)
 80018e2:	f010 fee9 	bl	80126b8 <detect_device_update>
    break;
 80018e6:	e019      	b.n	800191c <can1_detect_update+0x80>
  case 0x203:
    detect_device_update(&offline_dev, MOTOR3_OFFLINE_EVENT);
 80018e8:	2108      	movs	r1, #8
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <can1_detect_update+0x8c>)
 80018ec:	f010 fee4 	bl	80126b8 <detect_device_update>
    break;
 80018f0:	e014      	b.n	800191c <can1_detect_update+0x80>
  case 0x204:
    detect_device_update(&offline_dev, MOTOR4_OFFLINE_EVENT);
 80018f2:	2110      	movs	r1, #16
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <can1_detect_update+0x8c>)
 80018f6:	f010 fedf 	bl	80126b8 <detect_device_update>
    break;
 80018fa:	e00f      	b.n	800191c <can1_detect_update+0x80>
  case 0x205:
    detect_device_update(&offline_dev, YAW_OFFLINE_EVENT);
 80018fc:	2120      	movs	r1, #32
 80018fe:	480a      	ldr	r0, [pc, #40]	; (8001928 <can1_detect_update+0x8c>)
 8001900:	f010 feda 	bl	80126b8 <detect_device_update>
    break;
 8001904:	e00a      	b.n	800191c <can1_detect_update+0x80>
  case 0x206:
    detect_device_update(&offline_dev, PITCH_OFFLINE_EVENT);
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <can1_detect_update+0x8c>)
 800190a:	f010 fed5 	bl	80126b8 <detect_device_update>
    break;
 800190e:	e005      	b.n	800191c <can1_detect_update+0x80>
  case 0x207:
    detect_device_update(&offline_dev, TURN_OFFLINE_EVENT);
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <can1_detect_update+0x8c>)
 8001914:	f010 fed0 	bl	80126b8 <detect_device_update>
    break;
 8001918:	e000      	b.n	800191c <can1_detect_update+0x80>
  default:
    break;
 800191a:	bf00      	nop
  }

  return header->DLC;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000069c 	.word	0x2000069c

0800192c <cali_data_read>:
/**
  * @brief read calibrate data cali_param from chip flash
  * @usage called after cali_param_init() in main() initialize part.
  */
void cali_data_read(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  memcpy((void*)&cali_param, (void*)PARAM_SAVED_START_ADDRESS, sizeof(cali_sys_t));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <cali_data_read+0x18>)
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <cali_data_read+0x1c>)
 8001934:	ca07      	ldmia	r2, {r0, r1, r2}
 8001936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	200008f8 	.word	0x200008f8
 8001948:	081e0000 	.word	0x081e0000

0800194c <cali_param_init>:

void cali_param_init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  cali_data_read();
 8001950:	f7ff ffec 	bl	800192c <cali_data_read>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <timer_task>:
#include "timer_task.h"

struct soft_timer soft_timer[TIMER_ELEMENT_NUM_MAX - 1];

void timer_task(void const *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 8001960:	f00d fc4b 	bl	800f1fa <osKernelSysTick>
 8001964:	4603      	mov	r3, r0
 8001966:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 8001968:	f012 fdca 	bl	8014500 <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e03a      	b.n	80019e8 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <timer_task+0xa4>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d030      	beq.n	80019e2 <timer_task+0x8a>
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <timer_task+0xa4>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	330c      	adds	r3, #12
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d028      	beq.n	80019e2 <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <timer_task+0xa4>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f012 fe6b 	bl	8014678 <soft_timer_check>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d11c      	bne.n	80019e2 <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <timer_task+0xa4>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	330c      	adds	r3, #12
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4911      	ldr	r1, [pc, #68]	; (80019fc <timer_task+0xa4>)
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	440a      	add	r2, r1
 80019bc:	3208      	adds	r2, #8
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4610      	mov	r0, r2
 80019c2:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <timer_task+0xa4>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <timer_task+0xa4>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f012 fe17 	bl	8014610 <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	ddc1      	ble.n	8001972 <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2101      	movs	r1, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00d fcd7 	bl	800f3a8 <osDelayUntil>
    TimerISR_Hook();
 80019fa:	e7b5      	b.n	8001968 <timer_task+0x10>
 80019fc:	20000904 	.word	0x20000904

08001a00 <soft_timer_register>:
  }
}

int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e02b      	b.n	8001a6a <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 8001a12:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <soft_timer_register+0x7c>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d121      	bne.n	8001a64 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f012 fdbb 	bl	801459c <soft_timer_req>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <soft_timer_register+0x7c>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	460a      	mov	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <soft_timer_register+0x7c>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <soft_timer_register+0x7c>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <soft_timer_register+0x7c>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	330c      	adds	r3, #12
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]
      return i;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	e007      	b.n	8001a74 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	ddd0      	ble.n	8001a12 <soft_timer_register+0x12>
    }
  }
  return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000904 	.word	0x20000904

08001a80 <INIT_LIST_HEAD>:

#define LIST_HEAD(name) \
  list_t name = LIST_HEAD_INIT(name)

static __inline void INIT_LIST_HEAD(list_t *list)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  list->next = list;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <protocol_get_send_cmd_info>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

struct send_cmd_info *protocol_get_send_cmd_info(uint16_t cmd)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e01c      	b.n	8001aea <protocol_get_send_cmd_info+0x4a>
  {
    if ((protocol_local_info.send_cmd_info[i].cmd == cmd) && (protocol_local_info.send_cmd_info[i].used == 1))
 8001ab0:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <protocol_get_send_cmd_info+0x60>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f203 239a 	addw	r3, r3, #666	; 0x29a
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10f      	bne.n	8001ae4 <protocol_get_send_cmd_info+0x44>
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <protocol_get_send_cmd_info+0x60>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <protocol_get_send_cmd_info+0x44>
    {
      return &protocol_local_info.send_cmd_info[i];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <protocol_get_send_cmd_info+0x60>)
 8001ae0:	4413      	add	r3, r2
 8001ae2:	e006      	b.n	8001af2 <protocol_get_send_cmd_info+0x52>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b31      	cmp	r3, #49	; 0x31
 8001aee:	dddf      	ble.n	8001ab0 <protocol_get_send_cmd_info+0x10>
    }
  }
  return NULL;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000a44 	.word	0x20000a44

08001b04 <protocol_rcv_pack_handle>:

static void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd, uint8_t session, uint8_t source_add)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	807b      	strh	r3, [r7, #2]
 8001b16:	460b      	mov	r3, r1
 8001b18:	707b      	strb	r3, [r7, #1]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	703b      	strb	r3, [r7, #0]
  protocol_pack_desc_t *pack;
  uint16_t rcv_seq;
  int32_t err;
  rcv_seq = pack->seq_num;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	7a1a      	ldrb	r2, [r3, #8]
 8001b22:	7a5b      	ldrb	r3, [r3, #9]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	4313      	orrs	r3, r2
 8001b28:	81fb      	strh	r3, [r7, #14]
  pack = (protocol_pack_desc_t *)(pack_data);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e03d      	b.n	8001bb0 <protocol_rcv_pack_handle+0xac>
  {
    if ((protocol_local_info.rcv_cmd_info[i].cmd == cmd) && (protocol_local_info.rcv_cmd_info[i].rcv_callback != NULL) && (protocol_local_info.rcv_cmd_info[i].used == 1))
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <protocol_rcv_pack_handle+0xbc>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3321      	adds	r3, #33	; 0x21
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	885b      	ldrh	r3, [r3, #2]
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d131      	bne.n	8001baa <protocol_rcv_pack_handle+0xa6>
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <protocol_rcv_pack_handle+0xbc>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3321      	adds	r3, #33	; 0x21
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d029      	beq.n	8001baa <protocol_rcv_pack_handle+0xa6>
 8001b56:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <protocol_rcv_pack_handle+0xbc>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3321      	adds	r3, #33	; 0x21
 8001b5c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d122      	bne.n	8001baa <protocol_rcv_pack_handle+0xa6>
    {
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(pack->pdata + 2, pack->data_len - PACK_HEADER_TAIL_LEN);
 8001b64:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <protocol_rcv_pack_handle+0xbc>)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3321      	adds	r3, #33	; 0x21
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	330c      	adds	r3, #12
 8001b74:	1c98      	adds	r0, r3, #2
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	7859      	ldrb	r1, [r3, #1]
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	430b      	orrs	r3, r1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b12      	subs	r3, #18
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4790      	blx	r2
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60bb      	str	r3, [r7, #8]
      if (session != 0)
 8001b92:	787b      	ldrb	r3, [r7, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <protocol_rcv_pack_handle+0xa6>
      {
        protocol_ack(source_add, session, &err, sizeof(err), rcv_seq);
 8001b98:	f107 0208 	add.w	r2, r7, #8
 8001b9c:	7879      	ldrb	r1, [r7, #1]
 8001b9e:	7838      	ldrb	r0, [r7, #0]
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	f000 f913 	bl	8001dd0 <protocol_ack>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b31      	cmp	r3, #49	; 0x31
 8001bb4:	ddbe      	ble.n	8001b34 <protocol_rcv_pack_handle+0x30>
      }
    }
  }

  return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000a44 	.word	0x20000a44

08001bc4 <protocol_rcv_cmd_register>:

int32_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e01f      	b.n	8001c16 <protocol_rcv_cmd_register+0x52>
  {
    if (protocol_local_info.rcv_cmd_info[i].used == 0)
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <protocol_rcv_cmd_register+0x70>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3321      	adds	r3, #33	; 0x21
 8001bdc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d115      	bne.n	8001c10 <protocol_rcv_cmd_register+0x4c>
    {
      protocol_local_info.rcv_cmd_info[i].used = 1;
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <protocol_rcv_cmd_register+0x70>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3321      	adds	r3, #33	; 0x21
 8001bea:	2101      	movs	r1, #1
 8001bec:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      protocol_local_info.rcv_cmd_info[i].cmd = cmd;
 8001bf0:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <protocol_rcv_cmd_register+0x70>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3321      	adds	r3, #33	; 0x21
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	805a      	strh	r2, [r3, #2]
      protocol_local_info.rcv_cmd_info[i].rcv_callback = rcv_callback;
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <protocol_rcv_cmd_register+0x70>)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3321      	adds	r3, #33	; 0x21
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
      return 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e00c      	b.n	8001c2a <protocol_rcv_cmd_register+0x66>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b31      	cmp	r3, #49	; 0x31
 8001c1a:	dddc      	ble.n	8001bd6 <protocol_rcv_cmd_register+0x12>
    }
  }
  PROTOCOL_ERR_INFO_PRINTF(PROTOCOL_ERR_REGISTER_FAILED, __FILE__, __LINE__);
 8001c1c:	2254      	movs	r2, #84	; 0x54
 8001c1e:	4906      	ldr	r1, [pc, #24]	; (8001c38 <protocol_rcv_cmd_register+0x74>)
 8001c20:	2012      	movs	r0, #18
 8001c22:	f001 fbc3 	bl	80033ac <protocol_s_error_info_printf>
  return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000a44 	.word	0x20000a44
 8001c38:	08015cb8 	.word	0x08015cb8

08001c3c <protocol_local_init>:
    * @brief  Protocol local initialization function
    * @param  address  Protocol local address, which cannot be changed after initialization. Each device in the same network occupies a unique address.
    * @retval Protocol return status
  */
uint32_t protocol_local_init(uint8_t address)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]

  uint32_t status;

  status = PROTOCOL_SUCCESS;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]

  // Check if it is a little-endian machine
  const uint16_t endian_test = 0xAABB;
 8001c4a:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 8001c4e:	817b      	strh	r3, [r7, #10]
  if (*((uint8_t *)(&endian_test)) == 0xAA)
 8001c50:	f107 030a 	add.w	r3, r7, #10
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2baa      	cmp	r3, #170	; 0xaa
 8001c58:	d107      	bne.n	8001c6a <protocol_local_init+0x2e>
  {
    // It is big-endian mode
    status = PROTOCOL_ERR_UNSUPPORT_CPU;
 8001c5a:	230d      	movs	r3, #13
 8001c5c:	60fb      	str	r3, [r7, #12]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001c5e:	229d      	movs	r2, #157	; 0x9d
 8001c60:	4929      	ldr	r1, [pc, #164]	; (8001d08 <protocol_local_init+0xcc>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f001 fba2 	bl	80033ac <protocol_s_error_info_printf>

    while (1)
 8001c68:	e7fe      	b.n	8001c68 <protocol_local_init+0x2c>
      ;
  }

  MUTEX_INIT(protocol_local_info.mutex_lock);
  
  memset(protocol_local_info.route_table, 0xFF, PROTOCOL_ROUTE_TABLE_MAX_NUM);
 8001c6a:	22fe      	movs	r2, #254	; 0xfe
 8001c6c:	21ff      	movs	r1, #255	; 0xff
 8001c6e:	4827      	ldr	r0, [pc, #156]	; (8001d0c <protocol_local_init+0xd0>)
 8001c70:	f012 fe29 	bl	80148c6 <memset>
	
	for(int i; i < PROTOCOL_INTERFACE_MAX; i++)
 8001c74:	e00f      	b.n	8001c96 <protocol_local_init+0x5a>
	{
		/* initalization user data is 0xFF */
		memset(&protocol_local_info.interface[i].user_data, 0xFF, sizeof(union interface_user_data));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2294      	movs	r2, #148	; 0x94
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001c82:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <protocol_local_init+0xd4>)
 8001c84:	4413      	add	r3, r2
 8001c86:	220c      	movs	r2, #12
 8001c88:	21ff      	movs	r1, #255	; 0xff
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f012 fe1b 	bl	80148c6 <memset>
	for(int i; i < PROTOCOL_INTERFACE_MAX; i++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	ddec      	ble.n	8001c76 <protocol_local_init+0x3a>
	}

  for(int i; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001c9c:	e01b      	b.n	8001cd6 <protocol_local_init+0x9a>
	{
		/* initalization cmd is 0xFF */
		memset(&protocol_local_info.send_cmd_info[i].cmd, 0xFFFF, 2);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <protocol_local_init+0xd4>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	3302      	adds	r3, #2
 8001cac:	2202      	movs	r2, #2
 8001cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f012 fe07 	bl	80148c6 <memset>
    memset(&protocol_local_info.rcv_cmd_info[i].cmd, 0xFFFF, 2);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3321      	adds	r3, #33	; 0x21
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <protocol_local_init+0xd4>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f012 fdfb 	bl	80148c6 <memset>
  for(int i; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b31      	cmp	r3, #49	; 0x31
 8001cda:	dde0      	ble.n	8001c9e <protocol_local_init+0x62>
	}

  protocol_local_info.address = address;
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <protocol_local_init+0xd4>)
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	7013      	strb	r3, [r2, #0]
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <protocol_local_init+0xd4>)
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <protocol_local_init+0xd8>)
 8001ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  MUTEX_INIT(boardcast_object.mutex_lock);
  INIT_LIST_HEAD(&boardcast_object.send_list_header);
 8001cea:	480b      	ldr	r0, [pc, #44]	; (8001d18 <protocol_local_init+0xdc>)
 8001cec:	f7ff fec8 	bl	8001a80 <INIT_LIST_HEAD>
  boardcast_object.is_valid = 1;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <protocol_local_init+0xdc>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	725a      	strb	r2, [r3, #9]
  protocol_local_info.is_valid = 1;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <protocol_local_init+0xd4>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  PROTOCOL_OTHER_INFO_PRINTF("Local info has been initialized.");

  return status;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	08015cb8 	.word	0x08015cb8
 8001d0c:	20000a45 	.word	0x20000a45
 8001d10:	20000a44 	.word	0x20000a44
 8001d14:	08001b05 	.word	0x08001b05
 8001d18:	20000a34 	.word	0x20000a34

08001d1c <protocol_send>:
    * @param  p_data Pointer to the data to be sent
    * @param  data_len Length of the data to be sent
    * @retval Protocol return status
  */
uint32_t protocol_send(uint8_t reciver, uint16_t cmd, void *p_data, uint32_t data_len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	60ba      	str	r2, [r7, #8]
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	81bb      	strh	r3, [r7, #12]
  uint32_t status;
  uint8_t session = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	76fb      	strb	r3, [r7, #27]
  uint8_t ack = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	76bb      	strb	r3, [r7, #26]

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 8001d36:	89bb      	ldrh	r3, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff feb1 	bl	8001aa0 <protocol_get_send_cmd_info>
 8001d3e:	6178      	str	r0, [r7, #20]
  
  struct perph_interface *int_obj;
  int_obj = protocol_s_get_route(reciver);
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 f80c 	bl	8002d60 <protocol_s_get_route>
 8001d48:	6138      	str	r0, [r7, #16]
  
  if (cmd_info != NULL)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <protocol_send+0x3a>
  {
    ack = cmd_info->ack_enable;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	76bb      	strb	r3, [r7, #26]
  }

  if (reciver == PROTOCOL_BROADCAST_ADDR)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2bff      	cmp	r3, #255	; 0xff
 8001d5a:	d107      	bne.n	8001d6c <protocol_send+0x50>
  {
    status = protocol_s_broadcast_add_node(p_data, data_len, cmd);
 8001d5c:	89bb      	ldrh	r3, [r7, #12]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f000 fd20 	bl	80027a8 <protocol_s_broadcast_add_node>
 8001d68:	61f8      	str	r0, [r7, #28]
 8001d6a:	e014      	b.n	8001d96 <protocol_send+0x7a>
  }
  else
  {
    if (ack == 1)
 8001d6c:	7ebb      	ldrb	r3, [r7, #26]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d104      	bne.n	8001d7c <protocol_send+0x60>
    {
      session = protocol_get_session(int_obj);
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f000 fb81 	bl	800247a <protocol_get_session>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	76fb      	strb	r3, [r7, #27]
    }
    status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_NOR, p_data,
 8001d7c:	7ef9      	ldrb	r1, [r7, #27]
 8001d7e:	7bf8      	ldrb	r0, [r7, #15]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	89bb      	ldrh	r3, [r7, #12]
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f000 fbb6 	bl	8002500 <protocol_s_add_sendnode>
 8001d94:	61f8      	str	r0, [r7, #28]
                                     data_len, cmd, 0);
  }
  if (status == PROTOCOL_SUCCESS)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <protocol_send+0x94>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <protocol_send+0xb0>)
 8001d9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <protocol_send+0xa4>
    {
      protocol_local_info.send_list_add_callBack();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <protocol_send+0xb0>)
 8001da8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001dac:	4798      	blx	r3
 8001dae:	e007      	b.n	8001dc0 <protocol_send+0xa4>
    }
  }
  else
  {
    if (ack == 1)
 8001db0:	7ebb      	ldrb	r3, [r7, #26]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <protocol_send+0xa4>
    {
      protocol_release_session(int_obj, session);
 8001db6:	7efb      	ldrb	r3, [r7, #27]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6938      	ldr	r0, [r7, #16]
 8001dbc:	f000 fb83 	bl	80024c6 <protocol_release_session>
    }
  }
  return status;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000a44 	.word	0x20000a44

08001dd0 <protocol_ack>:
    * @param  data_len Length of the data to be sent
    * @param  ack_seq Sequence number of the Ack packet to be sent
    * @retval Protocol return status
  */
uint32_t protocol_ack(uint8_t reciver, uint8_t session, void *p_data, uint32_t data_len, uint16_t ack_seq)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af04      	add	r7, sp, #16
 8001dd6:	60ba      	str	r2, [r7, #8]
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	460b      	mov	r3, r1
 8001de0:	73bb      	strb	r3, [r7, #14]
  uint32_t status;
  status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_ACK, p_data,
 8001de2:	7bb9      	ldrb	r1, [r7, #14]
 8001de4:	7bf8      	ldrb	r0, [r7, #15]
 8001de6:	8c3b      	ldrh	r3, [r7, #32]
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f000 fb83 	bl	8002500 <protocol_s_add_sendnode>
 8001dfa:	6178      	str	r0, [r7, #20]
                                   data_len, 0, ack_seq);
  if (status == PROTOCOL_SUCCESS)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <protocol_ack+0x44>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <protocol_ack+0x50>)
 8001e04:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <protocol_ack+0x44>
    {
      protocol_local_info.send_list_add_callBack();
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <protocol_ack+0x50>)
 8001e0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e12:	4798      	blx	r3
    }
  }
  return status;
 8001e14:	697b      	ldr	r3, [r7, #20]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000a44 	.word	0x20000a44

08001e24 <protocol_send_flush>:
  * @brief Flushes the send list, calling this function will send the data in the send list. Call after calling protocol_send or protocol_ack, or call periodically.
  * @param void
  * @retval Protocol return status
  */
uint32_t protocol_send_flush(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	e035      	b.n	8001e9c <protocol_send_flush+0x78>
  {
    if (protocol_local_info.interface[i].is_valid)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <protocol_send_flush+0x9c>)
 8001e34:	2194      	movs	r1, #148	; 0x94
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d027      	beq.n	8001e96 <protocol_send_flush+0x72>
    {
      if (protocol_local_info.interface[i].send.normal_node_num > 0)
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <protocol_send_flush+0x9c>)
 8001e4a:	2194      	movs	r1, #148	; 0x94
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	f203 6312 	addw	r3, r3, #1554	; 0x612
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <protocol_send_flush+0x4a>
      {
        protocol_s_interface_normal_send_flush(protocol_local_info.interface + i);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2294      	movs	r2, #148	; 0x94
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <protocol_send_flush+0xa0>)
 8001e66:	4413      	add	r3, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fdfd 	bl	8002a68 <protocol_s_interface_normal_send_flush>
      }
      if (protocol_local_info.interface[i].send.ack_node_num > 0)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <protocol_send_flush+0x9c>)
 8001e72:	2194      	movs	r1, #148	; 0x94
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	f203 6313 	addw	r3, r3, #1555	; 0x613
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <protocol_send_flush+0x72>
      {
        protocol_s_interface_ack_send_flush(protocol_local_info.interface + i);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2294      	movs	r2, #148	; 0x94
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <protocol_send_flush+0xa0>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 feb4 	bl	8002bfe <protocol_s_interface_ack_send_flush>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d9c6      	bls.n	8001e30 <protocol_send_flush+0xc>
      }
    }
  }

  if (boardcast_object.is_valid)
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <protocol_send_flush+0xa4>)
 8001ea4:	7a5b      	ldrb	r3, [r3, #9]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <protocol_send_flush+0x92>
  {
    if (boardcast_object.send_node_num > 0)
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <protocol_send_flush+0xa4>)
 8001eac:	7a1b      	ldrb	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <protocol_send_flush+0x92>
    {
      protocol_s_broadcast_send_flush();
 8001eb2:	f000 fee3 	bl	8002c7c <protocol_s_broadcast_send_flush>
    }
  }
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000a44 	.word	0x20000a44
 8001ec4:	20000ffc 	.word	0x20000ffc
 8001ec8:	20000a34 	.word	0x20000a34

08001ecc <protocol_unpack_flush>:
    * @brief  Protocol flushes the receive buffer, calling this function will unpack the data in the receive buffer. Call after receiving data or periodically.
    * @param  void
    * @retval Protocol return status
  */
uint32_t protocol_unpack_flush(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	71fb      	strb	r3, [r7, #7]
 8001ed6:	e018      	b.n	8001f0a <protocol_unpack_flush+0x3e>
  {
    if (protocol_local_info.interface[i].is_valid)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <protocol_unpack_flush+0x50>)
 8001edc:	2194      	movs	r1, #148	; 0x94
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <protocol_unpack_flush+0x38>
    {
      protocol_s_extract(&(protocol_local_info.interface[i]));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2294      	movs	r2, #148	; 0x94
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <protocol_unpack_flush+0x50>)
 8001efc:	4413      	add	r3, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 f8cc 	bl	800309c <protocol_s_extract>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	3301      	adds	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d9e3      	bls.n	8001ed8 <protocol_unpack_flush+0xc>
    }
  }
  return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000a44 	.word	0x20000a44

08001f20 <protocol_rcv_data>:
    * @param  data_len Length of the data
    * @param  perph Interface index, specify the index of the interface where the data is received
    * @retval Protocol return status
  */
uint32_t protocol_rcv_data(void *p_data, uint32_t data_len, struct perph_interface *perph)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f32:	69bb      	ldr	r3, [r7, #24]
  struct perph_interface *obj;
  uint32_t rcv_length;
  uint32_t status;

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8001f34:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8001f36:	b672      	cpsid	i
}
 8001f38:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  
  status = PROTOCOL_SUCCESS;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24

  if (protocol_local_info.is_valid == 0)
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <protocol_rcv_data+0x90>)
 8001f40:	f893 389c 	ldrb.w	r3, [r3, #2204]	; 0x89c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <protocol_rcv_data+0x3a>
  {
    status = PROTOCOL_ERR_PROTOCOL_NOT_INIT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	617c      	str	r4, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f383 8810 	msr	PRIMASK, r3
}
 8001f54:	bf00      	nop
    //Interrupt On
    FIFO_RESTORE_CPU_SR(cpu_sr);
    return status;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	e026      	b.n	8001fa8 <protocol_rcv_data+0x88>
  }

  obj = &(protocol_local_info.interface[perph->idx]);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001f60:	461a      	mov	r2, r3
 8001f62:	2394      	movs	r3, #148	; 0x94
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <protocol_rcv_data+0x90>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	623b      	str	r3, [r7, #32]

  //TODO: Removed the protection here because considering that this function is not reentrant for the same protocol interface, careful consideration is needed.
  //Adding protection, high-speed transmission may still have nested reentry.
  rcv_length = fifo_s_puts_noprotect(&(obj->rcvd.fifo), p_data, data_len);
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	3320      	adds	r3, #32
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f011 fc8e 	bl	801389c <fifo_s_puts_noprotect>
 8001f80:	4603      	mov	r3, r0
 8001f82:	61fb      	str	r3, [r7, #28]

  if (rcv_length < data_len)
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <protocol_rcv_data+0x7c>
  {
    status = PROTOCOL_ERR_FIFO_FULL;
 8001f8c:	230b      	movs	r3, #11
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001f90:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <protocol_rcv_data+0x94>)
 8001f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f98:	f001 fa08 	bl	80033ac <protocol_s_error_info_printf>
 8001f9c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f383 8810 	msr	PRIMASK, r3
}
 8001fa4:	bf00      	nop
  }
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return status;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	372c      	adds	r7, #44	; 0x2c
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	20000a44 	.word	0x20000a44
 8001fb4:	08015cb8 	.word	0x08015cb8

08001fb8 <protocol_send_list_add_callback_reg>:
    * @brief  Protocol registers the callback function for adding the send packet to the send list. This function is called after the protocol data packet is packed and added to the send list.
    * @param  fn Callback function pointer, format refers to pack_handle_fn_t
    * @retval 0
  */
  uint32_t protocol_send_list_add_callback_reg(void_fn_t fn)
  {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    protocol_local_info.send_list_add_callBack = fn;
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <protocol_send_list_add_callback_reg+0x20>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return 0;
 8001fc8:	2300      	movs	r3, #0
  }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000a44 	.word	0x20000a44

08001fdc <protocol_p_malloc>:
    * @brief  Protocol memory allocation interface function, users can modify this function according to actual needs
    * @param  size Size of memory to allocate in bytes
    * @retval If allocation is successful, returns the pointer to the allocated memory, otherwise returns NULL
    */
void *protocol_p_malloc(uint32_t size)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return heap_malloc(size);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f011 ff9b 	bl	8013f20 <heap_malloc>
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <protocol_p_free>:
    * @brief  Protocol memory deallocation interface function, users can modify this function according to actual needs
    * @param  ptr Pointer to the starting address of the memory to be freed
    * @retval void
    */
  void protocol_p_free(void *ptr)
  {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    heap_free(ptr);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f012 f839 	bl	8014074 <heap_free>
  }
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <protocol_p_get_time>:
    * @brief  Protocol function to get system time in milliseconds, users can modify this function according to actual needs
    * @param  void
    * @retval Current system time in milliseconds
  */
uint32_t protocol_p_get_time(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0
  return osKernelSysTick() / portTICK_PERIOD_MS;
 800200e:	f00d f8f4 	bl	800f1fa <osKernelSysTick>
 8002012:	4603      	mov	r3, r0
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}

08002018 <INIT_LIST_HEAD>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  list->next = list;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	605a      	str	r2, [r3, #4]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <protocol_interface_init>:
  */
int32_t protocol_interface_init(struct perph_interface *perph,
                                char *interface_name,
                                uint8_t boardcast_output_enable,
                                uint16_t rcv_buf_size)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	460b      	mov	r3, r1
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	4613      	mov	r3, r2
 800204c:	80bb      	strh	r3, [r7, #4]
  struct perph_interface *interface;

  uint32_t status;
  int32_t idx = PROTOCOL_INTERFACE_MAX;
 800204e:	2305      	movs	r3, #5
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

  status = PROTOCOL_SUCCESS;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e010      	b.n	800207e <protocol_interface_init+0x46>
  {
    if (protocol_local_info.interface[i].is_valid == 0)
 800205c:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <protocol_interface_init+0x11c>)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2194      	movs	r1, #148	; 0x94
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	f203 6319 	addw	r3, r3, #1561	; 0x619
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <protocol_interface_init+0x40>
    {
      idx = i;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8002076:	e005      	b.n	8002084 <protocol_interface_init+0x4c>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	3301      	adds	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b04      	cmp	r3, #4
 8002082:	ddeb      	ble.n	800205c <protocol_interface_init+0x24>
    }
  }

  if (idx == PROTOCOL_INTERFACE_MAX)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2b05      	cmp	r3, #5
 8002088:	d108      	bne.n	800209c <protocol_interface_init+0x64>
  {
    //TODO: Index length exceeded
    status = PROTOCOL_ERR_OBJECT_NOT_FOUND;
 800208a:	230c      	movs	r3, #12
 800208c:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800208e:	223d      	movs	r2, #61	; 0x3d
 8002090:	4931      	ldr	r1, [pc, #196]	; (8002158 <protocol_interface_init+0x120>)
 8002092:	69f8      	ldr	r0, [r7, #28]
 8002094:	f001 f98a 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	e056      	b.n	800214a <protocol_interface_init+0x112>
  }

  interface = &protocol_local_info.interface[idx];
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	2294      	movs	r2, #148	; 0x94
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80020a8:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <protocol_interface_init+0x11c>)
 80020aa:	4413      	add	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
  
  memcpy(interface, perph, sizeof(struct perph_interface));
 80020ae:	2294      	movs	r2, #148	; 0x94
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	69b8      	ldr	r0, [r7, #24]
 80020b4:	f012 fc8c 	bl	80149d0 <memcpy>

  // initialization name
  if ((interface_name != NULL) && (strlen(interface_name) < PROTOCOL_OBJ_NAME_MAX_LEN))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00f      	beq.n	80020de <protocol_interface_init+0xa6>
 80020be:	68b8      	ldr	r0, [r7, #8]
 80020c0:	f7fe f896 	bl	80001f0 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b1f      	cmp	r3, #31
 80020c8:	d809      	bhi.n	80020de <protocol_interface_init+0xa6>
  {
    strncpy(interface->object_name, (const char *)interface_name, sizeof(interface->object_name));
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2220      	movs	r2, #32
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f012 fbe5 	bl	80148a0 <strncpy>
    interface->object_name[PROTOCOL_OBJ_NAME_MAX_LEN - 1] = '\0';
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2200      	movs	r2, #0
 80020da:	77da      	strb	r2, [r3, #31]
 80020dc:	e005      	b.n	80020ea <protocol_interface_init+0xb2>
  }
  else
  {
    strcpy(interface->object_name, "NULL");
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <protocol_interface_init+0x124>)
 80020e2:	6810      	ldr	r0, [r2, #0]
 80020e4:	6018      	str	r0, [r3, #0]
 80020e6:	7912      	ldrb	r2, [r2, #4]
 80020e8:	711a      	strb	r2, [r3, #4]
  }

  // Initialize the receive buffer area
  uint8_t *rcv_buf = protocol_p_malloc(rcv_buf_size);
 80020ea:	88bb      	ldrh	r3, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff75 	bl	8001fdc <protocol_p_malloc>
 80020f2:	6178      	str	r0, [r7, #20]
  if (rcv_buf == NULL)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <protocol_interface_init+0xd4>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80020fe:	2255      	movs	r2, #85	; 0x55
 8002100:	4915      	ldr	r1, [pc, #84]	; (8002158 <protocol_interface_init+0x120>)
 8002102:	69f8      	ldr	r0, [r7, #28]
 8002104:	f001 f952 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	e01e      	b.n	800214a <protocol_interface_init+0x112>
  }
  fifo_s_init(&interface->rcvd.fifo, rcv_buf, rcv_buf_size);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	3320      	adds	r3, #32
 8002110:	88ba      	ldrh	r2, [r7, #4]
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f011 fb22 	bl	801375e <fifo_s_init>

  // Initialize the sending structure
  INIT_LIST_HEAD(&interface->send.normal_list_header);
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3348      	adds	r3, #72	; 0x48
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff7a 	bl	8002018 <INIT_LIST_HEAD>
  INIT_LIST_HEAD(&interface->send.ack_list_header);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3350      	adds	r3, #80	; 0x50
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff75 	bl	8002018 <INIT_LIST_HEAD>
  MUTEX_INIT(interface->send.mutex_lock);

  interface->broadcast_output_enable = boardcast_output_enable;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	79fa      	ldrb	r2, [r7, #7]
 8002132:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  interface->idx = idx;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	b2da      	uxtb	r2, r3
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  interface->is_valid = 1;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  PROTOCOL_OTHER_INFO_PRINTF("Interface %s[%d] has been initialized.",
                             interface->object_name, interface->idx);

  return status;
 8002148:	69fb      	ldr	r3, [r7, #28]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000a44 	.word	0x20000a44
 8002158:	08015cdc 	.word	0x08015cdc
 800215c:	08015d0c 	.word	0x08015d0c

08002160 <protocol_uart_interface_register>:
int32_t protocol_uart_interface_register(char *interface_name,
                                        uint16_t rcv_buf_size,
                                        uint8_t boardcast_output_enable,
                                        uint8_t com_port,
                                        int (*com_send_fn)(uint8_t *p_data, uint32_t len))
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0a8      	sub	sp, #160	; 0xa0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4603      	mov	r3, r0
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	460b      	mov	r3, r1
 8002174:	707b      	strb	r3, [r7, #1]
 8002176:	4613      	mov	r3, r2
 8002178:	703b      	strb	r3, [r7, #0]
  struct perph_interface interface = {0};
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2294      	movs	r2, #148	; 0x94
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f012 fb9f 	bl	80148c6 <memset>
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  interface.type = COM_PORT;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  interface.send_callback.com_send_fn = com_send_fn;
 8002194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  interface.user_data.com.port = com_port;
 800219c:	783b      	ldrb	r3, [r7, #0]
 800219e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  status = protocol_interface_init(&interface, interface_name, boardcast_output_enable, rcv_buf_size);
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	787a      	ldrb	r2, [r7, #1]
 80021a6:	f107 0008 	add.w	r0, r7, #8
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f7ff ff44 	bl	8002038 <protocol_interface_init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return status;
 80021b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	37a0      	adds	r7, #160	; 0xa0
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <protocol_interface_send_data>:

int32_t protocol_interface_send_data(struct perph_interface *perph, uint8_t *buff, uint16_t len)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

  if (perph == NULL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <protocol_interface_send_data+0x2a>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 80021dc:	230f      	movs	r3, #15
 80021de:	617b      	str	r3, [r7, #20]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80021e0:	2299      	movs	r2, #153	; 0x99
 80021e2:	4920      	ldr	r1, [pc, #128]	; (8002264 <protocol_interface_send_data+0xa0>)
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f001 f8e1 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	e035      	b.n	800225a <protocol_interface_send_data+0x96>
  }

  if (perph->type == CAN_PORT)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d116      	bne.n	8002226 <protocol_interface_send_data+0x62>
  {
    if (perph->send_callback.can_send_fn != NULL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <protocol_interface_send_data+0x52>
    {
      perph->send_callback.can_send_fn(perph->user_data.can.send_id, buff, len);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4798      	blx	r3
 8002214:	e020      	b.n	8002258 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8002216:	230f      	movs	r3, #15
 8002218:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800221a:	22a6      	movs	r2, #166	; 0xa6
 800221c:	4911      	ldr	r1, [pc, #68]	; (8002264 <protocol_interface_send_data+0xa0>)
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f001 f8c4 	bl	80033ac <protocol_s_error_info_printf>
 8002224:	e018      	b.n	8002258 <protocol_interface_send_data+0x94>
    }
  }
  else if (perph->type == COM_PORT)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800222c:	2b00      	cmp	r3, #0
 800222e:	d113      	bne.n	8002258 <protocol_interface_send_data+0x94>
  {
    if (perph->send_callback.com_send_fn != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <protocol_interface_send_data+0x86>
    {
      perph->send_callback.com_send_fn(buff, len);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	4611      	mov	r1, r2
 8002244:	68b8      	ldr	r0, [r7, #8]
 8002246:	4798      	blx	r3
 8002248:	e006      	b.n	8002258 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800224a:	230f      	movs	r3, #15
 800224c:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800224e:	22b2      	movs	r2, #178	; 0xb2
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <protocol_interface_send_data+0xa0>)
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f001 f8aa 	bl	80033ac <protocol_s_error_info_printf>
    }
  }
  return status;
 8002258:	697b      	ldr	r3, [r7, #20]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	08015cdc 	.word	0x08015cdc

08002268 <protocol_uart_rcv_data>:
  } 
  return status;
}

uint32_t protocol_uart_rcv_data(uint8_t com_port, void *p_data, uint32_t data_len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	73fb      	strb	r3, [r7, #15]
  uint32_t status =PROTOCOL_SUCCESS;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]

  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e026      	b.n	80022ce <protocol_uart_rcv_data+0x66>
  {
    if((protocol_local_info.interface[i].type == COM_PORT)
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <protocol_uart_rcv_data+0x78>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2194      	movs	r1, #148	; 0x94
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	f203 633a 	addw	r3, r3, #1594	; 0x63a
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <protocol_uart_rcv_data+0x60>
     &&(protocol_local_info.interface[i].user_data.com.port == com_port))
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <protocol_uart_rcv_data+0x78>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2194      	movs	r1, #148	; 0x94
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d10c      	bne.n	80022c8 <protocol_uart_rcv_data+0x60>
    {
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2294      	movs	r2, #148	; 0x94
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <protocol_uart_rcv_data+0x78>)
 80022bc:	4413      	add	r3, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	f7ff fe2c 	bl	8001f20 <protocol_rcv_data>
  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	ddd5      	ble.n	8002280 <protocol_uart_rcv_data+0x18>
    }
  }
  return status;
 80022d4:	693b      	ldr	r3, [r7, #16]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000a44 	.word	0x20000a44

080022e4 <protocol_set_route>:
    * @param  tar_add Target address
    *         interface Next hop interface serial number corresponding to the target address
    * @retval Protocol return status
    */
int32_t protocol_set_route(uint8_t tar_add, const char *name)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  struct perph_interface *perph;
  perph = protocol_get_interface(name);
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f000 f83b 	bl	800236c <protocol_get_interface>
 80022f6:	60f8      	str	r0, [r7, #12]

  status = PROTOCOL_SUCCESS;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  if (perph == NULL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <protocol_set_route+0x30>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8002302:	230f      	movs	r3, #15
 8002304:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002306:	22e7      	movs	r2, #231	; 0xe7
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <protocol_set_route+0x80>)
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f001 f84e 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	e022      	b.n	800235a <protocol_set_route+0x76>
  }
  if (tar_add >= PROTOCOL_ROUTE_TABLE_MAX_NUM)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2bfd      	cmp	r3, #253	; 0xfd
 8002318:	d908      	bls.n	800232c <protocol_set_route+0x48>
  {
    status = PROTOCOL_ERR_ROUTEU_SET_BEYOND;
 800231a:	230e      	movs	r3, #14
 800231c:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800231e:	22ed      	movs	r2, #237	; 0xed
 8002320:	4910      	ldr	r1, [pc, #64]	; (8002364 <protocol_set_route+0x80>)
 8002322:	68b8      	ldr	r0, [r7, #8]
 8002324:	f001 f842 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	e016      	b.n	800235a <protocol_set_route+0x76>
  }

  if (perph->is_valid == 0)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <protocol_set_route+0x64>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8002336:	230f      	movs	r3, #15
 8002338:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800233a:	22f4      	movs	r2, #244	; 0xf4
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <protocol_set_route+0x80>)
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f001 f834 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	e008      	b.n	800235a <protocol_set_route+0x76>
  }

  protocol_local_info.route_table[tar_add] = perph->idx;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 8002350:	4a05      	ldr	r2, [pc, #20]	; (8002368 <protocol_set_route+0x84>)
 8002352:	4413      	add	r3, r2
 8002354:	460a      	mov	r2, r1
 8002356:	705a      	strb	r2, [r3, #1]

  PROTOCOL_OTHER_INFO_PRINTF("Route has been set, Address 0x%02X next jump is %s[%d].",
                             tar_add, perph->object_name, perph->idx);

  return status;
 8002358:	68bb      	ldr	r3, [r7, #8]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	08015cdc 	.word	0x08015cdc
 8002368:	20000a44 	.word	0x20000a44

0800236c <protocol_get_interface>:

struct perph_interface *protocol_get_interface(const char *name)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002374:	f3ef 8310 	mrs	r3, PRIMASK
 8002378:	613b      	str	r3, [r7, #16]
  return(result);
 800237a:	693b      	ldr	r3, [r7, #16]
  var_cpu_sr();
  enter_critical();
 800237c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800237e:	b672      	cpsid	i
}
 8002380:	bf00      	nop
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e020      	b.n	80023ca <protocol_get_interface+0x5e>
  {
    if (strncmp(protocol_local_info.interface[i].object_name, name, PROTOCOL_OBJ_NAME_MAX_LEN) == 0)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2294      	movs	r2, #148	; 0x94
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002394:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <protocol_get_interface+0x78>)
 8002396:	4413      	add	r3, r2
 8002398:	2220      	movs	r2, #32
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	f012 fa6d 	bl	801487c <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <protocol_get_interface+0x58>
 80023a8:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f383 8810 	msr	PRIMASK, r3
}
 80023b0:	bf00      	nop
    {
      exit_critical();
      return &protocol_local_info.interface[i];
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2294      	movs	r2, #148	; 0x94
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <protocol_get_interface+0x78>)
 80023c0:	4413      	add	r3, r2
 80023c2:	e00b      	b.n	80023dc <protocol_get_interface+0x70>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	dddb      	ble.n	8002388 <protocol_get_interface+0x1c>
 80023d0:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f383 8810 	msr	PRIMASK, r3
}
 80023d8:	bf00      	nop
    }
  }
  exit_critical();
  return NULL;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	20000a44 	.word	0x20000a44

080023e8 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  next->prev = new;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	605a      	str	r2, [r3, #4]
  new->next = next;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffdc 	bl	80023e8 <__list_add>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]
  prev->next = next;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7ff ffe3 	bl	8002438 <__list_del>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <protocol_get_session>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

uint8_t protocol_get_session(struct perph_interface * interface)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 31; i++)
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e014      	b.n	80024b2 <protocol_get_session+0x38>
  {
    if (interface->session[i] == 0)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	3363      	adds	r3, #99	; 0x63
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <protocol_get_session+0x32>
    {
      interface->session[i] = 1;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	3363      	adds	r3, #99	; 0x63
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
      return i + 1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e006      	b.n	80024ba <protocol_get_session+0x40>
  for (int i = 0; i < 31; i++)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b1e      	cmp	r3, #30
 80024b6:	dde7      	ble.n	8002488 <protocol_get_session+0xe>
    }
  }
  return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <protocol_release_session>:

int32_t protocol_release_session(struct perph_interface * interface, uint8_t id)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
  if ((id > 0) && (id < 32))
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <protocol_release_session+0x2a>
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	2b1f      	cmp	r3, #31
 80024dc:	d808      	bhi.n	80024f0 <protocol_release_session+0x2a>
  {
    interface->session[id - 1] = 0;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    return 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e001      	b.n	80024f4 <protocol_release_session+0x2e>
  }
  return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <protocol_s_add_sendnode>:

// Add protocol frame
uint32_t protocol_s_add_sendnode(uint8_t reciver, uint8_t session, uint8_t pack_type,
                                 void *p_data, uint32_t data_len, uint16_t cmd, uint16_t ack_seq)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b094      	sub	sp, #80	; 0x50
 8002504:	af02      	add	r7, sp, #8
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	460b      	mov	r3, r1
 800250e:	71bb      	strb	r3, [r7, #6]
 8002510:	4613      	mov	r3, r2
 8002512:	717b      	strb	r3, [r7, #5]
  send_ctx_t ctx = {0};
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
  uint16_t seq;

  status = PROTOCOL_SUCCESS;
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002522:	d908      	bls.n	8002536 <protocol_s_add_sendnode+0x36>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 8002524:	2301      	movs	r3, #1
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002528:	224b      	movs	r2, #75	; 0x4b
 800252a:	499e      	ldr	r1, [pc, #632]	; (80027a4 <protocol_s_add_sendnode+0x2a4>)
 800252c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800252e:	f000 ff3d 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	e132      	b.n	800279c <protocol_s_add_sendnode+0x29c>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = pack_type;
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	f362 1345 	bfi	r3, r2, #5, #1
 8002544:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.session = session;
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	b2da      	uxtb	r2, r3
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	f362 0304 	bfi	r3, r2, #0, #5
 8002554:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.res = 0;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	f36f 1387 	bfc	r3, #6, #2
 800255c:	73fb      	strb	r3, [r7, #15]
  ctx.reciver = reciver;
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	73bb      	strb	r3, [r7, #14]
  ctx.version = PROTOCOL_VERSION;
 8002562:	2300      	movs	r3, #0
 8002564:	81bb      	strh	r3, [r7, #12]

  // Get routing interface
  int_obj = protocol_s_get_route(reciver);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fbf9 	bl	8002d60 <protocol_s_get_route>
 800256e:	63b8      	str	r0, [r7, #56]	; 0x38

  if (int_obj == NULL)
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <protocol_s_add_sendnode+0x88>
  {
    status = PROTOCOL_ERR_ROUTE_NOT_FOUND;
 8002576:	2306      	movs	r3, #6
 8002578:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800257a:	225c      	movs	r2, #92	; 0x5c
 800257c:	4989      	ldr	r1, [pc, #548]	; (80027a4 <protocol_s_add_sendnode+0x2a4>)
 800257e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002580:	f000 ff14 	bl	80033ac <protocol_s_error_info_printf>

    return status;
 8002584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002586:	e109      	b.n	800279c <protocol_s_add_sendnode+0x29c>
  }

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d114      	bne.n	80025b8 <protocol_s_add_sendnode+0xb8>
 800258e:	79bb      	ldrb	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <protocol_s_add_sendnode+0xb8>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 8002594:	79ba      	ldrb	r2, [r7, #6]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4619      	mov	r1, r3
 800259a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800259c:	f000 fc0c 	bl	8002db8 <protocol_s_session_get_node>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <protocol_s_add_sendnode+0xb8>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 80025a6:	2305      	movs	r3, #5
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80025aa:	2266      	movs	r2, #102	; 0x66
 80025ac:	497d      	ldr	r1, [pc, #500]	; (80027a4 <protocol_s_add_sendnode+0x2a4>)
 80025ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025b0:	f000 fefc 	bl	80033ac <protocol_s_error_info_printf>
      return status;
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	e0f1      	b.n	800279c <protocol_s_add_sendnode+0x29c>
    }
  }

  // Allocate memory required for data frame
  if (pack_type == PROTOCOL_PACK_ACK)
 80025b8:	797b      	ldrb	r3, [r7, #5]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d103      	bne.n	80025c6 <protocol_s_add_sendnode+0xc6>
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	3340      	adds	r3, #64	; 0x40
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
 80025c4:	e002      	b.n	80025cc <protocol_s_add_sendnode+0xcc>
                  data_len;
  }
  else
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 80025c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c8:	3342      	adds	r3, #66	; 0x42
 80025ca:	647b      	str	r3, [r7, #68]	; 0x44
                  data_len + PROTOCOL_PACK_CMD_SIZE;
  }
  malloc_zone = protocol_p_malloc(malloc_size);
 80025cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025ce:	f7ff fd05 	bl	8001fdc <protocol_p_malloc>
 80025d2:	6378      	str	r0, [r7, #52]	; 0x34
  if (malloc_zone == NULL)
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <protocol_s_add_sendnode+0xec>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 80025da:	2302      	movs	r3, #2
 80025dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80025de:	227a      	movs	r2, #122	; 0x7a
 80025e0:	4970      	ldr	r1, [pc, #448]	; (80027a4 <protocol_s_add_sendnode+0x2a4>)
 80025e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025e4:	f000 fee2 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	e0d7      	b.n	800279c <protocol_s_add_sendnode+0x29c>
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <protocol_s_add_sendnode+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025f2:	f3ef 8310 	mrs	r3, PRIMASK
 80025f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80025f8:	69fa      	ldr	r2, [r7, #28]
  {
    MUTEX_LOCK(int_obj->send.mutex_lock);
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 80025fe:	b672      	cpsid	i
}
 8002600:	bf00      	nop
    seq = int_obj->send.send_seq++;
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	b291      	uxth	r1, r2
 800260c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260e:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
 8002612:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    MUTEX_UNLOCK(int_obj->send.mutex_lock);
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	e003      	b.n	800262c <protocol_s_add_sendnode+0x12c>
  }
  else
  {
    seq = ack_seq;
 8002624:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002628:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 800262c:	2330      	movs	r3, #48	; 0x30
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 8002630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	4413      	add	r3, r2
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_node = (send_list_node_t *)&malloc_zone[0];
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), seq, cmd);
 800263c:	f107 000c 	add.w	r0, r7, #12
 8002640:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	f000 f945 	bl	80028e0 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = ctx.s_a_r.session;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	441a      	add	r2, r3
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 800266e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b30      	subs	r3, #48	; 0x30
 8002674:	b29a      	uxth	r2, r3
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	819a      	strh	r2, [r3, #12]
  send_node->pre_timestamp = 0;
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
  send_node->is_got_ack = 0;
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2200      	movs	r2, #0
 8002684:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = reciver;
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = pack_type;
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	797a      	ldrb	r2, [r7, #5]
 8002698:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80026a6:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 80026ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f9f4 	bl	8001aa0 <protocol_get_send_cmd_info>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (cmd_info != NULL)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <protocol_s_add_sendnode+0x1e2>
  {
    send_node->rest_cnt = cmd_info->resend_times;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	795a      	ldrb	r2, [r3, #5]
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	75da      	strb	r2, [r3, #23]
    send_node->timeout = cmd_info->resend_timeout;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	88da      	ldrh	r2, [r3, #6]
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = cmd_info->ack_callback;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = cmd_info->no_ack_callback;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
 80026e0:	e00b      	b.n	80026fa <protocol_s_add_sendnode+0x1fa>
  }
  else
  {
    send_node->rest_cnt = 1;
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	2201      	movs	r2, #1
 80026e6:	75da      	strb	r2, [r3, #23]
    send_node->timeout = 0;
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = NULL;
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = NULL;
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	2200      	movs	r2, #0
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002700:	69ba      	ldr	r2, [r7, #24]
  }

  //Add to sending list
  MUTEX_LOCK(int_obj->send.mutex_lock);
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002706:	b672      	cpsid	i
}
 8002708:	bf00      	nop

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11b      	bne.n	8002748 <protocol_s_add_sendnode+0x248>
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <protocol_s_add_sendnode+0x248>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 8002716:	79ba      	ldrb	r2, [r7, #6]
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4619      	mov	r1, r3
 800271c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800271e:	f000 fb4b 	bl	8002db8 <protocol_s_session_get_node>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00f      	beq.n	8002748 <protocol_s_add_sendnode+0x248>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 8002728:	2305      	movs	r3, #5
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
      MUTEX_UNLOCK(int_obj->send.mutex_lock);
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	bf00      	nop
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800273a:	22b7      	movs	r2, #183	; 0xb7
 800273c:	4919      	ldr	r1, [pc, #100]	; (80027a4 <protocol_s_add_sendnode+0x2a4>)
 800273e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002740:	f000 fe34 	bl	80033ac <protocol_s_error_info_printf>
      return status;
 8002744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002746:	e029      	b.n	800279c <protocol_s_add_sendnode+0x29c>
    }
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 8002748:	797b      	ldrb	r3, [r7, #5]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <protocol_s_add_sendnode+0x26e>
  {
    list_add(&(send_node->send_list), &(int_obj->send.normal_list_header));
 800274e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	3348      	adds	r3, #72	; 0x48
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7ff fe5e 	bl	8002418 <list_add>
    int_obj->send.normal_node_num++;
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800276c:	e00e      	b.n	800278c <protocol_s_add_sendnode+0x28c>
  }
  else
  {
    list_add(&(send_node->send_list), &(int_obj->send.ack_list_header));
 800276e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	3350      	adds	r3, #80	; 0x50
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f7ff fe4e 	bl	8002418 <list_add>
    int_obj->send.ack_node_num++;
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002782:	3301      	adds	r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  }

  MUTEX_UNLOCK(int_obj->send.mutex_lock);
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	bf00      	nop
  {
    PROTOCOL_SEND_DBG_PRINTF("Send pack, Address:0x%02X, Session: %d Ack pack.",
                              reciver, session);
  }

  return status;
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800279c:	4618      	mov	r0, r3
 800279e:	3748      	adds	r7, #72	; 0x48
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	08015d14 	.word	0x08015d14

080027a8 <protocol_s_broadcast_add_node>:

// Add processing function to broadcast package
uint32_t protocol_s_broadcast_add_node(void *p_data, uint32_t data_len, uint16_t cmd)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b090      	sub	sp, #64	; 0x40
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 80027b6:	2300      	movs	r3, #0
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c0:	d908      	bls.n	80027d4 <protocol_s_broadcast_add_node+0x2c>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 80027c2:	2301      	movs	r3, #1
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80027c6:	22e7      	movs	r2, #231	; 0xe7
 80027c8:	4943      	ldr	r1, [pc, #268]	; (80028d8 <protocol_s_broadcast_add_node+0x130>)
 80027ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027cc:	f000 fdee 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	e07d      	b.n	80028d0 <protocol_s_broadcast_add_node+0x128>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = PROTOCOL_PACK_NOR;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	f36f 1345 	bfc	r3, #5, #1
 80027da:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.session = 0;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	f36f 0304 	bfc	r3, #0, #5
 80027e2:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.res = 0;
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	f36f 1387 	bfc	r3, #6, #2
 80027ea:	75fb      	strb	r3, [r7, #23]
  ctx.reciver = PROTOCOL_BROADCAST_ADDR;
 80027ec:	23ff      	movs	r3, #255	; 0xff
 80027ee:	75bb      	strb	r3, [r7, #22]
  ctx.version = PROTOCOL_VERSION;
 80027f0:	2300      	movs	r3, #0
 80027f2:	82bb      	strh	r3, [r7, #20]

  malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3342      	adds	r3, #66	; 0x42
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
                data_len + PROTOCOL_PACK_CMD_SIZE;

  malloc_zone = protocol_p_malloc(malloc_size);
 80027fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fc:	f7ff fbee 	bl	8001fdc <protocol_p_malloc>
 8002800:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (malloc_zone == NULL)
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <protocol_s_broadcast_add_node+0x72>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8002808:	2302      	movs	r3, #2
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800280c:	22f9      	movs	r2, #249	; 0xf9
 800280e:	4932      	ldr	r1, [pc, #200]	; (80028d8 <protocol_s_broadcast_add_node+0x130>)
 8002810:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002812:	f000 fdcb 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	e05a      	b.n	80028d0 <protocol_s_broadcast_add_node+0x128>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 800281a:	2330      	movs	r3, #48	; 0x30
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 800281e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	4413      	add	r3, r2
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  send_node = (send_list_node_t *)&malloc_zone[0];
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	623b      	str	r3, [r7, #32]

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), 0, cmd);
 800282a:	f107 0014 	add.w	r0, r7, #20
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	f000 f850 	bl	80028e0 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = 0;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2200      	movs	r2, #0
 8002844:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8002846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	441a      	add	r2, r3
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b30      	subs	r3, #48	; 0x30
 8002856:	b29a      	uxth	r2, r3
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2201      	movs	r2, #1
 8002860:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2200      	movs	r2, #0
 800286c:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2200      	movs	r2, #0
 8002872:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = PROTOCOL_BROADCAST_ADDR;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_NOR;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2200      	movs	r2, #0
 8002886:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2200      	movs	r2, #0
 800288c:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2200      	movs	r2, #0
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800289a:	f3ef 8310 	mrs	r3, PRIMASK
 800289e:	61bb      	str	r3, [r7, #24]
  return(result);
 80028a0:	69bb      	ldr	r3, [r7, #24]

  // Add to sending list
  MUTEX_LOCK(boardcast_object.mutex_lock);
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <protocol_s_broadcast_add_node+0x134>)
 80028a4:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a6:	b672      	cpsid	i
}
 80028a8:	bf00      	nop

  list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	490b      	ldr	r1, [pc, #44]	; (80028dc <protocol_s_broadcast_add_node+0x134>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fdb2 	bl	8002418 <list_add>
  boardcast_object.send_node_num++;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <protocol_s_broadcast_add_node+0x134>)
 80028b6:	7a1b      	ldrb	r3, [r3, #8]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <protocol_s_broadcast_add_node+0x134>)
 80028be:	721a      	strb	r2, [r3, #8]

  MUTEX_UNLOCK(boardcast_object.mutex_lock);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <protocol_s_broadcast_add_node+0x134>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f383 8810 	msr	PRIMASK, r3
}
 80028cc:	bf00      	nop

  PROTOCOL_SEND_DBG_PRINTF("Send broadcast pack, Cmd:0x%04X, Normal pack.", cmd);

  return status;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3738      	adds	r7, #56	; 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08015d14 	.word	0x08015d14
 80028dc:	20000a34 	.word	0x20000a34

080028e0 <protocol_s_fill_pack>:

// frame padding
uint32_t protocol_s_fill_pack(send_ctx_t *ctx, uint8_t *p_data,
                              uint32_t data_len, uint8_t *pack_zone, uint16_t seq, uint16_t cmd)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  uint32_t status = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  protocol_pack_desc_t *p_pack_head;

  p_pack_head = (protocol_pack_desc_t *)pack_zone;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	613b      	str	r3, [r7, #16]

  /* get local module */

  p_pack_head->sof = PROTOCOL_HEADER;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	22aa      	movs	r2, #170	; 0xaa
 80028fa:	701a      	strb	r2, [r3, #0]
  p_pack_head->version = ctx->version;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	7893      	ldrb	r3, [r2, #2]
 800290a:	f361 0387 	bfi	r3, r1, #2, #6
 800290e:	7093      	strb	r3, [r2, #2]
  p_pack_head->sender = protocol_local_info.address;
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <protocol_s_fill_pack+0x138>)
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	711a      	strb	r2, [r3, #4]
  p_pack_head->reciver = ctx->reciver;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	789a      	ldrb	r2, [r3, #2]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	715a      	strb	r2, [r3, #5]
  p_pack_head->S_A_R_c = ctx->S_A_R_c;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	78da      	ldrb	r2, [r3, #3]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	70da      	strb	r2, [r3, #3]
  p_pack_head->seq_num = seq;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	8c3a      	ldrh	r2, [r7, #32]
 800292c:	811a      	strh	r2, [r3, #8]
  p_pack_head->ver_data_len = p_pack_head->ver_data_len;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002934:	b29a      	uxth	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_pack_head->res1 = 0;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2200      	movs	r2, #0
 8002940:	719a      	strb	r2, [r3, #6]
 8002942:	2200      	movs	r2, #0
 8002944:	71da      	strb	r2, [r3, #7]

  /* cpy data */
  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	78db      	ldrb	r3, [r3, #3]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <protocol_s_fill_pack+0xb6>
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	b29b      	uxth	r3, r3
 8002958:	3310      	adds	r3, #16
 800295a:	b29b      	uxth	r3, r3
 800295c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002960:	b29a      	uxth	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	b2d1      	uxtb	r1, r2
 8002966:	2000      	movs	r0, #0
 8002968:	4301      	orrs	r1, r0
 800296a:	7059      	strb	r1, [r3, #1]
 800296c:	0a12      	lsrs	r2, r2, #8
 800296e:	b292      	uxth	r2, r2
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	f002 0003 	and.w	r0, r2, #3
 8002978:	789a      	ldrb	r2, [r3, #2]
 800297a:	f022 0203 	bic.w	r2, r2, #3
 800297e:	4611      	mov	r1, r2
 8002980:	4602      	mov	r2, r0
 8002982:	430a      	orrs	r2, r1
 8002984:	709a      	strb	r2, [r3, #2]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE, p_data, data_len);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f012 f81e 	bl	80149d0 <memcpy>
 8002994:	e023      	b.n	80029de <protocol_s_fill_pack+0xfe>
  }
  else
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	b29b      	uxth	r3, r3
 800299a:	3312      	adds	r3, #18
 800299c:	b29b      	uxth	r3, r3
 800299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	b2d1      	uxtb	r1, r2
 80029a8:	2000      	movs	r0, #0
 80029aa:	4301      	orrs	r1, r0
 80029ac:	7059      	strb	r1, [r3, #1]
 80029ae:	0a12      	lsrs	r2, r2, #8
 80029b0:	b292      	uxth	r2, r2
 80029b2:	f002 0203 	and.w	r2, r2, #3
 80029b6:	f002 0003 	and.w	r0, r2, #3
 80029ba:	789a      	ldrb	r2, [r3, #2]
 80029bc:	f022 0203 	bic.w	r2, r2, #3
 80029c0:	4611      	mov	r1, r2
 80029c2:	4602      	mov	r2, r0
 80029c4:	430a      	orrs	r2, r1
 80029c6:	709a      	strb	r2, [r3, #2]
    *((uint16_t *)(pack_zone + PROTOCOL_PACK_HEAD_SIZE)) = cmd;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029ce:	801a      	strh	r2, [r3, #0]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE + PROTOCOL_PACK_CMD_SIZE, p_data, data_len);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	330e      	adds	r3, #14
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f011 fff9 	bl	80149d0 <memcpy>
  }

  /* crc */
  append_crc16(pack_zone, 12);
 80029de:	210c      	movs	r1, #12
 80029e0:	6838      	ldr	r0, [r7, #0]
 80029e2:	f011 fca9 	bl	8014338 <append_crc16>

  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	78db      	ldrb	r3, [r3, #3]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <protocol_s_fill_pack+0x122>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3310      	adds	r3, #16
 80029f8:	4619      	mov	r1, r3
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f011 fd3e 	bl	801447c <append_crc32>
 8002a00:	e005      	b.n	8002a0e <protocol_s_fill_pack+0x12e>
  }
  else
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3312      	adds	r3, #18
 8002a06:	4619      	mov	r1, r3
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	f011 fd37 	bl	801447c <append_crc32>
  }

  return status;
 8002a0e:	697b      	ldr	r3, [r7, #20]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000a44 	.word	0x20000a44

08002a1c <protocol_s_interface_send_data>:

// Send data through interface
uint32_t protocol_s_interface_send_data(send_list_node_t *cur_send_node, struct perph_interface *obj)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]

#if (PROTOCOL_AUTO_LOOKBACK == PROTOCOL_ENABLE)

  if (cur_send_node->address != protocol_local_info.address)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7c9a      	ldrb	r2, [r3, #18]
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <protocol_s_interface_send_data+0x44>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d008      	beq.n	8002a44 <protocol_s_interface_send_data+0x28>
  {
    // The sending address is different from the local address. Outgoing
    protocol_interface_send_data(obj, cur_send_node->p_data, cur_send_node->len);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	899b      	ldrh	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6838      	ldr	r0, [r7, #0]
 8002a3e:	f7ff fbc1 	bl	80021c4 <protocol_interface_send_data>
 8002a42:	e007      	b.n	8002a54 <protocol_s_interface_send_data+0x38>
  }
  else
  {
    // The sending address is the same as the local address and loops back directly internally.

    protocol_rcv_data(cur_send_node->p_data, cur_send_node->len, &protocol_local_info.interface[0]);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	899b      	ldrh	r3, [r3, #12]
 8002a4c:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <protocol_s_interface_send_data+0x48>)
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7ff fa66 	bl	8001f20 <protocol_rcv_data>
                           cur_send_node->len,
                           obj->interface);
  }
#endif

  return PROTOCOL_SUCCESS;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000a44 	.word	0x20000a44
 8002a64:	20000ffc 	.word	0x20000ffc

08002a68 <protocol_s_interface_normal_send_flush>:

// Clear sending list
uint32_t protocol_s_interface_normal_send_flush(struct perph_interface *obj)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	; 0x38
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
  uint32_t timeout;

  head_node = &(obj->send.normal_list_header);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3348      	adds	r3, #72	; 0x48
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
 8002a82:	e0b2      	b.n	8002bea <protocol_s_interface_normal_send_flush+0x182>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a88:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8c:	623b      	str	r3, [r7, #32]
  return(result);
 8002a8e:	6a3a      	ldr	r2, [r7, #32]

    MUTEX_LOCK(obj->send.mutex_lock);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
    // Get ACK, delete
    if (cur_send_node->is_got_ack)
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	7bdb      	ldrb	r3, [r3, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <protocol_s_interface_normal_send_flush+0x70>
    {
      list_del(cur_node);
 8002aa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002aa2:	f7ff fcda 	bl	800245a <list_del>
      protocol_p_free(cur_send_node);
 8002aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa8:	f7ff faa4 	bl	8001ff4 <protocol_p_free>
      obj->send.normal_node_num--;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      protocol_release_session(obj, cur_send_node->session);
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	7c5b      	ldrb	r3, [r3, #17]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fcff 	bl	80024c6 <protocol_release_session>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	bf00      	nop
      continue;
 8002ad6:	e083      	b.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
    }

    // Released after exceeding the number of retransmissions
    if (cur_send_node->is_ready_realse)
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	7c1b      	ldrb	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d025      	beq.n	8002b2c <protocol_s_interface_normal_send_flush+0xc4>
    {
      list_del(cur_node);
 8002ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ae2:	f7ff fcba 	bl	800245a <list_del>
      obj->send.normal_node_num--;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      if (cur_send_node->no_ack_callback != NULL)
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <protocol_s_interface_normal_send_flush+0xa2>
      {
        cur_send_node->no_ack_callback(cur_send_node->cmd);
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b04:	8a92      	ldrh	r2, [r2, #20]
 8002b06:	4610      	mov	r0, r2
 8002b08:	4798      	blx	r3
      }

      protocol_release_session(obj, cur_send_node->session);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	7c5b      	ldrb	r3, [r3, #17]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fcd8 	bl	80024c6 <protocol_release_session>

      protocol_p_free(cur_send_node);
 8002b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b18:	f7ff fa6c 	bl	8001ff4 <protocol_p_free>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f383 8810 	msr	PRIMASK, r3
}
 8002b28:	bf00      	nop
      continue;
 8002b2a:	e059      	b.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
    }
    else
    {
      MUTEX_UNLOCK(obj->send.mutex_lock);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	bf00      	nop
    }

    timeout = protocol_p_get_time() - cur_send_node->pre_timestamp;
 8002b3a:	f7ff fa66 	bl	800200a <protocol_p_get_time>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

    // Retransmit after timeout or send for the first time
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	8b1b      	ldrh	r3, [r3, #24]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d804      	bhi.n	8002b5e <protocol_s_interface_normal_send_flush+0xf6>
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d040      	beq.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
        cur_send_node->rest_cnt >= 1)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	7ddb      	ldrb	r3, [r3, #23]
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d03c      	beq.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
    {
      cur_send_node->is_first_send = 0;
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]

      cur_send_node->rest_cnt--;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	7ddb      	ldrb	r3, [r3, #23]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	75da      	strb	r2, [r3, #23]

      // send data
      protocol_s_interface_send_data(cur_send_node, obj);
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7e:	f7ff ff4d 	bl	8002a1c <protocol_s_interface_send_data>

      if (cur_send_node->session == 0)
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	7c5b      	ldrb	r3, [r3, #17]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <protocol_s_interface_normal_send_flush+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b90:	68fa      	ldr	r2, [r7, #12]
      {
        // session is 0, no retransmission or ACK reply is required
        MUTEX_LOCK(obj->send.mutex_lock);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002b96:	b672      	cpsid	i
}
 8002b98:	bf00      	nop
        list_del(cur_node);
 8002b9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b9c:	f7ff fc5d 	bl	800245a <list_del>
        obj->send.normal_node_num--;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        protocol_p_free(cur_send_node);
 8002bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb2:	f7ff fa1f 	bl	8001ff4 <protocol_p_free>
        MUTEX_UNLOCK(obj->send.mutex_lock);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	bf00      	nop
        continue;
 8002bc4:	e00c      	b.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
      }
      else
      {
        // The session is not 0 and requires retransmission and ACK confirmation.
        if (cur_send_node->rest_cnt == 0)
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	7ddb      	ldrb	r3, [r3, #23]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <protocol_s_interface_normal_send_flush+0x16e>
        {
          // The number of sending times has been exhausted
          cur_send_node->is_ready_realse = 1;
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	741a      	strb	r2, [r3, #16]
 8002bd4:	e004      	b.n	8002be0 <protocol_s_interface_normal_send_flush+0x178>
        }
        else
        {
          cur_send_node->pre_timestamp = protocol_p_get_time();
 8002bd6:	f7ff fa18 	bl	800200a <protocol_p_get_time>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	61da      	str	r2, [r3, #28]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	f47f af48 	bne.w	8002a84 <protocol_s_interface_normal_send_flush+0x1c>
        }
      }
    }
  }

  return 0;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3738      	adds	r7, #56	; 0x38
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <protocol_s_interface_ack_send_flush>:

// Clear the ACK frame sending list
uint32_t protocol_s_interface_ack_send_flush(struct perph_interface *obj)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.ack_list_header);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3350      	adds	r3, #80	; 0x50
 8002c0a:	617b      	str	r3, [r7, #20]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e027      	b.n	8002c6a <protocol_s_interface_ack_send_flush+0x6c>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	613b      	str	r3, [r7, #16]

    protocol_s_interface_send_data(cur_send_node, obj);
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	6938      	ldr	r0, [r7, #16]
 8002c22:	f7ff fefb 	bl	8002a1c <protocol_s_interface_send_data>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c26:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c2c:	68ba      	ldr	r2, [r7, #8]

    //The packet is of ACK type and does not require retransmission or confirmation.
    MUTEX_LOCK(obj->send.mutex_lock);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002c32:	b672      	cpsid	i
}
 8002c34:	bf00      	nop
    list_del(cur_node);
 8002c36:	69f8      	ldr	r0, [r7, #28]
 8002c38:	f7ff fc0f 	bl	800245a <list_del>
    obj->send.ack_node_num--;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    protocol_p_free(cur_send_node);
 8002c4c:	6938      	ldr	r0, [r7, #16]
 8002c4e:	f7ff f9d1 	bl	8001ff4 <protocol_p_free>
    MUTEX_UNLOCK(obj->send.mutex_lock);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f383 8810 	msr	PRIMASK, r3
}
 8002c5e:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d1d3      	bne.n	8002c1a <protocol_s_interface_ack_send_flush+0x1c>
  }

  return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <protocol_s_broadcast_send_flush>:

//Clear the broadcast packet sending list
uint32_t protocol_s_broadcast_send_flush(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(boardcast_object.send_list_header);
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <protocol_s_broadcast_send_flush+0xd8>)
 8002c84:	613b      	str	r3, [r7, #16]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e055      	b.n	8002d40 <protocol_s_broadcast_send_flush+0xc4>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	75fb      	strb	r3, [r7, #23]
 8002c9c:	e02d      	b.n	8002cfa <protocol_s_broadcast_send_flush+0x7e>
    {
      if (cur_send_node->forward_src_obj == protocol_local_info.interface + i)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2194      	movs	r1, #148	; 0x94
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	492b      	ldr	r1, [pc, #172]	; (8002d58 <protocol_s_broadcast_send_flush+0xdc>)
 8002cac:	440b      	add	r3, r1
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d01b      	beq.n	8002cea <protocol_s_broadcast_send_flush+0x6e>
        continue;
      if (!cur_send_node->forward_src_obj->is_valid)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <protocol_s_broadcast_send_flush+0x72>
        continue;
      if (!protocol_local_info.interface[i].broadcast_output_enable)
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <protocol_s_broadcast_send_flush+0xe0>)
 8002cc2:	2194      	movs	r1, #148	; 0x94
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <protocol_s_broadcast_send_flush+0x76>
        continue;

      protocol_s_interface_send_data(cur_send_node, protocol_local_info.interface + i);
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2294      	movs	r2, #148	; 0x94
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <protocol_s_broadcast_send_flush+0xdc>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fe9a 	bl	8002a1c <protocol_s_interface_send_data>
 8002ce8:	e004      	b.n	8002cf4 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8002cf2:	bf00      	nop
    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d9ce      	bls.n	8002c9e <protocol_s_broadcast_send_flush+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d00:	f3ef 8310 	mrs	r3, PRIMASK
 8002d04:	607b      	str	r3, [r7, #4]
  return(result);
 8002d06:	687b      	ldr	r3, [r7, #4]
    }

    MUTEX_LOCK(boardcast_object.mutex_lock);
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <protocol_s_broadcast_send_flush+0xd8>)
 8002d0a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d0c:	b672      	cpsid	i
}
 8002d0e:	bf00      	nop
    list_del(cur_node);
 8002d10:	69f8      	ldr	r0, [r7, #28]
 8002d12:	f7ff fba2 	bl	800245a <list_del>
    boardcast_object.send_node_num--;
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <protocol_s_broadcast_send_flush+0xd8>)
 8002d18:	7a1b      	ldrb	r3, [r3, #8]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <protocol_s_broadcast_send_flush+0xd8>)
 8002d20:	721a      	strb	r2, [r3, #8]
    protocol_p_free(cur_send_node);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff f966 	bl	8001ff4 <protocol_p_free>
    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <protocol_s_broadcast_send_flush+0xd8>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1a5      	bne.n	8002c94 <protocol_s_broadcast_send_flush+0x18>
  }

  return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000a34 	.word	0x20000a34
 8002d58:	20000ffc 	.word	0x20000ffc
 8002d5c:	20000a44 	.word	0x20000a44

08002d60 <protocol_s_get_route>:

//Get route
struct perph_interface *protocol_s_get_route(uint8_t tar_add)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  uint8_t int_obj_idx;

  int_obj_idx = protocol_local_info.route_table[tar_add];
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <protocol_s_get_route+0x54>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	73fb      	strb	r3, [r7, #15]
  if (int_obj_idx > PROTOCOL_INTERFACE_MAX)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d901      	bls.n	8002d7e <protocol_s_get_route+0x1e>
  {
    return NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e014      	b.n	8002da8 <protocol_s_get_route+0x48>
  }

  if (protocol_local_info.interface[int_obj_idx].is_valid)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <protocol_s_get_route+0x54>)
 8002d82:	2194      	movs	r1, #148	; 0x94
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <protocol_s_get_route+0x46>
  {
    return &(protocol_local_info.interface[int_obj_idx]);
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2294      	movs	r2, #148	; 0x94
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <protocol_s_get_route+0x54>)
 8002da2:	4413      	add	r3, r2
 8002da4:	e000      	b.n	8002da8 <protocol_s_get_route+0x48>
  }
  else
  {
    return NULL;
 8002da6:	2300      	movs	r3, #0
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	20000a44 	.word	0x20000a44

08002db8 <protocol_s_session_get_node>:

//Get the node with the specified address and session
send_list_node_t *protocol_s_session_get_node(struct perph_interface *obj,
                                              uint8_t address, uint8_t session)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b08b      	sub	sp, #44	; 0x2c
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	70bb      	strb	r3, [r7, #2]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.normal_list_header);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3348      	adds	r3, #72	; 0x48
 8002dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8002dd4:	697b      	ldr	r3, [r7, #20]

  MUTEX_LOCK(protocol_local_info.mutex_lock);
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <protocol_s_session_get_node+0x94>)
 8002dd8:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
}
 8002dde:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	e01a      	b.n	8002e24 <protocol_s_session_get_node+0x6c>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	61bb      	str	r3, [r7, #24]

    if ((cur_send_node->session == session) &&
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	7c5b      	ldrb	r3, [r3, #17]
 8002df6:	78ba      	ldrb	r2, [r7, #2]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d10e      	bne.n	8002e1a <protocol_s_session_get_node+0x62>
        (cur_send_node->address == address))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	7c9b      	ldrb	r3, [r3, #18]
    if ((cur_send_node->session == session) &&
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d109      	bne.n	8002e1a <protocol_s_session_get_node+0x62>
    {
      MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <protocol_s_session_get_node+0x94>)
 8002e08:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8002e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	bf00      	nop
      return cur_send_node;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	e011      	b.n	8002e3e <protocol_s_session_get_node+0x86>
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1e0      	bne.n	8002dee <protocol_s_session_get_node+0x36>
    }
  }
  MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <protocol_s_session_get_node+0x94>)
 8002e2e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8002e32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	bf00      	nop
  return NULL;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	372c      	adds	r7, #44	; 0x2c
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000a44 	.word	0x20000a44

08002e50 <protocol_s_pack_forward>:

//Packet forwarding function
uint32_t protocol_s_pack_forward(protocol_pack_desc_t *p_pack, struct perph_interface *src_obj)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint8_t *malloc_zone;
  uint32_t status;
  uint32_t pack_head_offset;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  //Find the destination of the package
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	795b      	ldrb	r3, [r3, #5]
 8002e62:	2bff      	cmp	r3, #255	; 0xff
 8002e64:	d00a      	beq.n	8002e7c <protocol_s_pack_forward+0x2c>
  {
    tar_inter = protocol_s_get_route(p_pack->reciver);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	795b      	ldrb	r3, [r3, #5]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff78 	bl	8002d60 <protocol_s_get_route>
 8002e70:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (tar_inter == NULL)
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <protocol_s_pack_forward+0x2c>
    {
      PROTOCOL_RCV_ERR_PRINTF("Pack forward error, Route to address 0x%02x does not exist.", p_pack->reciver);

      return PROTOCOL_ERR_ROUTE_NOT_FOUND;
 8002e78:	2306      	movs	r3, #6
 8002e7a:	e09b      	b.n	8002fb4 <protocol_s_pack_forward+0x164>
    }
  }

  // Allocate memory required to forward packets
  malloc_zone = protocol_p_malloc(p_pack->data_len + PROTOCOL_SEND_NODE_SIZE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	785a      	ldrb	r2, [r3, #1]
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3330      	adds	r3, #48	; 0x30
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f8a4 	bl	8001fdc <protocol_p_malloc>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24
  if (malloc_zone == NULL)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <protocol_s_pack_forward+0x60>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002ea0:	f240 225a 	movw	r2, #602	; 0x25a
 8002ea4:	4945      	ldr	r1, [pc, #276]	; (8002fbc <protocol_s_pack_forward+0x16c>)
 8002ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea8:	f000 fa80 	bl	80033ac <protocol_s_error_info_printf>
    return status;
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	e081      	b.n	8002fb4 <protocol_s_pack_forward+0x164>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 8002eb0:	2330      	movs	r3, #48	; 0x30
 8002eb2:	623b      	str	r3, [r7, #32]
  send_node = (send_list_node_t *)&malloc_zone[0];
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	61fb      	str	r3, [r7, #28]

  send_node->session = 0;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	609a      	str	r2, [r3, #8]
  send_node->len = p_pack->data_len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	785a      	ldrb	r2, [r3, #1]
 8002ecc:	789b      	ldrb	r3, [r3, #2]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2200      	movs	r2, #0
 8002eee:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = p_pack->reciver;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	795a      	ldrb	r2, [r3, #5]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_ACK; //It is faster to send forwarded packets as ACK packets
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	741a      	strb	r2, [r3, #16]
  send_node->cmd = 0;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2200      	movs	r2, #0
 8002f16:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = src_obj;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

  memcpy(send_node->p_data, p_pack, p_pack->data_len);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	6898      	ldr	r0, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	785a      	ldrb	r2, [r3, #1]
 8002f26:	789b      	ldrb	r3, [r3, #2]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	f011 fd4b 	bl	80149d0 <memcpy>
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	d01d      	beq.n	8002f7e <protocol_s_pack_forward+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f42:	f3ef 8310 	mrs	r3, PRIMASK
 8002f46:	617b      	str	r3, [r7, #20]
  return(result);
 8002f48:	697a      	ldr	r2, [r7, #20]
  {
    // Non-broadcast packet handling
    MUTEX_LOCK(tar_inter->send.mutex_lock);
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4e:	b672      	cpsid	i
}
 8002f50:	bf00      	nop
    list_add(&(send_node->send_list), &(tar_inter->send.ack_list_header)); //It is faster to send forwarded packets as ACK packets
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	3350      	adds	r3, #80	; 0x50
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7ff fa5c 	bl	8002418 <list_add>
    tar_inter->send.ack_node_num++;
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    MUTEX_UNLOCK(tar_inter->send.mutex_lock);
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	e019      	b.n	8002fb2 <protocol_s_pack_forward+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f84:	68fb      	ldr	r3, [r7, #12]
                             p_pack->reciver, tar_inter->object_name);
  }
  else
  {
    //Broadcast packet processing
    MUTEX_LOCK(boardcast_object.mutex_lock);
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <protocol_s_pack_forward+0x170>)
 8002f88:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8a:	b672      	cpsid	i
}
 8002f8c:	bf00      	nop

    list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <protocol_s_pack_forward+0x170>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fa40 	bl	8002418 <list_add>
    boardcast_object.send_node_num++;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <protocol_s_pack_forward+0x170>)
 8002f9a:	7a1b      	ldrb	r3, [r3, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <protocol_s_pack_forward+0x170>)
 8002fa2:	721a      	strb	r2, [r3, #8]

    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <protocol_s_pack_forward+0x170>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	bf00      	nop

    PROTOCOL_RCV_DBG_PRINTF("Broadcast pack forward.");
  }

  return status;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	08015d14 	.word	0x08015d14
 8002fc0:	20000a34 	.word	0x20000a34

08002fc4 <protocol_s_unpack_data_handle>:

//Unpack processing function
uint32_t protocol_s_unpack_data_handle(struct perph_interface *obj)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint16_t cmd;
  protocol_pack_desc_t *p_pack;
  send_list_node_t *session_node;

  status = PROTOCOL_SUCCESS;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  p_pack = (protocol_pack_desc_t *)(obj->rcvd.p_data);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	613b      	str	r3, [r7, #16]

#if PROTOCOL_ROUTE_FOWARD == PROTOCOL_ENABLE

  //If the receiving address does not match the local address, forward it
  if (p_pack->reciver != protocol_local_info.address)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	795a      	ldrb	r2, [r3, #5]
 8002fda:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <protocol_s_unpack_data_handle+0xd0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d00a      	beq.n	8002ff8 <protocol_s_unpack_data_handle+0x34>
  {
    status = protocol_s_pack_forward(p_pack, obj);
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f7ff ff33 	bl	8002e50 <protocol_s_pack_forward>
 8002fea:	6178      	str	r0, [r7, #20]
    if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	795b      	ldrb	r3, [r3, #5]
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d001      	beq.n	8002ff8 <protocol_s_unpack_data_handle+0x34>
    {
      return status;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	e049      	b.n	800308c <protocol_s_unpack_data_handle+0xc8>
    }
  }

#endif

  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d02a      	beq.n	800305c <protocol_s_unpack_data_handle+0x98>
  {
    session_node = protocol_s_session_get_node(obj,
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	7919      	ldrb	r1, [r3, #4]
                                               p_pack->sender,
                                               p_pack->session);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	78db      	ldrb	r3, [r3, #3]
 800300e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003012:	b2db      	uxtb	r3, r3
    session_node = protocol_s_session_get_node(obj,
 8003014:	461a      	mov	r2, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fece 	bl	8002db8 <protocol_s_session_get_node>
 800301c:	60b8      	str	r0, [r7, #8]

    if (session_node == NULL)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <protocol_s_unpack_data_handle+0x74>
    {
      status = PROTOCOL_ERR_SESSION_NOT_FOUND;
 8003024:	2303      	movs	r3, #3
 8003026:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8003028:	f240 22ad 	movw	r2, #685	; 0x2ad
 800302c:	491a      	ldr	r1, [pc, #104]	; (8003098 <protocol_s_unpack_data_handle+0xd4>)
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f000 f9bc 	bl	80033ac <protocol_s_error_info_printf>

      return status;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	e029      	b.n	800308c <protocol_s_unpack_data_handle+0xc8>
    }
    session_node->is_got_ack = 1;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2201      	movs	r2, #1
 800303c:	73da      	strb	r2, [r3, #15]

    cmd = session_node->cmd;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	8a9b      	ldrh	r3, [r3, #20]
 8003042:	81fb      	strh	r3, [r7, #14]

    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Session:%d Ack pack.",
                             p_pack->sender, cmd, p_pack->session);

    if (session_node->ack_callback != NULL)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <protocol_s_unpack_data_handle+0xc6>
    {
      session_node->ack_callback(*(int32_t *)(p_pack->pdata));
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	320c      	adds	r2, #12
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	4610      	mov	r0, r2
 8003058:	4798      	blx	r3
 800305a:	e016      	b.n	800308a <protocol_s_unpack_data_handle+0xc6>
    }
  }
  else
  {
    cmd = *((uint16_t *)(p_pack->pdata));
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	330c      	adds	r3, #12
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	81fb      	strh	r3, [r7, #14]
    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Normal pack.",
                             p_pack->sender, cmd);
    if (protocol_local_info.rcv_nor_callBack != NULL)
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <protocol_s_unpack_data_handle+0xd0>)
 8003066:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <protocol_s_unpack_data_handle+0xc6>
    {
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <protocol_s_unpack_data_handle+0xd0>)
 8003070:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
                                           cmd,
                                           p_pack->session,
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800307c:	b2db      	uxtb	r3, r3
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 800307e:	461a      	mov	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	791b      	ldrb	r3, [r3, #4]
 8003084:	89f9      	ldrh	r1, [r7, #14]
 8003086:	6938      	ldr	r0, [r7, #16]
 8003088:	47a0      	blx	r4
                                           p_pack->sender);
    }
  }

  return status;
 800308a:	697b      	ldr	r3, [r7, #20]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd90      	pop	{r4, r7, pc}
 8003094:	20000a44 	.word	0x20000a44
 8003098:	08015d14 	.word	0x08015d14

0800309c <protocol_s_extract>:

//Unpack
uint32_t protocol_s_extract(struct perph_interface *obj)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  rcvd_desc_t *rcvd;

  rcvd = &obj->rcvd;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3320      	adds	r3, #32
 80030ac:	60bb      	str	r3, [r7, #8]
  if (fifo_s_isempty(&rcvd->fifo))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f010 fe17 	bl	8013ce4 <fifo_s_isempty>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <protocol_s_extract+0x28>
  {
    status = PROTOCOL_ERR_FIFO_EMPTY;
 80030bc:	2307      	movs	r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
    return status;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	e0af      	b.n	8003224 <protocol_s_extract+0x188>
  }

  while (1)
  {
    switch (rcvd->state)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	f200 8098 	bhi.w	8003200 <protocol_s_extract+0x164>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <protocol_s_extract+0x3c>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030ed 	.word	0x080030ed
 80030dc:	08003107 	.word	0x08003107
 80030e0:	08003173 	.word	0x08003173
 80030e4:	080031a5 	.word	0x080031a5
 80030e8:	080031e5 	.word	0x080031e5
    {
    case UNPACK_PACK_STAGE_FIND_SOF:

      status = protocol_s_find_pack_header(rcvd);
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f000 f89f 	bl	8003230 <protocol_s_find_pack_header>
 80030f2:	60f8      	str	r0, [r7, #12]
      if (status == PROTOCOL_SUCCESS)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 8084 	bne.w	8003204 <protocol_s_extract+0x168>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2020 	strb.w	r2, [r3, #32]
      }
      break;
 8003104:	e07e      	b.n	8003204 <protocol_s_extract+0x168>

    case UNPACK_PACK_STAGE_AUTH_HEADER:

      status = protocol_s_auth_pack_header(rcvd);
 8003106:	68b8      	ldr	r0, [r7, #8]
 8003108:	f000 f8b4 	bl	8003274 <protocol_s_auth_pack_header>
 800310c:	60f8      	str	r0, [r7, #12]

      if (status == PROTOCOL_SUCCESS)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d122      	bne.n	800315a <protocol_s_extract+0xbe>
      { /* malloc memory size equal to header size adding data size */
        rcvd->state = UNPACK_PACK_STAGE_RECV_DATA;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2020 	strb.w	r2, [r3, #32]
        rcvd->p_data = protocol_p_malloc(rcvd->total_num);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	8bdb      	ldrh	r3, [r3, #30]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ff5b 	bl	8001fdc <protocol_p_malloc>
 8003126:	4602      	mov	r2, r0
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	619a      	str	r2, [r3, #24]
        if (rcvd->p_data == NULL)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <protocol_s_extract+0xac>
        {
          status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8003134:	2302      	movs	r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
          PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8003138:	f240 22f3 	movw	r2, #755	; 0x2f3
 800313c:	493b      	ldr	r1, [pc, #236]	; (800322c <protocol_s_extract+0x190>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f934 	bl	80033ac <protocol_s_error_info_printf>
          return status;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	e06d      	b.n	8003224 <protocol_s_extract+0x188>
        }
        memset(rcvd->p_data, 0, rcvd->rcvd_num);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6998      	ldr	r0, [r3, #24]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	8b9b      	ldrh	r3, [r3, #28]
 8003150:	461a      	mov	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f011 fbb7 	bl	80148c6 <memset>
        /* this is a pseudo header, remove this from fifo */
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
      }
      break;
 8003158:	e056      	b.n	8003208 <protocol_s_extract+0x16c>
      else if (status == PROTOCOL_ERR_AUTH_FAILURE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d153      	bne.n	8003208 <protocol_s_extract+0x16c>
        fifo_s_get(&rcvd->fifo);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f010 fc05 	bl	8013972 <fifo_s_get>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8003170:	e04a      	b.n	8003208 <protocol_s_extract+0x16c>

    case UNPACK_PACK_STAGE_RECV_DATA:

      if (rcvd->p_data)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <protocol_s_extract+0xe8>
      {
        status = protocol_s_fetch_pack_data(rcvd);
 800317a:	68b8      	ldr	r0, [r7, #8]
 800317c:	f000 f8c0 	bl	8003300 <protocol_s_fetch_pack_data>
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	e007      	b.n	8003194 <protocol_s_extract+0xf8>
      }
      else
      {
        status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8003184:	2302      	movs	r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
        PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8003188:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800318c:	4927      	ldr	r1, [pc, #156]	; (800322c <protocol_s_extract+0x190>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f90c 	bl	80033ac <protocol_s_error_info_printf>
      }

      if (status == PROTOCOL_SUCCESS)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d138      	bne.n	800320c <protocol_s_extract+0x170>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_PACK;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2020 	strb.w	r2, [r3, #32]
      }

      break;
 80031a2:	e033      	b.n	800320c <protocol_s_extract+0x170>

    case UNPACK_PACK_STAGE_AUTH_PACK:

      if (verify_crc32(rcvd->p_data, rcvd->total_num))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	8bdb      	ldrh	r3, [r3, #30]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f011 f918 	bl	80143e4 <verify_crc32>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <protocol_s_extract+0x128>
      {
        rcvd->state = UNPACK_PACK_STAGE_DATA_HANDLE;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2204      	movs	r2, #4
 80031be:	f883 2020 	strb.w	r2, [r3, #32]
        protocol_p_free(rcvd->p_data);
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
      }
      break;
 80031c2:	e024      	b.n	800320e <protocol_s_extract+0x172>
        rcvd->rcvd_num = 0;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	839a      	strh	r2, [r3, #28]
        rcvd->total_num = 0;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	83da      	strh	r2, [r3, #30]
        protocol_p_free(rcvd->p_data);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe ff0d 	bl	8001ff4 <protocol_p_free>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80031e2:	e014      	b.n	800320e <protocol_s_extract+0x172>

    case UNPACK_PACK_STAGE_DATA_HANDLE:

      status = protocol_s_unpack_data_handle(obj);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff feed 	bl	8002fc4 <protocol_s_unpack_data_handle>
 80031ea:	60f8      	str	r0, [r7, #12]

      protocol_p_free(rcvd->p_data);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe feff 	bl	8001ff4 <protocol_p_free>
      rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80031fe:	e006      	b.n	800320e <protocol_s_extract+0x172>

    default:
      break;
 8003200:	bf00      	nop
 8003202:	e004      	b.n	800320e <protocol_s_extract+0x172>
      break;
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <protocol_s_extract+0x172>
      break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <protocol_s_extract+0x172>
      break;
 800320c:	bf00      	nop
    }

    if (status == PROTOCOL_ERR_DATA_NOT_ENOUGH ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b0a      	cmp	r3, #10
 8003212:	d006      	beq.n	8003222 <protocol_s_extract+0x186>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <protocol_s_extract+0x186>
        status == PROTOCOL_ERR_NOT_ENOUGH_MEM ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b09      	cmp	r3, #9
 800321e:	d000      	beq.n	8003222 <protocol_s_extract+0x186>
    switch (rcvd->state)
 8003220:	e750      	b.n	80030c4 <protocol_s_extract+0x28>
    {
      break; /* break from while */
    }
  }

  return status;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08015d14 	.word	0x08015d14

08003230 <protocol_s_find_pack_header>:

//Find frame header
uint32_t protocol_s_find_pack_header(rcvd_desc_t *rcvd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t status;

  while (fifo_s_isempty(&rcvd->fifo) == 0)
 8003238:	e00e      	b.n	8003258 <protocol_s_find_pack_header+0x28>
  { // if fifo not empty, loop
    if ((uint8_t)(fifo_s_preread(&rcvd->fifo, 0)) == PROTOCOL_HEADER)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f010 fcb4 	bl	8013bac <fifo_s_preread>
 8003244:	4603      	mov	r3, r0
 8003246:	2baa      	cmp	r3, #170	; 0xaa
 8003248:	d102      	bne.n	8003250 <protocol_s_find_pack_header+0x20>
    {
      status = PROTOCOL_SUCCESS;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
      goto END;
 800324e:	e00c      	b.n	800326a <protocol_s_find_pack_header+0x3a>
    }
    else
    {
      fifo_s_get(&rcvd->fifo); //remove one byte from fifo
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4618      	mov	r0, r3
 8003254:	f010 fb8d 	bl	8013972 <fifo_s_get>
  while (fifo_s_isempty(&rcvd->fifo) == 0)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f010 fd42 	bl	8013ce4 <fifo_s_isempty>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0e9      	beq.n	800323a <protocol_s_find_pack_header+0xa>
    }
  }
  //if fifo not empty, loop

  status = PROTOCOL_ERR_NOT_FIND_HEADER;
 8003266:	2309      	movs	r3, #9
 8003268:	60fb      	str	r3, [r7, #12]

END:
  return status;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <protocol_s_auth_pack_header>:

//Verification header
uint32_t protocol_s_auth_pack_header(rcvd_desc_t *rcvd)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint8_t auth_array[12];
  ver_data_len_t ver_len;

  if (fifo_s_prereads(&rcvd->fifo, (char *)auth_array, 0, 12) == 12)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f107 0110 	add.w	r1, r7, #16
 8003282:	230c      	movs	r3, #12
 8003284:	2200      	movs	r2, #0
 8003286:	f010 fcb8 	bl	8013bfa <fifo_s_prereads>
 800328a:	4603      	mov	r3, r0
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d130      	bne.n	80032f2 <protocol_s_auth_pack_header+0x7e>
  {
    ver_len = protocol_s_get_ver_datalen(auth_array);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f862 	bl	800335e <protocol_s_get_ver_datalen>
 800329a:	4603      	mov	r3, r0
 800329c:	81bb      	strh	r3, [r7, #12]
    if (ver_len.data_len - PROTOCOL_PACK_HEAD_TAIL_SIZE > PROTOCOL_MAX_DATA_LEN)
 800329e:	89bb      	ldrh	r3, [r7, #12]
 80032a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b10      	subs	r3, #16
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ac:	d902      	bls.n	80032b4 <protocol_s_auth_pack_header+0x40>
    {
      status = PROTOCOL_ERR_AUTH_FAILURE;
 80032ae:	2308      	movs	r3, #8
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e020      	b.n	80032f6 <protocol_s_auth_pack_header+0x82>
    }
    else
    {
      if ((ver_len.version == 0) && (verify_crc16(auth_array, 12) == 1))
 80032b4:	7b7b      	ldrb	r3, [r7, #13]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d115      	bne.n	80032ec <protocol_s_auth_pack_header+0x78>
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	210c      	movs	r1, #12
 80032c6:	4618      	mov	r0, r3
 80032c8:	f011 f802 	bl	80142d0 <verify_crc16>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10c      	bne.n	80032ec <protocol_s_auth_pack_header+0x78>
      {
        status = PROTOCOL_SUCCESS;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
        rcvd->total_num = ver_len.data_len;
 80032d6:	89bb      	ldrh	r3, [r7, #12]
 80032d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	83da      	strh	r2, [r3, #30]
        rcvd->rcvd_num = 0;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	839a      	strh	r2, [r3, #28]
 80032ea:	e004      	b.n	80032f6 <protocol_s_auth_pack_header+0x82>
      }
      else
      {
        status = PROTOCOL_ERR_AUTH_FAILURE;
 80032ec:	2308      	movs	r3, #8
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e001      	b.n	80032f6 <protocol_s_auth_pack_header+0x82>
      }
    }
  }
  else
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 80032f2:	230a      	movs	r3, #10
 80032f4:	61fb      	str	r3, [r7, #28]
  }

  return status;
 80032f6:	69fb      	ldr	r3, [r7, #28]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <protocol_s_fetch_pack_data>:

//Get package data
uint32_t protocol_s_fetch_pack_data(rcvd_desc_t *rcvd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t length;
  uint32_t want_len;

  want_len = rcvd->total_num - rcvd->rcvd_num;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8bdb      	ldrh	r3, [r3, #30]
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8b9b      	ldrh	r3, [r3, #28]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
  length = fifo_s_gets(&rcvd->fifo,
 8003316:	6878      	ldr	r0, [r7, #4]
                       (char *)rcvd->p_data + rcvd->rcvd_num,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	8b92      	ldrh	r2, [r2, #28]
  length = fifo_s_gets(&rcvd->fifo,
 8003320:	4413      	add	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4619      	mov	r1, r3
 8003326:	f010 fb59 	bl	80139dc <fifo_s_gets>
 800332a:	4603      	mov	r3, r0
 800332c:	60fb      	str	r3, [r7, #12]
                       want_len);
  rcvd->rcvd_num += length;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8b9a      	ldrh	r2, [r3, #28]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	b29b      	uxth	r3, r3
 8003336:	4413      	add	r3, r2
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	839a      	strh	r2, [r3, #28]

  if (rcvd->rcvd_num < rcvd->total_num)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8b9a      	ldrh	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8bdb      	ldrh	r3, [r3, #30]
 8003346:	429a      	cmp	r2, r3
 8003348:	d202      	bcs.n	8003350 <protocol_s_fetch_pack_data+0x50>
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 800334a:	230a      	movs	r3, #10
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e001      	b.n	8003354 <protocol_s_fetch_pack_data+0x54>
  }
  else
  {
    status = PROTOCOL_SUCCESS;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  }
  return status;
 8003354:	697b      	ldr	r3, [r7, #20]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <protocol_s_get_ver_datalen>:

//Get version number and data length
ver_data_len_t protocol_s_get_ver_datalen(void *pack)

{
 800335e:	b480      	push	{r7}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  ver_data_len_t ver_len;
  uint16_t *tmp = (uint16_t *)&ver_len;
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	617b      	str	r3, [r7, #20]
  uint8_t *ptr = (uint8_t *)pack;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	613b      	str	r3, [r7, #16]

  *tmp = ptr[2] << 8 | ptr[1];
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3302      	adds	r3, #2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21a      	sxth	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3301      	adds	r3, #1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b21b      	sxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	b21b      	sxth	r3, r3
 8003386:	b29a      	uxth	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	801a      	strh	r2, [r3, #0]

  return ver_len;
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	81bb      	strh	r3, [r7, #12]
 8003390:	2300      	movs	r3, #0
 8003392:	7b3a      	ldrb	r2, [r7, #12]
 8003394:	f362 0307 	bfi	r3, r2, #0, #8
 8003398:	7b7a      	ldrb	r2, [r7, #13]
 800339a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800339e:	4618      	mov	r0, r3
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <protocol_s_error_info_printf>:

//Accept error message
void protocol_s_error_info_printf(uint32_t status, char *file, int line)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  char *err_info;
  switch (status)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b12      	cmp	r3, #18
 80033bc:	d861      	bhi.n	8003482 <protocol_s_error_info_printf+0xd6>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <protocol_s_error_info_printf+0x18>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	08003411 	.word	0x08003411
 80033c8:	08003417 	.word	0x08003417
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	08003423 	.word	0x08003423
 80033d4:	08003429 	.word	0x08003429
 80033d8:	0800342f 	.word	0x0800342f
 80033dc:	08003435 	.word	0x08003435
 80033e0:	0800343b 	.word	0x0800343b
 80033e4:	08003441 	.word	0x08003441
 80033e8:	08003447 	.word	0x08003447
 80033ec:	0800344d 	.word	0x0800344d
 80033f0:	08003453 	.word	0x08003453
 80033f4:	08003459 	.word	0x08003459
 80033f8:	0800345f 	.word	0x0800345f
 80033fc:	08003465 	.word	0x08003465
 8003400:	0800346b 	.word	0x0800346b
 8003404:	08003471 	.word	0x08003471
 8003408:	08003477 	.word	0x08003477
 800340c:	0800347d 	.word	0x0800347d
  {
  case PROTOCOL_SUCCESS:
    err_info = "PROTOCOL_SUCCESS";
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <protocol_s_error_info_printf+0xe8>)
 8003412:	617b      	str	r3, [r7, #20]
    break;
 8003414:	e037      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_TOO_LONG:
    err_info = "PROTOCOL_ERR_DATA_TOO_LONG";
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <protocol_s_error_info_printf+0xec>)
 8003418:	617b      	str	r3, [r7, #20]
    break;
 800341a:	e034      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_ENOUGH_MEM:
    err_info = "PROTOCOL_ERR_NOT_ENOUGH_MEM";
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <protocol_s_error_info_printf+0xf0>)
 800341e:	617b      	str	r3, [r7, #20]
    break;
 8003420:	e031      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_NOT_FOUND:
    err_info = "PROTOCOL_ERR_SESSION_NOT_FOUND";
 8003422:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <protocol_s_error_info_printf+0xf4>)
 8003424:	617b      	str	r3, [r7, #20]
    break;
 8003426:	e02e      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_FULL:
    err_info = "PROTOCOL_ERR_SESSION_FULL";
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <protocol_s_error_info_printf+0xf8>)
 800342a:	617b      	str	r3, [r7, #20]
    break;
 800342c:	e02b      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_IS_USE:
    err_info = "PROTOCOL_ERR_SESSION_IS_USE";
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <protocol_s_error_info_printf+0xfc>)
 8003430:	617b      	str	r3, [r7, #20]
    break;
 8003432:	e028      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTE_NOT_FOUND:
    err_info = "PROTOCOL_ERR_ROUTE_NOT_FOUND";
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <protocol_s_error_info_printf+0x100>)
 8003436:	617b      	str	r3, [r7, #20]
    break;
 8003438:	e025      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_EMPTY:
    err_info = "PROTOCOL_ERR_FIFO_EMPTY";
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <protocol_s_error_info_printf+0x104>)
 800343c:	617b      	str	r3, [r7, #20]
    break;
 800343e:	e022      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_AUTH_FAILURE:
    err_info = "PROTOCOL_ERR_AUTH_FAILURE";
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <protocol_s_error_info_printf+0x108>)
 8003442:	617b      	str	r3, [r7, #20]
    break;
 8003444:	e01f      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_FIND_HEADER:
    err_info = "PROTOCOL_ERR_NOT_FIND_HEADER";
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <protocol_s_error_info_printf+0x10c>)
 8003448:	617b      	str	r3, [r7, #20]
    break;
 800344a:	e01c      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_NOT_ENOUGH:
    err_info = "PROTOCOL_ERR_DATA_NOT_ENOUGH";
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <protocol_s_error_info_printf+0x110>)
 800344e:	617b      	str	r3, [r7, #20]
    break;
 8003450:	e019      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_FULL:
    err_info = "PROTOCOL_ERR_FIFO_FULL";
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <protocol_s_error_info_printf+0x114>)
 8003454:	617b      	str	r3, [r7, #20]
    break;
 8003456:	e016      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_OBJECT_NOT_FOUND:
    err_info = "PROTOCOL_ERR_OBJECT_NOT_FOUND";
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <protocol_s_error_info_printf+0x118>)
 800345a:	617b      	str	r3, [r7, #20]
    break;
 800345c:	e013      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_UNSUPPORT_CPU:
    err_info = "PROTOCOL_ERR_UNSUPPORT_CPU";
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <protocol_s_error_info_printf+0x11c>)
 8003460:	617b      	str	r3, [r7, #20]
    break;
 8003462:	e010      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTEU_SET_BEYOND:
    err_info = "PROTOCOL_ERR_ROUTEU_SET_BEYOND";
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <protocol_s_error_info_printf+0x120>)
 8003466:	617b      	str	r3, [r7, #20]
    break;
 8003468:	e00d      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_INTER_NOT_FOUND:
    err_info = "PROTOCOL_ERR_INTER_NOT_FOUND";
 800346a:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <protocol_s_error_info_printf+0x124>)
 800346c:	617b      	str	r3, [r7, #20]
    break;
 800346e:	e00a      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_PROTOCOL_NOT_INIT:
    err_info = "PROTOCOL_ERR_PROTOCOL_NOT_INIT";
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <protocol_s_error_info_printf+0x128>)
 8003472:	617b      	str	r3, [r7, #20]
    break;
 8003474:	e007      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_ERROR:
    err_info = "PROTOCOL_ERR_SESSION_ERROR(Boardcast session can only be 0)";
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <protocol_s_error_info_printf+0x12c>)
 8003478:	617b      	str	r3, [r7, #20]
    break;
 800347a:	e004      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_REGISTER_FAILED:
    err_info = "PROTOCOL_ERR_REGISTER_FAILED";
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <protocol_s_error_info_printf+0x130>)
 800347e:	617b      	str	r3, [r7, #20]
    break;
 8003480:	e001      	b.n	8003486 <protocol_s_error_info_printf+0xda>
  default:
    err_info = "PROTOCOL_ERR_NOT_FOUND";
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <protocol_s_error_info_printf+0x134>)
 8003484:	617b      	str	r3, [r7, #20]
  }
  protocol_log_e("%s[%u].(File:%s,Line:%d)",
                 err_info, status, file, line);

  return;
 8003486:	bf00      	nop
}
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	08015d40 	.word	0x08015d40
 8003498:	08015d54 	.word	0x08015d54
 800349c:	08015d70 	.word	0x08015d70
 80034a0:	08015d8c 	.word	0x08015d8c
 80034a4:	08015dac 	.word	0x08015dac
 80034a8:	08015dc8 	.word	0x08015dc8
 80034ac:	08015de4 	.word	0x08015de4
 80034b0:	08015e04 	.word	0x08015e04
 80034b4:	08015e1c 	.word	0x08015e1c
 80034b8:	08015e38 	.word	0x08015e38
 80034bc:	08015e58 	.word	0x08015e58
 80034c0:	08015e78 	.word	0x08015e78
 80034c4:	08015e90 	.word	0x08015e90
 80034c8:	08015eb0 	.word	0x08015eb0
 80034cc:	08015ecc 	.word	0x08015ecc
 80034d0:	08015eec 	.word	0x08015eec
 80034d4:	08015f0c 	.word	0x08015f0c
 80034d8:	08015f2c 	.word	0x08015f2c
 80034dc:	08015f68 	.word	0x08015f68
 80034e0:	08015f88 	.word	0x08015f88

080034e4 <can1_motor_msg_rec>:
#include "communicate.h"
#include "timer_task.h"
#include "offline_check.h"

int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	4619      	mov	r1, r3
 80034f8:	2000      	movs	r0, #0
 80034fa:	f00f fb53 	bl	8012ba4 <motor_device_data_update>
  return 0;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <motor_canstd_send>:

int32_t motor_canstd_send(enum device_can can, struct can_msg msg)
{
 8003508:	b084      	sub	sp, #16
 800350a:	b590      	push	{r4, r7, lr}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	4604      	mov	r4, r0
 8003512:	f107 001c 	add.w	r0, r7, #28
 8003516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800351a:	4623      	mov	r3, r4
 800351c:	71fb      	strb	r3, [r7, #7]
  if (can == DEVICE_CAN1)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10c      	bne.n	800353e <motor_canstd_send+0x36>
    can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800352a:	b29a      	uxth	r2, r3
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	f103 0108 	add.w	r1, r3, #8
 8003534:	4613      	mov	r3, r2
 8003536:	2208      	movs	r2, #8
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <motor_canstd_send+0x48>)
 800353a:	f000 f8df 	bl	80036fc <can_msg_bytes_send>
  return 0;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800354a:	b004      	add	sp, #16
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20001fc0 	.word	0x20001fc0

08003554 <get_time_us>:
//     }
//   }
// }

uint32_t get_time_us(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <get_time_us+0x14>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40000c00 	.word	0x40000c00

0800356c <get_time_ms>:

uint32_t get_time_ms(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003570:	f002 f922 	bl	80057b8 <HAL_GetTick>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <get_time_ms_us>:

float get_time_ms_us(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	ed2d 8b02 	vpush	{d8}
 8003582:	af00      	add	r7, sp, #0
  return get_time_ms() + get_time_us() / 1000.0f;
 8003584:	f7ff fff2 	bl	800356c <get_time_ms>
 8003588:	ee07 0a90 	vmov	s15, r0
 800358c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003590:	f7ff ffe0 	bl	8003554 <get_time_us>
 8003594:	ee07 0a90 	vmov	s15, r0
 8003598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800359c:	eddf 6a05 	vldr	s13, [pc, #20]	; 80035b4 <get_time_ms_us+0x38>
 80035a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a4:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 80035a8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ac:	46bd      	mov	sp, r7
 80035ae:	ecbd 8b02 	vpop	{d8}
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	447a0000 	.word	0x447a0000

080035b8 <motor_can1_output_1ms>:

int32_t motor_can1_output_1ms(void *argc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f00f f9f9 	bl	80129b8 <motor_device_can_output>
  return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <board_config>:

void board_config(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  soft_timer_init();
 80035d4:	f010 ffc0 	bl	8014558 <soft_timer_init>

  usart6_manage_init();
 80035d8:	f000 ff0e 	bl	80043f8 <usart6_manage_init>
  can_manage_init();
 80035dc:	f000 f828 	bl	8003630 <can_manage_init>
  pwm_device_init();
 80035e0:	f000 fe3c 	bl	800425c <pwm_device_init>
  mpu_device_init();
 80035e4:	f000 fc1a 	bl	8003e1c <mpu_device_init>

  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2100      	movs	r1, #0
 80035ec:	480a      	ldr	r0, [pc, #40]	; (8003618 <board_config+0x48>)
 80035ee:	f7fe fa07 	bl	8001a00 <soft_timer_register>
  soft_timer_register(beep_ctrl_times, NULL, 1);  
 80035f2:	2201      	movs	r2, #1
 80035f4:	2100      	movs	r1, #0
 80035f6:	4809      	ldr	r0, [pc, #36]	; (800361c <board_config+0x4c>)
 80035f8:	f7fe fa02 	bl	8001a00 <soft_timer_register>
  soft_timer_register(led_toggle_300ms, NULL, 1); 
 80035fc:	2201      	movs	r2, #1
 80035fe:	2100      	movs	r1, #0
 8003600:	4807      	ldr	r0, [pc, #28]	; (8003620 <board_config+0x50>)
 8003602:	f7fe f9fd 	bl	8001a00 <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send);
 8003606:	4807      	ldr	r0, [pc, #28]	; (8003624 <board_config+0x54>)
 8003608:	f00f f952 	bl	80128b0 <motor_device_can_send_register>

  can_fifo0_rx_callback_register(&can1_manage, can1_motor_msg_rec);
 800360c:	4906      	ldr	r1, [pc, #24]	; (8003628 <board_config+0x58>)
 800360e:	4807      	ldr	r0, [pc, #28]	; (800362c <board_config+0x5c>)
 8003610:	f000 f920 	bl	8003854 <can_fifo0_rx_callback_register>
}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	080035b9 	.word	0x080035b9
 800361c:	080042e1 	.word	0x080042e1
 8003620:	0800438d 	.word	0x0800438d
 8003624:	08003509 	.word	0x08003509
 8003628:	080034e5 	.word	0x080034e5
 800362c:	200012e8 	.word	0x200012e8

08003630 <can_manage_init>:
struct can_manage_obj can1_manage;

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];

void can_manage_init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <can_manage_init+0xbc>)
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <can_manage_init+0xbc>)
 8003640:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <can_manage_init+0xc0>)
 8003642:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	e008      	b.n	800365c <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <can_manage_init+0xbc>)
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	330a      	adds	r3, #10
 8003650:	2100      	movs	r1, #0
 8003652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	3301      	adds	r3, #1
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	2b04      	cmp	r3, #4
 8003660:	ddf3      	ble.n	800364a <can_manage_init+0x1a>
  }

  fifo_init(&(can1_manage.tx_fifo),
 8003662:	2340      	movs	r3, #64	; 0x40
 8003664:	2210      	movs	r2, #16
 8003666:	4923      	ldr	r1, [pc, #140]	; (80036f4 <can_manage_init+0xc4>)
 8003668:	4823      	ldr	r0, [pc, #140]	; (80036f8 <can_manage_init+0xc8>)
 800366a:	f010 fb4c 	bl	8013d06 <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 800366e:	2301      	movs	r3, #1
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8003676:	2301      	movs	r3, #1
 8003678:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterMaskIdLow = 0x0000;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
  can_filter_st.FilterBank = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	4619      	mov	r1, r3
 8003696:	4816      	ldr	r0, [pc, #88]	; (80036f0 <can_manage_init+0xc0>)
 8003698:	f002 f9ba 	bl	8005a10 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800369c:	4814      	ldr	r0, [pc, #80]	; (80036f0 <can_manage_init+0xc0>)
 800369e:	f002 fa97 	bl	8005bd0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80036a2:	2102      	movs	r1, #2
 80036a4:	4812      	ldr	r0, [pc, #72]	; (80036f0 <can_manage_init+0xc0>)
 80036a6:	f002 fcfe 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80036aa:	2101      	movs	r1, #1
 80036ac:	4810      	ldr	r0, [pc, #64]	; (80036f0 <can_manage_init+0xc0>)
 80036ae:	f002 fcfa 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 80036b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b6:	480e      	ldr	r0, [pc, #56]	; (80036f0 <can_manage_init+0xc0>)
 80036b8:	f002 fcf5 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 80036bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c0:	480b      	ldr	r0, [pc, #44]	; (80036f0 <can_manage_init+0xc0>)
 80036c2:	f002 fcf0 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 80036c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ca:	4809      	ldr	r0, [pc, #36]	; (80036f0 <can_manage_init+0xc0>)
 80036cc:	f002 fceb 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 80036d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036d4:	4806      	ldr	r0, [pc, #24]	; (80036f0 <can_manage_init+0xc0>)
 80036d6:	f002 fce6 	bl	80060a6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 80036da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <can_manage_init+0xc0>)
 80036e0:	f002 fce1 	bl	80060a6 <HAL_CAN_ActivateNotification>

  return;
 80036e4:	bf00      	nop
}
 80036e6:	3730      	adds	r7, #48	; 0x30
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200012e8 	.word	0x200012e8
 80036f0:	20001fc0 	.word	0x20001fc0
 80036f4:	20001324 	.word	0x20001324
 80036f8:	200012ec 	.word	0x200012ec

080036fc <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b093      	sub	sp, #76	; 0x4c
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	4613      	mov	r3, r2
 8003710:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 8003716:	88bb      	ldrh	r3, [r7, #4]
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a4a      	ldr	r2, [pc, #296]	; (800384c <can_msg_bytes_send+0x150>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d102      	bne.n	800372e <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 8003728:	4b49      	ldr	r3, [pc, #292]	; (8003850 <can_msg_bytes_send+0x154>)
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 800372c:	e044      	b.n	80037b8 <can_msg_bytes_send+0xbc>
    return 0;
 800372e:	2300      	movs	r3, #0
 8003730:	e088      	b.n	8003844 <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 8003732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f010 fbe0 	bl	8013efc <fifo_is_full>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800374a:	e03a      	b.n	80037c2 <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b07      	cmp	r3, #7
 8003756:	dd03      	ble.n	8003760 <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 8003758:	2308      	movs	r3, #8
 800375a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800375e:	e008      	b.n	8003772 <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003768:	b2db      	uxtb	r3, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 8003772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003776:	3305      	adds	r3, #5
 8003778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 800377e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003782:	3305      	adds	r3, #5
 8003784:	3304      	adds	r3, #4
 8003786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003788:	6852      	ldr	r2, [r2, #4]
 800378a:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 800378c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003790:	461a      	mov	r2, r3
 8003792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003794:	4413      	add	r3, r2
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 8003798:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800379c:	b29a      	uxth	r2, r3
 800379e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80037a2:	4413      	add	r3, r2
 80037a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	3304      	adds	r3, #4
 80037ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f010 fad1 	bl	8013d5a <fifo_put>
  while (send_num < len)
 80037b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3b7      	bcc.n	8003732 <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d139      	bne.n	8003840 <can_msg_bytes_send+0x144>
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f010 fb82 	bl	8013eda <fifo_is_empty>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d131      	bne.n	8003840 <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 80037dc:	88bb      	ldrh	r3, [r7, #4]
 80037de:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 80037e8:	e01a      	b.n	8003820 <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	3304      	adds	r3, #4
 80037ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f010 faf6 	bl	8013de6 <fifo_get>
      header.DLC = msg.dlc;
 80037fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	f107 0410 	add.w	r4, r7, #16
 8003808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800380c:	1d5a      	adds	r2, r3, #5
 800380e:	f107 0114 	add.w	r1, r7, #20
 8003812:	4623      	mov	r3, r4
 8003814:	f002 fa20 	bl	8005c58 <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 8003820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fae7 	bl	8005df8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <can_msg_bytes_send+0x144>
 8003830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003832:	3304      	adds	r3, #4
 8003834:	4618      	mov	r0, r3
 8003836:	f010 fb50 	bl	8013eda <fifo_is_empty>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0d4      	beq.n	80037ea <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 8003840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 8003844:	4618      	mov	r0, r3
 8003846:	374c      	adds	r7, #76	; 0x4c
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	20001fc0 	.word	0x20001fc0
 8003850:	200012e8 	.word	0x200012e8

08003854 <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e011      	b.n	8003888 <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	320a      	adds	r2, #10
 800386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	320a      	adds	r2, #10
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	e007      	b.n	8003892 <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b04      	cmp	r3, #4
 800388c:	ddea      	ble.n	8003864 <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 800389e:	b5b0      	push	{r4, r5, r7, lr}
 80038a0:	b090      	sub	sp, #64	; 0x40
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038a6:	f3ef 8310 	mrs	r3, PRIMASK
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80038ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 80038ae:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80038b0:	b672      	cpsid	i
}
 80038b2:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f010 fb0e 	bl	8013eda <fifo_is_empty>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d133      	bne.n	800392c <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 80038c4:	e029      	b.n	800391a <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 fa94 	bl	8005df8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01d      	beq.n	8003912 <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f010 fac6 	bl	8013e72 <fifo_get_noprotect>

        header.StdId = msg.std_id;
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 80038ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038ee:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f107 040c 	add.w	r4, r7, #12
 8003900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003904:	1d5a      	adds	r2, r3, #5
 8003906:	f107 0110 	add.w	r1, r7, #16
 800390a:	4623      	mov	r3, r4
 800390c:	f002 f9a4 	bl	8005c58 <HAL_CAN_AddTxMessage>
 8003910:	e003      	b.n	800391a <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4618      	mov	r0, r3
 8003920:	f010 fadb 	bl	8013eda <fifo_is_empty>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0cd      	beq.n	80038c6 <can_tx_mailbox_complete_hanle+0x28>
 800392a:	e003      	b.n	8003934 <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003934:	63bd      	str	r5, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 800393e:	bf00      	nop
}
 8003940:	3740      	adds	r7, #64	; 0x40
 8003942:	46bd      	mov	sp, r7
 8003944:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003948 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d102      	bne.n	800395e <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800395a:	f7ff ffa0 	bl	800389e <can_tx_mailbox_complete_hanle>
  }
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20001fc0 	.word	0x20001fc0
 800396c:	200012e8 	.word	0x200012e8

08003970 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d102      	bne.n	8003986 <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 8003982:	f7ff ff8c 	bl	800389e <can_tx_mailbox_complete_hanle>
  }
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20001fc0 	.word	0x20001fc0
 8003994:	200012e8 	.word	0x200012e8

08003998 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d102      	bne.n	80039ae <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 80039aa:	f7ff ff78 	bl	800389e <can_tx_mailbox_complete_hanle>
  }
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20001fc0 	.word	0x20001fc0
 80039bc:	200012e8 	.word	0x200012e8

080039c0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <HAL_CAN_ErrorCallback+0x24>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d102      	bne.n	80039d6 <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 80039d0:	4805      	ldr	r0, [pc, #20]	; (80039e8 <HAL_CAN_ErrorCallback+0x28>)
 80039d2:	f7ff ff64 	bl	800389e <can_tx_mailbox_complete_hanle>
  }
 HAL_CAN_ResetError(hcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f002 fd92 	bl	8006500 <HAL_CAN_ResetError>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20001fc0 	.word	0x20001fc0
 80039e8:	200012e8 	.word	0x200012e8

080039ec <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	f107 0210 	add.w	r2, r7, #16
 80039fc:	2100      	movs	r1, #0
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f002 fa2f 	bl	8005e62 <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d11a      	bne.n	8003a42 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	e014      	b.n	8003a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	330a      	adds	r3, #10
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 8003a20:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	330a      	adds	r3, #10
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	f107 0108 	add.w	r1, r7, #8
 8003a2e:	f107 0210 	add.w	r2, r7, #16
 8003a32:	4610      	mov	r0, r2
 8003a34:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	3301      	adds	r3, #1
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	dde7      	ble.n	8003a12 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 8003a42:	bf00      	nop
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20001fc0 	.word	0x20001fc0
 8003a50:	200012e8 	.word	0x200012e8

08003a54 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8003a64:	2200      	movs	r2, #0
 8003a66:	2140      	movs	r1, #64	; 0x40
 8003a68:	4812      	ldr	r0, [pc, #72]	; (8003ab4 <mpu_write_reg+0x60>)
 8003a6a:	f003 fc15 	bl	8007298 <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <mpu_write_reg+0x64>)
 8003a78:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a7a:	2337      	movs	r3, #55	; 0x37
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <mpu_write_reg+0x68>)
 8003a82:	490d      	ldr	r1, [pc, #52]	; (8003ab8 <mpu_write_reg+0x64>)
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <mpu_write_reg+0x6c>)
 8003a86:	f005 fb9e 	bl	80091c6 <HAL_SPI_TransmitReceive>
  tx = data;
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <mpu_write_reg+0x64>)
 8003a8c:	79bb      	ldrb	r3, [r7, #6]
 8003a8e:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a90:	2337      	movs	r3, #55	; 0x37
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2301      	movs	r3, #1
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <mpu_write_reg+0x68>)
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <mpu_write_reg+0x64>)
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <mpu_write_reg+0x6c>)
 8003a9c:	f005 fb93 	bl	80091c6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	4803      	ldr	r0, [pc, #12]	; (8003ab4 <mpu_write_reg+0x60>)
 8003aa6:	f003 fbf7 	bl	8007298 <HAL_GPIO_WritePin>
  return 0;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021400 	.word	0x40021400
 8003ab8:	20001724 	.word	0x20001724
 8003abc:	20001725 	.word	0x20001725
 8003ac0:	20001fec 	.word	0x20001fec

08003ac4 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	4812      	ldr	r0, [pc, #72]	; (8003b1c <mpu_read_reg+0x58>)
 8003ad4:	f003 fbe0 	bl	8007298 <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <mpu_read_reg+0x5c>)
 8003ae2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ae4:	2337      	movs	r3, #55	; 0x37
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <mpu_read_reg+0x60>)
 8003aec:	490c      	ldr	r1, [pc, #48]	; (8003b20 <mpu_read_reg+0x5c>)
 8003aee:	480e      	ldr	r0, [pc, #56]	; (8003b28 <mpu_read_reg+0x64>)
 8003af0:	f005 fb69 	bl	80091c6 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003af4:	2337      	movs	r3, #55	; 0x37
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2301      	movs	r3, #1
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <mpu_read_reg+0x60>)
 8003afc:	4908      	ldr	r1, [pc, #32]	; (8003b20 <mpu_read_reg+0x5c>)
 8003afe:	480a      	ldr	r0, [pc, #40]	; (8003b28 <mpu_read_reg+0x64>)
 8003b00:	f005 fb61 	bl	80091c6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8003b04:	2201      	movs	r2, #1
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	4804      	ldr	r0, [pc, #16]	; (8003b1c <mpu_read_reg+0x58>)
 8003b0a:	f003 fbc5 	bl	8007298 <HAL_GPIO_WritePin>
  return rx;
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <mpu_read_reg+0x60>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021400 	.word	0x40021400
 8003b20:	20001724 	.word	0x20001724
 8003b24:	20001725 	.word	0x20001725
 8003b28:	20001fec 	.word	0x20001fec

08003b2c <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2140      	movs	r1, #64	; 0x40
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <mpu_read_regs+0x64>)
 8003b42:	f003 fba9 	bl	8007298 <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <mpu_read_regs+0x68>)
 8003b50:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 8003b52:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <mpu_read_regs+0x68>)
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <mpu_read_regs+0x6c>)
 8003b58:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b5a:	2337      	movs	r3, #55	; 0x37
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <mpu_read_regs+0x70>)
 8003b62:	490c      	ldr	r1, [pc, #48]	; (8003b94 <mpu_read_regs+0x68>)
 8003b64:	480e      	ldr	r0, [pc, #56]	; (8003ba0 <mpu_read_regs+0x74>)
 8003b66:	f005 fb2e 	bl	80091c6 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003b6a:	79bb      	ldrb	r3, [r7, #6]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2237      	movs	r2, #55	; 0x37
 8003b70:	9200      	str	r2, [sp, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4908      	ldr	r1, [pc, #32]	; (8003b98 <mpu_read_regs+0x6c>)
 8003b76:	480a      	ldr	r0, [pc, #40]	; (8003ba0 <mpu_read_regs+0x74>)
 8003b78:	f005 fb25 	bl	80091c6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	2140      	movs	r1, #64	; 0x40
 8003b80:	4803      	ldr	r0, [pc, #12]	; (8003b90 <mpu_read_regs+0x64>)
 8003b82:	f003 fb89 	bl	8007298 <HAL_GPIO_WritePin>
  return 0;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021400 	.word	0x40021400
 8003b94:	20001724 	.word	0x20001724
 8003b98:	20001728 	.word	0x20001728
 8003b9c:	20001725 	.word	0x20001725
 8003ba0:	20001fec 	.word	0x20001fec

08003ba4 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	460a      	mov	r2, r1
 8003bae:	71fb      	strb	r3, [r7, #7]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	202a      	movs	r0, #42	; 0x2a
 8003bb8:	f7ff ff4c 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	f001 fe07 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	2029      	movs	r0, #41	; 0x29
 8003bc8:	f7ff ff44 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f001 fdff 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 8003bd2:	79bb      	ldrb	r3, [r7, #6]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	2064      	movs	r0, #100	; 0x64
 8003bd8:	f7ff ff3c 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f001 fdf7 	bl	80057d0 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8003be2:	2181      	movs	r1, #129	; 0x81
 8003be4:	202a      	movs	r0, #42	; 0x2a
 8003be6:	f7ff ff35 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003bea:	200a      	movs	r0, #10
 8003bec:	f001 fdf0 	bl	80057d0 <HAL_Delay>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4619      	mov	r1, r3
 8003c06:	2032      	movs	r0, #50	; 0x32
 8003c08:	f7ff ff24 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003c0c:	200a      	movs	r0, #10
 8003c0e:	f001 fddf 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	2034      	movs	r0, #52	; 0x34
 8003c16:	f7ff ff1d 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003c1a:	200a      	movs	r0, #10
 8003c1c:	f001 fdd8 	bl	80057d0 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 8003c20:	2035      	movs	r0, #53	; 0x35
 8003c22:	f7ff ff4f 	bl	8003ac4 <mpu_read_reg>
 8003c26:	4603      	mov	r3, r0
 8003c28:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2034      	movs	r0, #52	; 0x34
 8003c2e:	f7ff ff11 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003c32:	200a      	movs	r0, #10
 8003c34:	f001 fdcc 	bl	80057d0 <HAL_Delay>
  return retval;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	71bb      	strb	r3, [r7, #6]
 8003c50:	4613      	mov	r3, r2
 8003c52:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	4619      	mov	r1, r3
 8003c58:	2028      	movs	r0, #40	; 0x28
 8003c5a:	f7ff fefb 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003c5e:	2002      	movs	r0, #2
 8003c60:	f001 fdb6 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8003c64:	210a      	movs	r1, #10
 8003c66:	2029      	movs	r0, #41	; 0x29
 8003c68:	f7ff fef4 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f001 fdaf 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8003c72:	2101      	movs	r1, #1
 8003c74:	2064      	movs	r0, #100	; 0x64
 8003c76:	f7ff feed 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f001 fda8 	bl	80057d0 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	2025      	movs	r0, #37	; 0x25
 8003c8c:	f7ff fee2 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003c90:	2002      	movs	r0, #2
 8003c92:	f001 fd9d 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 8003c96:	79bb      	ldrb	r3, [r7, #6]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2026      	movs	r0, #38	; 0x26
 8003c9c:	f7ff feda 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f001 fd95 	bl	80057d0 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	2034      	movs	r0, #52	; 0x34
 8003caa:	f7ff fed3 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f001 fd8e 	bl	80057d0 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	2067      	movs	r0, #103	; 0x67
 8003cb8:	f7ff fecc 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f001 fd87 	bl	80057d0 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8003cc2:	2181      	movs	r1, #129	; 0x81
 8003cc4:	202a      	movs	r0, #42	; 0x2a
 8003cc6:	f7ff fec5 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 8003cca:	2006      	movs	r0, #6
 8003ccc:	f001 fd80 	bl	80057d0 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 8003cd0:	797b      	ldrb	r3, [r7, #5]
 8003cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	2027      	movs	r0, #39	; 0x27
 8003cdc:	f7ff feba 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(2);
 8003ce0:	2002      	movs	r0, #2
 8003ce2:	f001 fd75 	bl	80057d0 <HAL_Delay>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <ist8310_init>:

uint8_t ist8310_init(void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 8003cf2:	2130      	movs	r1, #48	; 0x30
 8003cf4:	206a      	movs	r0, #106	; 0x6a
 8003cf6:	f7ff fead 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003cfa:	200a      	movs	r0, #10
 8003cfc:	f001 fd68 	bl	80057d0 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 8003d00:	210d      	movs	r1, #13
 8003d02:	2024      	movs	r0, #36	; 0x24
 8003d04:	f7ff fea6 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003d08:	200a      	movs	r0, #10
 8003d0a:	f001 fd61 	bl	80057d0 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 8003d0e:	210e      	movs	r1, #14
 8003d10:	2028      	movs	r0, #40	; 0x28
 8003d12:	f7ff fe9f 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003d16:	200a      	movs	r0, #10
 8003d18:	f001 fd5a 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 8003d1c:	218e      	movs	r1, #142	; 0x8e
 8003d1e:	2031      	movs	r0, #49	; 0x31
 8003d20:	f7ff fe98 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003d24:	200a      	movs	r0, #10
 8003d26:	f001 fd53 	bl	80057d0 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	200b      	movs	r0, #11
 8003d2e:	f7ff ff39 	bl	8003ba4 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 8003d32:	200a      	movs	r0, #10
 8003d34:	f001 fd4c 	bl	80057d0 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7ff ff5d 	bl	8003bf8 <ist_reg_read_by_mpu>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d001      	beq.n	8003d48 <ist8310_init+0x5a>
    return 1;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e059      	b.n	8003dfc <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	200b      	movs	r0, #11
 8003d4c:	f7ff ff2a 	bl	8003ba4 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 8003d50:	200a      	movs	r0, #10
 8003d52:	f001 fd3d 	bl	80057d0 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 8003d56:	2100      	movs	r1, #0
 8003d58:	200a      	movs	r0, #10
 8003d5a:	f7ff ff23 	bl	8003ba4 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f7ff ff4a 	bl	8003bf8 <ist_reg_read_by_mpu>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <ist8310_init+0x80>
    return 2;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e046      	b.n	8003dfc <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003d6e:	200a      	movs	r0, #10
 8003d70:	f001 fd2e 	bl	80057d0 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 8003d74:	2100      	movs	r1, #0
 8003d76:	200b      	movs	r0, #11
 8003d78:	f7ff ff14 	bl	8003ba4 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8003d7c:	200b      	movs	r0, #11
 8003d7e:	f7ff ff3b 	bl	8003bf8 <ist_reg_read_by_mpu>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <ist8310_init+0x9e>
    return 3;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e037      	b.n	8003dfc <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f001 fd1f 	bl	80057d0 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8003d92:	2124      	movs	r1, #36	; 0x24
 8003d94:	2041      	movs	r0, #65	; 0x41
 8003d96:	f7ff ff05 	bl	8003ba4 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 8003d9a:	2041      	movs	r0, #65	; 0x41
 8003d9c:	f7ff ff2c 	bl	8003bf8 <ist_reg_read_by_mpu>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b24      	cmp	r3, #36	; 0x24
 8003da4:	d001      	beq.n	8003daa <ist8310_init+0xbc>
    return 4;
 8003da6:	2304      	movs	r3, #4
 8003da8:	e028      	b.n	8003dfc <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003daa:	200a      	movs	r0, #10
 8003dac:	f001 fd10 	bl	80057d0 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8003db0:	21c0      	movs	r1, #192	; 0xc0
 8003db2:	2042      	movs	r0, #66	; 0x42
 8003db4:	f7ff fef6 	bl	8003ba4 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 8003db8:	2042      	movs	r0, #66	; 0x42
 8003dba:	f7ff ff1d 	bl	8003bf8 <ist_reg_read_by_mpu>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc2:	d001      	beq.n	8003dc8 <ist8310_init+0xda>
    return 5;
 8003dc4:	2305      	movs	r3, #5
 8003dc6:	e019      	b.n	8003dfc <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003dc8:	200a      	movs	r0, #10
 8003dca:	f001 fd01 	bl	80057d0 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	202a      	movs	r0, #42	; 0x2a
 8003dd2:	f7ff fe3f 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003dd6:	200a      	movs	r0, #10
 8003dd8:	f001 fcfa 	bl	80057d0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2034      	movs	r0, #52	; 0x34
 8003de0:	f7ff fe38 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(10);
 8003de4:	200a      	movs	r0, #10
 8003de6:	f001 fcf3 	bl	80057d0 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 8003dea:	2206      	movs	r2, #6
 8003dec:	2103      	movs	r1, #3
 8003dee:	200e      	movs	r0, #14
 8003df0:	f7ff ff27 	bl	8003c42 <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 8003df4:	2064      	movs	r0, #100	; 0x64
 8003df6:	f001 fceb 	bl	80057d0 <HAL_Delay>
  return 0;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 8003e08:	2206      	movs	r2, #6
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	2049      	movs	r0, #73	; 0x49
 8003e0e:	f7ff fe8d 	bl	8003b2c <mpu_read_regs>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 8003e22:	2201      	movs	r2, #1
 8003e24:	2104      	movs	r1, #4
 8003e26:	4829      	ldr	r0, [pc, #164]	; (8003ecc <mpu_device_init+0xb0>)
 8003e28:	f003 fa36 	bl	8007298 <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	206b      	movs	r0, #107	; 0x6b
 8003e30:	f7ff fe10 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(100);
 8003e34:	2064      	movs	r0, #100	; 0x64
 8003e36:	f001 fccb 	bl	80057d0 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 8003e3a:	2107      	movs	r1, #7
 8003e3c:	2068      	movs	r0, #104	; 0x68
 8003e3e:	f7ff fe09 	bl	8003a54 <mpu_write_reg>
  MPU_DELAY(100);
 8003e42:	2064      	movs	r0, #100	; 0x64
 8003e44:	f001 fcc4 	bl	80057d0 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 8003e48:	2075      	movs	r0, #117	; 0x75
 8003e4a:	f7ff fe3b 	bl	8003ac4 <mpu_read_reg>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d001      	beq.n	8003e58 <mpu_device_init+0x3c>
    return 1;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e035      	b.n	8003ec4 <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <mpu_device_init+0xb4>)
 8003e5a:	1d3c      	adds	r4, r7, #4
 8003e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5e:	c407      	stmia	r4!, {r0, r1, r2}
 8003e60:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e015      	b.n	8003e94 <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	443b      	add	r3, r7
 8003e70:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	3318      	adds	r3, #24
 8003e7a:	443b      	add	r3, r7
 8003e7c:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f7ff fde6 	bl	8003a54 <mpu_write_reg>
    MPU_DELAY(1);
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f001 fca1 	bl	80057d0 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3301      	adds	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	dde6      	ble.n	8003e68 <mpu_device_init+0x4c>
  }

  ist8310_init();
 8003e9a:	f7ff ff28 	bl	8003cee <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <mpu_device_init+0xb8>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 8003ea6:	f000 f817 	bl	8003ed8 <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <mpu_device_init+0xb8>)
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 8003eb2:	f000 f893 	bl	8003fdc <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <mpu_device_init+0xb8>)
 8003eb8:	789b      	ldrb	r3, [r3, #2]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 8003ebe:	f000 f913 	bl	80040e8 <get_ist_mag_offset>
  }

  return 0;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08015fa0 	.word	0x08015fa0
 8003ed4:	20000000 	.word	0x20000000

08003ed8 <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	e043      	b.n	8003f6c <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8003ee4:	220e      	movs	r2, #14
 8003ee6:	4939      	ldr	r1, [pc, #228]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003ee8:	203b      	movs	r0, #59	; 0x3b
 8003eea:	f7ff fe1f 	bl	8003b2c <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003ef0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003ef8:	7a1b      	ldrb	r3, [r3, #8]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	b219      	sxth	r1, r3
 8003efe:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003f00:	7a5b      	ldrb	r3, [r3, #9]
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	430b      	orrs	r3, r1
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f12:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f16:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003f1e:	7a9b      	ldrb	r3, [r3, #10]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	b219      	sxth	r1, r3
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003f26:	7adb      	ldrb	r3, [r3, #11]
 8003f28:	b21b      	sxth	r3, r3
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	b21b      	sxth	r3, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b21a      	sxth	r2, r3
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f38:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8003f3a:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003f44:	7b1b      	ldrb	r3, [r3, #12]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	b219      	sxth	r1, r3
 8003f4a:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <get_mpu_gyro_offset+0xf4>)
 8003f4c:	7b5b      	ldrb	r3, [r3, #13]
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	430b      	orrs	r3, r1
 8003f52:	b21b      	sxth	r3, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b21a      	sxth	r2, r3
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f5e:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 8003f60:	2002      	movs	r0, #2
 8003f62:	f001 fc35 	bl	80057d0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f72:	dbb7      	blt.n	8003ee4 <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f76:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <get_mpu_gyro_offset+0xfc>)
 8003f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003f80:	1152      	asrs	r2, r2, #5
 8003f82:	17db      	asrs	r3, r3, #31
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b21a      	sxth	r2, r3
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f8a:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003f8e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003f92:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <get_mpu_gyro_offset+0xfc>)
 8003f94:	fb82 1203 	smull	r1, r2, r2, r3
 8003f98:	1152      	asrs	r2, r2, #5
 8003f9a:	17db      	asrs	r3, r3, #31
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003fa2:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003fa6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <get_mpu_gyro_offset+0xfc>)
 8003fac:	fb82 1203 	smull	r1, r2, r2, r3
 8003fb0:	1152      	asrs	r2, r2, #5
 8003fb2:	17db      	asrs	r3, r3, #31
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	b21a      	sxth	r2, r3
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <get_mpu_gyro_offset+0xf8>)
 8003fba:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <get_mpu_gyro_offset+0x100>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20001738 	.word	0x20001738
 8003fd0:	20001748 	.word	0x20001748
 8003fd4:	1b4e81b5 	.word	0x1b4e81b5
 8003fd8:	20000000 	.word	0x20000000

08003fdc <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	e047      	b.n	8004078 <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8003fe8:	220e      	movs	r2, #14
 8003fea:	493b      	ldr	r1, [pc, #236]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8003fec:	203b      	movs	r0, #59	; 0x3b
 8003fee:	f7ff fd9d 	bl	8003b2c <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <get_mpu_acc_offset+0x100>)
 8003ff4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	b219      	sxth	r1, r3
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	b21b      	sxth	r3, r3
 8004008:	430b      	orrs	r3, r1
 800400a:	b21b      	sxth	r3, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	4413      	add	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	b21a      	sxth	r2, r3
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <get_mpu_acc_offset+0x100>)
 8004016:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <get_mpu_acc_offset+0x100>)
 800401a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	b219      	sxth	r1, r3
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 800402a:	78db      	ldrb	r3, [r3, #3]
 800402c:	b21b      	sxth	r3, r3
 800402e:	430b      	orrs	r3, r1
 8004030:	b21b      	sxth	r3, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	4413      	add	r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	b21a      	sxth	r2, r3
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <get_mpu_acc_offset+0x100>)
 800403c:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <get_mpu_acc_offset+0x100>)
 8004040:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004044:	b29a      	uxth	r2, r3
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8004048:	791b      	ldrb	r3, [r3, #4]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b219      	sxth	r1, r3
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <get_mpu_acc_offset+0xfc>)
 8004050:	795b      	ldrb	r3, [r3, #5]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8004058:	b29b      	uxth	r3, r3
 800405a:	b21b      	sxth	r3, r3
 800405c:	430b      	orrs	r3, r1
 800405e:	b21b      	sxth	r3, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	4413      	add	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	b21a      	sxth	r2, r3
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <get_mpu_acc_offset+0x100>)
 800406a:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 800406c:	2002      	movs	r0, #2
 800406e:	f001 fbaf 	bl	80057d0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3301      	adds	r3, #1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800407e:	dbb3      	blt.n	8003fe8 <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 8004080:	4b16      	ldr	r3, [pc, #88]	; (80040dc <get_mpu_acc_offset+0x100>)
 8004082:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <get_mpu_acc_offset+0x104>)
 8004088:	fb82 1203 	smull	r1, r2, r2, r3
 800408c:	1152      	asrs	r2, r2, #5
 800408e:	17db      	asrs	r3, r3, #31
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	b21a      	sxth	r2, r3
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <get_mpu_acc_offset+0x100>)
 8004096:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 8004098:	4b10      	ldr	r3, [pc, #64]	; (80040dc <get_mpu_acc_offset+0x100>)
 800409a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <get_mpu_acc_offset+0x104>)
 80040a0:	fb82 1203 	smull	r1, r2, r2, r3
 80040a4:	1152      	asrs	r2, r2, #5
 80040a6:	17db      	asrs	r3, r3, #31
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	b21a      	sxth	r2, r3
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <get_mpu_acc_offset+0x100>)
 80040ae:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <get_mpu_acc_offset+0x100>)
 80040b2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <get_mpu_acc_offset+0x104>)
 80040b8:	fb82 1203 	smull	r1, r2, r2, r3
 80040bc:	1152      	asrs	r2, r2, #5
 80040be:	17db      	asrs	r3, r3, #31
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	b21a      	sxth	r2, r3
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <get_mpu_acc_offset+0x100>)
 80040c6:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <get_mpu_acc_offset+0x108>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	705a      	strb	r2, [r3, #1]
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20001738 	.word	0x20001738
 80040dc:	20001748 	.word	0x20001748
 80040e0:	1b4e81b5 	.word	0x1b4e81b5
 80040e4:	20000000 	.word	0x20000000

080040e8 <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e062      	b.n	80041ba <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 80040f4:	4856      	ldr	r0, [pc, #344]	; (8004250 <get_ist_mag_offset+0x168>)
 80040f6:	f7ff fe83 	bl	8003e00 <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 80040fa:	4b56      	ldr	r3, [pc, #344]	; (8004254 <get_ist_mag_offset+0x16c>)
 80040fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfb8      	it	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800410c:	d24f      	bcs.n	80041ae <get_ist_mag_offset+0xc6>
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004110:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004114:	2b00      	cmp	r3, #0
 8004116:	bfb8      	it	lt
 8004118:	425b      	neglt	r3, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004120:	d245      	bcs.n	80041ae <get_ist_mag_offset+0xc6>
 8004122:	4b4c      	ldr	r3, [pc, #304]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004124:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfb8      	it	lt
 800412c:	425b      	neglt	r3, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004134:	d23b      	bcs.n	80041ae <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004138:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800413c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004140:	4293      	cmp	r3, r2
 8004142:	bfb8      	it	lt
 8004144:	4613      	movlt	r3, r2
 8004146:	b21b      	sxth	r3, r3
 8004148:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <get_ist_mag_offset+0x16c>)
 800414c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004150:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004154:	4293      	cmp	r3, r2
 8004156:	bfa8      	it	ge
 8004158:	4613      	movge	r3, r2
 800415a:	b21b      	sxth	r3, r3
 800415c:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 800415e:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004160:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004168:	4293      	cmp	r3, r2
 800416a:	bfb8      	it	lt
 800416c:	4613      	movlt	r3, r2
 800416e:	b21b      	sxth	r3, r3
 8004170:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004174:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800417c:	4293      	cmp	r3, r2
 800417e:	bfa8      	it	ge
 8004180:	4613      	movge	r3, r2
 8004182:	b21b      	sxth	r3, r3
 8004184:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 8004186:	4b33      	ldr	r3, [pc, #204]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004188:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800418c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004190:	4293      	cmp	r3, r2
 8004192:	bfb8      	it	lt
 8004194:	4613      	movlt	r3, r2
 8004196:	b21b      	sxth	r3, r3
 8004198:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <get_ist_mag_offset+0x16c>)
 800419c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80041a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	bfa8      	it	ge
 80041a8:	4613      	movge	r3, r2
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 80041ae:	2002      	movs	r0, #2
 80041b0:	f001 fb0e 	bl	80057d0 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3301      	adds	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f241 3287 	movw	r2, #4999	; 0x1387
 80041c0:	4293      	cmp	r3, r2
 80041c2:	dd97      	ble.n	80040f4 <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 80041c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e4:	ee17 3a90 	vmov	r3, s15
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <get_ist_mag_offset+0x16c>)
 80041ec:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 80041ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f8:	4413      	add	r3, r2
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004202:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	b21a      	sxth	r2, r3
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004216:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 8004218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800421c:	461a      	mov	r2, r3
 800421e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004222:	4413      	add	r3, r2
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800422c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004238:	ee17 3a90 	vmov	r3, s15
 800423c:	b21a      	sxth	r2, r3
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <get_ist_mag_offset+0x16c>)
 8004240:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <get_ist_mag_offset+0x170>)
 8004244:	2200      	movs	r2, #0
 8004246:	709a      	strb	r2, [r3, #2]
}
 8004248:	bf00      	nop
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20001754 	.word	0x20001754
 8004254:	20001748 	.word	0x20001748
 8004258:	20000000 	.word	0x20000000

0800425c <pwm_device_init>:
#include "tim.h"
#include "sys.h"
#include "drv_io.h"

void pwm_device_init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3,  TIM_CHANNEL_2); // ctrl imu temperature
 8004260:	2104      	movs	r1, #4
 8004262:	4808      	ldr	r0, [pc, #32]	; (8004284 <pwm_device_init+0x28>)
 8004264:	f005 fb4c 	bl	8009900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // beep
 8004268:	2100      	movs	r1, #0
 800426a:	4807      	ldr	r0, [pc, #28]	; (8004288 <pwm_device_init+0x2c>)
 800426c:	f005 fb48 	bl	8009900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1); // friction wheel
 8004270:	2100      	movs	r1, #0
 8004272:	4806      	ldr	r0, [pc, #24]	; (800428c <pwm_device_init+0x30>)
 8004274:	f005 fb44 	bl	8009900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 8004278:	210c      	movs	r1, #12
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <pwm_device_init+0x30>)
 800427c:	f005 fb40 	bl	8009900 <HAL_TIM_PWM_Start>
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	2000211c 	.word	0x2000211c
 8004288:	20002164 	.word	0x20002164
 800428c:	2000208c 	.word	0x2000208c

08004290 <beep_set_tune>:
  *fric_spd1 = LEFT_FRICTION;
  *fric_spd2 = RIGHT_FRICTION;
}

void beep_set_tune(uint16_t tune, uint16_t ctrl)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	460a      	mov	r2, r1
 800429a:	80fb      	strh	r3, [r7, #6]
 800429c:	4613      	mov	r3, r2
 800429e:	80bb      	strh	r3, [r7, #4]
  BEEP_TUNE = tune;
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <beep_set_tune+0x28>)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  BEEP_CTRL = ctrl;
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <beep_set_tune+0x28>)
 80042a8:	88bb      	ldrh	r3, [r7, #4]
 80042aa:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40001800 	.word	0x40001800

080042bc <beep_set_times>:
}

static uint8_t beep_times;

int32_t beep_set_times(uint8_t times)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  beep_times = times;
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <beep_set_times+0x20>)
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	7013      	strb	r3, [r2, #0]
  return 0;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2000176e 	.word	0x2000176e

080042e0 <beep_ctrl_times>:

int32_t beep_ctrl_times(void *argc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  static uint32_t beep_tick;
  static uint32_t times_tick;
  static uint8_t times;

  if(get_time_ms() - beep_tick > 3500)
 80042e8:	f7ff f940 	bl	800356c <get_time_ms>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b23      	ldr	r3, [pc, #140]	; (800437c <beep_ctrl_times+0x9c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d90e      	bls.n	800431a <beep_ctrl_times+0x3a>
  {
    times = beep_times;
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <beep_ctrl_times+0xa0>)
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <beep_ctrl_times+0xa4>)
 8004302:	701a      	strb	r2, [r3, #0]
    beep_tick = get_time_ms();
 8004304:	f7ff f932 	bl	800356c <get_time_ms>
 8004308:	4603      	mov	r3, r0
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <beep_ctrl_times+0x9c>)
 800430c:	6013      	str	r3, [r2, #0]
    times_tick = get_time_ms();
 800430e:	f7ff f92d 	bl	800356c <get_time_ms>
 8004312:	4603      	mov	r3, r0
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <beep_ctrl_times+0xa8>)
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e02a      	b.n	8004370 <beep_ctrl_times+0x90>
  }
  else if(times != 0)
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <beep_ctrl_times+0xa4>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d026      	beq.n	8004370 <beep_ctrl_times+0x90>
  {
    if(get_time_ms() - times_tick < 100)
 8004322:	f7ff f923 	bl	800356c <get_time_ms>
 8004326:	4602      	mov	r2, r0
 8004328:	4b17      	ldr	r3, [pc, #92]	; (8004388 <beep_ctrl_times+0xa8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b63      	cmp	r3, #99	; 0x63
 8004330:	d805      	bhi.n	800433e <beep_ctrl_times+0x5e>
    {
      beep_set_tune(500, 150);
 8004332:	2196      	movs	r1, #150	; 0x96
 8004334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004338:	f7ff ffaa 	bl	8004290 <beep_set_tune>
 800433c:	e018      	b.n	8004370 <beep_ctrl_times+0x90>
    }
    else if(get_time_ms() - times_tick < 300)
 800433e:	f7ff f915 	bl	800356c <get_time_ms>
 8004342:	4602      	mov	r2, r0
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <beep_ctrl_times+0xa8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800434e:	d204      	bcs.n	800435a <beep_ctrl_times+0x7a>
    {
      beep_set_tune(0, 0);
 8004350:	2100      	movs	r1, #0
 8004352:	2000      	movs	r0, #0
 8004354:	f7ff ff9c 	bl	8004290 <beep_set_tune>
 8004358:	e00a      	b.n	8004370 <beep_ctrl_times+0x90>
    }
    else
    {
      times--;
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <beep_ctrl_times+0xa4>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <beep_ctrl_times+0xa4>)
 8004364:	701a      	strb	r2, [r3, #0]
      times_tick = get_time_ms();
 8004366:	f7ff f901 	bl	800356c <get_time_ms>
 800436a:	4603      	mov	r3, r0
 800436c:	4a06      	ldr	r2, [pc, #24]	; (8004388 <beep_ctrl_times+0xa8>)
 800436e:	6013      	str	r3, [r2, #0]
    }
  }

  return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20001770 	.word	0x20001770
 8004380:	2000176e 	.word	0x2000176e
 8004384:	20001774 	.word	0x20001774
 8004388:	20001778 	.word	0x20001778

0800438c <led_toggle_300ms>:

int32_t led_toggle_300ms(void *argc)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  static uint32_t led_tick;

  if (get_time_ms() - led_tick > 300)
 8004394:	f7ff f8ea 	bl	800356c <get_time_ms>
 8004398:	4602      	mov	r2, r0
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <led_toggle_300ms+0x38>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043a4:	d908      	bls.n	80043b8 <led_toggle_300ms+0x2c>
  {
    LED_G_TOGGLE();
 80043a6:	2104      	movs	r1, #4
 80043a8:	4807      	ldr	r0, [pc, #28]	; (80043c8 <led_toggle_300ms+0x3c>)
 80043aa:	f002 ff8e 	bl	80072ca <HAL_GPIO_TogglePin>
    led_tick = get_time_ms();
 80043ae:	f7ff f8dd 	bl	800356c <get_time_ms>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a03      	ldr	r2, [pc, #12]	; (80043c4 <led_toggle_300ms+0x38>)
 80043b6:	6013      	str	r3, [r2, #0]
  }

  return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000177c 	.word	0x2000177c
 80043c8:	40021800 	.word	0x40021800

080043cc <HAL_UART_RxHalfCpltCallback>:
  m_obj->call_back_f = fun;
  return;
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if (huart == &huart6)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_UART_RxHalfCpltCallback+0x24>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d104      	bne.n	80043e6 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_HALF);
 80043dc:	2101      	movs	r1, #1
 80043de:	4805      	ldr	r0, [pc, #20]	; (80043f4 <HAL_UART_RxHalfCpltCallback+0x28>)
 80043e0:	f000 f8c8 	bl	8004574 <usart_rec_to_buff>
  }

  return;
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
}
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200021ac 	.word	0x200021ac
 80043f4:	20001f80 	.word	0x20001f80

080043f8 <usart6_manage_init>:
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_UART);
  }
}

void usart6_manage_init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  usart6_manage_obj.rx_buffer = usart6_rx_buff;
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <usart6_manage_init+0x70>)
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <usart6_manage_init+0x74>)
 8004400:	60da      	str	r2, [r3, #12]
  usart6_manage_obj.rx_buffer_size = USART6_RX_BUFFER_SIZE;
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <usart6_manage_init+0x70>)
 8004404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004408:	811a      	strh	r2, [r3, #8]
  usart6_manage_obj.dma_h = &hdma_usart6_rx;
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <usart6_manage_init+0x70>)
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <usart6_manage_init+0x78>)
 800440e:	605a      	str	r2, [r3, #4]
  usart6_manage_obj.uart_h = &huart6;
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <usart6_manage_init+0x70>)
 8004412:	4a18      	ldr	r2, [pc, #96]	; (8004474 <usart6_manage_init+0x7c>)
 8004414:	601a      	str	r2, [r3, #0]
  usart6_manage_obj.tx_fifo_buffer = usart6_tx_fifo_buff;
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <usart6_manage_init+0x70>)
 8004418:	4a17      	ldr	r2, [pc, #92]	; (8004478 <usart6_manage_init+0x80>)
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
  usart6_manage_obj.tx_fifo_size = USART6_TX_FIFO_SIZE;
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <usart6_manage_init+0x70>)
 800441e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004422:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart6_manage_obj.tx_buffer_size = USART6_TX_BUFFER_SIZE;
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <usart6_manage_init+0x70>)
 8004426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442a:	839a      	strh	r2, [r3, #28]
  usart6_manage_obj.tx_buffer = usart6_tx_buff;
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <usart6_manage_init+0x70>)
 800442e:	4a13      	ldr	r2, [pc, #76]	; (800447c <usart6_manage_init+0x84>)
 8004430:	619a      	str	r2, [r3, #24]
  usart6_manage_obj.is_sending = 0;
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <usart6_manage_init+0x70>)
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart6_manage_obj.tx_fifo), usart6_tx_fifo_buff, USART6_TX_FIFO_SIZE);
 800443a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800443e:	490e      	ldr	r1, [pc, #56]	; (8004478 <usart6_manage_init+0x80>)
 8004440:	480f      	ldr	r0, [pc, #60]	; (8004480 <usart6_manage_init+0x88>)
 8004442:	f00f f98c 	bl	801375e <fifo_s_init>

  HAL_UART_Receive_DMA(&huart6, usart6_rx_buff, USART6_RX_BUFFER_SIZE);
 8004446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <usart6_manage_init+0x74>)
 800444c:	4809      	ldr	r0, [pc, #36]	; (8004474 <usart6_manage_init+0x7c>)
 800444e:	f006 fa7f 	bl	800a950 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <usart6_manage_init+0x7c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <usart6_manage_init+0x7c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0210 	orr.w	r2, r2, #16
 8004460:	60da      	str	r2, [r3, #12]
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20001f80 	.word	0x20001f80
 800446c:	20001780 	.word	0x20001780
 8004470:	200021f4 	.word	0x200021f4
 8004474:	200021ac 	.word	0x200021ac
 8004478:	20001b80 	.word	0x20001b80
 800447c:	20001980 	.word	0x20001980
 8004480:	20001fa0 	.word	0x20001fa0

08004484 <usart6_transmit>:

  return 0;
}

void usart6_transmit(uint8_t *buff, uint16_t len)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
  usart_transmit(&usart6_manage_obj, buff, len);
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	461a      	mov	r2, r3
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4803      	ldr	r0, [pc, #12]	; (80044a4 <usart6_transmit+0x20>)
 8004498:	f000 f806 	bl	80044a8 <usart_transmit>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20001f80 	.word	0x20001f80

080044a8 <usart_transmit>:

UART_Err usart_transmit(usart_manage_obj_t *m_obj, uint8_t *buf, uint16_t len)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  uint16_t to_send_len;
  uint16_t to_tx_fifo_len;

  if (m_obj->is_sending == 0)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d122      	bne.n	8004506 <usart_transmit+0x5e>
  {
    if (len < m_obj->tx_buffer_size)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8b9b      	ldrh	r3, [r3, #28]
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d204      	bcs.n	80044d4 <usart_transmit+0x2c>
    {
      to_send_len = len;
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	82bb      	strh	r3, [r7, #20]
 80044d2:	e027      	b.n	8004524 <usart_transmit+0x7c>
    }
    else if (len < m_obj->tx_buffer_size + m_obj->tx_fifo_size)
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8b9b      	ldrh	r3, [r3, #28]
 80044da:	4619      	mov	r1, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80044e0:	440b      	add	r3, r1
 80044e2:	429a      	cmp	r2, r3
 80044e4:	da08      	bge.n	80044f8 <usart_transmit+0x50>
    {
      to_send_len = m_obj->tx_buffer_size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8b9b      	ldrh	r3, [r3, #28]
 80044ea:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len - m_obj->tx_buffer_size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8b9b      	ldrh	r3, [r3, #28]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	82bb      	strh	r3, [r7, #20]
 80044f6:	e015      	b.n	8004524 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = m_obj->tx_buffer_size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8b9b      	ldrh	r3, [r3, #28]
 80044fc:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004502:	82bb      	strh	r3, [r7, #20]
 8004504:	e00e      	b.n	8004524 <usart_transmit+0x7c>
    }
  }
  else
  {
    if (len < m_obj->tx_fifo_size)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	429a      	cmp	r2, r3
 800450e:	d204      	bcs.n	800451a <usart_transmit+0x72>
    {
      to_send_len = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len;
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	82bb      	strh	r3, [r7, #20]
 8004518:	e004      	b.n	8004524 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004522:	82bb      	strh	r3, [r7, #20]
    }
  }

  if (to_send_len > 0)
 8004524:	8afb      	ldrh	r3, [r7, #22]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d012      	beq.n	8004550 <usart_transmit+0xa8>
  {
    memcpy(m_obj->tx_buffer, buf, to_send_len);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	8afa      	ldrh	r2, [r7, #22]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f010 fa4c 	bl	80149d0 <memcpy>
    m_obj->is_sending = 1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, to_send_len);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	8afa      	ldrh	r2, [r7, #22]
 800454a:	4619      	mov	r1, r3
 800454c:	f006 f990 	bl	800a870 <HAL_UART_Transmit_DMA>
  }
  if (to_tx_fifo_len > 0)
 8004550:	8abb      	ldrh	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <usart_transmit+0xc2>
  {
    fifo_s_puts(&(m_obj->tx_fifo), (char *)(buf) + to_send_len, to_tx_fifo_len);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f103 0020 	add.w	r0, r3, #32
 800455c:	8afb      	ldrh	r3, [r7, #22]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	8aba      	ldrh	r2, [r7, #20]
 8004564:	4619      	mov	r1, r3
 8004566:	f00f f91c 	bl	80137a2 <fifo_s_puts>
  }

  return ERR_NORAML;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <usart_rec_to_buff>:
  }
  return;
}

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8a1b      	ldrh	r3, [r3, #16]
 8004590:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->NDTR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	891a      	ldrh	r2, [r3, #8]
 80045ac:	8a7b      	ldrh	r3, [r7, #18]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_HALF)
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d103      	bne.n	80045c0 <usart_rec_to_buff+0x4c>
  {
    read_end_ptr = m_obj->rx_buffer_size / 2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	891b      	ldrh	r3, [r3, #8]
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d102      	bne.n	80045cc <usart_rec_to_buff+0x58>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	891b      	ldrh	r3, [r3, #8]
 80045ca:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8a1b      	ldrh	r3, [r3, #16]
 80045d0:	8bfa      	ldrh	r2, [r7, #30]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <usart_rec_to_buff+0x82>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 80045de:	8b3b      	ldrh	r3, [r7, #24]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	8bba      	ldrh	r2, [r7, #28]
 80045ec:	4611      	mov	r1, r2
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	4798      	blx	r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8a1b      	ldrh	r3, [r3, #16]
 80045fa:	461a      	mov	r2, r3
 80045fc:	8bbb      	ldrh	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	8912      	ldrh	r2, [r2, #8]
 8004604:	fb93 f1f2 	sdiv	r1, r3, r2
 8004608:	fb01 f202 	mul.w	r2, r1, r2
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	821a      	strh	r2, [r3, #16]

  return;
 8004614:	bf00      	nop
}
 8004616:	3720      	adds	r7, #32
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <MX_CAN1_Init+0x64>)
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <MX_CAN1_Init+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <MX_CAN1_Init+0x64>)
 8004628:	2207      	movs	r2, #7
 800462a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800462c:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MX_CAN1_Init+0x64>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <MX_CAN1_Init+0x64>)
 8004634:	2200      	movs	r2, #0
 8004636:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <MX_CAN1_Init+0x64>)
 800463a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800463e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <MX_CAN1_Init+0x64>)
 8004642:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004646:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <MX_CAN1_Init+0x64>)
 800464a:	2200      	movs	r2, #0
 800464c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <MX_CAN1_Init+0x64>)
 8004650:	2200      	movs	r2, #0
 8004652:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <MX_CAN1_Init+0x64>)
 8004656:	2200      	movs	r2, #0
 8004658:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <MX_CAN1_Init+0x64>)
 800465c:	2200      	movs	r2, #0
 800465e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <MX_CAN1_Init+0x64>)
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <MX_CAN1_Init+0x64>)
 8004668:	2201      	movs	r2, #1
 800466a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800466c:	4804      	ldr	r0, [pc, #16]	; (8004680 <MX_CAN1_Init+0x64>)
 800466e:	f001 f8d3 	bl	8005818 <HAL_CAN_Init>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004678:	f000 fb1e 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800467c:	bf00      	nop
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20001fc0 	.word	0x20001fc0
 8004684:	40006400 	.word	0x40006400

08004688 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004690:	f107 0314 	add.w	r3, r7, #20
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <HAL_CAN_MspInit+0xa4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d13b      	bne.n	8004722 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_CAN_MspInit+0xa8>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046e2:	2303      	movs	r3, #3
 80046e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ee:	2303      	movs	r3, #3
 80046f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80046f2:	2309      	movs	r3, #9
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046f6:	f107 0314 	add.w	r3, r7, #20
 80046fa:	4619      	mov	r1, r3
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <HAL_CAN_MspInit+0xac>)
 80046fe:	f002 fc07 	bl	8006f10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004702:	2200      	movs	r2, #0
 8004704:	2105      	movs	r1, #5
 8004706:	2013      	movs	r0, #19
 8004708:	f001 ffd6 	bl	80066b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800470c:	2013      	movs	r0, #19
 800470e:	f001 ffef 	bl	80066f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004712:	2200      	movs	r2, #0
 8004714:	2105      	movs	r1, #5
 8004716:	2014      	movs	r0, #20
 8004718:	f001 ffce 	bl	80066b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800471c:	2014      	movs	r0, #20
 800471e:	f001 ffe7 	bl	80066f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8004722:	bf00      	nop
 8004724:	3728      	adds	r7, #40	; 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40006400 	.word	0x40006400
 8004730:	40023800 	.word	0x40023800
 8004734:	40020c00 	.word	0x40020c00

08004738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <MX_DMA_Init+0x4c>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <MX_DMA_Init+0x4c>)
 8004748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800474c:	6313      	str	r3, [r2, #48]	; 0x30
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <MX_DMA_Init+0x4c>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2105      	movs	r1, #5
 800475e:	2039      	movs	r0, #57	; 0x39
 8004760:	f001 ffaa 	bl	80066b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004764:	2039      	movs	r0, #57	; 0x39
 8004766:	f001 ffc3 	bl	80066f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2105      	movs	r1, #5
 800476e:	2045      	movs	r0, #69	; 0x45
 8004770:	f001 ffa2 	bl	80066b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004774:	2045      	movs	r0, #69	; 0x45
 8004776:	f001 ffbb 	bl	80066f0 <HAL_NVIC_EnableIRQ>

}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800

08004788 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80047a2:	bf00      	nop
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80047ac:	b5b0      	push	{r4, r5, r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <MX_FREERTOS_Init+0x2c>)
 80047b4:	1d3c      	adds	r4, r7, #4
 80047b6:	461d      	mov	r5, r3
 80047b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f00a fd28 	bl	800f21a <osThreadCreate>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a03      	ldr	r2, [pc, #12]	; (80047dc <MX_FREERTOS_Init+0x30>)
 80047ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bdb0      	pop	{r4, r5, r7, pc}
 80047d8:	08015fbc 	.word	0x08015fbc
 80047dc:	20001fe8 	.word	0x20001fe8

080047e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80047e8:	f00c fa6c 	bl	8010cc4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80047ec:	2001      	movs	r0, #1
 80047ee:	f00a fd3b 	bl	800f268 <osDelay>
 80047f2:	e7fb      	b.n	80047ec <StartDefaultTask+0xc>

080047f4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	4bb3      	ldr	r3, [pc, #716]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4ab2      	ldr	r2, [pc, #712]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004814:	f043 0310 	orr.w	r3, r3, #16
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4bb0      	ldr	r3, [pc, #704]	; (8004adc <MX_GPIO_Init+0x2e8>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	4bac      	ldr	r3, [pc, #688]	; (8004adc <MX_GPIO_Init+0x2e8>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4aab      	ldr	r2, [pc, #684]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
 8004836:	4ba9      	ldr	r3, [pc, #676]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	4ba5      	ldr	r3, [pc, #660]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4aa4      	ldr	r2, [pc, #656]	; (8004adc <MX_GPIO_Init+0x2e8>)
 800484c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004850:	6313      	str	r3, [r2, #48]	; 0x30
 8004852:	4ba2      	ldr	r3, [pc, #648]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	4b9e      	ldr	r3, [pc, #632]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a9d      	ldr	r2, [pc, #628]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b9b      	ldr	r3, [pc, #620]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b97      	ldr	r3, [pc, #604]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a96      	ldr	r2, [pc, #600]	; (8004adc <MX_GPIO_Init+0x2e8>)
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
 800488a:	4b94      	ldr	r3, [pc, #592]	; (8004adc <MX_GPIO_Init+0x2e8>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b90      	ldr	r3, [pc, #576]	; (8004adc <MX_GPIO_Init+0x2e8>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	4a8f      	ldr	r2, [pc, #572]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6313      	str	r3, [r2, #48]	; 0x30
 80048a6:	4b8d      	ldr	r3, [pc, #564]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	4b89      	ldr	r3, [pc, #548]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	4a88      	ldr	r2, [pc, #544]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6313      	str	r3, [r2, #48]	; 0x30
 80048c2:	4b86      	ldr	r3, [pc, #536]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	4b82      	ldr	r3, [pc, #520]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a81      	ldr	r2, [pc, #516]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	6313      	str	r3, [r2, #48]	; 0x30
 80048de:	4b7f      	ldr	r3, [pc, #508]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4b7b      	ldr	r3, [pc, #492]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a7a      	ldr	r2, [pc, #488]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b78      	ldr	r3, [pc, #480]	; (8004adc <MX_GPIO_Init+0x2e8>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	f640 0104 	movw	r1, #2052	; 0x804
 800490c:	4874      	ldr	r0, [pc, #464]	; (8004ae0 <MX_GPIO_Init+0x2ec>)
 800490e:	f002 fcc3 	bl	8007298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 8004912:	2200      	movs	r2, #0
 8004914:	213c      	movs	r1, #60	; 0x3c
 8004916:	4873      	ldr	r0, [pc, #460]	; (8004ae4 <MX_GPIO_Init+0x2f0>)
 8004918:	f002 fcbe 	bl	8007298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8004922:	4871      	ldr	r0, [pc, #452]	; (8004ae8 <MX_GPIO_Init+0x2f4>)
 8004924:	f002 fcb8 	bl	8007298 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GF14_Pin, GPIO_PIN_RESET);
 8004928:	2200      	movs	r2, #0
 800492a:	f244 0140 	movw	r1, #16448	; 0x4040
 800492e:	486f      	ldr	r0, [pc, #444]	; (8004aec <MX_GPIO_Init+0x2f8>)
 8004930:	f002 fcb2 	bl	8007298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 8004934:	2200      	movs	r2, #0
 8004936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800493a:	486d      	ldr	r0, [pc, #436]	; (8004af0 <MX_GPIO_Init+0x2fc>)
 800493c:	f002 fcac 	bl	8007298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8004940:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004946:	2303      	movs	r3, #3
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800494e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004952:	4619      	mov	r1, r3
 8004954:	4862      	ldr	r0, [pc, #392]	; (8004ae0 <MX_GPIO_Init+0x2ec>)
 8004956:	f002 fadb 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_R_Pin;
 800495a:	f640 0304 	movw	r3, #2052	; 0x804
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004960:	2301      	movs	r3, #1
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004968:	2300      	movs	r3, #0
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800496c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004970:	4619      	mov	r1, r3
 8004972:	485b      	ldr	r0, [pc, #364]	; (8004ae0 <MX_GPIO_Init+0x2ec>)
 8004974:	f002 facc 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB13
                           PB1 PB0 PB10 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8004978:	f64f 73db 	movw	r3, #65499	; 0xffdb
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800497e:	2303      	movs	r3, #3
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	2300      	movs	r3, #0
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498a:	4619      	mov	r1, r3
 800498c:	4859      	ldr	r0, [pc, #356]	; (8004af4 <MX_GPIO_Init+0x300>)
 800498e:	f002 fabf 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 8004992:	f64b 4301 	movw	r3, #48129	; 0xbc01
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004998:	2303      	movs	r3, #3
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049a4:	4619      	mov	r1, r3
 80049a6:	4850      	ldr	r0, [pc, #320]	; (8004ae8 <MX_GPIO_Init+0x2f4>)
 80049a8:	f002 fab2 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80049ac:	f64e 73bc 	movw	r3, #61372	; 0xefbc
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049b2:	2303      	movs	r3, #3
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049be:	4619      	mov	r1, r3
 80049c0:	484b      	ldr	r0, [pc, #300]	; (8004af0 <MX_GPIO_Init+0x2fc>)
 80049c2:	f002 faa5 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80049c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049cc:	2303      	movs	r3, #3
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d8:	4619      	mov	r1, r3
 80049da:	4847      	ldr	r0, [pc, #284]	; (8004af8 <MX_GPIO_Init+0x304>)
 80049dc:	f002 fa98 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80049e0:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049e6:	2303      	movs	r3, #3
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f2:	4619      	mov	r1, r3
 80049f4:	4841      	ldr	r0, [pc, #260]	; (8004afc <MX_GPIO_Init+0x308>)
 80049f6:	f002 fa8b 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049fe:	2300      	movs	r3, #0
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 8004a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4838      	ldr	r0, [pc, #224]	; (8004af0 <MX_GPIO_Init+0x2fc>)
 8004a0e:	f002 fa7f 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8004a12:	23e4      	movs	r3, #228	; 0xe4
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a22:	4619      	mov	r1, r3
 8004a24:	4836      	ldr	r0, [pc, #216]	; (8004b00 <MX_GPIO_Init+0x30c>)
 8004a26:	f002 fa73 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 8004a2a:	f640 731b 	movw	r3, #3867	; 0xf1b
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a30:	2303      	movs	r3, #3
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4830      	ldr	r0, [pc, #192]	; (8004b00 <MX_GPIO_Init+0x30c>)
 8004a40:	f002 fa66 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8004a44:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a56:	4619      	mov	r1, r3
 8004a58:	4822      	ldr	r0, [pc, #136]	; (8004ae4 <MX_GPIO_Init+0x2f0>)
 8004a5a:	f002 fa59 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8004a5e:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a64:	2303      	movs	r3, #3
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a70:	4619      	mov	r1, r3
 8004a72:	481e      	ldr	r0, [pc, #120]	; (8004aec <MX_GPIO_Init+0x2f8>)
 8004a74:	f002 fa4c 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8004a78:	233c      	movs	r3, #60	; 0x3c
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a84:	2300      	movs	r3, #0
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4815      	ldr	r0, [pc, #84]	; (8004ae4 <MX_GPIO_Init+0x2f0>)
 8004a90:	f002 fa3e 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8004a94:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aaa:	4619      	mov	r1, r3
 8004aac:	480e      	ldr	r0, [pc, #56]	; (8004ae8 <MX_GPIO_Init+0x2f4>)
 8004aae:	f002 fa2f 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GF14_Pin;
 8004ab2:	f244 0340 	movw	r3, #16448	; 0x4040
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4808      	ldr	r0, [pc, #32]	; (8004aec <MX_GPIO_Init+0x2f8>)
 8004acc:	f002 fa20 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8004ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004ada:	e013      	b.n	8004b04 <MX_GPIO_Init+0x310>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40021c00 	.word	0x40021c00
 8004ae8:	40021800 	.word	0x40021800
 8004aec:	40021400 	.word	0x40021400
 8004af0:	40020c00 	.word	0x40020c00
 8004af4:	40020400 	.word	0x40020400
 8004af8:	40020800 	.word	0x40020800
 8004afc:	40020000 	.word	0x40020000
 8004b00:	40022000 	.word	0x40022000
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b06:	2301      	movs	r3, #1
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8004b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4816      	ldr	r0, [pc, #88]	; (8004b6c <MX_GPIO_Init+0x378>)
 8004b12:	f002 f9fd 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004b16:	2304      	movs	r3, #4
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b26:	4619      	mov	r1, r3
 8004b28:	4811      	ldr	r0, [pc, #68]	; (8004b70 <MX_GPIO_Init+0x37c>)
 8004b2a:	f002 f9f1 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8004b2e:	230f      	movs	r3, #15
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480c      	ldr	r0, [pc, #48]	; (8004b74 <MX_GPIO_Init+0x380>)
 8004b42:	f002 f9e5 	bl	8006f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 8004b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	2300      	movs	r3, #0
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8004b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4806      	ldr	r0, [pc, #24]	; (8004b78 <MX_GPIO_Init+0x384>)
 8004b60:	f002 f9d6 	bl	8006f10 <HAL_GPIO_Init>

}
 8004b64:	bf00      	nop
 8004b66:	3738      	adds	r7, #56	; 0x38
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021400 	.word	0x40021400
 8004b70:	40020400 	.word	0x40020400
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020c00 	.word	0x40020c00

08004b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b80:	f000 fde4 	bl	800574c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b84:	f000 f81c 	bl	8004bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b88:	f7ff fe34 	bl	80047f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b8c:	f7ff fdd4 	bl	8004738 <MX_DMA_Init>
  MX_SPI5_Init();
 8004b90:	f000 f898 	bl	8004cc4 <MX_SPI5_Init>
  MX_CAN1_Init();
 8004b94:	f7ff fd42 	bl	800461c <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8004b98:	f000 fcce 	bl	8005538 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004b9c:	f000 fa30 	bl	8005000 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004ba0:	f000 fabe 	bl	8005120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004ba4:	f000 fb08 	bl	80051b8 <MX_TIM3_Init>
  MX_TIM12_Init();
 8004ba8:	f000 fb60 	bl	800526c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8004bac:	f7fc fd68 	bl	8001680 <hw_init>
  task_init();
 8004bb0:	f7fc fd84 	bl	80016bc <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004bb4:	f7ff fdfa 	bl	80047ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004bb8:	f00a fb18 	bl	800f1ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004bbc:	e7fe      	b.n	8004bbc <main+0x40>
	...

08004bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b094      	sub	sp, #80	; 0x50
 8004bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bc6:	f107 0320 	add.w	r3, r7, #32
 8004bca:	2230      	movs	r2, #48	; 0x30
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f00f fe79 	bl	80148c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <SystemClock_Config+0xcc>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <SystemClock_Config+0xcc>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <SystemClock_Config+0xcc>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c00:	2300      	movs	r3, #0
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <SystemClock_Config+0xd0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <SystemClock_Config+0xd0>)
 8004c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <SystemClock_Config+0xd0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c26:	2302      	movs	r3, #2
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004c30:	2306      	movs	r3, #6
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c34:	23a8      	movs	r3, #168	; 0xa8
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c3c:	2307      	movs	r3, #7
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c40:	f107 0320 	add.w	r3, r7, #32
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 fdab 	bl	80087a0 <HAL_RCC_OscConfig>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004c50:	f000 f832 	bl	8004cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c54:	230f      	movs	r3, #15
 8004c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	2105      	movs	r1, #5
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 f80c 	bl	8008c90 <HAL_RCC_ClockConfig>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004c7e:	f000 f81b 	bl	8004cb8 <Error_Handler>
  }
}
 8004c82:	bf00      	nop
 8004c84:	3750      	adds	r7, #80	; 0x50
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000

08004c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ca6:	f000 fd73 	bl	8005790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40000c00 	.word	0x40000c00

08004cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004cbc:	b672      	cpsid	i
}
 8004cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cc0:	e7fe      	b.n	8004cc0 <Error_Handler+0x8>
	...

08004cc4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <MX_SPI5_Init+0x68>)
 8004ccc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004cce:	4b16      	ldr	r3, [pc, #88]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cf8:	2230      	movs	r2, #48	; 0x30
 8004cfa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004d10:	220a      	movs	r2, #10
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004d14:	4804      	ldr	r0, [pc, #16]	; (8004d28 <MX_SPI5_Init+0x64>)
 8004d16:	f004 f9cd 	bl	80090b4 <HAL_SPI_Init>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004d20:	f7ff ffca 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20001fec 	.word	0x20001fec
 8004d2c:	40015000 	.word	0x40015000

08004d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	605a      	str	r2, [r3, #4]
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_SPI_MspInit+0x84>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d12c      	bne.n	8004dac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d60:	6453      	str	r3, [r2, #68]	; 0x44
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d78:	f043 0320 	orr.w	r3, r3, #32
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8004d8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2302      	movs	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004d9c:	2305      	movs	r3, #5
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	4805      	ldr	r0, [pc, #20]	; (8004dbc <HAL_SPI_MspInit+0x8c>)
 8004da8:	f002 f8b2 	bl	8006f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004dac:	bf00      	nop
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40015000 	.word	0x40015000
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40021400 	.word	0x40021400

08004dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_MspInit+0x54>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	4a11      	ldr	r2, [pc, #68]	; (8004e14 <HAL_MspInit+0x54>)
 8004dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_MspInit+0x54>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dde:	607b      	str	r3, [r7, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_MspInit+0x54>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <HAL_MspInit+0x54>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6413      	str	r3, [r2, #64]	; 0x40
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_MspInit+0x54>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	210f      	movs	r1, #15
 8004e02:	f06f 0001 	mvn.w	r0, #1
 8004e06:	f001 fc57 	bl	80066b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	; 0x38
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	4b33      	ldr	r3, [pc, #204]	; (8004efc <HAL_InitTick+0xe4>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	4a32      	ldr	r2, [pc, #200]	; (8004efc <HAL_InitTick+0xe4>)
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	6413      	str	r3, [r2, #64]	; 0x40
 8004e38:	4b30      	ldr	r3, [pc, #192]	; (8004efc <HAL_InitTick+0xe4>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e44:	f107 0210 	add.w	r2, r7, #16
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 f8fe 	bl	8009050 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e5e:	f004 f8cf 	bl	8009000 <HAL_RCC_GetPCLK1Freq>
 8004e62:	6378      	str	r0, [r7, #52]	; 0x34
 8004e64:	e004      	b.n	8004e70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e66:	f004 f8cb 	bl	8009000 <HAL_RCC_GetPCLK1Freq>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <HAL_InitTick+0xe8>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	0c9b      	lsrs	r3, r3, #18
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004e7e:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <HAL_InitTick+0xec>)
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <HAL_InitTick+0xf0>)
 8004e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <HAL_InitTick+0xec>)
 8004e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e8a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <HAL_InitTick+0xec>)
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <HAL_InitTick+0xec>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_InitTick+0xec>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e9e:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <HAL_InitTick+0xec>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8004ea4:	4817      	ldr	r0, [pc, #92]	; (8004f04 <HAL_InitTick+0xec>)
 8004ea6:	f004 fc1b 	bl	80096e0 <HAL_TIM_Base_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8004eb8:	4812      	ldr	r0, [pc, #72]	; (8004f04 <HAL_InitTick+0xec>)
 8004eba:	f004 fc61 	bl	8009780 <HAL_TIM_Base_Start_IT>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d111      	bne.n	8004ef0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ecc:	2032      	movs	r0, #50	; 0x32
 8004ece:	f001 fc0f 	bl	80066f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d808      	bhi.n	8004eea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	2032      	movs	r0, #50	; 0x32
 8004ede:	f001 fbeb 	bl	80066b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <HAL_InitTick+0xf4>)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e002      	b.n	8004ef0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3738      	adds	r7, #56	; 0x38
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	431bde83 	.word	0x431bde83
 8004f04:	20002044 	.word	0x20002044
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	20000008 	.word	0x20000008

08004f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f14:	e7fe      	b.n	8004f14 <NMI_Handler+0x4>

08004f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f1a:	e7fe      	b.n	8004f1a <HardFault_Handler+0x4>

08004f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f20:	e7fe      	b.n	8004f20 <MemManage_Handler+0x4>

08004f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f26:	e7fe      	b.n	8004f26 <BusFault_Handler+0x4>

08004f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f2c:	e7fe      	b.n	8004f2c <UsageFault_Handler+0x4>

08004f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004f40:	4802      	ldr	r0, [pc, #8]	; (8004f4c <CAN1_TX_IRQHandler+0x10>)
 8004f42:	f001 f8d6 	bl	80060f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20001fc0 	.word	0x20001fc0

08004f50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004f54:	4802      	ldr	r0, [pc, #8]	; (8004f60 <CAN1_RX0_IRQHandler+0x10>)
 8004f56:	f001 f8cc 	bl	80060f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20001fc0 	.word	0x20001fc0

08004f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f68:	4802      	ldr	r0, [pc, #8]	; (8004f74 <TIM2_IRQHandler+0x10>)
 8004f6a:	f004 fd91 	bl	8009a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200020d4 	.word	0x200020d4

08004f78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f7c:	4802      	ldr	r0, [pc, #8]	; (8004f88 <TIM5_IRQHandler+0x10>)
 8004f7e:	f004 fd87 	bl	8009a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20002044 	.word	0x20002044

08004f8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004f90:	4802      	ldr	r0, [pc, #8]	; (8004f9c <DMA2_Stream1_IRQHandler+0x10>)
 8004f92:	f001 fd53 	bl	8006a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200021f4 	.word	0x200021f4

08004fa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004fa4:	4802      	ldr	r0, [pc, #8]	; (8004fb0 <OTG_FS_IRQHandler+0x10>)
 8004fa6:	f002 faee 	bl	8007586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20007d18 	.word	0x20007d18

08004fb4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <DMA2_Stream6_IRQHandler+0x10>)
 8004fba:	f001 fd3f 	bl	8006a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20002254 	.word	0x20002254

08004fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004fcc:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <USART6_IRQHandler+0x10>)
 8004fce:	f005 fce5 	bl	800a99c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200021ac 	.word	0x200021ac

08004fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <SystemInit+0x20>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <SystemInit+0x20>)
 8004fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b092      	sub	sp, #72	; 0x48
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	611a      	str	r2, [r3, #16]
 8005020:	615a      	str	r2, [r3, #20]
 8005022:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	2220      	movs	r2, #32
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f00f fc4b 	bl	80148c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005030:	4b39      	ldr	r3, [pc, #228]	; (8005118 <MX_TIM1_Init+0x118>)
 8005032:	4a3a      	ldr	r2, [pc, #232]	; (800511c <MX_TIM1_Init+0x11c>)
 8005034:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8005036:	4b38      	ldr	r3, [pc, #224]	; (8005118 <MX_TIM1_Init+0x118>)
 8005038:	2210      	movs	r2, #16
 800503a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800503c:	4b36      	ldr	r3, [pc, #216]	; (8005118 <MX_TIM1_Init+0x118>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8005042:	4b35      	ldr	r3, [pc, #212]	; (8005118 <MX_TIM1_Init+0x118>)
 8005044:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005048:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800504a:	4b33      	ldr	r3, [pc, #204]	; (8005118 <MX_TIM1_Init+0x118>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <MX_TIM1_Init+0x118>)
 8005052:	2200      	movs	r2, #0
 8005054:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <MX_TIM1_Init+0x118>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800505c:	482e      	ldr	r0, [pc, #184]	; (8005118 <MX_TIM1_Init+0x118>)
 800505e:	f004 fbff 	bl	8009860 <HAL_TIM_PWM_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005068:	f7ff fe26 	bl	8004cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800506c:	2300      	movs	r3, #0
 800506e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005074:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005078:	4619      	mov	r1, r3
 800507a:	4827      	ldr	r0, [pc, #156]	; (8005118 <MX_TIM1_Init+0x118>)
 800507c:	f005 fac6 	bl	800a60c <HAL_TIMEx_MasterConfigSynchronization>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005086:	f7ff fe17 	bl	8004cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800508a:	2360      	movs	r3, #96	; 0x60
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800508e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005098:	2300      	movs	r3, #0
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80050a0:	2300      	movs	r3, #0
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80050a4:	2300      	movs	r3, #0
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ac:	2200      	movs	r2, #0
 80050ae:	4619      	mov	r1, r3
 80050b0:	4819      	ldr	r0, [pc, #100]	; (8005118 <MX_TIM1_Init+0x118>)
 80050b2:	f004 fddd 	bl	8009c70 <HAL_TIM_PWM_ConfigChannel>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80050bc:	f7ff fdfc 	bl	8004cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80050c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c4:	220c      	movs	r2, #12
 80050c6:	4619      	mov	r1, r3
 80050c8:	4813      	ldr	r0, [pc, #76]	; (8005118 <MX_TIM1_Init+0x118>)
 80050ca:	f004 fdd1 	bl	8009c70 <HAL_TIM_PWM_ConfigChannel>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80050d4:	f7ff fdf0 	bl	8004cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80050d8:	2300      	movs	r3, #0
 80050da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80050ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4807      	ldr	r0, [pc, #28]	; (8005118 <MX_TIM1_Init+0x118>)
 80050fc:	f005 fb02 	bl	800a704 <HAL_TIMEx_ConfigBreakDeadTime>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8005106:	f7ff fdd7 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800510a:	4803      	ldr	r0, [pc, #12]	; (8005118 <MX_TIM1_Init+0x118>)
 800510c:	f000 f968 	bl	80053e0 <HAL_TIM_MspPostInit>

}
 8005110:	bf00      	nop
 8005112:	3748      	adds	r7, #72	; 0x48
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2000208c 	.word	0x2000208c
 800511c:	40010000 	.word	0x40010000

08005120 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005126:	f107 0308 	add.w	r3, r7, #8
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005134:	463b      	mov	r3, r7
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <MX_TIM2_Init+0x94>)
 800513e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <MX_TIM2_Init+0x94>)
 8005146:	2253      	movs	r2, #83	; 0x53
 8005148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <MX_TIM2_Init+0x94>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8005150:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <MX_TIM2_Init+0x94>)
 8005152:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <MX_TIM2_Init+0x94>)
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <MX_TIM2_Init+0x94>)
 8005160:	2200      	movs	r2, #0
 8005162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005164:	4813      	ldr	r0, [pc, #76]	; (80051b4 <MX_TIM2_Init+0x94>)
 8005166:	f004 fabb 	bl	80096e0 <HAL_TIM_Base_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005170:	f7ff fda2 	bl	8004cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4619      	mov	r1, r3
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <MX_TIM2_Init+0x94>)
 8005182:	f004 fe37 	bl	8009df4 <HAL_TIM_ConfigClockSource>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800518c:	f7ff fd94 	bl	8004cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005190:	2300      	movs	r3, #0
 8005192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005198:	463b      	mov	r3, r7
 800519a:	4619      	mov	r1, r3
 800519c:	4805      	ldr	r0, [pc, #20]	; (80051b4 <MX_TIM2_Init+0x94>)
 800519e:	f005 fa35 	bl	800a60c <HAL_TIMEx_MasterConfigSynchronization>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80051a8:	f7ff fd86 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200020d4 	.word	0x200020d4

080051b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051be:	f107 0320 	add.w	r3, r7, #32
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	605a      	str	r2, [r3, #4]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	611a      	str	r2, [r3, #16]
 80051d6:	615a      	str	r2, [r3, #20]
 80051d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <MX_TIM3_Init+0xac>)
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <MX_TIM3_Init+0xb0>)
 80051de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <MX_TIM3_Init+0xac>)
 80051e2:	2253      	movs	r2, #83	; 0x53
 80051e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e6:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <MX_TIM3_Init+0xac>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <MX_TIM3_Init+0xac>)
 80051ee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80051f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <MX_TIM3_Init+0xac>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <MX_TIM3_Init+0xac>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005200:	4818      	ldr	r0, [pc, #96]	; (8005264 <MX_TIM3_Init+0xac>)
 8005202:	f004 fb2d 	bl	8009860 <HAL_TIM_PWM_Init>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800520c:	f7ff fd54 	bl	8004cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005210:	2300      	movs	r3, #0
 8005212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005214:	2300      	movs	r3, #0
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005218:	f107 0320 	add.w	r3, r7, #32
 800521c:	4619      	mov	r1, r3
 800521e:	4811      	ldr	r0, [pc, #68]	; (8005264 <MX_TIM3_Init+0xac>)
 8005220:	f005 f9f4 	bl	800a60c <HAL_TIMEx_MasterConfigSynchronization>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800522a:	f7ff fd45 	bl	8004cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800522e:	2360      	movs	r3, #96	; 0x60
 8005230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	2204      	movs	r2, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4807      	ldr	r0, [pc, #28]	; (8005264 <MX_TIM3_Init+0xac>)
 8005246:	f004 fd13 	bl	8009c70 <HAL_TIM_PWM_ConfigChannel>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005250:	f7ff fd32 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005254:	4803      	ldr	r0, [pc, #12]	; (8005264 <MX_TIM3_Init+0xac>)
 8005256:	f000 f8c3 	bl	80053e0 <HAL_TIM_MspPostInit>

}
 800525a:	bf00      	nop
 800525c:	3728      	adds	r7, #40	; 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2000211c 	.word	0x2000211c
 8005268:	40000400 	.word	0x40000400

0800526c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	611a      	str	r2, [r3, #16]
 8005280:	615a      	str	r2, [r3, #20]
 8005282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005284:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <MX_TIM12_Init+0x84>)
 8005286:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <MX_TIM12_Init+0x88>)
 8005288:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <MX_TIM12_Init+0x84>)
 800528c:	2253      	movs	r2, #83	; 0x53
 800528e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <MX_TIM12_Init+0x84>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8005296:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <MX_TIM12_Init+0x84>)
 8005298:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800529c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <MX_TIM12_Init+0x84>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <MX_TIM12_Init+0x84>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80052aa:	4811      	ldr	r0, [pc, #68]	; (80052f0 <MX_TIM12_Init+0x84>)
 80052ac:	f004 fad8 	bl	8009860 <HAL_TIM_PWM_Init>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80052b6:	f7ff fcff 	bl	8004cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ba:	2360      	movs	r3, #96	; 0x60
 80052bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	2200      	movs	r2, #0
 80052ce:	4619      	mov	r1, r3
 80052d0:	4807      	ldr	r0, [pc, #28]	; (80052f0 <MX_TIM12_Init+0x84>)
 80052d2:	f004 fccd 	bl	8009c70 <HAL_TIM_PWM_ConfigChannel>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80052dc:	f7ff fcec 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80052e0:	4803      	ldr	r0, [pc, #12]	; (80052f0 <MX_TIM12_Init+0x84>)
 80052e2:	f000 f87d 	bl	80053e0 <HAL_TIM_MspPostInit>

}
 80052e6:	bf00      	nop
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20002164 	.word	0x20002164
 80052f4:	40001800 	.word	0x40001800

080052f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <HAL_TIM_PWM_MspInit+0x8c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6453      	str	r3, [r2, #68]	; 0x44
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8005326:	e026      	b.n	8005376 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <HAL_TIM_PWM_MspInit+0x94>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a13      	ldr	r2, [pc, #76]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
}
 800534e:	e012      	b.n	8005376 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <HAL_TIM_PWM_MspInit+0x98>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10d      	bne.n	8005376 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 8005364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005368:	6413      	str	r3, [r2, #64]	; 0x40
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_TIM_PWM_MspInit+0x90>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40023800 	.word	0x40023800
 800538c:	40000400 	.word	0x40000400
 8005390:	40001800 	.word	0x40001800

08005394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d115      	bne.n	80053d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <HAL_TIM_Base_MspInit+0x48>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <HAL_TIM_Base_MspInit+0x48>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6413      	str	r3, [r2, #64]	; 0x40
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_TIM_Base_MspInit+0x48>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80053c2:	2200      	movs	r2, #0
 80053c4:	2105      	movs	r1, #5
 80053c6:	201c      	movs	r0, #28
 80053c8:	f001 f976 	bl	80066b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053cc:	201c      	movs	r0, #28
 80053ce:	f001 f98f 	bl	80066f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08c      	sub	sp, #48	; 0x30
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e8:	f107 031c 	add.w	r3, r7, #28
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
 80053f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a46      	ldr	r2, [pc, #280]	; (8005518 <HAL_TIM_MspPostInit+0x138>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d13e      	bne.n	8005480 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	4b45      	ldr	r3, [pc, #276]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a44      	ldr	r2, [pc, #272]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a3d      	ldr	r2, [pc, #244]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005428:	f043 0310 	orr.w	r3, r3, #16
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800543a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800543e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	2300      	movs	r3, #0
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800544c:	2301      	movs	r3, #1
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005450:	f107 031c 	add.w	r3, r7, #28
 8005454:	4619      	mov	r1, r3
 8005456:	4832      	ldr	r0, [pc, #200]	; (8005520 <HAL_TIM_MspPostInit+0x140>)
 8005458:	f001 fd5a 	bl	8006f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800545c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005462:	2302      	movs	r3, #2
 8005464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546a:	2300      	movs	r3, #0
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800546e:	2301      	movs	r3, #1
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005472:	f107 031c 	add.w	r3, r7, #28
 8005476:	4619      	mov	r1, r3
 8005478:	482a      	ldr	r0, [pc, #168]	; (8005524 <HAL_TIM_MspPostInit+0x144>)
 800547a:	f001 fd49 	bl	8006f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800547e:	e046      	b.n	800550e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_TIM_MspPostInit+0x148>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d11e      	bne.n	80054c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054a6:	2320      	movs	r3, #32
 80054a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054aa:	2302      	movs	r3, #2
 80054ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b2:	2300      	movs	r3, #0
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054b6:	2302      	movs	r3, #2
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	4619      	mov	r1, r3
 80054c0:	481a      	ldr	r0, [pc, #104]	; (800552c <HAL_TIM_MspPostInit+0x14c>)
 80054c2:	f001 fd25 	bl	8006f10 <HAL_GPIO_Init>
}
 80054c6:	e022      	b.n	800550e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIM_MspPostInit+0x150>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d11d      	bne.n	800550e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 80054dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_TIM_MspPostInit+0x13c>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054ee:	2340      	movs	r3, #64	; 0x40
 80054f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80054fe:	2309      	movs	r3, #9
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005502:	f107 031c 	add.w	r3, r7, #28
 8005506:	4619      	mov	r1, r3
 8005508:	480a      	ldr	r0, [pc, #40]	; (8005534 <HAL_TIM_MspPostInit+0x154>)
 800550a:	f001 fd01 	bl	8006f10 <HAL_GPIO_Init>
}
 800550e:	bf00      	nop
 8005510:	3730      	adds	r7, #48	; 0x30
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40023800 	.word	0x40023800
 8005520:	40020000 	.word	0x40020000
 8005524:	40021000 	.word	0x40021000
 8005528:	40000400 	.word	0x40000400
 800552c:	40020400 	.word	0x40020400
 8005530:	40001800 	.word	0x40001800
 8005534:	40021c00 	.word	0x40021c00

08005538 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <MX_USART6_UART_Init+0x50>)
 8005540:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 8005544:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005548:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 8005552:	2200      	movs	r2, #0
 8005554:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 8005558:	2200      	movs	r2, #0
 800555a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 800555e:	220c      	movs	r2, #12
 8005560:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 8005564:	2200      	movs	r2, #0
 8005566:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 800556a:	2200      	movs	r2, #0
 800556c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800556e:	4805      	ldr	r0, [pc, #20]	; (8005584 <MX_USART6_UART_Init+0x4c>)
 8005570:	f005 f92e 	bl	800a7d0 <HAL_UART_Init>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800557a:	f7ff fb9d 	bl	8004cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200021ac 	.word	0x200021ac
 8005588:	40011400 	.word	0x40011400

0800558c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a4c      	ldr	r2, [pc, #304]	; (80056dc <HAL_UART_MspInit+0x150>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f040 8092 	bne.w	80056d4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	4b4a      	ldr	r3, [pc, #296]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	4a49      	ldr	r2, [pc, #292]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055ba:	f043 0320 	orr.w	r3, r3, #32
 80055be:	6453      	str	r3, [r2, #68]	; 0x44
 80055c0:	4b47      	ldr	r3, [pc, #284]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	4a42      	ldr	r2, [pc, #264]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055da:	6313      	str	r3, [r2, #48]	; 0x30
 80055dc:	4b40      	ldr	r3, [pc, #256]	; (80056e0 <HAL_UART_MspInit+0x154>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80055e8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80055ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80055fa:	2308      	movs	r3, #8
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055fe:	f107 0314 	add.w	r3, r7, #20
 8005602:	4619      	mov	r1, r3
 8005604:	4837      	ldr	r0, [pc, #220]	; (80056e4 <HAL_UART_MspInit+0x158>)
 8005606:	f001 fc83 	bl	8006f10 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 800560c:	4a37      	ldr	r2, [pc, #220]	; (80056ec <HAL_UART_MspInit+0x160>)
 800560e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005610:	4b35      	ldr	r3, [pc, #212]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005612:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005616:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005618:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561e:	4b32      	ldr	r3, [pc, #200]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005620:	2200      	movs	r2, #0
 8005622:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005624:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800562a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562c:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005632:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 800563a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005640:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005642:	2200      	movs	r2, #0
 8005644:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005646:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005648:	2200      	movs	r2, #0
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800564c:	4826      	ldr	r0, [pc, #152]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 800564e:	f001 f85d 	bl	800670c <HAL_DMA_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8005658:	f7ff fb2e 	bl	8004cb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005660:	63da      	str	r2, [r3, #60]	; 0x3c
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_UART_MspInit+0x15c>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_UART_MspInit+0x164>)
 800566a:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_UART_MspInit+0x168>)
 800566c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800566e:	4b20      	ldr	r3, [pc, #128]	; (80056f0 <HAL_UART_MspInit+0x164>)
 8005670:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005674:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <HAL_UART_MspInit+0x164>)
 8005678:	2240      	movs	r2, #64	; 0x40
 800567a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800567c:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <HAL_UART_MspInit+0x164>)
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_UART_MspInit+0x164>)
 8005684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005688:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568a:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_UART_MspInit+0x164>)
 800568c:	2200      	movs	r2, #0
 800568e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <HAL_UART_MspInit+0x164>)
 8005692:	2200      	movs	r2, #0
 8005694:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <HAL_UART_MspInit+0x164>)
 8005698:	2200      	movs	r2, #0
 800569a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <HAL_UART_MspInit+0x164>)
 800569e:	2200      	movs	r2, #0
 80056a0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <HAL_UART_MspInit+0x164>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80056a8:	4811      	ldr	r0, [pc, #68]	; (80056f0 <HAL_UART_MspInit+0x164>)
 80056aa:	f001 f82f 	bl	800670c <HAL_DMA_Init>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80056b4:	f7ff fb00 	bl	8004cb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <HAL_UART_MspInit+0x164>)
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
 80056be:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <HAL_UART_MspInit+0x164>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2105      	movs	r1, #5
 80056c8:	2047      	movs	r0, #71	; 0x47
 80056ca:	f000 fff5 	bl	80066b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80056ce:	2047      	movs	r0, #71	; 0x47
 80056d0:	f001 f80e 	bl	80066f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80056d4:	bf00      	nop
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40011400 	.word	0x40011400
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40021800 	.word	0x40021800
 80056e8:	200021f4 	.word	0x200021f4
 80056ec:	40026428 	.word	0x40026428
 80056f0:	20002254 	.word	0x20002254
 80056f4:	400264a0 	.word	0x400264a0

080056f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056fc:	f7ff fc6e 	bl	8004fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005702:	490d      	ldr	r1, [pc, #52]	; (8005738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005708:	e002      	b.n	8005710 <LoopCopyDataInit>

0800570a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800570a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800570c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800570e:	3304      	adds	r3, #4

08005710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005714:	d3f9      	bcc.n	800570a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005718:	4c0a      	ldr	r4, [pc, #40]	; (8005744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800571a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800571c:	e001      	b.n	8005722 <LoopFillZerobss>

0800571e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800571e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005720:	3204      	adds	r2, #4

08005722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005724:	d3fb      	bcc.n	800571e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005726:	f00f f92d 	bl	8014984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800572a:	f7ff fa27 	bl	8004b7c <main>
  bx  lr    
 800572e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005730:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005738:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800573c:	08016870 	.word	0x08016870
  ldr r2, =_sbss
 8005740:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8005744:	20017888 	.word	0x20017888

08005748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005748:	e7fe      	b.n	8005748 <ADC_IRQHandler>
	...

0800574c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_Init+0x40>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <HAL_Init+0x40>)
 8005756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800575a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_Init+0x40>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_Init+0x40>)
 8005762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_Init+0x40>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_Init+0x40>)
 800576e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005774:	2003      	movs	r0, #3
 8005776:	f000 ff94 	bl	80066a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800577a:	200f      	movs	r0, #15
 800577c:	f7ff fb4c 	bl	8004e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005780:	f7ff fb1e 	bl	8004dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023c00 	.word	0x40023c00

08005790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_IncTick+0x20>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_IncTick+0x24>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <HAL_IncTick+0x24>)
 80057a2:	6013      	str	r3, [r2, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c
 80057b4:	200022b4 	.word	0x200022b4

080057b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return uwTick;
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <HAL_GetTick+0x14>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200022b4 	.word	0x200022b4

080057d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7ff ffee 	bl	80057b8 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d005      	beq.n	80057f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_Delay+0x44>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057f6:	bf00      	nop
 80057f8:	f7ff ffde 	bl	80057b8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d8f7      	bhi.n	80057f8 <HAL_Delay+0x28>
  {
  }
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c

08005818 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e0ed      	b.n	8005a06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fe ff26 	bl	8004688 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800584c:	f7ff ffb4 	bl	80057b8 <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005852:	e012      	b.n	800587a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005854:	f7ff ffb0 	bl	80057b8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b0a      	cmp	r3, #10
 8005860:	d90b      	bls.n	800587a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2205      	movs	r2, #5
 8005872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0c5      	b.n	8005a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0e5      	beq.n	8005854 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0202 	bic.w	r2, r2, #2
 8005896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005898:	f7ff ff8e 	bl	80057b8 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800589e:	e012      	b.n	80058c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058a0:	f7ff ff8a 	bl	80057b8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b0a      	cmp	r3, #10
 80058ac:	d90b      	bls.n	80058c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2205      	movs	r2, #5
 80058be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e09f      	b.n	8005a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7e1b      	ldrb	r3, [r3, #24]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e007      	b.n	80058fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7e5b      	ldrb	r3, [r3, #25]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d108      	bne.n	8005918 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e007      	b.n	8005928 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005926:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7e9b      	ldrb	r3, [r3, #26]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d108      	bne.n	8005942 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0220 	orr.w	r2, r2, #32
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e007      	b.n	8005952 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0220 	bic.w	r2, r2, #32
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	7edb      	ldrb	r3, [r3, #27]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d108      	bne.n	800596c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0210 	bic.w	r2, r2, #16
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e007      	b.n	800597c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0210 	orr.w	r2, r2, #16
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7f1b      	ldrb	r3, [r3, #28]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d108      	bne.n	8005996 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0208 	orr.w	r2, r2, #8
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e007      	b.n	80059a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0208 	bic.w	r2, r2, #8
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7f5b      	ldrb	r3, [r3, #29]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d108      	bne.n	80059c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0204 	orr.w	r2, r2, #4
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e007      	b.n	80059d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0204 	bic.w	r2, r2, #4
 80059ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	1e5a      	subs	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d003      	beq.n	8005a36 <HAL_CAN_ConfigFilter+0x26>
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	f040 80be 	bne.w	8005bb2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_CAN_ConfigFilter+0x1bc>)
 8005a38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	431a      	orrs	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2201      	movs	r2, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	401a      	ands	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d123      	bne.n	8005ae0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005aba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3248      	adds	r2, #72	; 0x48
 8005ac0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005ad4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	3348      	adds	r3, #72	; 0x48
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	440b      	add	r3, r1
 8005ade:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d122      	bne.n	8005b2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	3248      	adds	r2, #72	; 0x48
 8005b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	3348      	adds	r3, #72	; 0x48
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	401a      	ands	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005b48:	e007      	b.n	8005b5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	401a      	ands	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005b74:	e007      	b.n	8005b86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ba4:	f023 0201 	bic.w	r2, r3, #1
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e006      	b.n	8005bc0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40006400 	.word	0x40006400

08005bd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d12e      	bne.n	8005c42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfc:	f7ff fddc 	bl	80057b8 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c02:	e012      	b.n	8005c2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c04:	f7ff fdd8 	bl	80057b8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b0a      	cmp	r3, #10
 8005c10:	d90b      	bls.n	8005c2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2205      	movs	r2, #5
 8005c22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e012      	b.n	8005c50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e5      	bne.n	8005c04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e006      	b.n	8005c50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c76:	7ffb      	ldrb	r3, [r7, #31]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d003      	beq.n	8005c84 <HAL_CAN_AddTxMessage+0x2c>
 8005c7c:	7ffb      	ldrb	r3, [r7, #31]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f040 80ad 	bne.w	8005dde <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8095 	beq.w	8005dce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	0e1b      	lsrs	r3, r3, #24
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005cae:	2201      	movs	r2, #1
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6809      	ldr	r1, [r1, #0]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	440b      	add	r3, r1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e00f      	b.n	8005cfc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ce6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005cf0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	440b      	add	r3, r1
 8005cfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3318      	adds	r3, #24
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	7d1b      	ldrb	r3, [r3, #20]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d111      	bne.n	8005d3c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	3318      	adds	r3, #24
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	3304      	adds	r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	6811      	ldr	r1, [r2, #0]
 8005d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3318      	adds	r3, #24
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	440b      	add	r3, r1
 8005d38:	3304      	adds	r3, #4
 8005d3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3307      	adds	r3, #7
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	061a      	lsls	r2, r3, #24
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3306      	adds	r3, #6
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3305      	adds	r3, #5
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	4313      	orrs	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	3204      	adds	r2, #4
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	4610      	mov	r0, r2
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	6811      	ldr	r1, [r2, #0]
 8005d64:	ea43 0200 	orr.w	r2, r3, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	440b      	add	r3, r1
 8005d6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005d72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3303      	adds	r3, #3
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	061a      	lsls	r2, r3, #24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3302      	adds	r3, #2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	4610      	mov	r0, r2
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	6811      	ldr	r1, [r2, #0]
 8005d9a:	ea43 0200 	orr.w	r2, r3, r0
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	440b      	add	r3, r1
 8005da4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005da8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	3318      	adds	r3, #24
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	6811      	ldr	r1, [r2, #0]
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3318      	adds	r3, #24
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	440b      	add	r3, r1
 8005dc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e00e      	b.n	8005dec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e006      	b.n	8005dec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3724      	adds	r7, #36	; 0x24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e0a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d002      	beq.n	8005e18 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005e12:	7afb      	ldrb	r3, [r7, #11]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d11d      	bne.n	8005e54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e76:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d003      	beq.n	8005e86 <HAL_CAN_GetRxMessage+0x24>
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f040 8103 	bne.w	800608c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10e      	bne.n	8005eaa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0f7      	b.n	800609a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0e8      	b.n	800609a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	331b      	adds	r3, #27
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	4413      	add	r3, r2
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0204 	and.w	r2, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10c      	bne.n	8005f00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	331b      	adds	r3, #27
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0d5b      	lsrs	r3, r3, #21
 8005ef6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e00b      	b.n	8005f18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	331b      	adds	r3, #27
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	4413      	add	r3, r2
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	331b      	adds	r3, #27
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0202 	and.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	331b      	adds	r3, #27
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	4413      	add	r3, r2
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	611a      	str	r2, [r3, #16]
 8005f4c:	e00b      	b.n	8005f66 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	331b      	adds	r3, #27
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	4413      	add	r3, r2
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 020f 	and.w	r2, r3, #15
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	331b      	adds	r3, #27
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	3304      	adds	r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	331b      	adds	r3, #27
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	0a1a      	lsrs	r2, r3, #8
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	0c1a      	lsrs	r2, r3, #16
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	0e1a      	lsrs	r2, r3, #24
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	4413      	add	r3, r2
 8006004:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3304      	adds	r3, #4
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4413      	add	r3, r2
 800601c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	0a1a      	lsrs	r2, r3, #8
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	3305      	adds	r3, #5
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	4413      	add	r3, r2
 8006036:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	0c1a      	lsrs	r2, r3, #16
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	3306      	adds	r3, #6
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	4413      	add	r3, r2
 8006050:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	0e1a      	lsrs	r2, r3, #24
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	3307      	adds	r3, #7
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0220 	orr.w	r2, r2, #32
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e007      	b.n	8006088 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0220 	orr.w	r2, r2, #32
 8006086:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e006      	b.n	800609a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
  }
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d002      	beq.n	80060c4 <HAL_CAN_ActivateNotification+0x1e>
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d109      	bne.n	80060d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6959      	ldr	r1, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e006      	b.n	80060e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b08a      	sub	sp, #40	; 0x28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d07c      	beq.n	8006232 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d023      	beq.n	800618a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fd fbf7 	bl	8003948 <HAL_CAN_TxMailbox0CompleteCallback>
 800615a:	e016      	b.n	800618a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
 800616e:	e00c      	b.n	800618a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
 8006182:	e002      	b.n	800618a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f96b 	bl	8006460 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d024      	beq.n	80061de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800619c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fd fbe1 	bl	8003970 <HAL_CAN_TxMailbox1CompleteCallback>
 80061ae:	e016      	b.n	80061de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	e00c      	b.n	80061de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	e002      	b.n	80061de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f94b 	bl	8006474 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d024      	beq.n	8006232 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fd fbcb 	bl	8003998 <HAL_CAN_TxMailbox2CompleteCallback>
 8006202:	e016      	b.n	8006232 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
 8006216:	e00c      	b.n	8006232 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	e002      	b.n	8006232 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f92b 	bl	8006488 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00c      	beq.n	8006256 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2210      	movs	r2, #16
 8006254:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d006      	beq.n	8006278 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2208      	movs	r2, #8
 8006270:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f912 	bl	800649c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0303 	and.w	r3, r3, #3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fd fbab 	bl	80039ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2208      	movs	r2, #8
 80062d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8f4 	bl	80064c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8db 	bl	80064b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2210      	movs	r2, #16
 8006314:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f8de 	bl	80064d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8d7 	bl	80064ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d07b      	beq.n	8006440 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d072      	beq.n	8006438 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	f043 0304 	orr.w	r3, r3, #4
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d043      	beq.n	8006438 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03e      	beq.n	8006438 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063c0:	2b60      	cmp	r3, #96	; 0x60
 80063c2:	d02b      	beq.n	800641c <HAL_CAN_IRQHandler+0x32a>
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d82e      	bhi.n	8006426 <HAL_CAN_IRQHandler+0x334>
 80063c8:	2b50      	cmp	r3, #80	; 0x50
 80063ca:	d022      	beq.n	8006412 <HAL_CAN_IRQHandler+0x320>
 80063cc:	2b50      	cmp	r3, #80	; 0x50
 80063ce:	d82a      	bhi.n	8006426 <HAL_CAN_IRQHandler+0x334>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d019      	beq.n	8006408 <HAL_CAN_IRQHandler+0x316>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d826      	bhi.n	8006426 <HAL_CAN_IRQHandler+0x334>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d010      	beq.n	80063fe <HAL_CAN_IRQHandler+0x30c>
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d822      	bhi.n	8006426 <HAL_CAN_IRQHandler+0x334>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d002      	beq.n	80063ea <HAL_CAN_IRQHandler+0x2f8>
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d005      	beq.n	80063f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80063e8:	e01d      	b.n	8006426 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f043 0308 	orr.w	r3, r3, #8
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063f2:	e019      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	f043 0310 	orr.w	r3, r3, #16
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063fc:	e014      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	f043 0320 	orr.w	r3, r3, #32
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006406:	e00f      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006410:	e00a      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800641a:	e005      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006424:	e000      	b.n	8006428 <HAL_CAN_IRQHandler+0x336>
            break;
 8006426:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006436:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2204      	movs	r2, #4
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fd fab4 	bl	80039c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006458:	bf00      	nop
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006512:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d002      	beq.n	8006520 <HAL_CAN_ResetError+0x20>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d103      	bne.n	8006528 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
 8006526:	e007      	b.n	8006538 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <__NVIC_SetPriorityGrouping+0x44>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006564:	4013      	ands	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800657a:	4a04      	ldr	r2, [pc, #16]	; (800658c <__NVIC_SetPriorityGrouping+0x44>)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	60d3      	str	r3, [r2, #12]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006594:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	f003 0307 	and.w	r3, r3, #7
}
 800659e:	4618      	mov	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	e000ed00 	.word	0xe000ed00

080065ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	db0b      	blt.n	80065d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	f003 021f 	and.w	r2, r3, #31
 80065c4:	4907      	ldr	r1, [pc, #28]	; (80065e4 <__NVIC_EnableIRQ+0x38>)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	2001      	movs	r0, #1
 80065ce:	fa00 f202 	lsl.w	r2, r0, r2
 80065d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	e000e100 	.word	0xe000e100

080065e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	db0a      	blt.n	8006612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	490c      	ldr	r1, [pc, #48]	; (8006634 <__NVIC_SetPriority+0x4c>)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	0112      	lsls	r2, r2, #4
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	440b      	add	r3, r1
 800660c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006610:	e00a      	b.n	8006628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	4908      	ldr	r1, [pc, #32]	; (8006638 <__NVIC_SetPriority+0x50>)
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	3b04      	subs	r3, #4
 8006620:	0112      	lsls	r2, r2, #4
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	440b      	add	r3, r1
 8006626:	761a      	strb	r2, [r3, #24]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	e000e100 	.word	0xe000e100
 8006638:	e000ed00 	.word	0xe000ed00

0800663c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f1c3 0307 	rsb	r3, r3, #7
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf28      	it	cs
 800665a:	2304      	movcs	r3, #4
 800665c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3304      	adds	r3, #4
 8006662:	2b06      	cmp	r3, #6
 8006664:	d902      	bls.n	800666c <NVIC_EncodePriority+0x30>
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3b03      	subs	r3, #3
 800666a:	e000      	b.n	800666e <NVIC_EncodePriority+0x32>
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43da      	mvns	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	401a      	ands	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	43d9      	mvns	r1, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006694:	4313      	orrs	r3, r2
         );
}
 8006696:	4618      	mov	r0, r3
 8006698:	3724      	adds	r7, #36	; 0x24
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ff4c 	bl	8006548 <__NVIC_SetPriorityGrouping>
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066ca:	f7ff ff61 	bl	8006590 <__NVIC_GetPriorityGrouping>
 80066ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	6978      	ldr	r0, [r7, #20]
 80066d6:	f7ff ffb1 	bl	800663c <NVIC_EncodePriority>
 80066da:	4602      	mov	r2, r0
 80066dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff ff80 	bl	80065e8 <__NVIC_SetPriority>
}
 80066e8:	bf00      	nop
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff ff54 	bl	80065ac <__NVIC_EnableIRQ>
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006718:	f7ff f84e 	bl	80057b8 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e099      	b.n	800685c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006748:	e00f      	b.n	800676a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800674a:	f7ff f835 	bl	80057b8 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b05      	cmp	r3, #5
 8006756:	d908      	bls.n	800676a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2203      	movs	r2, #3
 8006762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e078      	b.n	800685c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e8      	bne.n	800674a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4b38      	ldr	r3, [pc, #224]	; (8006864 <HAL_DMA_Init+0x158>)
 8006784:	4013      	ands	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d107      	bne.n	80067d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	4313      	orrs	r3, r2
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d117      	bne.n	800682e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb01 	bl	8006e18 <DMA_CheckFifoParam>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800682a:	2301      	movs	r3, #1
 800682c:	e016      	b.n	800685c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fab8 	bl	8006dac <DMA_CalcBaseAndBitshift>
 800683c:	4603      	mov	r3, r0
 800683e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	223f      	movs	r2, #63	; 0x3f
 8006846:	409a      	lsls	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	f010803f 	.word	0xf010803f

08006868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_DMA_Start_IT+0x26>
 800688a:	2302      	movs	r3, #2
 800688c:	e040      	b.n	8006910 <HAL_DMA_Start_IT+0xa8>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d12f      	bne.n	8006902 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fa4a 	bl	8006d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c0:	223f      	movs	r2, #63	; 0x3f
 80068c2:	409a      	lsls	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0216 	orr.w	r2, r2, #22
 80068d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0208 	orr.w	r2, r2, #8
 80068ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e005      	b.n	800690e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800690a:	2302      	movs	r3, #2
 800690c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006926:	f7fe ff47 	bl	80057b8 <HAL_GetTick>
 800692a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d008      	beq.n	800694a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e052      	b.n	80069f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0216 	bic.w	r2, r2, #22
 8006958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_DMA_Abort+0x62>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0208 	bic.w	r2, r2, #8
 8006988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800699a:	e013      	b.n	80069c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800699c:	f7fe ff0c 	bl	80057b8 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d90c      	bls.n	80069c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e015      	b.n	80069f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e4      	bne.n	800699c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	223f      	movs	r2, #63	; 0x3f
 80069d8:	409a      	lsls	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d004      	beq.n	8006a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e00c      	b.n	8006a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2205      	movs	r2, #5
 8006a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a48:	4b8e      	ldr	r3, [pc, #568]	; (8006c84 <HAL_DMA_IRQHandler+0x248>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a8e      	ldr	r2, [pc, #568]	; (8006c88 <HAL_DMA_IRQHandler+0x24c>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	0a9b      	lsrs	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a66:	2208      	movs	r2, #8
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01a      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0204 	bic.w	r2, r2, #4
 8006a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	2208      	movs	r2, #8
 8006a96:	409a      	lsls	r2, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	2201      	movs	r2, #1
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	2201      	movs	r2, #1
 8006acc:	409a      	lsls	r2, r3
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f043 0202 	orr.w	r2, r3, #2
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	409a      	lsls	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d012      	beq.n	8006b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	2204      	movs	r2, #4
 8006b02:	409a      	lsls	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f043 0204 	orr.w	r2, r3, #4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	2210      	movs	r2, #16
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d043      	beq.n	8006bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d03c      	beq.n	8006bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b36:	2210      	movs	r2, #16
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d018      	beq.n	8006b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d024      	beq.n	8006bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	e01f      	b.n	8006bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01b      	beq.n	8006bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	e016      	b.n	8006bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d107      	bne.n	8006b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0208 	bic.w	r2, r2, #8
 8006b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	409a      	lsls	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 808f 	beq.w	8006cdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8087 	beq.w	8006cdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d136      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0216 	bic.w	r2, r2, #22
 8006bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <HAL_DMA_IRQHandler+0x1da>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0208 	bic.w	r2, r2, #8
 8006c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2a:	223f      	movs	r2, #63	; 0x3f
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d07e      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
        }
        return;
 8006c52:	e079      	b.n	8006d48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d031      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
 8006c80:	e02c      	b.n	8006cdc <HAL_DMA_IRQHandler+0x2a0>
 8006c82:	bf00      	nop
 8006c84:	20000004 	.word	0x20000004
 8006c88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d023      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
 8006c9c:	e01e      	b.n	8006cdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10f      	bne.n	8006ccc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0210 	bic.w	r2, r2, #16
 8006cba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d032      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d022      	beq.n	8006d36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2205      	movs	r2, #5
 8006cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d307      	bcc.n	8006d24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f2      	bne.n	8006d08 <HAL_DMA_IRQHandler+0x2cc>
 8006d22:	e000      	b.n	8006d26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	e000      	b.n	8006d4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d48:	bf00      	nop
    }
  }
}
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d108      	bne.n	8006d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d8e:	e007      	b.n	8006da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	60da      	str	r2, [r3, #12]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	3b10      	subs	r3, #16
 8006dbc:	4a14      	ldr	r2, [pc, #80]	; (8006e10 <DMA_CalcBaseAndBitshift+0x64>)
 8006dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <DMA_CalcBaseAndBitshift+0x68>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d909      	bls.n	8006dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	659a      	str	r2, [r3, #88]	; 0x58
 8006dec:	e007      	b.n	8006dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	aaaaaaab 	.word	0xaaaaaaab
 8006e14:	08016080 	.word	0x08016080

08006e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d11f      	bne.n	8006e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d856      	bhi.n	8006ee6 <DMA_CheckFifoParam+0xce>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <DMA_CheckFifoParam+0x28>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e63 	.word	0x08006e63
 8006e48:	08006e51 	.word	0x08006e51
 8006e4c:	08006ee7 	.word	0x08006ee7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d046      	beq.n	8006eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e60:	e043      	b.n	8006eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e6a:	d140      	bne.n	8006eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e70:	e03d      	b.n	8006eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7a:	d121      	bne.n	8006ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d837      	bhi.n	8006ef2 <DMA_CheckFifoParam+0xda>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <DMA_CheckFifoParam+0x70>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006e9f 	.word	0x08006e9f
 8006e90:	08006e99 	.word	0x08006e99
 8006e94:	08006eb1 	.word	0x08006eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9c:	e030      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d025      	beq.n	8006ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eae:	e022      	b.n	8006ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eb8:	d11f      	bne.n	8006efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006ebe:	e01c      	b.n	8006efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d903      	bls.n	8006ece <DMA_CheckFifoParam+0xb6>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d003      	beq.n	8006ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ecc:	e018      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed2:	e015      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e00b      	b.n	8006efe <DMA_CheckFifoParam+0xe6>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e00a      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;
 8006eea:	bf00      	nop
 8006eec:	e008      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e006      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e004      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e002      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <DMA_CheckFifoParam+0xe8>
      break;
 8006efe:	bf00      	nop
    }
  } 
  
  return status; 
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop

08006f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e177      	b.n	800721c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	f040 8166 	bne.w	8007216 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d005      	beq.n	8006f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d130      	bne.n	8006fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	43db      	mvns	r3, r3
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	4013      	ands	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f98:	2201      	movs	r2, #1
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	f003 0201 	and.w	r2, r3, #1
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d017      	beq.n	8007000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	2203      	movs	r2, #3
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d123      	bne.n	8007054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	08da      	lsrs	r2, r3, #3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3208      	adds	r2, #8
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	220f      	movs	r2, #15
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4013      	ands	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	08da      	lsrs	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3208      	adds	r2, #8
 800704e:	69b9      	ldr	r1, [r7, #24]
 8007050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	2203      	movs	r2, #3
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	43db      	mvns	r3, r3
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	4013      	ands	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0203 	and.w	r2, r3, #3
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4313      	orrs	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80c0 	beq.w	8007216 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	4b66      	ldr	r3, [pc, #408]	; (8007234 <HAL_GPIO_Init+0x324>)
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	4a65      	ldr	r2, [pc, #404]	; (8007234 <HAL_GPIO_Init+0x324>)
 80070a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070a4:	6453      	str	r3, [r2, #68]	; 0x44
 80070a6:	4b63      	ldr	r3, [pc, #396]	; (8007234 <HAL_GPIO_Init+0x324>)
 80070a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070b2:	4a61      	ldr	r2, [pc, #388]	; (8007238 <HAL_GPIO_Init+0x328>)
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	3302      	adds	r3, #2
 80070ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	220f      	movs	r2, #15
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a58      	ldr	r2, [pc, #352]	; (800723c <HAL_GPIO_Init+0x32c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d037      	beq.n	800714e <HAL_GPIO_Init+0x23e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a57      	ldr	r2, [pc, #348]	; (8007240 <HAL_GPIO_Init+0x330>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d031      	beq.n	800714a <HAL_GPIO_Init+0x23a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a56      	ldr	r2, [pc, #344]	; (8007244 <HAL_GPIO_Init+0x334>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02b      	beq.n	8007146 <HAL_GPIO_Init+0x236>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a55      	ldr	r2, [pc, #340]	; (8007248 <HAL_GPIO_Init+0x338>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d025      	beq.n	8007142 <HAL_GPIO_Init+0x232>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a54      	ldr	r2, [pc, #336]	; (800724c <HAL_GPIO_Init+0x33c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01f      	beq.n	800713e <HAL_GPIO_Init+0x22e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a53      	ldr	r2, [pc, #332]	; (8007250 <HAL_GPIO_Init+0x340>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d019      	beq.n	800713a <HAL_GPIO_Init+0x22a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a52      	ldr	r2, [pc, #328]	; (8007254 <HAL_GPIO_Init+0x344>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_GPIO_Init+0x226>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a51      	ldr	r2, [pc, #324]	; (8007258 <HAL_GPIO_Init+0x348>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00d      	beq.n	8007132 <HAL_GPIO_Init+0x222>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a50      	ldr	r2, [pc, #320]	; (800725c <HAL_GPIO_Init+0x34c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <HAL_GPIO_Init+0x21e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a4f      	ldr	r2, [pc, #316]	; (8007260 <HAL_GPIO_Init+0x350>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d101      	bne.n	800712a <HAL_GPIO_Init+0x21a>
 8007126:	2309      	movs	r3, #9
 8007128:	e012      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800712a:	230a      	movs	r3, #10
 800712c:	e010      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800712e:	2308      	movs	r3, #8
 8007130:	e00e      	b.n	8007150 <HAL_GPIO_Init+0x240>
 8007132:	2307      	movs	r3, #7
 8007134:	e00c      	b.n	8007150 <HAL_GPIO_Init+0x240>
 8007136:	2306      	movs	r3, #6
 8007138:	e00a      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800713a:	2305      	movs	r3, #5
 800713c:	e008      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800713e:	2304      	movs	r3, #4
 8007140:	e006      	b.n	8007150 <HAL_GPIO_Init+0x240>
 8007142:	2303      	movs	r3, #3
 8007144:	e004      	b.n	8007150 <HAL_GPIO_Init+0x240>
 8007146:	2302      	movs	r3, #2
 8007148:	e002      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <HAL_GPIO_Init+0x240>
 800714e:	2300      	movs	r3, #0
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	f002 0203 	and.w	r2, r2, #3
 8007156:	0092      	lsls	r2, r2, #2
 8007158:	4093      	lsls	r3, r2
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4313      	orrs	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007160:	4935      	ldr	r1, [pc, #212]	; (8007238 <HAL_GPIO_Init+0x328>)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	3302      	adds	r3, #2
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800716e:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <HAL_GPIO_Init+0x354>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	43db      	mvns	r3, r3
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4013      	ands	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007192:	4a34      	ldr	r2, [pc, #208]	; (8007264 <HAL_GPIO_Init+0x354>)
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007198:	4b32      	ldr	r3, [pc, #200]	; (8007264 <HAL_GPIO_Init+0x354>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4013      	ands	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071bc:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_GPIO_Init+0x354>)
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071c2:	4b28      	ldr	r3, [pc, #160]	; (8007264 <HAL_GPIO_Init+0x354>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071e6:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <HAL_GPIO_Init+0x354>)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <HAL_GPIO_Init+0x354>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007210:	4a14      	ldr	r2, [pc, #80]	; (8007264 <HAL_GPIO_Init+0x354>)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3301      	adds	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	f67f ae84 	bls.w	8006f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	40013800 	.word	0x40013800
 800723c:	40020000 	.word	0x40020000
 8007240:	40020400 	.word	0x40020400
 8007244:	40020800 	.word	0x40020800
 8007248:	40020c00 	.word	0x40020c00
 800724c:	40021000 	.word	0x40021000
 8007250:	40021400 	.word	0x40021400
 8007254:	40021800 	.word	0x40021800
 8007258:	40021c00 	.word	0x40021c00
 800725c:	40022000 	.word	0x40022000
 8007260:	40022400 	.word	0x40022400
 8007264:	40013c00 	.word	0x40013c00

08007268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	887b      	ldrh	r3, [r7, #2]
 800727a:	4013      	ands	r3, r2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	e001      	b.n	800728a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
 80072a4:	4613      	mov	r3, r2
 80072a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072a8:	787b      	ldrb	r3, [r7, #1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072ae:	887a      	ldrh	r2, [r7, #2]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072b4:	e003      	b.n	80072be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072b6:	887b      	ldrh	r3, [r7, #2]
 80072b8:	041a      	lsls	r2, r3, #16
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	619a      	str	r2, [r3, #24]
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072dc:	887a      	ldrh	r2, [r7, #2]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4013      	ands	r3, r2
 80072e2:	041a      	lsls	r2, r3, #16
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	43d9      	mvns	r1, r3
 80072e8:	887b      	ldrh	r3, [r7, #2]
 80072ea:	400b      	ands	r3, r1
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	619a      	str	r2, [r3, #24]
}
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af02      	add	r7, sp, #8
 8007304:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e101      	b.n	8007514 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f009 ff2a 	bl	8011184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2203      	movs	r2, #3
 8007334:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800733e:	d102      	bne.n	8007346 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f004 fd31 	bl	800bdb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	7c1a      	ldrb	r2, [r3, #16]
 8007358:	f88d 2000 	strb.w	r2, [sp]
 800735c:	3304      	adds	r3, #4
 800735e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007360:	f004 fc10 	bl	800bb84 <USB_CoreInit>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e0ce      	b.n	8007514 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f004 fd29 	bl	800bdd4 <USB_SetCurrentMode>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0bf      	b.n	8007514 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e04a      	b.n	8007430 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800739a:	7bfa      	ldrb	r2, [r7, #15]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3315      	adds	r3, #21
 80073aa:	2201      	movs	r2, #1
 80073ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3314      	adds	r3, #20
 80073be:	7bfa      	ldrb	r2, [r7, #15]
 80073c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073c2:	7bfa      	ldrb	r2, [r7, #15]
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	b298      	uxth	r0, r3
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	332e      	adds	r3, #46	; 0x2e
 80073d6:	4602      	mov	r2, r0
 80073d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	3318      	adds	r3, #24
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	331c      	adds	r3, #28
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	3320      	adds	r3, #32
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	3324      	adds	r3, #36	; 0x24
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	3301      	adds	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	791b      	ldrb	r3, [r3, #4]
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	429a      	cmp	r2, r3
 8007438:	d3af      	bcc.n	800739a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
 800743e:	e044      	b.n	80074ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007440:	7bfa      	ldrb	r2, [r7, #15]
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4613      	mov	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007456:	7bfa      	ldrb	r2, [r7, #15]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007468:	7bfa      	ldrb	r2, [r7, #15]
 800746a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	3301      	adds	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	7bfa      	ldrb	r2, [r7, #15]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d3b5      	bcc.n	8007440 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7c1a      	ldrb	r2, [r3, #16]
 80074dc:	f88d 2000 	strb.w	r2, [sp]
 80074e0:	3304      	adds	r3, #4
 80074e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074e4:	f004 fcc2 	bl	800be6c <USB_DevInit>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00c      	b.n	8007514 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f005 fd06 	bl	800cf1e <USB_DevDisconnect>

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_PCD_Start+0x1c>
 8007534:	2302      	movs	r3, #2
 8007536:	e022      	b.n	800757e <HAL_PCD_Start+0x62>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007550:	2b01      	cmp	r3, #1
 8007552:	d105      	bne.n	8007560 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f004 fc13 	bl	800bd90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f005 fcb4 	bl	800cedc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007586:	b590      	push	{r4, r7, lr}
 8007588:	b08d      	sub	sp, #52	; 0x34
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f005 fd72 	bl	800d086 <USB_GetMode>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 848c 	bne.w	8007ec2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f005 fcd6 	bl	800cf60 <USB_ReadInterrupts>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 8482 	beq.w	8007ec0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f005 fcc3 	bl	800cf60 <USB_ReadInterrupts>
 80075da:	4603      	mov	r3, r0
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d107      	bne.n	80075f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f002 0202 	and.w	r2, r2, #2
 80075f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f005 fcb1 	bl	800cf60 <USB_ReadInterrupts>
 80075fe:	4603      	mov	r3, r0
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d161      	bne.n	80076cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0210 	bic.w	r2, r2, #16
 8007616:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	3304      	adds	r3, #4
 8007636:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	0c5b      	lsrs	r3, r3, #17
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	2b02      	cmp	r3, #2
 8007642:	d124      	bne.n	800768e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d035      	beq.n	80076bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	091b      	lsrs	r3, r3, #4
 8007658:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800765a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6a38      	ldr	r0, [r7, #32]
 8007664:	f005 fae8 	bl	800cc38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007674:	441a      	add	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	091b      	lsrs	r3, r3, #4
 8007682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007686:	441a      	add	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	615a      	str	r2, [r3, #20]
 800768c:	e016      	b.n	80076bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	0c5b      	lsrs	r3, r3, #17
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	2b06      	cmp	r3, #6
 8007698:	d110      	bne.n	80076bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80076a0:	2208      	movs	r2, #8
 80076a2:	4619      	mov	r1, r3
 80076a4:	6a38      	ldr	r0, [r7, #32]
 80076a6:	f005 fac7 	bl	800cc38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	695a      	ldr	r2, [r3, #20]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076b6:	441a      	add	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0210 	orr.w	r2, r2, #16
 80076ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f005 fc45 	bl	800cf60 <USB_ReadInterrupts>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076e0:	f040 80a7 	bne.w	8007832 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f005 fc4a 	bl	800cf86 <USB_ReadDevAllOutEpInterrupt>
 80076f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80076f4:	e099      	b.n	800782a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 808e 	beq.w	800781e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	4611      	mov	r1, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f005 fc6e 	bl	800cfee <USB_ReadDevOutEPInterrupt>
 8007712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	2301      	movs	r3, #1
 800772e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fea2 	bl	800847c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	461a      	mov	r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 ff78 	bl	800864c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	2310      	movs	r3, #16
 8007776:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d030      	beq.n	80077e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b80      	cmp	r3, #128	; 0x80
 800778c:	d109      	bne.n	80077a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	4613      	mov	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	4413      	add	r3, r2
 80077b4:	3304      	adds	r3, #4
 80077b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	78db      	ldrb	r3, [r3, #3]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d108      	bne.n	80077d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f009 fddf 	bl	8011390 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	2302      	movs	r3, #2
 80077e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	461a      	mov	r2, r3
 80077fc:	2320      	movs	r3, #32
 80077fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007816:	461a      	mov	r2, r3
 8007818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800781c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	3301      	adds	r3, #1
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	2b00      	cmp	r3, #0
 800782e:	f47f af62 	bne.w	80076f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f005 fb92 	bl	800cf60 <USB_ReadInterrupts>
 800783c:	4603      	mov	r3, r0
 800783e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007846:	f040 80db 	bne.w	8007a00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f005 fbb3 	bl	800cfba <USB_ReadDevAllInEpInterrupt>
 8007854:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800785a:	e0cd      	b.n	80079f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80c2 	beq.w	80079ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f005 fbd9 	bl	800d02a <USB_ReadDevInEPInterrupt>
 8007878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d057      	beq.n	8007934 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	2201      	movs	r2, #1
 800788c:	fa02 f303 	lsl.w	r3, r2, r3
 8007890:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	43db      	mvns	r3, r3
 800789e:	69f9      	ldr	r1, [r7, #28]
 80078a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a4:	4013      	ands	r3, r2
 80078a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	461a      	mov	r2, r3
 80078b6:	2301      	movs	r3, #1
 80078b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	799b      	ldrb	r3, [r3, #6]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d132      	bne.n	8007928 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	4613      	mov	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3320      	adds	r3, #32
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4403      	add	r3, r0
 80078e2:	331c      	adds	r3, #28
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4419      	add	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4403      	add	r3, r0
 80078f6:	3320      	adds	r3, #32
 80078f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d113      	bne.n	8007928 <HAL_PCD_IRQHandler+0x3a2>
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	3324      	adds	r3, #36	; 0x24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d108      	bne.n	8007928 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007920:	461a      	mov	r2, r3
 8007922:	2101      	movs	r1, #1
 8007924:	f005 fbe0 	bl	800d0e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f009 fca9 	bl	8011286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	461a      	mov	r2, r3
 800794c:	2308      	movs	r3, #8
 800794e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	461a      	mov	r2, r3
 8007968:	2310      	movs	r3, #16
 800796a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d023      	beq.n	80079da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007994:	6a38      	ldr	r0, [r7, #32]
 8007996:	f004 fbcd 	bl	800c134 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800799a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799c:	4613      	mov	r3, r2
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	3310      	adds	r3, #16
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4413      	add	r3, r2
 80079aa:	3304      	adds	r3, #4
 80079ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	78db      	ldrb	r3, [r3, #3]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d108      	bne.n	80079c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2200      	movs	r2, #0
 80079ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f009 fcf6 	bl	80113b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d4:	461a      	mov	r2, r3
 80079d6:	2302      	movs	r3, #2
 80079d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80079e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fcbb 	bl	8008362 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	3301      	adds	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f47f af2e 	bne.w	800785c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f005 faab 	bl	800cf60 <USB_ReadInterrupts>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a14:	d122      	bne.n	8007a5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d108      	bne.n	8007a46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fea2 	bl	8008788 <HAL_PCDEx_LPM_Callback>
 8007a44:	e002      	b.n	8007a4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f009 fc94 	bl	8011374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f005 fa7d 	bl	800cf60 <USB_ReadInterrupts>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a70:	d112      	bne.n	8007a98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d102      	bne.n	8007a88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f009 fc50 	bl	8011328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007a96:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f005 fa5f 	bl	800cf60 <USB_ReadInterrupts>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aac:	f040 80b7 	bne.w	8007c1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2110      	movs	r1, #16
 8007aca:	4618      	mov	r0, r3
 8007acc:	f004 fb32 	bl	800c134 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ad4:	e046      	b.n	8007b64 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ae8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	461a      	mov	r2, r3
 8007b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b4e:	0151      	lsls	r1, r2, #5
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	440a      	add	r2, r1
 8007b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	3301      	adds	r3, #1
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	791b      	ldrb	r3, [r3, #4]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d3b2      	bcc.n	8007ad6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7bdb      	ldrb	r3, [r3, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d016      	beq.n	8007bba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b9c:	f043 030b 	orr.w	r3, r3, #11
 8007ba0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb2:	f043 030b 	orr.w	r3, r3, #11
 8007bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb8:	e015      	b.n	8007be6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bcc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007bd0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be0:	f043 030b 	orr.w	r3, r3, #11
 8007be4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bf8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f005 fa6d 	bl	800d0e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f005 f99c 	bl	800cf60 <USB_ReadInterrupts>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c32:	d123      	bne.n	8007c7c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f005 fa32 	bl	800d0a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f004 faef 	bl	800c226 <USB_GetDevSpeed>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681c      	ldr	r4, [r3, #0]
 8007c54:	f001 f9c8 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8007c58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4620      	mov	r0, r4
 8007c62:	f003 fff3 	bl	800bc4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f009 fb35 	bl	80112d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695a      	ldr	r2, [r3, #20]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f005 f96d 	bl	800cf60 <USB_ReadInterrupts>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f009 fb12 	bl	80112ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f002 0208 	and.w	r2, r2, #8
 8007ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f005 f958 	bl	800cf60 <USB_ReadInterrupts>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d123      	bne.n	8007d02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	e014      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	f203 2357 	addw	r3, r3, #599	; 0x257
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d105      	bne.n	8007cf0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb08 	bl	8008300 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d3e4      	bcc.n	8007ccc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f005 f92a 	bl	800cf60 <USB_ReadInterrupts>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d16:	d13c      	bne.n	8007d92 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d18:	2301      	movs	r3, #1
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	e02b      	b.n	8007d76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3318      	adds	r3, #24
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d115      	bne.n	8007d70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007d44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da12      	bge.n	8007d70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	4613      	mov	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3317      	adds	r3, #23
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fac8 	bl	8008300 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	3301      	adds	r3, #1
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d3cd      	bcc.n	8007d1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695a      	ldr	r2, [r3, #20]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f005 f8e2 	bl	800cf60 <USB_ReadInterrupts>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007da6:	d156      	bne.n	8007e56 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007da8:	2301      	movs	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	e045      	b.n	8007e3a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d12e      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007dd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da2b      	bge.n	8007e34 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8007de8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d121      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	f203 2357 	addw	r3, r3, #599	; 0x257
 8007e02:	2201      	movs	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e30:	6053      	str	r3, [r2, #4]
            break;
 8007e32:	e008      	b.n	8007e46 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	3301      	adds	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	791b      	ldrb	r3, [r3, #4]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d3b3      	bcc.n	8007dae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695a      	ldr	r2, [r3, #20]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f005 f880 	bl	800cf60 <USB_ReadInterrupts>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6a:	d10a      	bne.n	8007e82 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f009 fab3 	bl	80113d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f005 f86a 	bl	800cf60 <USB_ReadInterrupts>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d115      	bne.n	8007ec2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f009 faa3 	bl	80113f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6859      	ldr	r1, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	e000      	b.n	8007ec2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007ec0:	bf00      	nop
    }
  }
}
 8007ec2:	3734      	adds	r7, #52	; 0x34
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd90      	pop	{r4, r7, pc}

08007ec8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_PCD_SetAddress+0x1a>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e012      	b.n	8007f08 <HAL_PCD_SetAddress+0x40>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f004 ffc9 	bl	800ce90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	70fb      	strb	r3, [r7, #3]
 8007f22:	460b      	mov	r3, r1
 8007f24:	803b      	strh	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da0f      	bge.n	8007f56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	f003 020f 	and.w	r2, r3, #15
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	705a      	strb	r2, [r3, #1]
 8007f54:	e00f      	b.n	8007f76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 020f 	and.w	r2, r3, #15
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f82:	883a      	ldrh	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	78ba      	ldrb	r2, [r7, #2]
 8007f8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007fa0:	78bb      	ldrb	r3, [r7, #2]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d102      	bne.n	8007fac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_PCD_EP_Open+0xaa>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e00e      	b.n	8007fd8 <HAL_PCD_EP_Open+0xc8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f004 f951 	bl	800c270 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8007fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da0f      	bge.n	8008014 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	f003 020f 	and.w	r2, r3, #15
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	3310      	adds	r3, #16
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	3304      	adds	r3, #4
 800800a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	705a      	strb	r2, [r3, #1]
 8008012:	e00f      	b.n	8008034 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	f003 020f 	and.w	r2, r3, #15
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	3304      	adds	r3, #4
 800802c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_PCD_EP_Close+0x6e>
 800804a:	2302      	movs	r3, #2
 800804c:	e00e      	b.n	800806c <HAL_PCD_EP_Close+0x8c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	4618      	mov	r0, r3
 800805e:	f004 f98f 	bl	800c380 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	460b      	mov	r3, r1
 8008082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	f003 020f 	and.w	r2, r3, #15
 800808a:	4613      	mov	r3, r2
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	3304      	adds	r3, #4
 800809c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080b6:	7afb      	ldrb	r3, [r7, #11]
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	799b      	ldrb	r3, [r3, #6]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d102      	bne.n	80080d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	799b      	ldrb	r3, [r3, #6]
 80080d8:	461a      	mov	r2, r3
 80080da:	6979      	ldr	r1, [r7, #20]
 80080dc:	f004 fa2c 	bl	800c538 <USB_EPStartXfer>

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	f003 020f 	and.w	r2, r3, #15
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800810c:	681b      	ldr	r3, [r3, #0]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	460b      	mov	r3, r1
 8008128:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	3310      	adds	r3, #16
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	3304      	adds	r3, #4
 8008140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2200      	movs	r2, #0
 8008152:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2201      	movs	r2, #1
 8008158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	b2da      	uxtb	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	799b      	ldrb	r3, [r3, #6]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d102      	bne.n	8008174 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	799b      	ldrb	r3, [r3, #6]
 800817c:	461a      	mov	r2, r3
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	f004 f9da 	bl	800c538 <USB_EPStartXfer>

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7912      	ldrb	r2, [r2, #4]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d901      	bls.n	80081ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e04f      	b.n	800824c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80081ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	da0f      	bge.n	80081d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	4613      	mov	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	3310      	adds	r3, #16
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	705a      	strb	r2, [r3, #1]
 80081d2:	e00d      	b.n	80081f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4613      	mov	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	3304      	adds	r3, #4
 80081e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_PCD_EP_SetStall+0x82>
 800820c:	2302      	movs	r3, #2
 800820e:	e01d      	b.n	800824c <HAL_PCD_EP_SetStall+0xbe>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68f9      	ldr	r1, [r7, #12]
 800821e:	4618      	mov	r0, r3
 8008220:	f004 fd62 	bl	800cce8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7999      	ldrb	r1, [r3, #6]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800823c:	461a      	mov	r2, r3
 800823e:	f004 ff53 	bl	800d0e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	7912      	ldrb	r2, [r2, #4]
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e042      	b.n	80082f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008276:	2b00      	cmp	r3, #0
 8008278:	da0f      	bge.n	800829a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	3310      	adds	r3, #16
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	3304      	adds	r3, #4
 8008290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	705a      	strb	r2, [r3, #1]
 8008298:	e00f      	b.n	80082ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	f003 020f 	and.w	r2, r3, #15
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	3304      	adds	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_PCD_EP_ClrStall+0x86>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e00e      	b.n	80082f8 <HAL_PCD_EP_ClrStall+0xa4>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f004 fd6b 	bl	800cdc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800830c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	da0c      	bge.n	800832e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	4613      	mov	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	3310      	adds	r3, #16
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	3304      	adds	r3, #4
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e00c      	b.n	8008348 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	3304      	adds	r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	4618      	mov	r0, r3
 8008350:	f004 fb8a 	bl	800ca68 <USB_EPStopXfer>
 8008354:	4603      	mov	r3, r0
 8008356:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008358:	7afb      	ldrb	r3, [r7, #11]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b08a      	sub	sp, #40	; 0x28
 8008366:	af02      	add	r7, sp, #8
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	3310      	adds	r3, #16
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	695a      	ldr	r2, [r3, #20]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	429a      	cmp	r2, r3
 8008394:	d901      	bls.n	800839a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e06b      	b.n	8008472 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	691a      	ldr	r2, [r3, #16]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d902      	bls.n	80083b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3303      	adds	r3, #3
 80083ba:	089b      	lsrs	r3, r3, #2
 80083bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083be:	e02a      	b.n	8008416 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d902      	bls.n	80083dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	3303      	adds	r3, #3
 80083e0:	089b      	lsrs	r3, r3, #2
 80083e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68d9      	ldr	r1, [r3, #12]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4603      	mov	r3, r0
 80083f8:	6978      	ldr	r0, [r7, #20]
 80083fa:	f004 fbdf 	bl	800cbbc <USB_WritePacket>

    ep->xfer_buff  += len;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	429a      	cmp	r2, r3
 800842a:	d809      	bhi.n	8008440 <PCD_WriteEmptyTxFifo+0xde>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008434:	429a      	cmp	r2, r3
 8008436:	d203      	bcs.n	8008440 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1bf      	bne.n	80083c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	d811      	bhi.n	8008470 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	2201      	movs	r2, #1
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	43db      	mvns	r3, r3
 8008466:	6939      	ldr	r1, [r7, #16]
 8008468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846c:	4013      	ands	r3, r2
 800846e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	333c      	adds	r3, #60	; 0x3c
 8008494:	3304      	adds	r3, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	799b      	ldrb	r3, [r3, #6]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d17b      	bne.n	80085aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d015      	beq.n	80084e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4a61      	ldr	r2, [pc, #388]	; (8008644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	f240 80b9 	bls.w	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80b3 	beq.w	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084de:	461a      	mov	r2, r3
 80084e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e4:	6093      	str	r3, [r2, #8]
 80084e6:	e0a7      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fe:	461a      	mov	r2, r3
 8008500:	2320      	movs	r3, #32
 8008502:	6093      	str	r3, [r2, #8]
 8008504:	e098      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 8093 	bne.w	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4a4b      	ldr	r2, [pc, #300]	; (8008644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d90f      	bls.n	800853a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008536:	6093      	str	r3, [r2, #8]
 8008538:	e07e      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	0159      	lsls	r1, r3, #5
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	440b      	add	r3, r1
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d114      	bne.n	800859c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008584:	461a      	mov	r2, r3
 8008586:	2101      	movs	r1, #1
 8008588:	f004 fdae 	bl	800d0e8 <USB_EP0_OutStart>
 800858c:	e006      	b.n	800859c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	441a      	add	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f008 fe54 	bl	8011250 <HAL_PCD_DataOutStageCallback>
 80085a8:	e046      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4a26      	ldr	r2, [pc, #152]	; (8008648 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d124      	bne.n	80085fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	461a      	mov	r2, r3
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	6093      	str	r3, [r2, #8]
 80085d0:	e032      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	461a      	mov	r2, r3
 80085ea:	2320      	movs	r3, #32
 80085ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f008 fe2b 	bl	8011250 <HAL_PCD_DataOutStageCallback>
 80085fa:	e01d      	b.n	8008638 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d114      	bne.n	800862c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d108      	bne.n	800862c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008624:	461a      	mov	r2, r3
 8008626:	2100      	movs	r1, #0
 8008628:	f004 fd5e 	bl	800d0e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f008 fe0c 	bl	8011250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	4f54300a 	.word	0x4f54300a
 8008648:	4f54310a 	.word	0x4f54310a

0800864c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	333c      	adds	r3, #60	; 0x3c
 8008664:	3304      	adds	r3, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	015a      	lsls	r2, r3, #5
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a15      	ldr	r2, [pc, #84]	; (80086d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d90e      	bls.n	80086a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	d009      	beq.n	80086a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	461a      	mov	r2, r3
 800869a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800869e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f008 fdc3 	bl	801122c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d90c      	bls.n	80086c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	799b      	ldrb	r3, [r3, #6]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d108      	bne.n	80086c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80086c0:	461a      	mov	r2, r3
 80086c2:	2101      	movs	r1, #1
 80086c4:	f004 fd10 	bl	800d0e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	4f54300a 	.word	0x4f54300a

080086d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
 80086e4:	4613      	mov	r3, r2
 80086e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80086f6:	883b      	ldrh	r3, [r7, #0]
 80086f8:	0419      	lsls	r1, r3, #16
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	430a      	orrs	r2, r1
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
 8008704:	e028      	b.n	8008758 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4413      	add	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
 8008718:	e00d      	b.n	8008736 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	3340      	adds	r3, #64	; 0x40
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	3301      	adds	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]
 8008736:	7bfa      	ldrb	r2, [r7, #15]
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	3b01      	subs	r3, #1
 800873c:	429a      	cmp	r2, r3
 800873e:	d3ec      	bcc.n	800871a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008740:	883b      	ldrh	r3, [r7, #0]
 8008742:	0418      	lsls	r0, r3, #16
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6819      	ldr	r1, [r3, #0]
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	3b01      	subs	r3, #1
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	4302      	orrs	r2, r0
 8008750:	3340      	adds	r3, #64	; 0x40
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	887a      	ldrh	r2, [r7, #2]
 8008778:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e267      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d075      	beq.n	80088aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087be:	4b88      	ldr	r3, [pc, #544]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 030c 	and.w	r3, r3, #12
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d00c      	beq.n	80087e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ca:	4b85      	ldr	r3, [pc, #532]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d112      	bne.n	80087fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087d6:	4b82      	ldr	r3, [pc, #520]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087e2:	d10b      	bne.n	80087fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e4:	4b7e      	ldr	r3, [pc, #504]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d05b      	beq.n	80088a8 <HAL_RCC_OscConfig+0x108>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d157      	bne.n	80088a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e242      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008804:	d106      	bne.n	8008814 <HAL_RCC_OscConfig+0x74>
 8008806:	4b76      	ldr	r3, [pc, #472]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a75      	ldr	r2, [pc, #468]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800880c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	e01d      	b.n	8008850 <HAL_RCC_OscConfig+0xb0>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800881c:	d10c      	bne.n	8008838 <HAL_RCC_OscConfig+0x98>
 800881e:	4b70      	ldr	r3, [pc, #448]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a6f      	ldr	r2, [pc, #444]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	4b6d      	ldr	r3, [pc, #436]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a6c      	ldr	r2, [pc, #432]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e00b      	b.n	8008850 <HAL_RCC_OscConfig+0xb0>
 8008838:	4b69      	ldr	r3, [pc, #420]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a68      	ldr	r2, [pc, #416]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800883e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	4b66      	ldr	r3, [pc, #408]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a65      	ldr	r2, [pc, #404]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800884a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800884e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d013      	beq.n	8008880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008858:	f7fc ffae 	bl	80057b8 <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008860:	f7fc ffaa 	bl	80057b8 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b64      	cmp	r3, #100	; 0x64
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e207      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008872:	4b5b      	ldr	r3, [pc, #364]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f0      	beq.n	8008860 <HAL_RCC_OscConfig+0xc0>
 800887e:	e014      	b.n	80088aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008880:	f7fc ff9a 	bl	80057b8 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008888:	f7fc ff96 	bl	80057b8 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	; 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1f3      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800889a:	4b51      	ldr	r3, [pc, #324]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0xe8>
 80088a6:	e000      	b.n	80088aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d063      	beq.n	800897e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088b6:	4b4a      	ldr	r3, [pc, #296]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 030c 	and.w	r3, r3, #12
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088c2:	4b47      	ldr	r3, [pc, #284]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d11c      	bne.n	8008908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ce:	4b44      	ldr	r3, [pc, #272]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d116      	bne.n	8008908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088da:	4b41      	ldr	r3, [pc, #260]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_RCC_OscConfig+0x152>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d001      	beq.n	80088f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e1c7      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f2:	4b3b      	ldr	r3, [pc, #236]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	4937      	ldr	r1, [pc, #220]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008902:	4313      	orrs	r3, r2
 8008904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008906:	e03a      	b.n	800897e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d020      	beq.n	8008952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008910:	4b34      	ldr	r3, [pc, #208]	; (80089e4 <HAL_RCC_OscConfig+0x244>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008916:	f7fc ff4f 	bl	80057b8 <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800891e:	f7fc ff4b 	bl	80057b8 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e1a8      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008930:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0f0      	beq.n	800891e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800893c:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	4925      	ldr	r1, [pc, #148]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 800894c:	4313      	orrs	r3, r2
 800894e:	600b      	str	r3, [r1, #0]
 8008950:	e015      	b.n	800897e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008952:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <HAL_RCC_OscConfig+0x244>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008958:	f7fc ff2e 	bl	80057b8 <HAL_GetTick>
 800895c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008960:	f7fc ff2a 	bl	80057b8 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e187      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008972:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1f0      	bne.n	8008960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d036      	beq.n	80089f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d016      	beq.n	80089c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008992:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <HAL_RCC_OscConfig+0x248>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008998:	f7fc ff0e 	bl	80057b8 <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800899e:	e008      	b.n	80089b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089a0:	f7fc ff0a 	bl	80057b8 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e167      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <HAL_RCC_OscConfig+0x240>)
 80089b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <HAL_RCC_OscConfig+0x200>
 80089be:	e01b      	b.n	80089f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089c0:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCC_OscConfig+0x248>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089c6:	f7fc fef7 	bl	80057b8 <HAL_GetTick>
 80089ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089cc:	e00e      	b.n	80089ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ce:	f7fc fef3 	bl	80057b8 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d907      	bls.n	80089ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e150      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
 80089e0:	40023800 	.word	0x40023800
 80089e4:	42470000 	.word	0x42470000
 80089e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089ec:	4b88      	ldr	r3, [pc, #544]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 80089ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1ea      	bne.n	80089ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8097 	beq.w	8008b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a0a:	4b81      	ldr	r3, [pc, #516]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10f      	bne.n	8008a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	4b7d      	ldr	r3, [pc, #500]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	4a7c      	ldr	r2, [pc, #496]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a24:	6413      	str	r3, [r2, #64]	; 0x40
 8008a26:	4b7a      	ldr	r3, [pc, #488]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	60bb      	str	r3, [r7, #8]
 8008a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a32:	2301      	movs	r3, #1
 8008a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a36:	4b77      	ldr	r3, [pc, #476]	; (8008c14 <HAL_RCC_OscConfig+0x474>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d118      	bne.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a42:	4b74      	ldr	r3, [pc, #464]	; (8008c14 <HAL_RCC_OscConfig+0x474>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a73      	ldr	r2, [pc, #460]	; (8008c14 <HAL_RCC_OscConfig+0x474>)
 8008a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a4e:	f7fc feb3 	bl	80057b8 <HAL_GetTick>
 8008a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a54:	e008      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a56:	f7fc feaf 	bl	80057b8 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e10c      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a68:	4b6a      	ldr	r3, [pc, #424]	; (8008c14 <HAL_RCC_OscConfig+0x474>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0f0      	beq.n	8008a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d106      	bne.n	8008a8a <HAL_RCC_OscConfig+0x2ea>
 8008a7c:	4b64      	ldr	r3, [pc, #400]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a80:	4a63      	ldr	r2, [pc, #396]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	6713      	str	r3, [r2, #112]	; 0x70
 8008a88:	e01c      	b.n	8008ac4 <HAL_RCC_OscConfig+0x324>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d10c      	bne.n	8008aac <HAL_RCC_OscConfig+0x30c>
 8008a92:	4b5f      	ldr	r3, [pc, #380]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	4a5e      	ldr	r2, [pc, #376]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008a98:	f043 0304 	orr.w	r3, r3, #4
 8008a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a9e:	4b5c      	ldr	r3, [pc, #368]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa2:	4a5b      	ldr	r2, [pc, #364]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008aa4:	f043 0301 	orr.w	r3, r3, #1
 8008aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aaa:	e00b      	b.n	8008ac4 <HAL_RCC_OscConfig+0x324>
 8008aac:	4b58      	ldr	r3, [pc, #352]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	4a57      	ldr	r2, [pc, #348]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008ab2:	f023 0301 	bic.w	r3, r3, #1
 8008ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab8:	4b55      	ldr	r3, [pc, #340]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008abc:	4a54      	ldr	r2, [pc, #336]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008abe:	f023 0304 	bic.w	r3, r3, #4
 8008ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d015      	beq.n	8008af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008acc:	f7fc fe74 	bl	80057b8 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ad2:	e00a      	b.n	8008aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ad4:	f7fc fe70 	bl	80057b8 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e0cb      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aea:	4b49      	ldr	r3, [pc, #292]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0ee      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x334>
 8008af6:	e014      	b.n	8008b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008af8:	f7fc fe5e 	bl	80057b8 <HAL_GetTick>
 8008afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008afe:	e00a      	b.n	8008b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b00:	f7fc fe5a 	bl	80057b8 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e0b5      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b16:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1ee      	bne.n	8008b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d105      	bne.n	8008b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b28:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2c:	4a38      	ldr	r2, [pc, #224]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a1 	beq.w	8008c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b3e:	4b34      	ldr	r3, [pc, #208]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 030c 	and.w	r3, r3, #12
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d05c      	beq.n	8008c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d141      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b31      	ldr	r3, [pc, #196]	; (8008c18 <HAL_RCC_OscConfig+0x478>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b58:	f7fc fe2e 	bl	80057b8 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fc fe2a 	bl	80057b8 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e087      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69da      	ldr	r2, [r3, #28]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	019b      	lsls	r3, r3, #6
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	3b01      	subs	r3, #1
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	491b      	ldr	r1, [pc, #108]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <HAL_RCC_OscConfig+0x478>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bae:	f7fc fe03 	bl	80057b8 <HAL_GetTick>
 8008bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb4:	e008      	b.n	8008bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bb6:	f7fc fdff 	bl	80057b8 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e05c      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bc8:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0f0      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x416>
 8008bd4:	e054      	b.n	8008c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <HAL_RCC_OscConfig+0x478>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bdc:	f7fc fdec 	bl	80057b8 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fc fde8 	bl	80057b8 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e045      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_RCC_OscConfig+0x470>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x444>
 8008c02:	e03d      	b.n	8008c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e038      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
 8008c10:	40023800 	.word	0x40023800
 8008c14:	40007000 	.word	0x40007000
 8008c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c1c:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <HAL_RCC_OscConfig+0x4ec>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d028      	beq.n	8008c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d121      	bne.n	8008c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d11a      	bne.n	8008c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d111      	bne.n	8008c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	3b01      	subs	r3, #1
 8008c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d107      	bne.n	8008c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e000      	b.n	8008c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40023800 	.word	0x40023800

08008c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e0cc      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca4:	4b68      	ldr	r3, [pc, #416]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d90c      	bls.n	8008ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb2:	4b65      	ldr	r3, [pc, #404]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cba:	4b63      	ldr	r3, [pc, #396]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 030f 	and.w	r3, r3, #15
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d001      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e0b8      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d020      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d005      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ce4:	4b59      	ldr	r3, [pc, #356]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4a58      	ldr	r2, [pc, #352]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cfc:	4b53      	ldr	r3, [pc, #332]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4a52      	ldr	r2, [pc, #328]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d08:	4b50      	ldr	r3, [pc, #320]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	494d      	ldr	r1, [pc, #308]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d044      	beq.n	8008db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d107      	bne.n	8008d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d2e:	4b47      	ldr	r3, [pc, #284]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d119      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e07f      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d003      	beq.n	8008d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d107      	bne.n	8008d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d4e:	4b3f      	ldr	r3, [pc, #252]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e06f      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d5e:	4b3b      	ldr	r3, [pc, #236]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e067      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d6e:	4b37      	ldr	r3, [pc, #220]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f023 0203 	bic.w	r2, r3, #3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4934      	ldr	r1, [pc, #208]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d80:	f7fc fd1a 	bl	80057b8 <HAL_GetTick>
 8008d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d86:	e00a      	b.n	8008d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d88:	f7fc fd16 	bl	80057b8 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e04f      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9e:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 020c 	and.w	r2, r3, #12
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d1eb      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008db0:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d20c      	bcs.n	8008dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dbe:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dc6:	4b20      	ldr	r3, [pc, #128]	; (8008e48 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d001      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e032      	b.n	8008e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008de4:	4b19      	ldr	r3, [pc, #100]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4916      	ldr	r1, [pc, #88]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	490e      	ldr	r1, [pc, #56]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e16:	f000 f821 	bl	8008e5c <HAL_RCC_GetSysClockFreq>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	091b      	lsrs	r3, r3, #4
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	490a      	ldr	r1, [pc, #40]	; (8008e50 <HAL_RCC_ClockConfig+0x1c0>)
 8008e28:	5ccb      	ldrb	r3, [r1, r3]
 8008e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2e:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e32:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fb ffee 	bl	8004e18 <HAL_InitTick>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	40023c00 	.word	0x40023c00
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	08016068 	.word	0x08016068
 8008e54:	20000004 	.word	0x20000004
 8008e58:	20000008 	.word	0x20000008

08008e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e60:	b090      	sub	sp, #64	; 0x40
 8008e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
 8008e68:	2300      	movs	r3, #0
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e74:	4b59      	ldr	r3, [pc, #356]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 030c 	and.w	r3, r3, #12
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d00d      	beq.n	8008e9c <HAL_RCC_GetSysClockFreq+0x40>
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	f200 80a1 	bhi.w	8008fc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <HAL_RCC_GetSysClockFreq+0x34>
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d003      	beq.n	8008e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e8e:	e09b      	b.n	8008fc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e90:	4b53      	ldr	r3, [pc, #332]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008e94:	e09b      	b.n	8008fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e96:	4b53      	ldr	r3, [pc, #332]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e9a:	e098      	b.n	8008fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e9c:	4b4f      	ldr	r3, [pc, #316]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ea6:	4b4d      	ldr	r3, [pc, #308]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d028      	beq.n	8008f04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb2:	4b4a      	ldr	r3, [pc, #296]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	2200      	movs	r2, #0
 8008eba:	623b      	str	r3, [r7, #32]
 8008ebc:	627a      	str	r2, [r7, #36]	; 0x24
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4b47      	ldr	r3, [pc, #284]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ec8:	fb03 f201 	mul.w	r2, r3, r1
 8008ecc:	2300      	movs	r3, #0
 8008ece:	fb00 f303 	mul.w	r3, r0, r3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	4a43      	ldr	r2, [pc, #268]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ed6:	fba0 1202 	umull	r1, r2, r0, r2
 8008eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008edc:	460a      	mov	r2, r1
 8008ede:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee2:	4413      	add	r3, r2
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	2200      	movs	r2, #0
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	61fa      	str	r2, [r7, #28]
 8008eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ef2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008ef6:	f7f7 fe51 	bl	8000b9c <__aeabi_uldivmod>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4613      	mov	r3, r2
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f02:	e053      	b.n	8008fac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f04:	4b35      	ldr	r3, [pc, #212]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	099b      	lsrs	r3, r3, #6
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	617a      	str	r2, [r7, #20]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008f16:	f04f 0b00 	mov.w	fp, #0
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	465b      	mov	r3, fp
 8008f1e:	f04f 0000 	mov.w	r0, #0
 8008f22:	f04f 0100 	mov.w	r1, #0
 8008f26:	0159      	lsls	r1, r3, #5
 8008f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f2c:	0150      	lsls	r0, r2, #5
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	ebb2 080a 	subs.w	r8, r2, sl
 8008f36:	eb63 090b 	sbc.w	r9, r3, fp
 8008f3a:	f04f 0200 	mov.w	r2, #0
 8008f3e:	f04f 0300 	mov.w	r3, #0
 8008f42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008f46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008f4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008f4e:	ebb2 0408 	subs.w	r4, r2, r8
 8008f52:	eb63 0509 	sbc.w	r5, r3, r9
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	00eb      	lsls	r3, r5, #3
 8008f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f64:	00e2      	lsls	r2, r4, #3
 8008f66:	4614      	mov	r4, r2
 8008f68:	461d      	mov	r5, r3
 8008f6a:	eb14 030a 	adds.w	r3, r4, sl
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	eb45 030b 	adc.w	r3, r5, fp
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	f04f 0200 	mov.w	r2, #0
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f82:	4629      	mov	r1, r5
 8008f84:	028b      	lsls	r3, r1, #10
 8008f86:	4621      	mov	r1, r4
 8008f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	028a      	lsls	r2, r1, #10
 8008f90:	4610      	mov	r0, r2
 8008f92:	4619      	mov	r1, r3
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	2200      	movs	r2, #0
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	60fa      	str	r2, [r7, #12]
 8008f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fa0:	f7f7 fdfc 	bl	8000b9c <__aeabi_uldivmod>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4613      	mov	r3, r2
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008fc6:	e002      	b.n	8008fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008fca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3740      	adds	r7, #64	; 0x40
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	00f42400 	.word	0x00f42400
 8008fe4:	00b71b00 	.word	0x00b71b00

08008fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fec:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8008fee:	681b      	ldr	r3, [r3, #0]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	20000004 	.word	0x20000004

08009000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009004:	f7ff fff0 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8009008:	4602      	mov	r2, r0
 800900a:	4b05      	ldr	r3, [pc, #20]	; (8009020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	0a9b      	lsrs	r3, r3, #10
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	4903      	ldr	r1, [pc, #12]	; (8009024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009016:	5ccb      	ldrb	r3, [r1, r3]
 8009018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800901c:	4618      	mov	r0, r3
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40023800 	.word	0x40023800
 8009024:	08016078 	.word	0x08016078

08009028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800902c:	f7ff ffdc 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8009030:	4602      	mov	r2, r0
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	0b5b      	lsrs	r3, r3, #13
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	4903      	ldr	r1, [pc, #12]	; (800904c <HAL_RCC_GetPCLK2Freq+0x24>)
 800903e:	5ccb      	ldrb	r3, [r1, r3]
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009044:	4618      	mov	r0, r3
 8009046:	bd80      	pop	{r7, pc}
 8009048:	40023800 	.word	0x40023800
 800904c:	08016078 	.word	0x08016078

08009050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	220f      	movs	r2, #15
 800905e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <HAL_RCC_GetClockConfig+0x5c>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f003 0203 	and.w	r2, r3, #3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <HAL_RCC_GetClockConfig+0x5c>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <HAL_RCC_GetClockConfig+0x5c>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <HAL_RCC_GetClockConfig+0x5c>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	08db      	lsrs	r3, r3, #3
 800908a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <HAL_RCC_GetClockConfig+0x60>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 020f 	and.w	r2, r3, #15
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	601a      	str	r2, [r3, #0]
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40023800 	.word	0x40023800
 80090b0:	40023c00 	.word	0x40023c00

080090b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e07b      	b.n	80091be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d108      	bne.n	80090e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090d6:	d009      	beq.n	80090ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	61da      	str	r2, [r3, #28]
 80090de:	e005      	b.n	80090ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7fb fe12 	bl	8004d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	ea42 0103 	orr.w	r1, r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009178:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	f003 0104 	and.w	r1, r3, #4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	f003 0210 	and.w	r2, r3, #16
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b08c      	sub	sp, #48	; 0x30
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091d4:	2301      	movs	r3, #1
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_SPI_TransmitReceive+0x26>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e198      	b.n	800951e <HAL_SPI_TransmitReceive+0x358>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091f4:	f7fc fae0 	bl	80057b8 <HAL_GetTick>
 80091f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800920a:	887b      	ldrh	r3, [r7, #2]
 800920c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800920e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009212:	2b01      	cmp	r3, #1
 8009214:	d00f      	beq.n	8009236 <HAL_SPI_TransmitReceive+0x70>
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800921c:	d107      	bne.n	800922e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d103      	bne.n	800922e <HAL_SPI_TransmitReceive+0x68>
 8009226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800922a:	2b04      	cmp	r3, #4
 800922c:	d003      	beq.n	8009236 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800922e:	2302      	movs	r3, #2
 8009230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009234:	e16d      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <HAL_SPI_TransmitReceive+0x82>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_SPI_TransmitReceive+0x82>
 8009242:	887b      	ldrh	r3, [r7, #2]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800924e:	e160      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b04      	cmp	r3, #4
 800925a:	d003      	beq.n	8009264 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2205      	movs	r2, #5
 8009260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	887a      	ldrh	r2, [r7, #2]
 8009274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	887a      	ldrh	r2, [r7, #2]
 800927a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	887a      	ldrh	r2, [r7, #2]
 8009286:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d007      	beq.n	80092b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092c0:	d17c      	bne.n	80093bc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_SPI_TransmitReceive+0x10a>
 80092ca:	8b7b      	ldrh	r3, [r7, #26]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d16a      	bne.n	80093a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	1c9a      	adds	r2, r3, #2
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092f4:	e057      	b.n	80093a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b02      	cmp	r3, #2
 8009302:	d11b      	bne.n	800933c <HAL_SPI_TransmitReceive+0x176>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d016      	beq.n	800933c <HAL_SPI_TransmitReceive+0x176>
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d113      	bne.n	800933c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	881a      	ldrh	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009324:	1c9a      	adds	r2, r3, #2
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b01      	cmp	r3, #1
 8009348:	d119      	bne.n	800937e <HAL_SPI_TransmitReceive+0x1b8>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d014      	beq.n	800937e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	b292      	uxth	r2, r2
 8009360:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	1c9a      	adds	r2, r3, #2
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009370:	b29b      	uxth	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800937a:	2301      	movs	r3, #1
 800937c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800937e:	f7fc fa1b 	bl	80057b8 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938a:	429a      	cmp	r2, r3
 800938c:	d80b      	bhi.n	80093a6 <HAL_SPI_TransmitReceive+0x1e0>
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009394:	d007      	beq.n	80093a6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80093a4:	e0b5      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1a2      	bne.n	80092f6 <HAL_SPI_TransmitReceive+0x130>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d19d      	bne.n	80092f6 <HAL_SPI_TransmitReceive+0x130>
 80093ba:	e080      	b.n	80094be <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <HAL_SPI_TransmitReceive+0x204>
 80093c4:	8b7b      	ldrh	r3, [r7, #26]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d16f      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093f0:	e05b      	b.n	80094aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d11c      	bne.n	800943a <HAL_SPI_TransmitReceive+0x274>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d017      	beq.n	800943a <HAL_SPI_TransmitReceive+0x274>
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d114      	bne.n	800943a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	330c      	adds	r3, #12
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b01      	cmp	r3, #1
 8009446:	d119      	bne.n	800947c <HAL_SPI_TransmitReceive+0x2b6>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d014      	beq.n	800947c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009478:	2301      	movs	r3, #1
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800947c:	f7fc f99c 	bl	80057b8 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009488:	429a      	cmp	r2, r3
 800948a:	d803      	bhi.n	8009494 <HAL_SPI_TransmitReceive+0x2ce>
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009492:	d102      	bne.n	800949a <HAL_SPI_TransmitReceive+0x2d4>
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	2b00      	cmp	r3, #0
 8009498:	d107      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80094a8:	e033      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d19e      	bne.n	80093f2 <HAL_SPI_TransmitReceive+0x22c>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d199      	bne.n	80093f2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 f8b8 	bl	8009638 <SPI_EndRxTxTransaction>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2220      	movs	r2, #32
 80094d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094da:	e01a      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009508:	e003      	b.n	8009512 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800951a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800951e:	4618      	mov	r0, r3
 8009520:	3730      	adds	r7, #48	; 0x30
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009538:	f7fc f93e 	bl	80057b8 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	1a9b      	subs	r3, r3, r2
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	4413      	add	r3, r2
 8009546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009548:	f7fc f936 	bl	80057b8 <HAL_GetTick>
 800954c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800954e:	4b39      	ldr	r3, [pc, #228]	; (8009634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	015b      	lsls	r3, r3, #5
 8009554:	0d1b      	lsrs	r3, r3, #20
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	fb02 f303 	mul.w	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800955e:	e054      	b.n	800960a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009566:	d050      	beq.n	800960a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009568:	f7fc f926 	bl	80057b8 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	429a      	cmp	r2, r3
 8009576:	d902      	bls.n	800957e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d13d      	bne.n	80095fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800958c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009596:	d111      	bne.n	80095bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a0:	d004      	beq.n	80095ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095aa:	d107      	bne.n	80095bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c4:	d10f      	bne.n	80095e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e017      	b.n	800962a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	3b01      	subs	r3, #1
 8009608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4013      	ands	r3, r2
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	bf0c      	ite	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	2300      	movne	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	429a      	cmp	r2, r3
 8009626:	d19b      	bne.n	8009560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000004 	.word	0x20000004

08009638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2201      	movs	r2, #1
 800964c:	2102      	movs	r1, #2
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff ff6a 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	f043 0220 	orr.w	r2, r3, #32
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e032      	b.n	80096d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <SPI_EndRxTxTransaction+0xa0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1b      	ldr	r2, [pc, #108]	; (80096dc <SPI_EndRxTxTransaction+0xa4>)
 8009670:	fba2 2303 	umull	r2, r3, r2, r3
 8009674:	0d5b      	lsrs	r3, r3, #21
 8009676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800967a:	fb02 f303 	mul.w	r3, r2, r3
 800967e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009688:	d112      	bne.n	80096b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	2180      	movs	r1, #128	; 0x80
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff ff47 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d016      	beq.n	80096ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	f043 0220 	orr.w	r2, r3, #32
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e00f      	b.n	80096d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d0f2      	beq.n	80096b0 <SPI_EndRxTxTransaction+0x78>
 80096ca:	e000      	b.n	80096ce <SPI_EndRxTxTransaction+0x96>
        break;
 80096cc:	bf00      	nop
  }

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000004 	.word	0x20000004
 80096dc:	165e9f81 	.word	0x165e9f81

080096e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e041      	b.n	8009776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fb fe44 	bl	8005394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f000 fc58 	bl	8009fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d001      	beq.n	8009798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e04e      	b.n	8009836 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0201 	orr.w	r2, r2, #1
 80097ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a23      	ldr	r2, [pc, #140]	; (8009844 <HAL_TIM_Base_Start_IT+0xc4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d022      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c2:	d01d      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <HAL_TIM_Base_Start_IT+0xc8>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d018      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a1e      	ldr	r2, [pc, #120]	; (800984c <HAL_TIM_Base_Start_IT+0xcc>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d013      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a1c      	ldr	r2, [pc, #112]	; (8009850 <HAL_TIM_Base_Start_IT+0xd0>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00e      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a1b      	ldr	r2, [pc, #108]	; (8009854 <HAL_TIM_Base_Start_IT+0xd4>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d009      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a19      	ldr	r2, [pc, #100]	; (8009858 <HAL_TIM_Base_Start_IT+0xd8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d004      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x80>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a18      	ldr	r2, [pc, #96]	; (800985c <HAL_TIM_Base_Start_IT+0xdc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d111      	bne.n	8009824 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b06      	cmp	r3, #6
 8009810:	d010      	beq.n	8009834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009822:	e007      	b.n	8009834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40010000 	.word	0x40010000
 8009848:	40000400 	.word	0x40000400
 800984c:	40000800 	.word	0x40000800
 8009850:	40000c00 	.word	0x40000c00
 8009854:	40010400 	.word	0x40010400
 8009858:	40014000 	.word	0x40014000
 800985c:	40001800 	.word	0x40001800

08009860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e041      	b.n	80098f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d106      	bne.n	800988c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fb fd36 	bl	80052f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f000 fb98 	bl	8009fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_TIM_PWM_Start+0x24>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	e022      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d109      	bne.n	800993e <HAL_TIM_PWM_Start+0x3e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b01      	cmp	r3, #1
 8009934:	bf14      	ite	ne
 8009936:	2301      	movne	r3, #1
 8009938:	2300      	moveq	r3, #0
 800993a:	b2db      	uxtb	r3, r3
 800993c:	e015      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d109      	bne.n	8009958 <HAL_TIM_PWM_Start+0x58>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b01      	cmp	r3, #1
 800994e:	bf14      	ite	ne
 8009950:	2301      	movne	r3, #1
 8009952:	2300      	moveq	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	e008      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e07c      	b.n	8009a6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0x82>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009980:	e013      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Start+0x92>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009990:	e00b      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d104      	bne.n	80099a2 <HAL_TIM_PWM_Start+0xa2>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a0:	e003      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2201      	movs	r2, #1
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fe04 	bl	800a5c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <HAL_TIM_PWM_Start+0x174>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d004      	beq.n	80099cc <HAL_TIM_PWM_Start+0xcc>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2c      	ldr	r2, [pc, #176]	; (8009a78 <HAL_TIM_PWM_Start+0x178>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d101      	bne.n	80099d0 <HAL_TIM_PWM_Start+0xd0>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <HAL_TIM_PWM_Start+0xd2>
 80099d0:	2300      	movs	r3, #0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <HAL_TIM_PWM_Start+0x174>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d022      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f8:	d01d      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <HAL_TIM_PWM_Start+0x17c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d018      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a1d      	ldr	r2, [pc, #116]	; (8009a80 <HAL_TIM_PWM_Start+0x180>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d013      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a1c      	ldr	r2, [pc, #112]	; (8009a84 <HAL_TIM_PWM_Start+0x184>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d00e      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a16      	ldr	r2, [pc, #88]	; (8009a78 <HAL_TIM_PWM_Start+0x178>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d009      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a18      	ldr	r2, [pc, #96]	; (8009a88 <HAL_TIM_PWM_Start+0x188>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d004      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x136>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <HAL_TIM_PWM_Start+0x18c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d111      	bne.n	8009a5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b06      	cmp	r3, #6
 8009a46:	d010      	beq.n	8009a6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a58:	e007      	b.n	8009a6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f042 0201 	orr.w	r2, r2, #1
 8009a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	40010000 	.word	0x40010000
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40001800 	.word	0x40001800

08009a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d020      	beq.n	8009af4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f003 0302 	and.w	r3, r3, #2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01b      	beq.n	8009af4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0202 	mvn.w	r2, #2
 8009ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa5b 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009ae0:	e005      	b.n	8009aee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fa4d 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa5e 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d020      	beq.n	8009b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01b      	beq.n	8009b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0204 	mvn.w	r2, #4
 8009b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa35 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009b2c:	e005      	b.n	8009b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa27 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa38 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d020      	beq.n	8009b8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01b      	beq.n	8009b8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0208 	mvn.w	r2, #8
 8009b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2204      	movs	r2, #4
 8009b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa0f 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009b78:	e005      	b.n	8009b86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa01 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa12 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f003 0310 	and.w	r3, r3, #16
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d020      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f003 0310 	and.w	r3, r3, #16
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01b      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0210 	mvn.w	r2, #16
 8009ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2208      	movs	r2, #8
 8009bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9e9 	bl	8009f96 <HAL_TIM_IC_CaptureCallback>
 8009bc4:	e005      	b.n	8009bd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9db 	bl	8009f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f9ec 	bl	8009faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00c      	beq.n	8009bfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0201 	mvn.w	r2, #1
 8009bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fb f84c 	bl	8004c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fdce 	bl	800a7bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00c      	beq.n	8009c44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f9bd 	bl	8009fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00c      	beq.n	8009c68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0220 	mvn.w	r2, #32
 8009c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fda0 	bl	800a7a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c68:	bf00      	nop
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e0ae      	b.n	8009dec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b0c      	cmp	r3, #12
 8009c9a:	f200 809f 	bhi.w	8009ddc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009ddd 	.word	0x08009ddd
 8009cac:	08009ddd 	.word	0x08009ddd
 8009cb0:	08009ddd 	.word	0x08009ddd
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009ddd 	.word	0x08009ddd
 8009cbc:	08009ddd 	.word	0x08009ddd
 8009cc0:	08009ddd 	.word	0x08009ddd
 8009cc4:	08009d5b 	.word	0x08009d5b
 8009cc8:	08009ddd 	.word	0x08009ddd
 8009ccc:	08009ddd 	.word	0x08009ddd
 8009cd0:	08009ddd 	.word	0x08009ddd
 8009cd4:	08009d9b 	.word	0x08009d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fa24 	bl	800a12c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0208 	orr.w	r2, r2, #8
 8009cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0204 	bic.w	r2, r2, #4
 8009d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6999      	ldr	r1, [r3, #24]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	691a      	ldr	r2, [r3, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	619a      	str	r2, [r3, #24]
      break;
 8009d16:	e064      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fa74 	bl	800a20c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6999      	ldr	r1, [r3, #24]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	021a      	lsls	r2, r3, #8
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	619a      	str	r2, [r3, #24]
      break;
 8009d58:	e043      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fac9 	bl	800a2f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69da      	ldr	r2, [r3, #28]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0208 	orr.w	r2, r2, #8
 8009d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0204 	bic.w	r2, r2, #4
 8009d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69d9      	ldr	r1, [r3, #28]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	691a      	ldr	r2, [r3, #16]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	61da      	str	r2, [r3, #28]
      break;
 8009d98:	e023      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fb1d 	bl	800a3e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69da      	ldr	r2, [r3, #28]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69da      	ldr	r2, [r3, #28]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69d9      	ldr	r1, [r3, #28]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	021a      	lsls	r2, r3, #8
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	61da      	str	r2, [r3, #28]
      break;
 8009dda:	e002      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	75fb      	strb	r3, [r7, #23]
      break;
 8009de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIM_ConfigClockSource+0x1c>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e0b4      	b.n	8009f7a <HAL_TIM_ConfigClockSource+0x186>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e48:	d03e      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8009e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e4e:	f200 8087 	bhi.w	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e56:	f000 8086 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x172>
 8009e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e5e:	d87f      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e60:	2b70      	cmp	r3, #112	; 0x70
 8009e62:	d01a      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0xa6>
 8009e64:	2b70      	cmp	r3, #112	; 0x70
 8009e66:	d87b      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e68:	2b60      	cmp	r3, #96	; 0x60
 8009e6a:	d050      	beq.n	8009f0e <HAL_TIM_ConfigClockSource+0x11a>
 8009e6c:	2b60      	cmp	r3, #96	; 0x60
 8009e6e:	d877      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e70:	2b50      	cmp	r3, #80	; 0x50
 8009e72:	d03c      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0xfa>
 8009e74:	2b50      	cmp	r3, #80	; 0x50
 8009e76:	d873      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e78:	2b40      	cmp	r3, #64	; 0x40
 8009e7a:	d058      	beq.n	8009f2e <HAL_TIM_ConfigClockSource+0x13a>
 8009e7c:	2b40      	cmp	r3, #64	; 0x40
 8009e7e:	d86f      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e80:	2b30      	cmp	r3, #48	; 0x30
 8009e82:	d064      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0x15a>
 8009e84:	2b30      	cmp	r3, #48	; 0x30
 8009e86:	d86b      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	d060      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0x15a>
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d867      	bhi.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d05c      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0x15a>
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	d05a      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0x15a>
 8009e98:	e062      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009eaa:	f000 fb69 	bl	800a580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	609a      	str	r2, [r3, #8]
      break;
 8009ec6:	e04f      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ed8:	f000 fb52 	bl	800a580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009eea:	609a      	str	r2, [r3, #8]
      break;
 8009eec:	e03c      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efa:	461a      	mov	r2, r3
 8009efc:	f000 fac6 	bl	800a48c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2150      	movs	r1, #80	; 0x50
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fb1f 	bl	800a54a <TIM_ITRx_SetConfig>
      break;
 8009f0c:	e02c      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f000 fae5 	bl	800a4ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2160      	movs	r1, #96	; 0x60
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fb0f 	bl	800a54a <TIM_ITRx_SetConfig>
      break;
 8009f2c:	e01c      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f000 faa6 	bl	800a48c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2140      	movs	r1, #64	; 0x40
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 faff 	bl	800a54a <TIM_ITRx_SetConfig>
      break;
 8009f4c:	e00c      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f000 faf6 	bl	800a54a <TIM_ITRx_SetConfig>
      break;
 8009f5e:	e003      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
      break;
 8009f64:	e000      	b.n	8009f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a46      	ldr	r2, [pc, #280]	; (800a100 <TIM_Base_SetConfig+0x12c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d013      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff2:	d00f      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a43      	ldr	r2, [pc, #268]	; (800a104 <TIM_Base_SetConfig+0x130>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00b      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a42      	ldr	r2, [pc, #264]	; (800a108 <TIM_Base_SetConfig+0x134>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d007      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a41      	ldr	r2, [pc, #260]	; (800a10c <TIM_Base_SetConfig+0x138>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a40      	ldr	r2, [pc, #256]	; (800a110 <TIM_Base_SetConfig+0x13c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d108      	bne.n	800a026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a35      	ldr	r2, [pc, #212]	; (800a100 <TIM_Base_SetConfig+0x12c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d02b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a034:	d027      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a32      	ldr	r2, [pc, #200]	; (800a104 <TIM_Base_SetConfig+0x130>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d023      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a31      	ldr	r2, [pc, #196]	; (800a108 <TIM_Base_SetConfig+0x134>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01f      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a30      	ldr	r2, [pc, #192]	; (800a10c <TIM_Base_SetConfig+0x138>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d01b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2f      	ldr	r2, [pc, #188]	; (800a110 <TIM_Base_SetConfig+0x13c>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d017      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a2e      	ldr	r2, [pc, #184]	; (800a114 <TIM_Base_SetConfig+0x140>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d013      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a2d      	ldr	r2, [pc, #180]	; (800a118 <TIM_Base_SetConfig+0x144>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00f      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a2c      	ldr	r2, [pc, #176]	; (800a11c <TIM_Base_SetConfig+0x148>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00b      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a2b      	ldr	r2, [pc, #172]	; (800a120 <TIM_Base_SetConfig+0x14c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d007      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a2a      	ldr	r2, [pc, #168]	; (800a124 <TIM_Base_SetConfig+0x150>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d003      	beq.n	800a086 <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a29      	ldr	r2, [pc, #164]	; (800a128 <TIM_Base_SetConfig+0x154>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d108      	bne.n	800a098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a10      	ldr	r2, [pc, #64]	; (800a100 <TIM_Base_SetConfig+0x12c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d003      	beq.n	800a0cc <TIM_Base_SetConfig+0xf8>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a12      	ldr	r2, [pc, #72]	; (800a110 <TIM_Base_SetConfig+0x13c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d103      	bne.n	800a0d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	691a      	ldr	r2, [r3, #16]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d105      	bne.n	800a0f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	611a      	str	r2, [r3, #16]
  }
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	40010400 	.word	0x40010400
 800a114:	40014000 	.word	0x40014000
 800a118:	40014400 	.word	0x40014400
 800a11c:	40014800 	.word	0x40014800
 800a120:	40001800 	.word	0x40001800
 800a124:	40001c00 	.word	0x40001c00
 800a128:	40002000 	.word	0x40002000

0800a12c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	f023 0201 	bic.w	r2, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 0302 	bic.w	r3, r3, #2
 800a174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a20      	ldr	r2, [pc, #128]	; (800a204 <TIM_OC1_SetConfig+0xd8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_OC1_SetConfig+0x64>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a1f      	ldr	r2, [pc, #124]	; (800a208 <TIM_OC1_SetConfig+0xdc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0308 	bic.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0304 	bic.w	r3, r3, #4
 800a1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a15      	ldr	r2, [pc, #84]	; (800a204 <TIM_OC1_SetConfig+0xd8>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d003      	beq.n	800a1ba <TIM_OC1_SetConfig+0x8e>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a14      	ldr	r2, [pc, #80]	; (800a208 <TIM_OC1_SetConfig+0xdc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d111      	bne.n	800a1de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	621a      	str	r2, [r3, #32]
}
 800a1f8:	bf00      	nop
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	40010000 	.word	0x40010000
 800a208:	40010400 	.word	0x40010400

0800a20c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	f023 0210 	bic.w	r2, r3, #16
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f023 0320 	bic.w	r3, r3, #32
 800a256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a22      	ldr	r2, [pc, #136]	; (800a2f0 <TIM_OC2_SetConfig+0xe4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d003      	beq.n	800a274 <TIM_OC2_SetConfig+0x68>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a21      	ldr	r2, [pc, #132]	; (800a2f4 <TIM_OC2_SetConfig+0xe8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d10d      	bne.n	800a290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a27a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	011b      	lsls	r3, r3, #4
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a28e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <TIM_OC2_SetConfig+0xe4>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d003      	beq.n	800a2a0 <TIM_OC2_SetConfig+0x94>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a16      	ldr	r2, [pc, #88]	; (800a2f4 <TIM_OC2_SetConfig+0xe8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d113      	bne.n	800a2c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40010400 	.word	0x40010400

0800a2f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f023 0303 	bic.w	r3, r3, #3
 800a32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	4313      	orrs	r3, r2
 800a338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a21      	ldr	r2, [pc, #132]	; (800a3d8 <TIM_OC3_SetConfig+0xe0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d003      	beq.n	800a35e <TIM_OC3_SetConfig+0x66>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a20      	ldr	r2, [pc, #128]	; (800a3dc <TIM_OC3_SetConfig+0xe4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d10d      	bne.n	800a37a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <TIM_OC3_SetConfig+0xe0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d003      	beq.n	800a38a <TIM_OC3_SetConfig+0x92>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <TIM_OC3_SetConfig+0xe4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d113      	bne.n	800a3b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	621a      	str	r2, [r3, #32]
}
 800a3cc:	bf00      	nop
 800a3ce:	371c      	adds	r7, #28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40010400 	.word	0x40010400

0800a3e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4313      	orrs	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a42a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	031b      	lsls	r3, r3, #12
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a12      	ldr	r2, [pc, #72]	; (800a484 <TIM_OC4_SetConfig+0xa4>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d003      	beq.n	800a448 <TIM_OC4_SetConfig+0x68>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a11      	ldr	r2, [pc, #68]	; (800a488 <TIM_OC4_SetConfig+0xa8>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d109      	bne.n	800a45c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	019b      	lsls	r3, r3, #6
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	621a      	str	r2, [r3, #32]
}
 800a476:	bf00      	nop
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	40010000 	.word	0x40010000
 800a488:	40010400 	.word	0x40010400

0800a48c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	f023 0201 	bic.w	r2, r3, #1
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f023 030a 	bic.w	r3, r3, #10
 800a4c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	621a      	str	r2, [r3, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b087      	sub	sp, #28
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f023 0210 	bic.w	r2, r3, #16
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	031b      	lsls	r3, r3, #12
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a526:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	621a      	str	r2, [r3, #32]
}
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	f043 0307 	orr.w	r3, r3, #7
 800a56c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	609a      	str	r2, [r3, #8]
}
 800a574:	bf00      	nop
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a59a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	021a      	lsls	r2, r3, #8
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	609a      	str	r2, [r3, #8]
}
 800a5b4:	bf00      	nop
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1a      	ldr	r2, [r3, #32]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a1a      	ldr	r2, [r3, #32]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f003 031f 	and.w	r3, r3, #31
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	621a      	str	r2, [r3, #32]
}
 800a5fe:	bf00      	nop
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
	...

0800a60c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a620:	2302      	movs	r3, #2
 800a622:	e05a      	b.n	800a6da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a21      	ldr	r2, [pc, #132]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d022      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a670:	d01d      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a1d      	ldr	r2, [pc, #116]	; (800a6ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d018      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1b      	ldr	r2, [pc, #108]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d013      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d00e      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a18      	ldr	r2, [pc, #96]	; (800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d009      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a17      	ldr	r2, [pc, #92]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d004      	beq.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a15      	ldr	r2, [pc, #84]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d10c      	bne.n	800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	40010000 	.word	0x40010000
 800a6ec:	40000400 	.word	0x40000400
 800a6f0:	40000800 	.word	0x40000800
 800a6f4:	40000c00 	.word	0x40000c00
 800a6f8:	40010400 	.word	0x40010400
 800a6fc:	40014000 	.word	0x40014000
 800a700:	40001800 	.word	0x40001800

0800a704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e03d      	b.n	800a79c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e042      	b.n	800a868 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7fa fec8 	bl	800558c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2224      	movs	r2, #36	; 0x24
 800a800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 ff41 	bl	800b69c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	695a      	ldr	r2, [r3, #20]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68da      	ldr	r2, [r3, #12]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08c      	sub	sp, #48	; 0x30
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	4613      	mov	r3, r2
 800a87c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b20      	cmp	r3, #32
 800a888:	d156      	bne.n	800a938 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <HAL_UART_Transmit_DMA+0x26>
 800a890:	88fb      	ldrh	r3, [r7, #6]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e04f      	b.n	800a93a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	88fa      	ldrh	r2, [r7, #6]
 800a8a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	88fa      	ldrh	r2, [r7, #6]
 800a8aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2221      	movs	r2, #33	; 0x21
 800a8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	4a21      	ldr	r2, [pc, #132]	; (800a944 <HAL_UART_Transmit_DMA+0xd4>)
 800a8c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	4a20      	ldr	r2, [pc, #128]	; (800a948 <HAL_UART_Transmit_DMA+0xd8>)
 800a8c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	4a1f      	ldr	r2, [pc, #124]	; (800a94c <HAL_UART_Transmit_DMA+0xdc>)
 800a8d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	6819      	ldr	r1, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	88fb      	ldrh	r3, [r7, #6]
 800a8f2:	f7fb ffb9 	bl	8006868 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3314      	adds	r3, #20
 800a906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	617b      	str	r3, [r7, #20]
   return(result);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a916:	62bb      	str	r3, [r7, #40]	; 0x28
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3314      	adds	r3, #20
 800a91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a920:	627a      	str	r2, [r7, #36]	; 0x24
 800a922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6a39      	ldr	r1, [r7, #32]
 800a926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e5      	bne.n	800a900 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	e000      	b.n	800a93a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a938:	2302      	movs	r3, #2
  }
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3730      	adds	r7, #48	; 0x30
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	0800af29 	.word	0x0800af29
 800a948:	0800afc3 	.word	0x0800afc3
 800a94c:	0800b147 	.word	0x0800b147

0800a950 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b20      	cmp	r3, #32
 800a968:	d112      	bne.n	800a990 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <HAL_UART_Receive_DMA+0x26>
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e00b      	b.n	800a992 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	461a      	mov	r2, r3
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 fc28 	bl	800b1dc <UART_Start_Receive_DMA>
 800a98c:	4603      	mov	r3, r0
 800a98e:	e000      	b.n	800a992 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b0ba      	sub	sp, #232	; 0xe8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a9da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10f      	bne.n	800aa02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e6:	f003 0320 	and.w	r3, r3, #32
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <HAL_UART_IRQHandler+0x66>
 800a9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fd8f 	bl	800b51e <UART_Receive_IT>
      return;
 800aa00:	e25b      	b.n	800aeba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 80de 	beq.w	800abc8 <HAL_UART_IRQHandler+0x22c>
 800aa0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d106      	bne.n	800aa26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80d1 	beq.w	800abc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00b      	beq.n	800aa4a <HAL_UART_IRQHandler+0xae>
 800aa32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d005      	beq.n	800aa4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa42:	f043 0201 	orr.w	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <HAL_UART_IRQHandler+0xd2>
 800aa56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa66:	f043 0202 	orr.w	r2, r3, #2
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00b      	beq.n	800aa92 <HAL_UART_IRQHandler+0xf6>
 800aa7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8a:	f043 0204 	orr.w	r2, r3, #4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa96:	f003 0308 	and.w	r3, r3, #8
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d011      	beq.n	800aac2 <HAL_UART_IRQHandler+0x126>
 800aa9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aaaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	f043 0208 	orr.w	r2, r3, #8
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 81f2 	beq.w	800aeb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad0:	f003 0320 	and.w	r3, r3, #32
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d008      	beq.n	800aaea <HAL_UART_IRQHandler+0x14e>
 800aad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fd1a 	bl	800b51e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	bf0c      	ite	eq
 800aaf8:	2301      	moveq	r3, #1
 800aafa:	2300      	movne	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab06:	f003 0308 	and.w	r3, r3, #8
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d103      	bne.n	800ab16 <HAL_UART_IRQHandler+0x17a>
 800ab0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d04f      	beq.n	800abb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fc22 	bl	800b360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab26:	2b40      	cmp	r3, #64	; 0x40
 800ab28:	d141      	bne.n	800abae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3314      	adds	r3, #20
 800ab30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3314      	adds	r3, #20
 800ab52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1d9      	bne.n	800ab2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d013      	beq.n	800aba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	4a7e      	ldr	r2, [pc, #504]	; (800ad7c <HAL_UART_IRQHandler+0x3e0>)
 800ab84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fb ff34 	bl	80069f8 <HAL_DMA_Abort_IT>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d016      	beq.n	800abc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba4:	e00e      	b.n	800abc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f9a8 	bl	800aefc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abac:	e00a      	b.n	800abc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f9a4 	bl	800aefc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	e006      	b.n	800abc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f9a0 	bl	800aefc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800abc2:	e175      	b.n	800aeb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc4:	bf00      	nop
    return;
 800abc6:	e173      	b.n	800aeb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	2b01      	cmp	r3, #1
 800abce:	f040 814f 	bne.w	800ae70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800abd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd6:	f003 0310 	and.w	r3, r3, #16
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8148 	beq.w	800ae70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800abe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe4:	f003 0310 	and.w	r3, r3, #16
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 8141 	beq.w	800ae70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abee:	2300      	movs	r3, #0
 800abf0:	60bb      	str	r3, [r7, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60bb      	str	r3, [r7, #8]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	60bb      	str	r3, [r7, #8]
 800ac02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0e:	2b40      	cmp	r3, #64	; 0x40
 800ac10:	f040 80b6 	bne.w	800ad80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8145 	beq.w	800aeb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac32:	429a      	cmp	r2, r3
 800ac34:	f080 813e 	bcs.w	800aeb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4a:	f000 8088 	beq.w	800ad5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	330c      	adds	r3, #12
 800ac54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac5c:	e853 3f00 	ldrex	r3, [r3]
 800ac60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1d9      	bne.n	800ac4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3314      	adds	r3, #20
 800aca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acac:	f023 0301 	bic.w	r3, r3, #1
 800acb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3314      	adds	r3, #20
 800acba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e1      	bne.n	800ac9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3314      	adds	r3, #20
 800acdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ace6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ace8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3314      	adds	r3, #20
 800acf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800acfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e3      	bne.n	800acd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2220      	movs	r2, #32
 800ad12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	330c      	adds	r3, #12
 800ad22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad2e:	f023 0310 	bic.w	r3, r3, #16
 800ad32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	330c      	adds	r3, #12
 800ad3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad40:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e3      	bne.n	800ad1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fb fddd 	bl	8006918 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2202      	movs	r2, #2
 800ad62:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f8cb 	bl	800af10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad7a:	e09b      	b.n	800aeb4 <HAL_UART_IRQHandler+0x518>
 800ad7c:	0800b427 	.word	0x0800b427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 808e 	beq.w	800aeb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ad9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8089 	beq.w	800aeb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	330c      	adds	r3, #12
 800adac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800adca:	647a      	str	r2, [r7, #68]	; 0x44
 800adcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800add0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e3      	bne.n	800ada6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3314      	adds	r3, #20
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	623b      	str	r3, [r7, #32]
   return(result);
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	f023 0301 	bic.w	r3, r3, #1
 800adf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3314      	adds	r3, #20
 800adfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae02:	633a      	str	r2, [r7, #48]	; 0x30
 800ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e3      	bne.n	800adde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	330c      	adds	r3, #12
 800ae2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0310 	bic.w	r3, r3, #16
 800ae3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	330c      	adds	r3, #12
 800ae44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae48:	61fa      	str	r2, [r7, #28]
 800ae4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	69b9      	ldr	r1, [r7, #24]
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	617b      	str	r3, [r7, #20]
   return(result);
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e3      	bne.n	800ae24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f851 	bl	800af10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae6e:	e023      	b.n	800aeb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d009      	beq.n	800ae90 <HAL_UART_IRQHandler+0x4f4>
 800ae7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d003      	beq.n	800ae90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fae0 	bl	800b44e <UART_Transmit_IT>
    return;
 800ae8e:	e014      	b.n	800aeba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00e      	beq.n	800aeba <HAL_UART_IRQHandler+0x51e>
 800ae9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d008      	beq.n	800aeba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fb20 	bl	800b4ee <UART_EndTransmit_IT>
    return;
 800aeae:	e004      	b.n	800aeba <HAL_UART_IRQHandler+0x51e>
    return;
 800aeb0:	bf00      	nop
 800aeb2:	e002      	b.n	800aeba <HAL_UART_IRQHandler+0x51e>
      return;
 800aeb4:	bf00      	nop
 800aeb6:	e000      	b.n	800aeba <HAL_UART_IRQHandler+0x51e>
      return;
 800aeb8:	bf00      	nop
  }
}
 800aeba:	37e8      	adds	r7, #232	; 0xe8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b090      	sub	sp, #64	; 0x40
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af40:	2b00      	cmp	r3, #0
 800af42:	d137      	bne.n	800afb4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af46:	2200      	movs	r2, #0
 800af48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3314      	adds	r3, #20
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	623b      	str	r3, [r7, #32]
   return(result);
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38
 800af62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3314      	adds	r3, #20
 800af68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af6a:	633a      	str	r2, [r7, #48]	; 0x30
 800af6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e5      	bne.n	800af4a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	330c      	adds	r3, #12
 800af84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af94:	637b      	str	r3, [r7, #52]	; 0x34
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	330c      	adds	r3, #12
 800af9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af9e:	61fa      	str	r2, [r7, #28]
 800afa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	69b9      	ldr	r1, [r7, #24]
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	617b      	str	r3, [r7, #20]
   return(result);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e5      	bne.n	800af7e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afb2:	e002      	b.n	800afba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afb6:	f7ff ff83 	bl	800aec0 <HAL_UART_TxCpltCallback>
}
 800afba:	bf00      	nop
 800afbc:	3740      	adds	r7, #64	; 0x40
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b084      	sub	sp, #16
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7ff ff7f 	bl	800aed4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b09c      	sub	sp, #112	; 0x70
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d172      	bne.n	800b0e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800affa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affc:	2200      	movs	r2, #0
 800affe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	330c      	adds	r3, #12
 800b006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b00a:	e853 3f00 	ldrex	r3, [r3]
 800b00e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b016:	66bb      	str	r3, [r7, #104]	; 0x68
 800b018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	330c      	adds	r3, #12
 800b01e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b020:	65ba      	str	r2, [r7, #88]	; 0x58
 800b022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b028:	e841 2300 	strex	r3, r2, [r1]
 800b02c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1e5      	bne.n	800b000 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	3314      	adds	r3, #20
 800b03a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	f023 0301 	bic.w	r3, r3, #1
 800b04a:	667b      	str	r3, [r7, #100]	; 0x64
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3314      	adds	r3, #20
 800b052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b054:	647a      	str	r2, [r7, #68]	; 0x44
 800b056:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b05a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e5      	bne.n	800b034 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3314      	adds	r3, #20
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	e853 3f00 	ldrex	r3, [r3]
 800b076:	623b      	str	r3, [r7, #32]
   return(result);
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b07e:	663b      	str	r3, [r7, #96]	; 0x60
 800b080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3314      	adds	r3, #20
 800b086:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b088:	633a      	str	r2, [r7, #48]	; 0x30
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b090:	e841 2300 	strex	r3, r2, [r1]
 800b094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e5      	bne.n	800b068 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b09c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09e:	2220      	movs	r2, #32
 800b0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d119      	bne.n	800b0e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f023 0310 	bic.w	r3, r3, #16
 800b0c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0cc:	61fa      	str	r2, [r7, #28]
 800b0ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	69b9      	ldr	r1, [r7, #24]
 800b0d2:	69fa      	ldr	r2, [r7, #28]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e5      	bne.n	800b0ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d106      	bne.n	800b0fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0f6:	f7ff ff0b 	bl	800af10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0fa:	e002      	b.n	800b102 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b0fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0fe:	f7ff fef3 	bl	800aee8 <HAL_UART_RxCpltCallback>
}
 800b102:	bf00      	nop
 800b104:	3770      	adds	r7, #112	; 0x70
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b116:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b122:	2b01      	cmp	r3, #1
 800b124:	d108      	bne.n	800b138 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff feed 	bl	800af10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b136:	e002      	b.n	800b13e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7f9 f947 	bl	80043cc <HAL_UART_RxHalfCpltCallback>
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b162:	2b80      	cmp	r3, #128	; 0x80
 800b164:	bf0c      	ite	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	2300      	movne	r3, #0
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b21      	cmp	r3, #33	; 0x21
 800b178:	d108      	bne.n	800b18c <UART_DMAError+0x46>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b186:	68b8      	ldr	r0, [r7, #8]
 800b188:	f000 f8c2 	bl	800b310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b196:	2b40      	cmp	r3, #64	; 0x40
 800b198:	bf0c      	ite	eq
 800b19a:	2301      	moveq	r3, #1
 800b19c:	2300      	movne	r3, #0
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b22      	cmp	r3, #34	; 0x22
 800b1ac:	d108      	bne.n	800b1c0 <UART_DMAError+0x7a>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b1ba:	68b8      	ldr	r0, [r7, #8]
 800b1bc:	f000 f8d0 	bl	800b360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c4:	f043 0210 	orr.w	r2, r3, #16
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1cc:	68b8      	ldr	r0, [r7, #8]
 800b1ce:	f7ff fe95 	bl	800aefc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d2:	bf00      	nop
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b098      	sub	sp, #96	; 0x60
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	88fa      	ldrh	r2, [r7, #6]
 800b1f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2222      	movs	r2, #34	; 0x22
 800b200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b208:	4a3e      	ldr	r2, [pc, #248]	; (800b304 <UART_Start_Receive_DMA+0x128>)
 800b20a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b210:	4a3d      	ldr	r2, [pc, #244]	; (800b308 <UART_Start_Receive_DMA+0x12c>)
 800b212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b218:	4a3c      	ldr	r2, [pc, #240]	; (800b30c <UART_Start_Receive_DMA+0x130>)
 800b21a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b220:	2200      	movs	r2, #0
 800b222:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b224:	f107 0308 	add.w	r3, r7, #8
 800b228:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	88fb      	ldrh	r3, [r7, #6]
 800b23c:	f7fb fb14 	bl	8006868 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	613b      	str	r3, [r7, #16]
 800b254:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d019      	beq.n	800b292 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	330c      	adds	r3, #12
 800b264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b274:	65bb      	str	r3, [r7, #88]	; 0x58
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	330c      	adds	r3, #12
 800b27c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b27e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e5      	bne.n	800b25e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3314      	adds	r3, #20
 800b298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	657b      	str	r3, [r7, #84]	; 0x54
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3314      	adds	r3, #20
 800b2b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2b2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b2b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e5      	bne.n	800b292 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3314      	adds	r3, #20
 800b2cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	e853 3f00 	ldrex	r3, [r3]
 800b2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2dc:	653b      	str	r3, [r7, #80]	; 0x50
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2e6:	627a      	str	r2, [r7, #36]	; 0x24
 800b2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ea:	6a39      	ldr	r1, [r7, #32]
 800b2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ee:	e841 2300 	strex	r3, r2, [r1]
 800b2f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1e5      	bne.n	800b2c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3760      	adds	r7, #96	; 0x60
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	0800afdf 	.word	0x0800afdf
 800b308:	0800b10b 	.word	0x0800b10b
 800b30c:	0800b147 	.word	0x0800b147

0800b310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b310:	b480      	push	{r7}
 800b312:	b089      	sub	sp, #36	; 0x24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	330c      	adds	r3, #12
 800b31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	60bb      	str	r3, [r7, #8]
   return(result);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	61ba      	str	r2, [r7, #24]
 800b33a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6979      	ldr	r1, [r7, #20]
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	613b      	str	r3, [r7, #16]
   return(result);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b354:	bf00      	nop
 800b356:	3724      	adds	r7, #36	; 0x24
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b095      	sub	sp, #84	; 0x54
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	330c      	adds	r3, #12
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b37e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	330c      	adds	r3, #12
 800b386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b388:	643a      	str	r2, [r7, #64]	; 0x40
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b38e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e5      	bne.n	800b368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f023 0301 	bic.w	r3, r3, #1
 800b3b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3314      	adds	r3, #20
 800b3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e5      	bne.n	800b39c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d119      	bne.n	800b40c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	e853 3f00 	ldrex	r3, [r3]
 800b3e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f023 0310 	bic.w	r3, r3, #16
 800b3ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	330c      	adds	r3, #12
 800b3f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3f8:	61ba      	str	r2, [r7, #24]
 800b3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6979      	ldr	r1, [r7, #20]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	613b      	str	r3, [r7, #16]
   return(result);
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e5      	bne.n	800b3d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2220      	movs	r2, #32
 800b410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b41a:	bf00      	nop
 800b41c:	3754      	adds	r7, #84	; 0x54
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff fd5b 	bl	800aefc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b44e:	b480      	push	{r7}
 800b450:	b085      	sub	sp, #20
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b21      	cmp	r3, #33	; 0x21
 800b460:	d13e      	bne.n	800b4e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	d114      	bne.n	800b496 <UART_Transmit_IT+0x48>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d110      	bne.n	800b496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	1c9a      	adds	r2, r3, #2
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	621a      	str	r2, [r3, #32]
 800b494:	e008      	b.n	800b4a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	1c59      	adds	r1, r3, #1
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6211      	str	r1, [r2, #32]
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10f      	bne.n	800b4dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e000      	b.n	800b4e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4e0:	2302      	movs	r3, #2
  }
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68da      	ldr	r2, [r3, #12]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fcd6 	bl	800aec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b08c      	sub	sp, #48	; 0x30
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b22      	cmp	r3, #34	; 0x22
 800b530:	f040 80ae 	bne.w	800b690 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53c:	d117      	bne.n	800b56e <UART_Receive_IT+0x50>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d113      	bne.n	800b56e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	1c9a      	adds	r2, r3, #2
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	629a      	str	r2, [r3, #40]	; 0x28
 800b56c:	e026      	b.n	800b5bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b580:	d007      	beq.n	800b592 <UART_Receive_IT+0x74>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <UART_Receive_IT+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d106      	bne.n	800b5a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e008      	b.n	800b5b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d15d      	bne.n	800b68c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0220 	bic.w	r2, r2, #32
 800b5de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0201 	bic.w	r2, r2, #1
 800b5fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	2b01      	cmp	r3, #1
 800b614:	d135      	bne.n	800b682 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	330c      	adds	r3, #12
 800b622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	613b      	str	r3, [r7, #16]
   return(result);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f023 0310 	bic.w	r3, r3, #16
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63c:	623a      	str	r2, [r7, #32]
 800b63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	69f9      	ldr	r1, [r7, #28]
 800b642:	6a3a      	ldr	r2, [r7, #32]
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e5      	bne.n	800b61c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d10a      	bne.n	800b674 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fc48 	bl	800af10 <HAL_UARTEx_RxEventCallback>
 800b680:	e002      	b.n	800b688 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff fc30 	bl	800aee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	e002      	b.n	800b692 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	e000      	b.n	800b692 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b690:	2302      	movs	r3, #2
  }
}
 800b692:	4618      	mov	r0, r3
 800b694:	3730      	adds	r7, #48	; 0x30
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b69c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6a0:	b0c0      	sub	sp, #256	; 0x100
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b8:	68d9      	ldr	r1, [r3, #12]
 800b6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	ea40 0301 	orr.w	r3, r0, r1
 800b6c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6f4:	f021 010c 	bic.w	r1, r1, #12
 800b6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b702:	430b      	orrs	r3, r1
 800b704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b716:	6999      	ldr	r1, [r3, #24]
 800b718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	ea40 0301 	orr.w	r3, r0, r1
 800b722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	4b8f      	ldr	r3, [pc, #572]	; (800b968 <UART_SetConfig+0x2cc>)
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d005      	beq.n	800b73c <UART_SetConfig+0xa0>
 800b730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4b8d      	ldr	r3, [pc, #564]	; (800b96c <UART_SetConfig+0x2d0>)
 800b738:	429a      	cmp	r2, r3
 800b73a:	d104      	bne.n	800b746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b73c:	f7fd fc74 	bl	8009028 <HAL_RCC_GetPCLK2Freq>
 800b740:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b744:	e003      	b.n	800b74e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b746:	f7fd fc5b 	bl	8009000 <HAL_RCC_GetPCLK1Freq>
 800b74a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b758:	f040 810c 	bne.w	800b974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b75c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b760:	2200      	movs	r2, #0
 800b762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b766:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b76a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b76e:	4622      	mov	r2, r4
 800b770:	462b      	mov	r3, r5
 800b772:	1891      	adds	r1, r2, r2
 800b774:	65b9      	str	r1, [r7, #88]	; 0x58
 800b776:	415b      	adcs	r3, r3
 800b778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b77a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b77e:	4621      	mov	r1, r4
 800b780:	eb12 0801 	adds.w	r8, r2, r1
 800b784:	4629      	mov	r1, r5
 800b786:	eb43 0901 	adc.w	r9, r3, r1
 800b78a:	f04f 0200 	mov.w	r2, #0
 800b78e:	f04f 0300 	mov.w	r3, #0
 800b792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b79a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b79e:	4690      	mov	r8, r2
 800b7a0:	4699      	mov	r9, r3
 800b7a2:	4623      	mov	r3, r4
 800b7a4:	eb18 0303 	adds.w	r3, r8, r3
 800b7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	eb49 0303 	adc.w	r3, r9, r3
 800b7b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b7c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	18db      	adds	r3, r3, r3
 800b7ce:	653b      	str	r3, [r7, #80]	; 0x50
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	eb42 0303 	adc.w	r3, r2, r3
 800b7d6:	657b      	str	r3, [r7, #84]	; 0x54
 800b7d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7e0:	f7f5 f9dc 	bl	8000b9c <__aeabi_uldivmod>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4b61      	ldr	r3, [pc, #388]	; (800b970 <UART_SetConfig+0x2d4>)
 800b7ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	011c      	lsls	r4, r3, #4
 800b7f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	1891      	adds	r1, r2, r2
 800b80a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b80c:	415b      	adcs	r3, r3
 800b80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b814:	4641      	mov	r1, r8
 800b816:	eb12 0a01 	adds.w	sl, r2, r1
 800b81a:	4649      	mov	r1, r9
 800b81c:	eb43 0b01 	adc.w	fp, r3, r1
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	f04f 0300 	mov.w	r3, #0
 800b828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b82c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b834:	4692      	mov	sl, r2
 800b836:	469b      	mov	fp, r3
 800b838:	4643      	mov	r3, r8
 800b83a:	eb1a 0303 	adds.w	r3, sl, r3
 800b83e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b842:	464b      	mov	r3, r9
 800b844:	eb4b 0303 	adc.w	r3, fp, r3
 800b848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b85c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b860:	460b      	mov	r3, r1
 800b862:	18db      	adds	r3, r3, r3
 800b864:	643b      	str	r3, [r7, #64]	; 0x40
 800b866:	4613      	mov	r3, r2
 800b868:	eb42 0303 	adc.w	r3, r2, r3
 800b86c:	647b      	str	r3, [r7, #68]	; 0x44
 800b86e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b876:	f7f5 f991 	bl	8000b9c <__aeabi_uldivmod>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	4b3b      	ldr	r3, [pc, #236]	; (800b970 <UART_SetConfig+0x2d4>)
 800b882:	fba3 2301 	umull	r2, r3, r3, r1
 800b886:	095b      	lsrs	r3, r3, #5
 800b888:	2264      	movs	r2, #100	; 0x64
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
 800b88e:	1acb      	subs	r3, r1, r3
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b896:	4b36      	ldr	r3, [pc, #216]	; (800b970 <UART_SetConfig+0x2d4>)
 800b898:	fba3 2302 	umull	r2, r3, r3, r2
 800b89c:	095b      	lsrs	r3, r3, #5
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8a4:	441c      	add	r4, r3
 800b8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b8b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	1891      	adds	r1, r2, r2
 800b8be:	63b9      	str	r1, [r7, #56]	; 0x38
 800b8c0:	415b      	adcs	r3, r3
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	1851      	adds	r1, r2, r1
 800b8cc:	6339      	str	r1, [r7, #48]	; 0x30
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	414b      	adcs	r3, r1
 800b8d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8e0:	4659      	mov	r1, fp
 800b8e2:	00cb      	lsls	r3, r1, #3
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ea:	4651      	mov	r1, sl
 800b8ec:	00ca      	lsls	r2, r1, #3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	189b      	adds	r3, r3, r2
 800b8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	460a      	mov	r2, r1
 800b900:	eb42 0303 	adc.w	r3, r2, r3
 800b904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b91c:	460b      	mov	r3, r1
 800b91e:	18db      	adds	r3, r3, r3
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
 800b922:	4613      	mov	r3, r2
 800b924:	eb42 0303 	adc.w	r3, r2, r3
 800b928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b92a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b92e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b932:	f7f5 f933 	bl	8000b9c <__aeabi_uldivmod>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <UART_SetConfig+0x2d4>)
 800b93c:	fba3 1302 	umull	r1, r3, r3, r2
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	2164      	movs	r1, #100	; 0x64
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	3332      	adds	r3, #50	; 0x32
 800b94e:	4a08      	ldr	r2, [pc, #32]	; (800b970 <UART_SetConfig+0x2d4>)
 800b950:	fba2 2303 	umull	r2, r3, r2, r3
 800b954:	095b      	lsrs	r3, r3, #5
 800b956:	f003 0207 	and.w	r2, r3, #7
 800b95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4422      	add	r2, r4
 800b962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b964:	e106      	b.n	800bb74 <UART_SetConfig+0x4d8>
 800b966:	bf00      	nop
 800b968:	40011000 	.word	0x40011000
 800b96c:	40011400 	.word	0x40011400
 800b970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b97e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b986:	4642      	mov	r2, r8
 800b988:	464b      	mov	r3, r9
 800b98a:	1891      	adds	r1, r2, r2
 800b98c:	6239      	str	r1, [r7, #32]
 800b98e:	415b      	adcs	r3, r3
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
 800b992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b996:	4641      	mov	r1, r8
 800b998:	1854      	adds	r4, r2, r1
 800b99a:	4649      	mov	r1, r9
 800b99c:	eb43 0501 	adc.w	r5, r3, r1
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	f04f 0300 	mov.w	r3, #0
 800b9a8:	00eb      	lsls	r3, r5, #3
 800b9aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9ae:	00e2      	lsls	r2, r4, #3
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	461d      	mov	r5, r3
 800b9b4:	4643      	mov	r3, r8
 800b9b6:	18e3      	adds	r3, r4, r3
 800b9b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9bc:	464b      	mov	r3, r9
 800b9be:	eb45 0303 	adc.w	r3, r5, r3
 800b9c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9d6:	f04f 0200 	mov.w	r2, #0
 800b9da:	f04f 0300 	mov.w	r3, #0
 800b9de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	008b      	lsls	r3, r1, #2
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	008a      	lsls	r2, r1, #2
 800b9f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9f4:	f7f5 f8d2 	bl	8000b9c <__aeabi_uldivmod>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4b60      	ldr	r3, [pc, #384]	; (800bb80 <UART_SetConfig+0x4e4>)
 800b9fe:	fba3 2302 	umull	r2, r3, r3, r2
 800ba02:	095b      	lsrs	r3, r3, #5
 800ba04:	011c      	lsls	r4, r3, #4
 800ba06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ba18:	4642      	mov	r2, r8
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	1891      	adds	r1, r2, r2
 800ba1e:	61b9      	str	r1, [r7, #24]
 800ba20:	415b      	adcs	r3, r3
 800ba22:	61fb      	str	r3, [r7, #28]
 800ba24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba28:	4641      	mov	r1, r8
 800ba2a:	1851      	adds	r1, r2, r1
 800ba2c:	6139      	str	r1, [r7, #16]
 800ba2e:	4649      	mov	r1, r9
 800ba30:	414b      	adcs	r3, r1
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	f04f 0300 	mov.w	r3, #0
 800ba3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba40:	4659      	mov	r1, fp
 800ba42:	00cb      	lsls	r3, r1, #3
 800ba44:	4651      	mov	r1, sl
 800ba46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	00ca      	lsls	r2, r1, #3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	4619      	mov	r1, r3
 800ba52:	4603      	mov	r3, r0
 800ba54:	4642      	mov	r2, r8
 800ba56:	189b      	adds	r3, r3, r2
 800ba58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba5c:	464b      	mov	r3, r9
 800ba5e:	460a      	mov	r2, r1
 800ba60:	eb42 0303 	adc.w	r3, r2, r3
 800ba64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba72:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	f04f 0300 	mov.w	r3, #0
 800ba7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba80:	4649      	mov	r1, r9
 800ba82:	008b      	lsls	r3, r1, #2
 800ba84:	4641      	mov	r1, r8
 800ba86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba8a:	4641      	mov	r1, r8
 800ba8c:	008a      	lsls	r2, r1, #2
 800ba8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba92:	f7f5 f883 	bl	8000b9c <__aeabi_uldivmod>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4b38      	ldr	r3, [pc, #224]	; (800bb80 <UART_SetConfig+0x4e4>)
 800ba9e:	fba3 2301 	umull	r2, r3, r3, r1
 800baa2:	095b      	lsrs	r3, r3, #5
 800baa4:	2264      	movs	r2, #100	; 0x64
 800baa6:	fb02 f303 	mul.w	r3, r2, r3
 800baaa:	1acb      	subs	r3, r1, r3
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	3332      	adds	r3, #50	; 0x32
 800bab0:	4a33      	ldr	r2, [pc, #204]	; (800bb80 <UART_SetConfig+0x4e4>)
 800bab2:	fba2 2303 	umull	r2, r3, r2, r3
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800babc:	441c      	add	r4, r3
 800babe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bac2:	2200      	movs	r2, #0
 800bac4:	673b      	str	r3, [r7, #112]	; 0x70
 800bac6:	677a      	str	r2, [r7, #116]	; 0x74
 800bac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bacc:	4642      	mov	r2, r8
 800bace:	464b      	mov	r3, r9
 800bad0:	1891      	adds	r1, r2, r2
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	415b      	adcs	r3, r3
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800badc:	4641      	mov	r1, r8
 800bade:	1851      	adds	r1, r2, r1
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	4649      	mov	r1, r9
 800bae4:	414b      	adcs	r3, r1
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	f04f 0200 	mov.w	r2, #0
 800baec:	f04f 0300 	mov.w	r3, #0
 800baf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800baf4:	4659      	mov	r1, fp
 800baf6:	00cb      	lsls	r3, r1, #3
 800baf8:	4651      	mov	r1, sl
 800bafa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bafe:	4651      	mov	r1, sl
 800bb00:	00ca      	lsls	r2, r1, #3
 800bb02:	4610      	mov	r0, r2
 800bb04:	4619      	mov	r1, r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	4642      	mov	r2, r8
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb0e:	464b      	mov	r3, r9
 800bb10:	460a      	mov	r2, r1
 800bb12:	eb42 0303 	adc.w	r3, r2, r3
 800bb16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	663b      	str	r3, [r7, #96]	; 0x60
 800bb22:	667a      	str	r2, [r7, #100]	; 0x64
 800bb24:	f04f 0200 	mov.w	r2, #0
 800bb28:	f04f 0300 	mov.w	r3, #0
 800bb2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bb30:	4649      	mov	r1, r9
 800bb32:	008b      	lsls	r3, r1, #2
 800bb34:	4641      	mov	r1, r8
 800bb36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb3a:	4641      	mov	r1, r8
 800bb3c:	008a      	lsls	r2, r1, #2
 800bb3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb42:	f7f5 f82b 	bl	8000b9c <__aeabi_uldivmod>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <UART_SetConfig+0x4e4>)
 800bb4c:	fba3 1302 	umull	r1, r3, r3, r2
 800bb50:	095b      	lsrs	r3, r3, #5
 800bb52:	2164      	movs	r1, #100	; 0x64
 800bb54:	fb01 f303 	mul.w	r3, r1, r3
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	3332      	adds	r3, #50	; 0x32
 800bb5e:	4a08      	ldr	r2, [pc, #32]	; (800bb80 <UART_SetConfig+0x4e4>)
 800bb60:	fba2 2303 	umull	r2, r3, r2, r3
 800bb64:	095b      	lsrs	r3, r3, #5
 800bb66:	f003 020f 	and.w	r2, r3, #15
 800bb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4422      	add	r2, r4
 800bb72:	609a      	str	r2, [r3, #8]
}
 800bb74:	bf00      	nop
 800bb76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb80:	51eb851f 	.word	0x51eb851f

0800bb84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb84:	b084      	sub	sp, #16
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	f107 001c 	add.w	r0, r7, #28
 800bb92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d123      	bne.n	800bbe6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bbb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bbc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d105      	bne.n	800bbda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 fae2 	bl	800d1a4 <USB_CoreReset>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
 800bbe4:	e01b      	b.n	800bc1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 fad6 	bl	800d1a4 <USB_CoreReset>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bbfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	639a      	str	r2, [r3, #56]	; 0x38
 800bc10:	e005      	b.n	800bc1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc1e:	7fbb      	ldrb	r3, [r7, #30]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10b      	bne.n	800bc3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f043 0206 	orr.w	r2, r3, #6
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f043 0220 	orr.w	r2, r3, #32
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc48:	b004      	add	sp, #16
 800bc4a:	4770      	bx	lr

0800bc4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	4613      	mov	r3, r2
 800bc58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d165      	bne.n	800bd2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	4a41      	ldr	r2, [pc, #260]	; (800bd68 <USB_SetTurnaroundTime+0x11c>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d906      	bls.n	800bc76 <USB_SetTurnaroundTime+0x2a>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4a40      	ldr	r2, [pc, #256]	; (800bd6c <USB_SetTurnaroundTime+0x120>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d202      	bcs.n	800bc76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bc70:	230f      	movs	r3, #15
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	e062      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	4a3c      	ldr	r2, [pc, #240]	; (800bd6c <USB_SetTurnaroundTime+0x120>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d306      	bcc.n	800bc8c <USB_SetTurnaroundTime+0x40>
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	4a3b      	ldr	r2, [pc, #236]	; (800bd70 <USB_SetTurnaroundTime+0x124>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d202      	bcs.n	800bc8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bc86:	230e      	movs	r3, #14
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	e057      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	4a38      	ldr	r2, [pc, #224]	; (800bd70 <USB_SetTurnaroundTime+0x124>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d306      	bcc.n	800bca2 <USB_SetTurnaroundTime+0x56>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4a37      	ldr	r2, [pc, #220]	; (800bd74 <USB_SetTurnaroundTime+0x128>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d202      	bcs.n	800bca2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bc9c:	230d      	movs	r3, #13
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e04c      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	4a33      	ldr	r2, [pc, #204]	; (800bd74 <USB_SetTurnaroundTime+0x128>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d306      	bcc.n	800bcb8 <USB_SetTurnaroundTime+0x6c>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	4a32      	ldr	r2, [pc, #200]	; (800bd78 <USB_SetTurnaroundTime+0x12c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d802      	bhi.n	800bcb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	e041      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	4a2f      	ldr	r2, [pc, #188]	; (800bd78 <USB_SetTurnaroundTime+0x12c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d906      	bls.n	800bcce <USB_SetTurnaroundTime+0x82>
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	4a2e      	ldr	r2, [pc, #184]	; (800bd7c <USB_SetTurnaroundTime+0x130>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d802      	bhi.n	800bcce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bcc8:	230b      	movs	r3, #11
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	e036      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	4a2a      	ldr	r2, [pc, #168]	; (800bd7c <USB_SetTurnaroundTime+0x130>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d906      	bls.n	800bce4 <USB_SetTurnaroundTime+0x98>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	4a29      	ldr	r2, [pc, #164]	; (800bd80 <USB_SetTurnaroundTime+0x134>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d802      	bhi.n	800bce4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bcde:	230a      	movs	r3, #10
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	e02b      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	4a26      	ldr	r2, [pc, #152]	; (800bd80 <USB_SetTurnaroundTime+0x134>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d906      	bls.n	800bcfa <USB_SetTurnaroundTime+0xae>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	4a25      	ldr	r2, [pc, #148]	; (800bd84 <USB_SetTurnaroundTime+0x138>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d202      	bcs.n	800bcfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bcf4:	2309      	movs	r3, #9
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	e020      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	4a21      	ldr	r2, [pc, #132]	; (800bd84 <USB_SetTurnaroundTime+0x138>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d306      	bcc.n	800bd10 <USB_SetTurnaroundTime+0xc4>
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	4a20      	ldr	r2, [pc, #128]	; (800bd88 <USB_SetTurnaroundTime+0x13c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d802      	bhi.n	800bd10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e015      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	4a1d      	ldr	r2, [pc, #116]	; (800bd88 <USB_SetTurnaroundTime+0x13c>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d906      	bls.n	800bd26 <USB_SetTurnaroundTime+0xda>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	4a1c      	ldr	r2, [pc, #112]	; (800bd8c <USB_SetTurnaroundTime+0x140>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d202      	bcs.n	800bd26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bd20:	2307      	movs	r3, #7
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	e00a      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bd26:	2306      	movs	r3, #6
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	e007      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bd32:	2309      	movs	r3, #9
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	e001      	b.n	800bd3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bd38:	2309      	movs	r3, #9
 800bd3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	029b      	lsls	r3, r3, #10
 800bd50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bd54:	431a      	orrs	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	00d8acbf 	.word	0x00d8acbf
 800bd6c:	00e4e1c0 	.word	0x00e4e1c0
 800bd70:	00f42400 	.word	0x00f42400
 800bd74:	01067380 	.word	0x01067380
 800bd78:	011a499f 	.word	0x011a499f
 800bd7c:	01312cff 	.word	0x01312cff
 800bd80:	014ca43f 	.word	0x014ca43f
 800bd84:	016e3600 	.word	0x016e3600
 800bd88:	01a6ab1f 	.word	0x01a6ab1f
 800bd8c:	01e84800 	.word	0x01e84800

0800bd90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f043 0201 	orr.w	r2, r3, #1
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f023 0201 	bic.w	r2, r3, #1
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d115      	bne.n	800be22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be02:	200a      	movs	r0, #10
 800be04:	f7f9 fce4 	bl	80057d0 <HAL_Delay>
      ms += 10U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	330a      	adds	r3, #10
 800be0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f001 f939 	bl	800d086 <USB_GetMode>
 800be14:	4603      	mov	r3, r0
 800be16:	2b01      	cmp	r3, #1
 800be18:	d01e      	beq.n	800be58 <USB_SetCurrentMode+0x84>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2bc7      	cmp	r3, #199	; 0xc7
 800be1e:	d9f0      	bls.n	800be02 <USB_SetCurrentMode+0x2e>
 800be20:	e01a      	b.n	800be58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d115      	bne.n	800be54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be34:	200a      	movs	r0, #10
 800be36:	f7f9 fccb 	bl	80057d0 <HAL_Delay>
      ms += 10U;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	330a      	adds	r3, #10
 800be3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 f920 	bl	800d086 <USB_GetMode>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <USB_SetCurrentMode+0x84>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2bc7      	cmp	r3, #199	; 0xc7
 800be50:	d9f0      	bls.n	800be34 <USB_SetCurrentMode+0x60>
 800be52:	e001      	b.n	800be58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e005      	b.n	800be64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2bc8      	cmp	r3, #200	; 0xc8
 800be5c:	d101      	bne.n	800be62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be6c:	b084      	sub	sp, #16
 800be6e:	b580      	push	{r7, lr}
 800be70:	b086      	sub	sp, #24
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800be7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800be86:	2300      	movs	r3, #0
 800be88:	613b      	str	r3, [r7, #16]
 800be8a:	e009      	b.n	800bea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3340      	adds	r3, #64	; 0x40
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	2200      	movs	r2, #0
 800be98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	3301      	adds	r3, #1
 800be9e:	613b      	str	r3, [r7, #16]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b0e      	cmp	r3, #14
 800bea4:	d9f2      	bls.n	800be8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bea6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d11c      	bne.n	800bee8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bebc:	f043 0302 	orr.w	r3, r3, #2
 800bec0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	639a      	str	r2, [r3, #56]	; 0x38
 800bee6:	e00b      	b.n	800bf00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf06:	461a      	mov	r2, r3
 800bf08:	2300      	movs	r3, #0
 800bf0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf0c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d10d      	bne.n	800bf30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d104      	bne.n	800bf26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f968 	bl	800c1f4 <USB_SetDevSpeed>
 800bf24:	e008      	b.n	800bf38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bf26:	2101      	movs	r1, #1
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f963 	bl	800c1f4 <USB_SetDevSpeed>
 800bf2e:	e003      	b.n	800bf38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bf30:	2103      	movs	r1, #3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f95e 	bl	800c1f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf38:	2110      	movs	r1, #16
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f8fa 	bl	800c134 <USB_FlushTxFifo>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f924 	bl	800c198 <USB_FlushRxFifo>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf60:	461a      	mov	r2, r3
 800bf62:	2300      	movs	r3, #0
 800bf64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	2300      	movs	r3, #0
 800bf70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf78:	461a      	mov	r2, r3
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf7e:	2300      	movs	r3, #0
 800bf80:	613b      	str	r3, [r7, #16]
 800bf82:	e043      	b.n	800c00c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf9a:	d118      	bne.n	800bfce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	e013      	b.n	800bfe0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	e008      	b.n	800bfe0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	015a      	lsls	r2, r3, #5
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfda:	461a      	mov	r2, r3
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	015a      	lsls	r2, r3, #5
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfec:	461a      	mov	r2, r3
 800bfee:	2300      	movs	r3, #0
 800bff0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	015a      	lsls	r2, r3, #5
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	4413      	add	r3, r2
 800bffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffe:	461a      	mov	r2, r3
 800c000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3301      	adds	r3, #1
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c010:	461a      	mov	r2, r3
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	4293      	cmp	r3, r2
 800c016:	d3b5      	bcc.n	800bf84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c018:	2300      	movs	r3, #0
 800c01a:	613b      	str	r3, [r7, #16]
 800c01c:	e043      	b.n	800c0a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c034:	d118      	bne.n	800c068 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c048:	461a      	mov	r2, r3
 800c04a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	e013      	b.n	800c07a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	015a      	lsls	r2, r3, #5
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c05e:	461a      	mov	r2, r3
 800c060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c064:	6013      	str	r3, [r2, #0]
 800c066:	e008      	b.n	800c07a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c074:	461a      	mov	r2, r3
 800c076:	2300      	movs	r3, #0
 800c078:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	4413      	add	r3, r2
 800c082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c086:	461a      	mov	r2, r3
 800c088:	2300      	movs	r3, #0
 800c08a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c098:	461a      	mov	r2, r3
 800c09a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c09e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d3b5      	bcc.n	800c01e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c0d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d105      	bne.n	800c0e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	f043 0210 	orr.w	r2, r3, #16
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	699a      	ldr	r2, [r3, #24]
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <USB_DevInit+0x2c4>)
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c0f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	f043 0208 	orr.w	r2, r3, #8
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c108:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d107      	bne.n	800c120 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c118:	f043 0304 	orr.w	r3, r3, #4
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c120:	7dfb      	ldrb	r3, [r7, #23]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c12c:	b004      	add	sp, #16
 800c12e:	4770      	bx	lr
 800c130:	803c3800 	.word	0x803c3800

0800c134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c14e:	d901      	bls.n	800c154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e01b      	b.n	800c18c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	daf2      	bge.n	800c142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	019b      	lsls	r3, r3, #6
 800c164:	f043 0220 	orr.w	r2, r3, #32
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c178:	d901      	bls.n	800c17e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e006      	b.n	800c18c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	f003 0320 	and.w	r3, r3, #32
 800c186:	2b20      	cmp	r3, #32
 800c188:	d0f0      	beq.n	800c16c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c1b0:	d901      	bls.n	800c1b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e018      	b.n	800c1e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	daf2      	bge.n	800c1a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2210      	movs	r2, #16
 800c1c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c1d4:	d901      	bls.n	800c1da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e006      	b.n	800c1e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d0f0      	beq.n	800c1c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	68f9      	ldr	r1, [r7, #12]
 800c210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c214:	4313      	orrs	r3, r2
 800c216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c226:	b480      	push	{r7}
 800c228:	b087      	sub	sp, #28
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f003 0306 	and.w	r3, r3, #6
 800c23e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d102      	bne.n	800c24c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c246:	2300      	movs	r3, #0
 800c248:	75fb      	strb	r3, [r7, #23]
 800c24a:	e00a      	b.n	800c262 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d002      	beq.n	800c258 <USB_GetDevSpeed+0x32>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b06      	cmp	r3, #6
 800c256:	d102      	bne.n	800c25e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c258:	2302      	movs	r3, #2
 800c25a:	75fb      	strb	r3, [r7, #23]
 800c25c:	e001      	b.n	800c262 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c25e:	230f      	movs	r3, #15
 800c260:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c262:	7dfb      	ldrb	r3, [r7, #23]
}
 800c264:	4618      	mov	r0, r3
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d13a      	bne.n	800c302 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	69da      	ldr	r2, [r3, #28]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 030f 	and.w	r3, r3, #15
 800c29c:	2101      	movs	r1, #1
 800c29e:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	68f9      	ldr	r1, [r7, #12]
 800c2a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d155      	bne.n	800c370 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	015a      	lsls	r2, r3, #5
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	791b      	ldrb	r3, [r3, #4]
 800c2de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	059b      	lsls	r3, r3, #22
 800c2e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	0151      	lsls	r1, r2, #5
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	440a      	add	r2, r1
 800c2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	e036      	b.n	800c370 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c308:	69da      	ldr	r2, [r3, #28]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	f003 030f 	and.w	r3, r3, #15
 800c312:	2101      	movs	r1, #1
 800c314:	fa01 f303 	lsl.w	r3, r1, r3
 800c318:	041b      	lsls	r3, r3, #16
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c320:	4313      	orrs	r3, r2
 800c322:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d11a      	bne.n	800c370 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4413      	add	r3, r2
 800c342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	791b      	ldrb	r3, [r3, #4]
 800c354:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c356:	430b      	orrs	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	0151      	lsls	r1, r2, #5
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	440a      	add	r2, r1
 800c362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c36e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
	...

0800c380 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	785b      	ldrb	r3, [r3, #1]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d161      	bne.n	800c460 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3b2:	d11f      	bne.n	800c3f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	015a      	lsls	r2, r3, #5
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	0151      	lsls	r1, r2, #5
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	440a      	add	r2, r1
 800c3ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c3d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	0151      	lsls	r1, r2, #5
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	440a      	add	r2, r1
 800c3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	f003 030f 	and.w	r3, r3, #15
 800c404:	2101      	movs	r1, #1
 800c406:	fa01 f303 	lsl.w	r3, r1, r3
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	43db      	mvns	r3, r3
 800c40e:	68f9      	ldr	r1, [r7, #12]
 800c410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c414:	4013      	ands	r3, r2
 800c416:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c41e:	69da      	ldr	r2, [r3, #28]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	2101      	movs	r1, #1
 800c42a:	fa01 f303 	lsl.w	r3, r1, r3
 800c42e:	b29b      	uxth	r3, r3
 800c430:	43db      	mvns	r3, r3
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c438:	4013      	ands	r3, r2
 800c43a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	0159      	lsls	r1, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	440b      	add	r3, r1
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	4619      	mov	r1, r3
 800c458:	4b35      	ldr	r3, [pc, #212]	; (800c530 <USB_DeactivateEndpoint+0x1b0>)
 800c45a:	4013      	ands	r3, r2
 800c45c:	600b      	str	r3, [r1, #0]
 800c45e:	e060      	b.n	800c522 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c476:	d11f      	bne.n	800c4b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	0151      	lsls	r1, r2, #5
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	440a      	add	r2, r1
 800c48e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c496:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	0151      	lsls	r1, r2, #5
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	440a      	add	r2, r1
 800c4ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	f003 030f 	and.w	r3, r3, #15
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ce:	041b      	lsls	r3, r3, #16
 800c4d0:	43db      	mvns	r3, r3
 800c4d2:	68f9      	ldr	r1, [r7, #12]
 800c4d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4d8:	4013      	ands	r3, r2
 800c4da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e2:	69da      	ldr	r2, [r3, #28]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f003 030f 	and.w	r3, r3, #15
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f2:	041b      	lsls	r3, r3, #16
 800c4f4:	43db      	mvns	r3, r3
 800c4f6:	68f9      	ldr	r1, [r7, #12]
 800c4f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	015a      	lsls	r2, r3, #5
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	4413      	add	r3, r2
 800c508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	0159      	lsls	r1, r3, #5
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	440b      	add	r3, r1
 800c516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c51a:	4619      	mov	r1, r3
 800c51c:	4b05      	ldr	r3, [pc, #20]	; (800c534 <USB_DeactivateEndpoint+0x1b4>)
 800c51e:	4013      	ands	r3, r2
 800c520:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	ec337800 	.word	0xec337800
 800c534:	eff37800 	.word	0xeff37800

0800c538 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08a      	sub	sp, #40	; 0x28
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	4613      	mov	r3, r2
 800c544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	785b      	ldrb	r3, [r3, #1]
 800c554:	2b01      	cmp	r3, #1
 800c556:	f040 817a 	bne.w	800c84e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d132      	bne.n	800c5c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	015a      	lsls	r2, r3, #5
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	4413      	add	r3, r2
 800c56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	0151      	lsls	r1, r2, #5
 800c574:	69fa      	ldr	r2, [r7, #28]
 800c576:	440a      	add	r2, r1
 800c578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c580:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	0151      	lsls	r1, r2, #5
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	440a      	add	r2, r1
 800c59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	015a      	lsls	r2, r3, #5
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	69ba      	ldr	r2, [r7, #24]
 800c5b6:	0151      	lsls	r1, r2, #5
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5c0:	0cdb      	lsrs	r3, r3, #19
 800c5c2:	04db      	lsls	r3, r3, #19
 800c5c4:	6113      	str	r3, [r2, #16]
 800c5c6:	e092      	b.n	800c6ee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e2:	0cdb      	lsrs	r3, r3, #19
 800c5e4:	04db      	lsls	r3, r3, #19
 800c5e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	69fa      	ldr	r2, [r7, #28]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c60a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d11a      	bne.n	800c648 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	691a      	ldr	r2, [r3, #16]
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d903      	bls.n	800c626 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	69ba      	ldr	r2, [r7, #24]
 800c636:	0151      	lsls	r1, r2, #5
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	440a      	add	r2, r1
 800c63c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c644:	6113      	str	r3, [r2, #16]
 800c646:	e01b      	b.n	800c680 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c654:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	6919      	ldr	r1, [r3, #16]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	440b      	add	r3, r1
 800c660:	1e59      	subs	r1, r3, #1
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	fbb1 f3f3 	udiv	r3, r1, r3
 800c66a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c66c:	4ba2      	ldr	r3, [pc, #648]	; (800c8f8 <USB_EPStartXfer+0x3c0>)
 800c66e:	400b      	ands	r3, r1
 800c670:	69b9      	ldr	r1, [r7, #24]
 800c672:	0148      	lsls	r0, r1, #5
 800c674:	69f9      	ldr	r1, [r7, #28]
 800c676:	4401      	add	r1, r0
 800c678:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c67c:	4313      	orrs	r3, r2
 800c67e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68c:	691a      	ldr	r2, [r3, #16]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c696:	69b9      	ldr	r1, [r7, #24]
 800c698:	0148      	lsls	r0, r1, #5
 800c69a:	69f9      	ldr	r1, [r7, #28]
 800c69c:	4401      	add	r1, r0
 800c69e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	791b      	ldrb	r3, [r3, #4]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d11f      	bne.n	800c6ee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	0151      	lsls	r1, r2, #5
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	440a      	add	r2, r1
 800c6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c6cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	0151      	lsls	r1, r2, #5
 800c6e0:	69fa      	ldr	r2, [r7, #28]
 800c6e2:	440a      	add	r2, r1
 800c6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c6ee:	79fb      	ldrb	r3, [r7, #7]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d14b      	bne.n	800c78c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	69db      	ldr	r3, [r3, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d009      	beq.n	800c710 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c708:	461a      	mov	r2, r3
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	791b      	ldrb	r3, [r3, #4]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d128      	bne.n	800c76a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c724:	2b00      	cmp	r3, #0
 800c726:	d110      	bne.n	800c74a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	015a      	lsls	r2, r3, #5
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	4413      	add	r3, r2
 800c730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	0151      	lsls	r1, r2, #5
 800c73a:	69fa      	ldr	r2, [r7, #28]
 800c73c:	440a      	add	r2, r1
 800c73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	e00f      	b.n	800c76a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	69ba      	ldr	r2, [r7, #24]
 800c75a:	0151      	lsls	r1, r2, #5
 800c75c:	69fa      	ldr	r2, [r7, #28]
 800c75e:	440a      	add	r2, r1
 800c760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c768:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	0151      	lsls	r1, r2, #5
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	440a      	add	r2, r1
 800c780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	e165      	b.n	800ca58 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	015a      	lsls	r2, r3, #5
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	4413      	add	r3, r2
 800c794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	69ba      	ldr	r2, [r7, #24]
 800c79c:	0151      	lsls	r1, r2, #5
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	440a      	add	r2, r1
 800c7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	791b      	ldrb	r3, [r3, #4]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d015      	beq.n	800c7e0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f000 814d 	beq.w	800ca58 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	f003 030f 	and.w	r3, r3, #15
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d4:	69f9      	ldr	r1, [r7, #28]
 800c7d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	634b      	str	r3, [r1, #52]	; 0x34
 800c7de:	e13b      	b.n	800ca58 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d110      	bne.n	800c812 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	0151      	lsls	r1, r2, #5
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	440a      	add	r2, r1
 800c806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c80a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e00f      	b.n	800c832 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	0151      	lsls	r1, r2, #5
 800c824:	69fa      	ldr	r2, [r7, #28]
 800c826:	440a      	add	r2, r1
 800c828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	68d9      	ldr	r1, [r3, #12]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	781a      	ldrb	r2, [r3, #0]
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	b298      	uxth	r0, r3
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	4603      	mov	r3, r0
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f000 f9b8 	bl	800cbbc <USB_WritePacket>
 800c84c:	e104      	b.n	800ca58 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	4413      	add	r3, r2
 800c856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	69ba      	ldr	r2, [r7, #24]
 800c85e:	0151      	lsls	r1, r2, #5
 800c860:	69fa      	ldr	r2, [r7, #28]
 800c862:	440a      	add	r2, r1
 800c864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c868:	0cdb      	lsrs	r3, r3, #19
 800c86a:	04db      	lsls	r3, r3, #19
 800c86c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	4413      	add	r3, r2
 800c876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	69ba      	ldr	r2, [r7, #24]
 800c87e:	0151      	lsls	r1, r2, #5
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	440a      	add	r2, r1
 800c884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c88c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c890:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d131      	bne.n	800c8fc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	689a      	ldr	r2, [r3, #8]
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	015a      	lsls	r2, r3, #5
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8bc:	691a      	ldr	r2, [r3, #16]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8c6:	69b9      	ldr	r1, [r7, #24]
 800c8c8:	0148      	lsls	r0, r1, #5
 800c8ca:	69f9      	ldr	r1, [r7, #28]
 800c8cc:	4401      	add	r1, r0
 800c8ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8f4:	6113      	str	r3, [r2, #16]
 800c8f6:	e061      	b.n	800c9bc <USB_EPStartXfer+0x484>
 800c8f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d123      	bne.n	800c94c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c910:	691a      	ldr	r2, [r3, #16]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c91a:	69b9      	ldr	r1, [r7, #24]
 800c91c:	0148      	lsls	r0, r1, #5
 800c91e:	69f9      	ldr	r1, [r7, #28]
 800c920:	4401      	add	r1, r0
 800c922:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c926:	4313      	orrs	r3, r2
 800c928:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	015a      	lsls	r2, r3, #5
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	4413      	add	r3, r2
 800c932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	0151      	lsls	r1, r2, #5
 800c93c:	69fa      	ldr	r2, [r7, #28]
 800c93e:	440a      	add	r2, r1
 800c940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c948:	6113      	str	r3, [r2, #16]
 800c94a:	e037      	b.n	800c9bc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	691a      	ldr	r2, [r3, #16]
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4413      	add	r3, r2
 800c956:	1e5a      	subs	r2, r3, #1
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c960:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	8afa      	ldrh	r2, [r7, #22]
 800c968:	fb03 f202 	mul.w	r2, r3, r2
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	8afb      	ldrh	r3, [r7, #22]
 800c980:	04d9      	lsls	r1, r3, #19
 800c982:	4b38      	ldr	r3, [pc, #224]	; (800ca64 <USB_EPStartXfer+0x52c>)
 800c984:	400b      	ands	r3, r1
 800c986:	69b9      	ldr	r1, [r7, #24]
 800c988:	0148      	lsls	r0, r1, #5
 800c98a:	69f9      	ldr	r1, [r7, #28]
 800c98c:	4401      	add	r1, r0
 800c98e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c992:	4313      	orrs	r3, r2
 800c994:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a2:	691a      	ldr	r2, [r3, #16]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ac:	69b9      	ldr	r1, [r7, #24]
 800c9ae:	0148      	lsls	r0, r1, #5
 800c9b0:	69f9      	ldr	r1, [r7, #28]
 800c9b2:	4401      	add	r1, r0
 800c9b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d10d      	bne.n	800c9de <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d009      	beq.n	800c9de <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	68d9      	ldr	r1, [r3, #12]
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	015a      	lsls	r2, r3, #5
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9da:	460a      	mov	r2, r1
 800c9dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	791b      	ldrb	r3, [r3, #4]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d128      	bne.n	800ca38 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d110      	bne.n	800ca18 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	0151      	lsls	r1, r2, #5
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	440a      	add	r2, r1
 800ca0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	e00f      	b.n	800ca38 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	69ba      	ldr	r2, [r7, #24]
 800ca28:	0151      	lsls	r1, r2, #5
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	440a      	add	r2, r1
 800ca2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	0151      	lsls	r1, r2, #5
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	440a      	add	r2, r1
 800ca4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	1ff80000 	.word	0x1ff80000

0800ca68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	785b      	ldrb	r3, [r3, #1]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d14a      	bne.n	800cb1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca9e:	f040 8086 	bne.w	800cbae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	7812      	ldrb	r2, [r2, #0]
 800cab6:	0151      	lsls	r1, r2, #5
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	440a      	add	r2, r1
 800cabc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cac4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	7812      	ldrb	r2, [r2, #0]
 800cada:	0151      	lsls	r1, r2, #5
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	440a      	add	r2, r1
 800cae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cae8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f242 7210 	movw	r2, #10000	; 0x2710
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d902      	bls.n	800cb00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	75fb      	strb	r3, [r7, #23]
          break;
 800cafe:	e056      	b.n	800cbae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb18:	d0e7      	beq.n	800caea <USB_EPStopXfer+0x82>
 800cb1a:	e048      	b.n	800cbae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb34:	d13b      	bne.n	800cbae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	015a      	lsls	r2, r3, #5
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	4413      	add	r3, r2
 800cb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	7812      	ldrb	r2, [r2, #0]
 800cb4a:	0151      	lsls	r1, r2, #5
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	440a      	add	r2, r1
 800cb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	015a      	lsls	r2, r3, #5
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	4413      	add	r3, r2
 800cb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	7812      	ldrb	r2, [r2, #0]
 800cb6e:	0151      	lsls	r1, r2, #5
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	440a      	add	r2, r1
 800cb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d902      	bls.n	800cb94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	75fb      	strb	r3, [r7, #23]
          break;
 800cb92:	e00c      	b.n	800cbae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbac:	d0e7      	beq.n	800cb7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	371c      	adds	r7, #28
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b089      	sub	sp, #36	; 0x24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	461a      	mov	r2, r3
 800cbca:	460b      	mov	r3, r1
 800cbcc:	71fb      	strb	r3, [r7, #7]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cbda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d123      	bne.n	800cc2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cbe2:	88bb      	ldrh	r3, [r7, #4]
 800cbe4:	3303      	adds	r3, #3
 800cbe6:	089b      	lsrs	r3, r3, #2
 800cbe8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cbea:	2300      	movs	r3, #0
 800cbec:	61bb      	str	r3, [r7, #24]
 800cbee:	e018      	b.n	800cc22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	031a      	lsls	r2, r3, #12
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	3301      	adds	r3, #1
 800cc08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	3301      	adds	r3, #1
 800cc14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d3e2      	bcc.n	800cbf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3724      	adds	r7, #36	; 0x24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b08b      	sub	sp, #44	; 0x2c
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4613      	mov	r3, r2
 800cc44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	089b      	lsrs	r3, r3, #2
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cc56:	88fb      	ldrh	r3, [r7, #6]
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cc5e:	2300      	movs	r3, #0
 800cc60:	623b      	str	r3, [r7, #32]
 800cc62:	e014      	b.n	800cc8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	601a      	str	r2, [r3, #0]
    pDest++;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	3301      	adds	r3, #1
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	3301      	adds	r3, #1
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	3301      	adds	r3, #1
 800cc80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	3301      	adds	r3, #1
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	623b      	str	r3, [r7, #32]
 800cc8e:	6a3a      	ldr	r2, [r7, #32]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d3e6      	bcc.n	800cc64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cc96:	8bfb      	ldrh	r3, [r7, #30]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01e      	beq.n	800ccda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cca6:	461a      	mov	r2, r3
 800cca8:	f107 0310 	add.w	r3, r7, #16
 800ccac:	6812      	ldr	r2, [r2, #0]
 800ccae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	701a      	strb	r2, [r3, #0]
      i++;
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	623b      	str	r3, [r7, #32]
      pDest++;
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccca:	3301      	adds	r3, #1
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ccce:	8bfb      	ldrh	r3, [r7, #30]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ccd4:	8bfb      	ldrh	r3, [r7, #30]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1ea      	bne.n	800ccb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	372c      	adds	r7, #44	; 0x2c
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d12c      	bne.n	800cd5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	db12      	blt.n	800cd3c <USB_EPSetStall+0x54>
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00f      	beq.n	800cd3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	0151      	lsls	r1, r2, #5
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	440a      	add	r2, r1
 800cd32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	e02b      	b.n	800cdb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	015a      	lsls	r2, r3, #5
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	db12      	blt.n	800cd96 <USB_EPSetStall+0xae>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00f      	beq.n	800cd96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	015a      	lsls	r2, r3, #5
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	0151      	lsls	r1, r2, #5
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	440a      	add	r2, r1
 800cd8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	0151      	lsls	r1, r2, #5
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	440a      	add	r2, r1
 800cdac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d128      	bne.n	800ce32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	0151      	lsls	r1, r2, #5
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	440a      	add	r2, r1
 800cdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cdfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	791b      	ldrb	r3, [r3, #4]
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	d003      	beq.n	800ce10 <USB_EPClearStall+0x4c>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	791b      	ldrb	r3, [r3, #4]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d138      	bne.n	800ce82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	0151      	lsls	r1, r2, #5
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	440a      	add	r2, r1
 800ce26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	e027      	b.n	800ce82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	0151      	lsls	r1, r2, #5
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	440a      	add	r2, r1
 800ce48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	791b      	ldrb	r3, [r3, #4]
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d003      	beq.n	800ce62 <USB_EPClearStall+0x9e>
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	791b      	ldrb	r3, [r3, #4]
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d10f      	bne.n	800ce82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	0151      	lsls	r1, r2, #5
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	440a      	add	r2, r1
 800ce78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ceb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cec4:	68f9      	ldr	r1, [r7, #12]
 800cec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceca:	4313      	orrs	r3, r2
 800cecc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf0a:	f023 0302 	bic.w	r3, r3, #2
 800cf0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf1e:	b480      	push	{r7}
 800cf20:	b085      	sub	sp, #20
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf38:	f023 0303 	bic.w	r3, r3, #3
 800cf3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4c:	f043 0302 	orr.w	r3, r3, #2
 800cf50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	695b      	ldr	r3, [r3, #20]
 800cf6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	4013      	ands	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cf78:	68fb      	ldr	r3, [r7, #12]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b085      	sub	sp, #20
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf98:	699b      	ldr	r3, [r3, #24]
 800cf9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	0c1b      	lsrs	r3, r3, #16
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b085      	sub	sp, #20
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	4013      	ands	r3, r2
 800cfdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	b29b      	uxth	r3, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b085      	sub	sp, #20
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cffe:	78fb      	ldrb	r3, [r7, #3]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	4013      	ands	r3, r2
 800d01a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d01c:	68bb      	ldr	r3, [r7, #8]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b087      	sub	sp, #28
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	460b      	mov	r3, r1
 800d034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	fa22 f303 	lsr.w	r3, r2, r3
 800d05a:	01db      	lsls	r3, r3, #7
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	4313      	orrs	r3, r2
 800d062:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d064:	78fb      	ldrb	r3, [r7, #3]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	4013      	ands	r3, r2
 800d076:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d078:	68bb      	ldr	r3, [r7, #8]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	f003 0301 	and.w	r3, r3, #1
}
 800d096:	4618      	mov	r0, r3
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d0c0:	f023 0307 	bic.w	r3, r3, #7
 800d0c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	333c      	adds	r3, #60	; 0x3c
 800d0fe:	3304      	adds	r3, #4
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	4a26      	ldr	r2, [pc, #152]	; (800d1a0 <USB_EP0_OutStart+0xb8>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d90a      	bls.n	800d122 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d11c:	d101      	bne.n	800d122 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	e037      	b.n	800d192 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d128:	461a      	mov	r2, r3
 800d12a:	2300      	movs	r3, #0
 800d12c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d13c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d150:	f043 0318 	orr.w	r3, r3, #24
 800d154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d168:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10f      	bne.n	800d190 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d176:	461a      	mov	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d18e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	371c      	adds	r7, #28
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	4f54300a 	.word	0x4f54300a

0800d1a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800d1bc:	d901      	bls.n	800d1c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	e01b      	b.n	800d1fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	daf2      	bge.n	800d1b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	f043 0201 	orr.w	r2, r3, #1
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800d1e6:	d901      	bls.n	800d1ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	e006      	b.n	800d1fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d0f0      	beq.n	800d1da <USB_CoreReset+0x36>

  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
	...

0800d208 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d214:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d218:	f004 fa84 	bl	8011724 <USBD_static_malloc>
 800d21c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d109      	bne.n	800d238 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	32b0      	adds	r2, #176	; 0xb0
 800d22e:	2100      	movs	r1, #0
 800d230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d234:	2302      	movs	r3, #2
 800d236:	e0d4      	b.n	800d3e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d238:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d23c:	2100      	movs	r1, #0
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f007 fb41 	bl	80148c6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	32b0      	adds	r2, #176	; 0xb0
 800d24e:	68f9      	ldr	r1, [r7, #12]
 800d250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	32b0      	adds	r2, #176	; 0xb0
 800d25e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7c1b      	ldrb	r3, [r3, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d138      	bne.n	800d2e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d270:	4b5e      	ldr	r3, [pc, #376]	; (800d3ec <USBD_CDC_Init+0x1e4>)
 800d272:	7819      	ldrb	r1, [r3, #0]
 800d274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d278:	2202      	movs	r2, #2
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f004 f92f 	bl	80114de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d280:	4b5a      	ldr	r3, [pc, #360]	; (800d3ec <USBD_CDC_Init+0x1e4>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	440b      	add	r3, r1
 800d294:	3324      	adds	r3, #36	; 0x24
 800d296:	2201      	movs	r2, #1
 800d298:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d29a:	4b55      	ldr	r3, [pc, #340]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d29c:	7819      	ldrb	r1, [r3, #0]
 800d29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f004 f91a 	bl	80114de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d2aa:	4b51      	ldr	r3, [pc, #324]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	f003 020f 	and.w	r2, r3, #15
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d2c6:	4b4b      	ldr	r3, [pc, #300]	; (800d3f4 <USBD_CDC_Init+0x1ec>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	f003 020f 	and.w	r2, r3, #15
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	3326      	adds	r3, #38	; 0x26
 800d2dc:	2210      	movs	r2, #16
 800d2de:	801a      	strh	r2, [r3, #0]
 800d2e0:	e035      	b.n	800d34e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d2e2:	4b42      	ldr	r3, [pc, #264]	; (800d3ec <USBD_CDC_Init+0x1e4>)
 800d2e4:	7819      	ldrb	r1, [r3, #0]
 800d2e6:	2340      	movs	r3, #64	; 0x40
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f004 f8f7 	bl	80114de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d2f0:	4b3e      	ldr	r3, [pc, #248]	; (800d3ec <USBD_CDC_Init+0x1e4>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	f003 020f 	and.w	r2, r3, #15
 800d2f8:	6879      	ldr	r1, [r7, #4]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	440b      	add	r3, r1
 800d304:	3324      	adds	r3, #36	; 0x24
 800d306:	2201      	movs	r2, #1
 800d308:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d30a:	4b39      	ldr	r3, [pc, #228]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d30c:	7819      	ldrb	r1, [r3, #0]
 800d30e:	2340      	movs	r3, #64	; 0x40
 800d310:	2202      	movs	r2, #2
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f004 f8e3 	bl	80114de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d318:	4b35      	ldr	r3, [pc, #212]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	f003 020f 	and.w	r2, r3, #15
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	4613      	mov	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	440b      	add	r3, r1
 800d32c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d330:	2201      	movs	r2, #1
 800d332:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d334:	4b2f      	ldr	r3, [pc, #188]	; (800d3f4 <USBD_CDC_Init+0x1ec>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	f003 020f 	and.w	r2, r3, #15
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	3326      	adds	r3, #38	; 0x26
 800d34a:	2210      	movs	r2, #16
 800d34c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d34e:	4b29      	ldr	r3, [pc, #164]	; (800d3f4 <USBD_CDC_Init+0x1ec>)
 800d350:	7819      	ldrb	r1, [r3, #0]
 800d352:	2308      	movs	r3, #8
 800d354:	2203      	movs	r2, #3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f004 f8c1 	bl	80114de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d35c:	4b25      	ldr	r3, [pc, #148]	; (800d3f4 <USBD_CDC_Init+0x1ec>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f003 020f 	and.w	r2, r3, #15
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	440b      	add	r3, r1
 800d370:	3324      	adds	r3, #36	; 0x24
 800d372:	2201      	movs	r2, #1
 800d374:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	33b0      	adds	r3, #176	; 0xb0
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e018      	b.n	800d3e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7c1b      	ldrb	r3, [r3, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10a      	bne.n	800d3ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d3ba:	7819      	ldrb	r1, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f004 f978 	bl	80116bc <USBD_LL_PrepareReceive>
 800d3cc:	e008      	b.n	800d3e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3ce:	4b08      	ldr	r3, [pc, #32]	; (800d3f0 <USBD_CDC_Init+0x1e8>)
 800d3d0:	7819      	ldrb	r1, [r3, #0]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d3d8:	2340      	movs	r3, #64	; 0x40
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f004 f96e 	bl	80116bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20000097 	.word	0x20000097
 800d3f0:	20000098 	.word	0x20000098
 800d3f4:	20000099 	.word	0x20000099

0800d3f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d404:	4b3a      	ldr	r3, [pc, #232]	; (800d4f0 <USBD_CDC_DeInit+0xf8>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	4619      	mov	r1, r3
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f004 f88d 	bl	801152a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d410:	4b37      	ldr	r3, [pc, #220]	; (800d4f0 <USBD_CDC_DeInit+0xf8>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	f003 020f 	and.w	r2, r3, #15
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	440b      	add	r3, r1
 800d424:	3324      	adds	r3, #36	; 0x24
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d42a:	4b32      	ldr	r3, [pc, #200]	; (800d4f4 <USBD_CDC_DeInit+0xfc>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f004 f87a 	bl	801152a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d436:	4b2f      	ldr	r3, [pc, #188]	; (800d4f4 <USBD_CDC_DeInit+0xfc>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 020f 	and.w	r2, r3, #15
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	440b      	add	r3, r1
 800d44a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d44e:	2200      	movs	r2, #0
 800d450:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d452:	4b29      	ldr	r3, [pc, #164]	; (800d4f8 <USBD_CDC_DeInit+0x100>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f004 f866 	bl	801152a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d45e:	4b26      	ldr	r3, [pc, #152]	; (800d4f8 <USBD_CDC_DeInit+0x100>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	f003 020f 	and.w	r2, r3, #15
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	4613      	mov	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	3324      	adds	r3, #36	; 0x24
 800d474:	2200      	movs	r2, #0
 800d476:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d478:	4b1f      	ldr	r3, [pc, #124]	; (800d4f8 <USBD_CDC_DeInit+0x100>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	f003 020f 	and.w	r2, r3, #15
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4613      	mov	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	440b      	add	r3, r1
 800d48c:	3326      	adds	r3, #38	; 0x26
 800d48e:	2200      	movs	r2, #0
 800d490:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	32b0      	adds	r2, #176	; 0xb0
 800d49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d01f      	beq.n	800d4e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	33b0      	adds	r3, #176	; 0xb0
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	32b0      	adds	r2, #176	; 0xb0
 800d4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f004 f93a 	bl	8011740 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	32b0      	adds	r2, #176	; 0xb0
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000097 	.word	0x20000097
 800d4f4:	20000098 	.word	0x20000098
 800d4f8:	20000099 	.word	0x20000099

0800d4fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	32b0      	adds	r2, #176	; 0xb0
 800d510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d514:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d528:	2303      	movs	r3, #3
 800d52a:	e0bf      	b.n	800d6ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d534:	2b00      	cmp	r3, #0
 800d536:	d050      	beq.n	800d5da <USBD_CDC_Setup+0xde>
 800d538:	2b20      	cmp	r3, #32
 800d53a:	f040 80af 	bne.w	800d69c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	88db      	ldrh	r3, [r3, #6]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d03a      	beq.n	800d5bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da1b      	bge.n	800d588 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	33b0      	adds	r3, #176	; 0xb0
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d566:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	88d2      	ldrh	r2, [r2, #6]
 800d56c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	88db      	ldrh	r3, [r3, #6]
 800d572:	2b07      	cmp	r3, #7
 800d574:	bf28      	it	cs
 800d576:	2307      	movcs	r3, #7
 800d578:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	89fa      	ldrh	r2, [r7, #14]
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f001 fd89 	bl	800f098 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d586:	e090      	b.n	800d6aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	785a      	ldrb	r2, [r3, #1]
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	88db      	ldrh	r3, [r3, #6]
 800d596:	2b3f      	cmp	r3, #63	; 0x3f
 800d598:	d803      	bhi.n	800d5a2 <USBD_CDC_Setup+0xa6>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	88db      	ldrh	r3, [r3, #6]
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	e000      	b.n	800d5a4 <USBD_CDC_Setup+0xa8>
 800d5a2:	2240      	movs	r2, #64	; 0x40
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d5aa:	6939      	ldr	r1, [r7, #16]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 fd9b 	bl	800f0f0 <USBD_CtlPrepareRx>
      break;
 800d5ba:	e076      	b.n	800d6aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	33b0      	adds	r3, #176	; 0xb0
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	7850      	ldrb	r0, [r2, #1]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	4798      	blx	r3
      break;
 800d5d8:	e067      	b.n	800d6aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	785b      	ldrb	r3, [r3, #1]
 800d5de:	2b0b      	cmp	r3, #11
 800d5e0:	d851      	bhi.n	800d686 <USBD_CDC_Setup+0x18a>
 800d5e2:	a201      	add	r2, pc, #4	; (adr r2, 800d5e8 <USBD_CDC_Setup+0xec>)
 800d5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e8:	0800d619 	.word	0x0800d619
 800d5ec:	0800d695 	.word	0x0800d695
 800d5f0:	0800d687 	.word	0x0800d687
 800d5f4:	0800d687 	.word	0x0800d687
 800d5f8:	0800d687 	.word	0x0800d687
 800d5fc:	0800d687 	.word	0x0800d687
 800d600:	0800d687 	.word	0x0800d687
 800d604:	0800d687 	.word	0x0800d687
 800d608:	0800d687 	.word	0x0800d687
 800d60c:	0800d687 	.word	0x0800d687
 800d610:	0800d643 	.word	0x0800d643
 800d614:	0800d66d 	.word	0x0800d66d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b03      	cmp	r3, #3
 800d622:	d107      	bne.n	800d634 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d624:	f107 030a 	add.w	r3, r7, #10
 800d628:	2202      	movs	r2, #2
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 fd33 	bl	800f098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d632:	e032      	b.n	800d69a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f001 fcbd 	bl	800efb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	75fb      	strb	r3, [r7, #23]
          break;
 800d640:	e02b      	b.n	800d69a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d107      	bne.n	800d65e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d64e:	f107 030d 	add.w	r3, r7, #13
 800d652:	2201      	movs	r2, #1
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 fd1e 	bl	800f098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d65c:	e01d      	b.n	800d69a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f001 fca8 	bl	800efb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	75fb      	strb	r3, [r7, #23]
          break;
 800d66a:	e016      	b.n	800d69a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b03      	cmp	r3, #3
 800d676:	d00f      	beq.n	800d698 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f001 fc9b 	bl	800efb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d680:	2303      	movs	r3, #3
 800d682:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d684:	e008      	b.n	800d698 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f001 fc94 	bl	800efb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d68e:	2303      	movs	r3, #3
 800d690:	75fb      	strb	r3, [r7, #23]
          break;
 800d692:	e002      	b.n	800d69a <USBD_CDC_Setup+0x19e>
          break;
 800d694:	bf00      	nop
 800d696:	e008      	b.n	800d6aa <USBD_CDC_Setup+0x1ae>
          break;
 800d698:	bf00      	nop
      }
      break;
 800d69a:	e006      	b.n	800d6aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f001 fc89 	bl	800efb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	75fb      	strb	r3, [r7, #23]
      break;
 800d6a8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	32b0      	adds	r2, #176	; 0xb0
 800d6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e065      	b.n	800d7aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	32b0      	adds	r2, #176	; 0xb0
 800d6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d6ee:	78fb      	ldrb	r3, [r7, #3]
 800d6f0:	f003 020f 	and.w	r2, r3, #15
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4413      	add	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	440b      	add	r3, r1
 800d700:	3318      	adds	r3, #24
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d02f      	beq.n	800d768 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d708:	78fb      	ldrb	r3, [r7, #3]
 800d70a:	f003 020f 	and.w	r2, r3, #15
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	440b      	add	r3, r1
 800d71a:	3318      	adds	r3, #24
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	78fb      	ldrb	r3, [r7, #3]
 800d720:	f003 010f 	and.w	r1, r3, #15
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	460b      	mov	r3, r1
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	440b      	add	r3, r1
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4403      	add	r3, r0
 800d730:	331c      	adds	r3, #28
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	fbb2 f1f3 	udiv	r1, r2, r3
 800d738:	fb01 f303 	mul.w	r3, r1, r3
 800d73c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d112      	bne.n	800d768 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d742:	78fb      	ldrb	r3, [r7, #3]
 800d744:	f003 020f 	and.w	r2, r3, #15
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4613      	mov	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4413      	add	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	440b      	add	r3, r1
 800d754:	3318      	adds	r3, #24
 800d756:	2200      	movs	r2, #0
 800d758:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d75a:	78f9      	ldrb	r1, [r7, #3]
 800d75c:	2300      	movs	r3, #0
 800d75e:	2200      	movs	r2, #0
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f003 ff8a 	bl	801167a <USBD_LL_Transmit>
 800d766:	e01f      	b.n	800d7a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	33b0      	adds	r3, #176	; 0xb0
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	691b      	ldr	r3, [r3, #16]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d010      	beq.n	800d7a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	33b0      	adds	r3, #176	; 0xb0
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d7a4:	78fa      	ldrb	r2, [r7, #3]
 800d7a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	32b0      	adds	r2, #176	; 0xb0
 800d7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	32b0      	adds	r2, #176	; 0xb0
 800d7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e01a      	b.n	800d81a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d7e4:	78fb      	ldrb	r3, [r7, #3]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f003 ff88 	bl	80116fe <USBD_LL_GetRxDataSize>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	33b0      	adds	r3, #176	; 0xb0
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d814:	4611      	mov	r1, r2
 800d816:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	32b0      	adds	r2, #176	; 0xb0
 800d834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d840:	2303      	movs	r3, #3
 800d842:	e025      	b.n	800d890 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	33b0      	adds	r3, #176	; 0xb0
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d01a      	beq.n	800d88e <USBD_CDC_EP0_RxReady+0x6c>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d85e:	2bff      	cmp	r3, #255	; 0xff
 800d860:	d015      	beq.n	800d88e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	33b0      	adds	r3, #176	; 0xb0
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d87a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d882:	b292      	uxth	r2, r2
 800d884:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	22ff      	movs	r2, #255	; 0xff
 800d88a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8a0:	2182      	movs	r1, #130	; 0x82
 800d8a2:	4818      	ldr	r0, [pc, #96]	; (800d904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d8a4:	f000 fd4f 	bl	800e346 <USBD_GetEpDesc>
 800d8a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	4815      	ldr	r0, [pc, #84]	; (800d904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d8ae:	f000 fd4a 	bl	800e346 <USBD_GetEpDesc>
 800d8b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8b4:	2181      	movs	r1, #129	; 0x81
 800d8b6:	4813      	ldr	r0, [pc, #76]	; (800d904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d8b8:	f000 fd45 	bl	800e346 <USBD_GetEpDesc>
 800d8bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2210      	movs	r2, #16
 800d8c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8d8:	711a      	strb	r2, [r3, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d006      	beq.n	800d8f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8ec:	711a      	strb	r2, [r3, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2243      	movs	r2, #67	; 0x43
 800d8f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8f8:	4b02      	ldr	r3, [pc, #8]	; (800d904 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000054 	.word	0x20000054

0800d908 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d910:	2182      	movs	r1, #130	; 0x82
 800d912:	4818      	ldr	r0, [pc, #96]	; (800d974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d914:	f000 fd17 	bl	800e346 <USBD_GetEpDesc>
 800d918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d91a:	2101      	movs	r1, #1
 800d91c:	4815      	ldr	r0, [pc, #84]	; (800d974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d91e:	f000 fd12 	bl	800e346 <USBD_GetEpDesc>
 800d922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d924:	2181      	movs	r1, #129	; 0x81
 800d926:	4813      	ldr	r0, [pc, #76]	; (800d974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d928:	f000 fd0d 	bl	800e346 <USBD_GetEpDesc>
 800d92c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2210      	movs	r2, #16
 800d938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d006      	beq.n	800d94e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2200      	movs	r2, #0
 800d944:	711a      	strb	r2, [r3, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	f042 0202 	orr.w	r2, r2, #2
 800d94c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d006      	beq.n	800d962 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	711a      	strb	r2, [r3, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f042 0202 	orr.w	r2, r2, #2
 800d960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2243      	movs	r2, #67	; 0x43
 800d966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	20000054 	.word	0x20000054

0800d978 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d980:	2182      	movs	r1, #130	; 0x82
 800d982:	4818      	ldr	r0, [pc, #96]	; (800d9e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d984:	f000 fcdf 	bl	800e346 <USBD_GetEpDesc>
 800d988:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d98a:	2101      	movs	r1, #1
 800d98c:	4815      	ldr	r0, [pc, #84]	; (800d9e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d98e:	f000 fcda 	bl	800e346 <USBD_GetEpDesc>
 800d992:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d994:	2181      	movs	r1, #129	; 0x81
 800d996:	4813      	ldr	r0, [pc, #76]	; (800d9e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d998:	f000 fcd5 	bl	800e346 <USBD_GetEpDesc>
 800d99c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2210      	movs	r2, #16
 800d9a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d006      	beq.n	800d9be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9b8:	711a      	strb	r2, [r3, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9cc:	711a      	strb	r2, [r3, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2243      	movs	r2, #67	; 0x43
 800d9d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d9d8:	4b02      	ldr	r3, [pc, #8]	; (800d9e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20000054 	.word	0x20000054

0800d9e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d9f6:	4b03      	ldr	r3, [pc, #12]	; (800da04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	20000010 	.word	0x20000010

0800da08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d101      	bne.n	800da1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800da18:	2303      	movs	r3, #3
 800da1a:	e009      	b.n	800da30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	33b0      	adds	r3, #176	; 0xb0
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	32b0      	adds	r2, #176	; 0xb0
 800da52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d101      	bne.n	800da62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800da5e:	2303      	movs	r3, #3
 800da60:	e008      	b.n	800da74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	32b0      	adds	r2, #176	; 0xb0
 800da94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e004      	b.n	800daae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
	...

0800dabc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	32b0      	adds	r2, #176	; 0xb0
 800dace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dad4:	2301      	movs	r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dade:	2303      	movs	r3, #3
 800dae0:	e025      	b.n	800db2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d11f      	bne.n	800db2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2201      	movs	r2, #1
 800daf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800daf4:	4b10      	ldr	r3, [pc, #64]	; (800db38 <USBD_CDC_TransmitPacket+0x7c>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 020f 	and.w	r2, r3, #15
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4403      	add	r3, r0
 800db0e:	3318      	adds	r3, #24
 800db10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800db12:	4b09      	ldr	r3, [pc, #36]	; (800db38 <USBD_CDC_TransmitPacket+0x7c>)
 800db14:	7819      	ldrb	r1, [r3, #0]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f003 fda9 	bl	801167a <USBD_LL_Transmit>

    ret = USBD_OK;
 800db28:	2300      	movs	r3, #0
 800db2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20000097 	.word	0x20000097

0800db3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	32b0      	adds	r2, #176	; 0xb0
 800db4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	32b0      	adds	r2, #176	; 0xb0
 800db5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800db66:	2303      	movs	r3, #3
 800db68:	e018      	b.n	800db9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	7c1b      	ldrb	r3, [r3, #16]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800db72:	4b0c      	ldr	r3, [pc, #48]	; (800dba4 <USBD_CDC_ReceivePacket+0x68>)
 800db74:	7819      	ldrb	r1, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f003 fd9b 	bl	80116bc <USBD_LL_PrepareReceive>
 800db86:	e008      	b.n	800db9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800db88:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <USBD_CDC_ReceivePacket+0x68>)
 800db8a:	7819      	ldrb	r1, [r3, #0]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f003 fd91 	bl	80116bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20000098 	.word	0x20000098

0800dba8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	e01f      	b.n	800dc00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	79fa      	ldrb	r2, [r7, #7]
 800dbf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f003 fc0b 	bl	8011410 <USBD_LL_Init>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc12:	2300      	movs	r3, #0
 800dc14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	e025      	b.n	800dc6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	683a      	ldr	r2, [r7, #0]
 800dc24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	32ae      	adds	r2, #174	; 0xae
 800dc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00f      	beq.n	800dc5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	32ae      	adds	r2, #174	; 0xae
 800dc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	f107 020e 	add.w	r2, r7, #14
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	4602      	mov	r2, r0
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f003 fc13 	bl	80114a8 <USBD_LL_Start>
 800dc82:	4603      	mov	r3, r0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b084      	sub	sp, #16
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	460b      	mov	r3, r1
 800dcac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	78fa      	ldrb	r2, [r7, #3]
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	460b      	mov	r3, r1
 800dce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	78fa      	ldrb	r2, [r7, #3]
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	4798      	blx	r3
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d001      	beq.n	800dd04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dd00:	2303      	movs	r3, #3
 800dd02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f001 f90e 	bl	800ef42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dd34:	461a      	mov	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd42:	f003 031f 	and.w	r3, r3, #31
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d01a      	beq.n	800dd80 <USBD_LL_SetupStage+0x72>
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d822      	bhi.n	800dd94 <USBD_LL_SetupStage+0x86>
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <USBD_LL_SetupStage+0x4a>
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d00a      	beq.n	800dd6c <USBD_LL_SetupStage+0x5e>
 800dd56:	e01d      	b.n	800dd94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fb65 	bl	800e430 <USBD_StdDevReq>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]
      break;
 800dd6a:	e020      	b.n	800ddae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fbcd 	bl	800e514 <USBD_StdItfReq>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	73fb      	strb	r3, [r7, #15]
      break;
 800dd7e:	e016      	b.n	800ddae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 fc2f 	bl	800e5ec <USBD_StdEPReq>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	73fb      	strb	r3, [r7, #15]
      break;
 800dd92:	e00c      	b.n	800ddae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f003 fbe0 	bl	8011568 <USBD_LL_StallEP>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ddac:	bf00      	nop
  }

  return ret;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ddca:	7afb      	ldrb	r3, [r7, #11]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d16e      	bne.n	800deae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ddd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	f040 8098 	bne.w	800df14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	689a      	ldr	r2, [r3, #8]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d913      	bls.n	800de18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	1ad2      	subs	r2, r2, r3
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	4293      	cmp	r3, r2
 800de08:	bf28      	it	cs
 800de0a:	4613      	movcs	r3, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f001 f98a 	bl	800f12a <USBD_CtlContinueRx>
 800de16:	e07d      	b.n	800df14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de1e:	f003 031f 	and.w	r3, r3, #31
 800de22:	2b02      	cmp	r3, #2
 800de24:	d014      	beq.n	800de50 <USBD_LL_DataOutStage+0x98>
 800de26:	2b02      	cmp	r3, #2
 800de28:	d81d      	bhi.n	800de66 <USBD_LL_DataOutStage+0xae>
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d002      	beq.n	800de34 <USBD_LL_DataOutStage+0x7c>
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d003      	beq.n	800de3a <USBD_LL_DataOutStage+0x82>
 800de32:	e018      	b.n	800de66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	75bb      	strb	r3, [r7, #22]
            break;
 800de38:	e018      	b.n	800de6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800de40:	b2db      	uxtb	r3, r3
 800de42:	4619      	mov	r1, r3
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f000 fa64 	bl	800e312 <USBD_CoreFindIF>
 800de4a:	4603      	mov	r3, r0
 800de4c:	75bb      	strb	r3, [r7, #22]
            break;
 800de4e:	e00d      	b.n	800de6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800de56:	b2db      	uxtb	r3, r3
 800de58:	4619      	mov	r1, r3
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f000 fa66 	bl	800e32c <USBD_CoreFindEP>
 800de60:	4603      	mov	r3, r0
 800de62:	75bb      	strb	r3, [r7, #22]
            break;
 800de64:	e002      	b.n	800de6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800de66:	2300      	movs	r3, #0
 800de68:	75bb      	strb	r3, [r7, #22]
            break;
 800de6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800de6c:	7dbb      	ldrb	r3, [r7, #22]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d119      	bne.n	800dea6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	d113      	bne.n	800dea6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800de7e:	7dba      	ldrb	r2, [r7, #22]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	32ae      	adds	r2, #174	; 0xae
 800de84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00b      	beq.n	800dea6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800de8e:	7dba      	ldrb	r2, [r7, #22]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800de96:	7dba      	ldrb	r2, [r7, #22]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	32ae      	adds	r2, #174	; 0xae
 800de9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f001 f950 	bl	800f14c <USBD_CtlSendStatus>
 800deac:	e032      	b.n	800df14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800deae:	7afb      	ldrb	r3, [r7, #11]
 800deb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	4619      	mov	r1, r3
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f000 fa37 	bl	800e32c <USBD_CoreFindEP>
 800debe:	4603      	mov	r3, r0
 800dec0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dec2:	7dbb      	ldrb	r3, [r7, #22]
 800dec4:	2bff      	cmp	r3, #255	; 0xff
 800dec6:	d025      	beq.n	800df14 <USBD_LL_DataOutStage+0x15c>
 800dec8:	7dbb      	ldrb	r3, [r7, #22]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d122      	bne.n	800df14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b03      	cmp	r3, #3
 800ded8:	d117      	bne.n	800df0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800deda:	7dba      	ldrb	r2, [r7, #22]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	32ae      	adds	r2, #174	; 0xae
 800dee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00f      	beq.n	800df0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800deea:	7dba      	ldrb	r2, [r7, #22]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800def2:	7dba      	ldrb	r2, [r7, #22]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	32ae      	adds	r2, #174	; 0xae
 800def8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	7afa      	ldrb	r2, [r7, #11]
 800df00:	4611      	mov	r1, r2
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3
 800df06:	4603      	mov	r3, r0
 800df08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	e000      	b.n	800df16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3718      	adds	r7, #24
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b086      	sub	sp, #24
 800df22:	af00      	add	r7, sp, #0
 800df24:	60f8      	str	r0, [r7, #12]
 800df26:	460b      	mov	r3, r1
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800df2c:	7afb      	ldrb	r3, [r7, #11]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d16f      	bne.n	800e012 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	3314      	adds	r3, #20
 800df36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d15a      	bne.n	800dff8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	689a      	ldr	r2, [r3, #8]
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d914      	bls.n	800df78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	689a      	ldr	r2, [r3, #8]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	1ad2      	subs	r2, r2, r3
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	461a      	mov	r2, r3
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f001 f8b2 	bl	800f0ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df6a:	2300      	movs	r3, #0
 800df6c:	2200      	movs	r2, #0
 800df6e:	2100      	movs	r1, #0
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f003 fba3 	bl	80116bc <USBD_LL_PrepareReceive>
 800df76:	e03f      	b.n	800dff8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	68da      	ldr	r2, [r3, #12]
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	429a      	cmp	r2, r3
 800df82:	d11c      	bne.n	800dfbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	685a      	ldr	r2, [r3, #4]
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d316      	bcc.n	800dfbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d20f      	bcs.n	800dfbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800df9e:	2200      	movs	r2, #0
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f001 f893 	bl	800f0ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f003 fb80 	bl	80116bc <USBD_LL_PrepareReceive>
 800dfbc:	e01c      	b.n	800dff8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d10f      	bne.n	800dfea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d009      	beq.n	800dfea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfea:	2180      	movs	r1, #128	; 0x80
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f003 fabb 	bl	8011568 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f001 f8bd 	bl	800f172 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d03a      	beq.n	800e078 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f7ff fe42 	bl	800dc8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e010:	e032      	b.n	800e078 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e012:	7afb      	ldrb	r3, [r7, #11]
 800e014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	4619      	mov	r1, r3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 f985 	bl	800e32c <USBD_CoreFindEP>
 800e022:	4603      	mov	r3, r0
 800e024:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	2bff      	cmp	r3, #255	; 0xff
 800e02a:	d025      	beq.n	800e078 <USBD_LL_DataInStage+0x15a>
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d122      	bne.n	800e078 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d11c      	bne.n	800e078 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e03e:	7dfa      	ldrb	r2, [r7, #23]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	32ae      	adds	r2, #174	; 0xae
 800e044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d014      	beq.n	800e078 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e04e:	7dfa      	ldrb	r2, [r7, #23]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e056:	7dfa      	ldrb	r2, [r7, #23]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	32ae      	adds	r2, #174	; 0xae
 800e05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	7afa      	ldrb	r2, [r7, #11]
 800e064:	4611      	mov	r1, r2
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	4798      	blx	r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e06e:	7dbb      	ldrb	r3, [r7, #22]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e074:	7dbb      	ldrb	r3, [r7, #22]
 800e076:	e000      	b.n	800e07a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d014      	beq.n	800e0e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00e      	beq.n	800e0e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	6852      	ldr	r2, [r2, #4]
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	4611      	mov	r1, r2
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	4798      	blx	r3
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e0e8:	2340      	movs	r3, #64	; 0x40
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f003 f9f5 	bl	80114de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2240      	movs	r2, #64	; 0x40
 800e100:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e104:	2340      	movs	r3, #64	; 0x40
 800e106:	2200      	movs	r2, #0
 800e108:	2180      	movs	r1, #128	; 0x80
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f003 f9e7 	bl	80114de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2240      	movs	r2, #64	; 0x40
 800e11a:	621a      	str	r2, [r3, #32]

  return ret;
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e126:	b480      	push	{r7}
 800e128:	b083      	sub	sp, #12
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	460b      	mov	r3, r1
 800e130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	78fa      	ldrb	r2, [r7, #3]
 800e136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e146:	b480      	push	{r7}
 800e148:	b083      	sub	sp, #12
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b04      	cmp	r3, #4
 800e158:	d006      	beq.n	800e168 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e160:	b2da      	uxtb	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2204      	movs	r2, #4
 800e16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e17e:	b480      	push	{r7}
 800e180:	b083      	sub	sp, #12
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	2b04      	cmp	r3, #4
 800e190:	d106      	bne.n	800e1a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	d110      	bne.n	800e1e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d2:	69db      	ldr	r3, [r3, #28]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	32ae      	adds	r2, #174	; 0xae
 800e204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e20c:	2303      	movs	r3, #3
 800e20e:	e01c      	b.n	800e24a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b03      	cmp	r3, #3
 800e21a:	d115      	bne.n	800e248 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	32ae      	adds	r2, #174	; 0xae
 800e226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00b      	beq.n	800e248 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	32ae      	adds	r2, #174	; 0xae
 800e23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	78fa      	ldrb	r2, [r7, #3]
 800e242:	4611      	mov	r1, r2
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b082      	sub	sp, #8
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
 800e25a:	460b      	mov	r3, r1
 800e25c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	32ae      	adds	r2, #174	; 0xae
 800e268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d101      	bne.n	800e274 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e270:	2303      	movs	r3, #3
 800e272:	e01c      	b.n	800e2ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d115      	bne.n	800e2ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	32ae      	adds	r2, #174	; 0xae
 800e28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00b      	beq.n	800e2ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	32ae      	adds	r2, #174	; 0xae
 800e29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a4:	78fa      	ldrb	r2, [r7, #3]
 800e2a6:	4611      	mov	r1, r2
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00e      	beq.n	800e308 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	6852      	ldr	r2, [r2, #4]
 800e2f6:	b2d2      	uxtb	r2, r2
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	4798      	blx	r3
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e304:	2303      	movs	r3, #3
 800e306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e312:	b480      	push	{r7}
 800e314:	b083      	sub	sp, #12
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	460b      	mov	r3, r1
 800e31c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e31e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e320:	4618      	mov	r0, r3
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	460b      	mov	r3, r1
 800e336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b086      	sub	sp, #24
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	460b      	mov	r3, r1
 800e350:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	885b      	ldrh	r3, [r3, #2]
 800e362:	b29a      	uxth	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d920      	bls.n	800e3b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	b29b      	uxth	r3, r3
 800e374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e376:	e013      	b.n	800e3a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e378:	f107 030a 	add.w	r3, r7, #10
 800e37c:	4619      	mov	r1, r3
 800e37e:	6978      	ldr	r0, [r7, #20]
 800e380:	f000 f81b 	bl	800e3ba <USBD_GetNextDesc>
 800e384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	785b      	ldrb	r3, [r3, #1]
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d108      	bne.n	800e3a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	789b      	ldrb	r3, [r3, #2]
 800e396:	78fa      	ldrb	r2, [r7, #3]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d008      	beq.n	800e3ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	885b      	ldrh	r3, [r3, #2]
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	897b      	ldrh	r3, [r7, #10]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d8e5      	bhi.n	800e378 <USBD_GetEpDesc+0x32>
 800e3ac:	e000      	b.n	800e3b0 <USBD_GetEpDesc+0x6a>
          break;
 800e3ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e3b0:	693b      	ldr	r3, [r7, #16]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b085      	sub	sp, #20
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	881a      	ldrh	r2, [r3, #0]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	4413      	add	r3, r2
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b087      	sub	sp, #28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	3301      	adds	r3, #1
 800e40a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e412:	8a3b      	ldrh	r3, [r7, #16]
 800e414:	021b      	lsls	r3, r3, #8
 800e416:	b21a      	sxth	r2, r3
 800e418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e41c:	4313      	orrs	r3, r2
 800e41e:	b21b      	sxth	r3, r3
 800e420:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e422:	89fb      	ldrh	r3, [r7, #14]
}
 800e424:	4618      	mov	r0, r3
 800e426:	371c      	adds	r7, #28
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e446:	2b40      	cmp	r3, #64	; 0x40
 800e448:	d005      	beq.n	800e456 <USBD_StdDevReq+0x26>
 800e44a:	2b40      	cmp	r3, #64	; 0x40
 800e44c:	d857      	bhi.n	800e4fe <USBD_StdDevReq+0xce>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00f      	beq.n	800e472 <USBD_StdDevReq+0x42>
 800e452:	2b20      	cmp	r3, #32
 800e454:	d153      	bne.n	800e4fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	32ae      	adds	r2, #174	; 0xae
 800e460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	4798      	blx	r3
 800e46c:	4603      	mov	r3, r0
 800e46e:	73fb      	strb	r3, [r7, #15]
      break;
 800e470:	e04a      	b.n	800e508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	785b      	ldrb	r3, [r3, #1]
 800e476:	2b09      	cmp	r3, #9
 800e478:	d83b      	bhi.n	800e4f2 <USBD_StdDevReq+0xc2>
 800e47a:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <USBD_StdDevReq+0x50>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e4d5 	.word	0x0800e4d5
 800e484:	0800e4e9 	.word	0x0800e4e9
 800e488:	0800e4f3 	.word	0x0800e4f3
 800e48c:	0800e4df 	.word	0x0800e4df
 800e490:	0800e4f3 	.word	0x0800e4f3
 800e494:	0800e4b3 	.word	0x0800e4b3
 800e498:	0800e4a9 	.word	0x0800e4a9
 800e49c:	0800e4f3 	.word	0x0800e4f3
 800e4a0:	0800e4cb 	.word	0x0800e4cb
 800e4a4:	0800e4bd 	.word	0x0800e4bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fa3c 	bl	800e928 <USBD_GetDescriptor>
          break;
 800e4b0:	e024      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e4b2:	6839      	ldr	r1, [r7, #0]
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 fba1 	bl	800ebfc <USBD_SetAddress>
          break;
 800e4ba:	e01f      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fbe0 	bl	800ec84 <USBD_SetConfig>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73fb      	strb	r3, [r7, #15]
          break;
 800e4c8:	e018      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc83 	bl	800edd8 <USBD_GetConfig>
          break;
 800e4d2:	e013      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fcb4 	bl	800ee44 <USBD_GetStatus>
          break;
 800e4dc:	e00e      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fce3 	bl	800eeac <USBD_SetFeature>
          break;
 800e4e6:	e009      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fd07 	bl	800eefe <USBD_ClrFeature>
          break;
 800e4f0:	e004      	b.n	800e4fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fd5e 	bl	800efb6 <USBD_CtlError>
          break;
 800e4fa:	bf00      	nop
      }
      break;
 800e4fc:	e004      	b.n	800e508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e4fe:	6839      	ldr	r1, [r7, #0]
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 fd58 	bl	800efb6 <USBD_CtlError>
      break;
 800e506:	bf00      	nop
  }

  return ret;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop

0800e514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e52a:	2b40      	cmp	r3, #64	; 0x40
 800e52c:	d005      	beq.n	800e53a <USBD_StdItfReq+0x26>
 800e52e:	2b40      	cmp	r3, #64	; 0x40
 800e530:	d852      	bhi.n	800e5d8 <USBD_StdItfReq+0xc4>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <USBD_StdItfReq+0x26>
 800e536:	2b20      	cmp	r3, #32
 800e538:	d14e      	bne.n	800e5d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e540:	b2db      	uxtb	r3, r3
 800e542:	3b01      	subs	r3, #1
 800e544:	2b02      	cmp	r3, #2
 800e546:	d840      	bhi.n	800e5ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	889b      	ldrh	r3, [r3, #4]
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d836      	bhi.n	800e5c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	889b      	ldrh	r3, [r3, #4]
 800e556:	b2db      	uxtb	r3, r3
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7ff fed9 	bl	800e312 <USBD_CoreFindIF>
 800e560:	4603      	mov	r3, r0
 800e562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e564:	7bbb      	ldrb	r3, [r7, #14]
 800e566:	2bff      	cmp	r3, #255	; 0xff
 800e568:	d01d      	beq.n	800e5a6 <USBD_StdItfReq+0x92>
 800e56a:	7bbb      	ldrb	r3, [r7, #14]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d11a      	bne.n	800e5a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e570:	7bba      	ldrb	r2, [r7, #14]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	32ae      	adds	r2, #174	; 0xae
 800e576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00f      	beq.n	800e5a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e580:	7bba      	ldrb	r2, [r7, #14]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e588:	7bba      	ldrb	r2, [r7, #14]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	32ae      	adds	r2, #174	; 0xae
 800e58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	4798      	blx	r3
 800e59a:	4603      	mov	r3, r0
 800e59c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e59e:	e004      	b.n	800e5aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e5a4:	e001      	b.n	800e5aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e5a6:	2303      	movs	r3, #3
 800e5a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	88db      	ldrh	r3, [r3, #6]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d110      	bne.n	800e5d4 <USBD_StdItfReq+0xc0>
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10d      	bne.n	800e5d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fdc7 	bl	800f14c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e5be:	e009      	b.n	800e5d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fcf7 	bl	800efb6 <USBD_CtlError>
          break;
 800e5c8:	e004      	b.n	800e5d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fcf2 	bl	800efb6 <USBD_CtlError>
          break;
 800e5d2:	e000      	b.n	800e5d6 <USBD_StdItfReq+0xc2>
          break;
 800e5d4:	bf00      	nop
      }
      break;
 800e5d6:	e004      	b.n	800e5e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fceb 	bl	800efb6 <USBD_CtlError>
      break;
 800e5e0:	bf00      	nop
  }

  return ret;
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	889b      	ldrh	r3, [r3, #4]
 800e5fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e608:	2b40      	cmp	r3, #64	; 0x40
 800e60a:	d007      	beq.n	800e61c <USBD_StdEPReq+0x30>
 800e60c:	2b40      	cmp	r3, #64	; 0x40
 800e60e:	f200 817f 	bhi.w	800e910 <USBD_StdEPReq+0x324>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d02a      	beq.n	800e66c <USBD_StdEPReq+0x80>
 800e616:	2b20      	cmp	r3, #32
 800e618:	f040 817a 	bne.w	800e910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
 800e61e:	4619      	mov	r1, r3
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7ff fe83 	bl	800e32c <USBD_CoreFindEP>
 800e626:	4603      	mov	r3, r0
 800e628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e62a:	7b7b      	ldrb	r3, [r7, #13]
 800e62c:	2bff      	cmp	r3, #255	; 0xff
 800e62e:	f000 8174 	beq.w	800e91a <USBD_StdEPReq+0x32e>
 800e632:	7b7b      	ldrb	r3, [r7, #13]
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 8170 	bne.w	800e91a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e63a:	7b7a      	ldrb	r2, [r7, #13]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e642:	7b7a      	ldrb	r2, [r7, #13]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	32ae      	adds	r2, #174	; 0xae
 800e648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 8163 	beq.w	800e91a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e654:	7b7a      	ldrb	r2, [r7, #13]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	32ae      	adds	r2, #174	; 0xae
 800e65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	4798      	blx	r3
 800e666:	4603      	mov	r3, r0
 800e668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e66a:	e156      	b.n	800e91a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	785b      	ldrb	r3, [r3, #1]
 800e670:	2b03      	cmp	r3, #3
 800e672:	d008      	beq.n	800e686 <USBD_StdEPReq+0x9a>
 800e674:	2b03      	cmp	r3, #3
 800e676:	f300 8145 	bgt.w	800e904 <USBD_StdEPReq+0x318>
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 809b 	beq.w	800e7b6 <USBD_StdEPReq+0x1ca>
 800e680:	2b01      	cmp	r3, #1
 800e682:	d03c      	beq.n	800e6fe <USBD_StdEPReq+0x112>
 800e684:	e13e      	b.n	800e904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d002      	beq.n	800e698 <USBD_StdEPReq+0xac>
 800e692:	2b03      	cmp	r3, #3
 800e694:	d016      	beq.n	800e6c4 <USBD_StdEPReq+0xd8>
 800e696:	e02c      	b.n	800e6f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e698:	7bbb      	ldrb	r3, [r7, #14]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00d      	beq.n	800e6ba <USBD_StdEPReq+0xce>
 800e69e:	7bbb      	ldrb	r3, [r7, #14]
 800e6a0:	2b80      	cmp	r3, #128	; 0x80
 800e6a2:	d00a      	beq.n	800e6ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6a4:	7bbb      	ldrb	r3, [r7, #14]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f002 ff5d 	bl	8011568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6ae:	2180      	movs	r1, #128	; 0x80
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f002 ff59 	bl	8011568 <USBD_LL_StallEP>
 800e6b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e6b8:	e020      	b.n	800e6fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fc7a 	bl	800efb6 <USBD_CtlError>
              break;
 800e6c2:	e01b      	b.n	800e6fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	885b      	ldrh	r3, [r3, #2]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10e      	bne.n	800e6ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e6cc:	7bbb      	ldrb	r3, [r7, #14]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <USBD_StdEPReq+0xfe>
 800e6d2:	7bbb      	ldrb	r3, [r7, #14]
 800e6d4:	2b80      	cmp	r3, #128	; 0x80
 800e6d6:	d008      	beq.n	800e6ea <USBD_StdEPReq+0xfe>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	88db      	ldrh	r3, [r3, #6]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d104      	bne.n	800e6ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f002 ff3f 	bl	8011568 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 fd2e 	bl	800f14c <USBD_CtlSendStatus>

              break;
 800e6f0:	e004      	b.n	800e6fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fc5e 	bl	800efb6 <USBD_CtlError>
              break;
 800e6fa:	bf00      	nop
          }
          break;
 800e6fc:	e107      	b.n	800e90e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b02      	cmp	r3, #2
 800e708:	d002      	beq.n	800e710 <USBD_StdEPReq+0x124>
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d016      	beq.n	800e73c <USBD_StdEPReq+0x150>
 800e70e:	e04b      	b.n	800e7a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00d      	beq.n	800e732 <USBD_StdEPReq+0x146>
 800e716:	7bbb      	ldrb	r3, [r7, #14]
 800e718:	2b80      	cmp	r3, #128	; 0x80
 800e71a:	d00a      	beq.n	800e732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e71c:	7bbb      	ldrb	r3, [r7, #14]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f002 ff21 	bl	8011568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e726:	2180      	movs	r1, #128	; 0x80
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f002 ff1d 	bl	8011568 <USBD_LL_StallEP>
 800e72e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e730:	e040      	b.n	800e7b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fc3e 	bl	800efb6 <USBD_CtlError>
              break;
 800e73a:	e03b      	b.n	800e7b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	885b      	ldrh	r3, [r3, #2]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d136      	bne.n	800e7b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e744:	7bbb      	ldrb	r3, [r7, #14]
 800e746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e74e:	7bbb      	ldrb	r3, [r7, #14]
 800e750:	4619      	mov	r1, r3
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f002 ff27 	bl	80115a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 fcf7 	bl	800f14c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fde2 	bl	800e32c <USBD_CoreFindEP>
 800e768:	4603      	mov	r3, r0
 800e76a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e76c:	7b7b      	ldrb	r3, [r7, #13]
 800e76e:	2bff      	cmp	r3, #255	; 0xff
 800e770:	d01f      	beq.n	800e7b2 <USBD_StdEPReq+0x1c6>
 800e772:	7b7b      	ldrb	r3, [r7, #13]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d11c      	bne.n	800e7b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e778:	7b7a      	ldrb	r2, [r7, #13]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e780:	7b7a      	ldrb	r2, [r7, #13]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	32ae      	adds	r2, #174	; 0xae
 800e786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d010      	beq.n	800e7b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e790:	7b7a      	ldrb	r2, [r7, #13]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	32ae      	adds	r2, #174	; 0xae
 800e796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	4798      	blx	r3
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e7a6:	e004      	b.n	800e7b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fc03 	bl	800efb6 <USBD_CtlError>
              break;
 800e7b0:	e000      	b.n	800e7b4 <USBD_StdEPReq+0x1c8>
              break;
 800e7b2:	bf00      	nop
          }
          break;
 800e7b4:	e0ab      	b.n	800e90e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	d002      	beq.n	800e7c8 <USBD_StdEPReq+0x1dc>
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	d032      	beq.n	800e82c <USBD_StdEPReq+0x240>
 800e7c6:	e097      	b.n	800e8f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7c8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d007      	beq.n	800e7de <USBD_StdEPReq+0x1f2>
 800e7ce:	7bbb      	ldrb	r3, [r7, #14]
 800e7d0:	2b80      	cmp	r3, #128	; 0x80
 800e7d2:	d004      	beq.n	800e7de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fbed 	bl	800efb6 <USBD_CtlError>
                break;
 800e7dc:	e091      	b.n	800e902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	da0b      	bge.n	800e7fe <USBD_StdEPReq+0x212>
 800e7e6:	7bbb      	ldrb	r3, [r7, #14]
 800e7e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	3310      	adds	r3, #16
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	e00b      	b.n	800e816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
 800e800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e804:	4613      	mov	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	3304      	adds	r3, #4
 800e816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2202      	movs	r2, #2
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fc37 	bl	800f098 <USBD_CtlSendData>
              break;
 800e82a:	e06a      	b.n	800e902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e830:	2b00      	cmp	r3, #0
 800e832:	da11      	bge.n	800e858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	f003 020f 	and.w	r2, r3, #15
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	3324      	adds	r3, #36	; 0x24
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d117      	bne.n	800e87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 fbb0 	bl	800efb6 <USBD_CtlError>
                  break;
 800e856:	e054      	b.n	800e902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e858:	7bbb      	ldrb	r3, [r7, #14]
 800e85a:	f003 020f 	and.w	r2, r3, #15
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	4613      	mov	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	440b      	add	r3, r1
 800e86a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d104      	bne.n	800e87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e874:	6839      	ldr	r1, [r7, #0]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fb9d 	bl	800efb6 <USBD_CtlError>
                  break;
 800e87c:	e041      	b.n	800e902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e87e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e882:	2b00      	cmp	r3, #0
 800e884:	da0b      	bge.n	800e89e <USBD_StdEPReq+0x2b2>
 800e886:	7bbb      	ldrb	r3, [r7, #14]
 800e888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e88c:	4613      	mov	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	4413      	add	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	3310      	adds	r3, #16
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	3304      	adds	r3, #4
 800e89c:	e00b      	b.n	800e8b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e89e:	7bbb      	ldrb	r3, [r7, #14]
 800e8a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	3304      	adds	r3, #4
 800e8b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d002      	beq.n	800e8c4 <USBD_StdEPReq+0x2d8>
 800e8be:	7bbb      	ldrb	r3, [r7, #14]
 800e8c0:	2b80      	cmp	r3, #128	; 0x80
 800e8c2:	d103      	bne.n	800e8cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e00e      	b.n	800e8ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e8cc:	7bbb      	ldrb	r3, [r7, #14]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f002 fe87 	bl	80115e4 <USBD_LL_IsStallEP>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d003      	beq.n	800e8e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	601a      	str	r2, [r3, #0]
 800e8e2:	e002      	b.n	800e8ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 fbd1 	bl	800f098 <USBD_CtlSendData>
              break;
 800e8f6:	e004      	b.n	800e902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fb5b 	bl	800efb6 <USBD_CtlError>
              break;
 800e900:	bf00      	nop
          }
          break;
 800e902:	e004      	b.n	800e90e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fb55 	bl	800efb6 <USBD_CtlError>
          break;
 800e90c:	bf00      	nop
      }
      break;
 800e90e:	e005      	b.n	800e91c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 fb4f 	bl	800efb6 <USBD_CtlError>
      break;
 800e918:	e000      	b.n	800e91c <USBD_StdEPReq+0x330>
      break;
 800e91a:	bf00      	nop
  }

  return ret;
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
	...

0800e928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e93a:	2300      	movs	r3, #0
 800e93c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	885b      	ldrh	r3, [r3, #2]
 800e942:	0a1b      	lsrs	r3, r3, #8
 800e944:	b29b      	uxth	r3, r3
 800e946:	3b01      	subs	r3, #1
 800e948:	2b06      	cmp	r3, #6
 800e94a:	f200 8128 	bhi.w	800eb9e <USBD_GetDescriptor+0x276>
 800e94e:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <USBD_GetDescriptor+0x2c>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e971 	.word	0x0800e971
 800e958:	0800e989 	.word	0x0800e989
 800e95c:	0800e9c9 	.word	0x0800e9c9
 800e960:	0800eb9f 	.word	0x0800eb9f
 800e964:	0800eb9f 	.word	0x0800eb9f
 800e968:	0800eb3f 	.word	0x0800eb3f
 800e96c:	0800eb6b 	.word	0x0800eb6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	7c12      	ldrb	r2, [r2, #16]
 800e97c:	f107 0108 	add.w	r1, r7, #8
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
 800e984:	60f8      	str	r0, [r7, #12]
      break;
 800e986:	e112      	b.n	800ebae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7c1b      	ldrb	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10d      	bne.n	800e9ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e998:	f107 0208 	add.w	r2, r7, #8
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
 800e9a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e9aa:	e100      	b.n	800ebae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b4:	f107 0208 	add.w	r2, r7, #8
 800e9b8:	4610      	mov	r0, r2
 800e9ba:	4798      	blx	r3
 800e9bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	2202      	movs	r2, #2
 800e9c4:	701a      	strb	r2, [r3, #0]
      break;
 800e9c6:	e0f2      	b.n	800ebae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	885b      	ldrh	r3, [r3, #2]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	2b05      	cmp	r3, #5
 800e9d0:	f200 80ac 	bhi.w	800eb2c <USBD_GetDescriptor+0x204>
 800e9d4:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <USBD_GetDescriptor+0xb4>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800e9f5 	.word	0x0800e9f5
 800e9e0:	0800ea29 	.word	0x0800ea29
 800e9e4:	0800ea5d 	.word	0x0800ea5d
 800e9e8:	0800ea91 	.word	0x0800ea91
 800e9ec:	0800eac5 	.word	0x0800eac5
 800e9f0:	0800eaf9 	.word	0x0800eaf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00b      	beq.n	800ea18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	7c12      	ldrb	r2, [r2, #16]
 800ea0c:	f107 0108 	add.w	r1, r7, #8
 800ea10:	4610      	mov	r0, r2
 800ea12:	4798      	blx	r3
 800ea14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea16:	e091      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 facb 	bl	800efb6 <USBD_CtlError>
            err++;
 800ea20:	7afb      	ldrb	r3, [r7, #11]
 800ea22:	3301      	adds	r3, #1
 800ea24:	72fb      	strb	r3, [r7, #11]
          break;
 800ea26:	e089      	b.n	800eb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00b      	beq.n	800ea4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	7c12      	ldrb	r2, [r2, #16]
 800ea40:	f107 0108 	add.w	r1, r7, #8
 800ea44:	4610      	mov	r0, r2
 800ea46:	4798      	blx	r3
 800ea48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea4a:	e077      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fab1 	bl	800efb6 <USBD_CtlError>
            err++;
 800ea54:	7afb      	ldrb	r3, [r7, #11]
 800ea56:	3301      	adds	r3, #1
 800ea58:	72fb      	strb	r3, [r7, #11]
          break;
 800ea5a:	e06f      	b.n	800eb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00b      	beq.n	800ea80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	7c12      	ldrb	r2, [r2, #16]
 800ea74:	f107 0108 	add.w	r1, r7, #8
 800ea78:	4610      	mov	r0, r2
 800ea7a:	4798      	blx	r3
 800ea7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea7e:	e05d      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fa97 	bl	800efb6 <USBD_CtlError>
            err++;
 800ea88:	7afb      	ldrb	r3, [r7, #11]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea8e:	e055      	b.n	800eb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	7c12      	ldrb	r2, [r2, #16]
 800eaa8:	f107 0108 	add.w	r1, r7, #8
 800eaac:	4610      	mov	r0, r2
 800eaae:	4798      	blx	r3
 800eab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eab2:	e043      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fa7d 	bl	800efb6 <USBD_CtlError>
            err++;
 800eabc:	7afb      	ldrb	r3, [r7, #11]
 800eabe:	3301      	adds	r3, #1
 800eac0:	72fb      	strb	r3, [r7, #11]
          break;
 800eac2:	e03b      	b.n	800eb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e029      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa63 	bl	800efb6 <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e021      	b.n	800eb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e00f      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa49 	bl	800efb6 <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e007      	b.n	800eb3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fa41 	bl	800efb6 <USBD_CtlError>
          err++;
 800eb34:	7afb      	ldrb	r3, [r7, #11]
 800eb36:	3301      	adds	r3, #1
 800eb38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eb3a:	bf00      	nop
      }
      break;
 800eb3c:	e037      	b.n	800ebae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	7c1b      	ldrb	r3, [r3, #16]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d109      	bne.n	800eb5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4e:	f107 0208 	add.w	r2, r7, #8
 800eb52:	4610      	mov	r0, r2
 800eb54:	4798      	blx	r3
 800eb56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb58:	e029      	b.n	800ebae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fa2a 	bl	800efb6 <USBD_CtlError>
        err++;
 800eb62:	7afb      	ldrb	r3, [r7, #11]
 800eb64:	3301      	adds	r3, #1
 800eb66:	72fb      	strb	r3, [r7, #11]
      break;
 800eb68:	e021      	b.n	800ebae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	7c1b      	ldrb	r3, [r3, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10d      	bne.n	800eb8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7a:	f107 0208 	add.w	r2, r7, #8
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4798      	blx	r3
 800eb82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	3301      	adds	r3, #1
 800eb88:	2207      	movs	r2, #7
 800eb8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb8c:	e00f      	b.n	800ebae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fa10 	bl	800efb6 <USBD_CtlError>
        err++;
 800eb96:	7afb      	ldrb	r3, [r7, #11]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800eb9c:	e007      	b.n	800ebae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 fa08 	bl	800efb6 <USBD_CtlError>
      err++;
 800eba6:	7afb      	ldrb	r3, [r7, #11]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	72fb      	strb	r3, [r7, #11]
      break;
 800ebac:	bf00      	nop
  }

  if (err != 0U)
 800ebae:	7afb      	ldrb	r3, [r7, #11]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d11e      	bne.n	800ebf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	88db      	ldrh	r3, [r3, #6]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d016      	beq.n	800ebea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ebbc:	893b      	ldrh	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00e      	beq.n	800ebe0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	88da      	ldrh	r2, [r3, #6]
 800ebc6:	893b      	ldrh	r3, [r7, #8]
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	bf28      	it	cs
 800ebcc:	4613      	movcs	r3, r2
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ebd2:	893b      	ldrh	r3, [r7, #8]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	68f9      	ldr	r1, [r7, #12]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fa5d 	bl	800f098 <USBD_CtlSendData>
 800ebde:	e009      	b.n	800ebf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ebe0:	6839      	ldr	r1, [r7, #0]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f9e7 	bl	800efb6 <USBD_CtlError>
 800ebe8:	e004      	b.n	800ebf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 faae 	bl	800f14c <USBD_CtlSendStatus>
 800ebf0:	e000      	b.n	800ebf4 <USBD_GetDescriptor+0x2cc>
    return;
 800ebf2:	bf00      	nop
  }
}
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop

0800ebfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	889b      	ldrh	r3, [r3, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d131      	bne.n	800ec72 <USBD_SetAddress+0x76>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	88db      	ldrh	r3, [r3, #6]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d12d      	bne.n	800ec72 <USBD_SetAddress+0x76>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	885b      	ldrh	r3, [r3, #2]
 800ec1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ec1c:	d829      	bhi.n	800ec72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	885b      	ldrh	r3, [r3, #2]
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d104      	bne.n	800ec40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f9bc 	bl	800efb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec3e:	e01d      	b.n	800ec7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7bfa      	ldrb	r2, [r7, #15]
 800ec44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f002 fcf5 	bl	801163c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fa7a 	bl	800f14c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d004      	beq.n	800ec68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2202      	movs	r2, #2
 800ec62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec66:	e009      	b.n	800ec7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec70:	e004      	b.n	800ec7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f99e 	bl	800efb6 <USBD_CtlError>
  }
}
 800ec7a:	bf00      	nop
 800ec7c:	bf00      	nop
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	885b      	ldrh	r3, [r3, #2]
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	4b4e      	ldr	r3, [pc, #312]	; (800edd4 <USBD_SetConfig+0x150>)
 800ec9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ec9c:	4b4d      	ldr	r3, [pc, #308]	; (800edd4 <USBD_SetConfig+0x150>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d905      	bls.n	800ecb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eca4:	6839      	ldr	r1, [r7, #0]
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f985 	bl	800efb6 <USBD_CtlError>
    return USBD_FAIL;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e08c      	b.n	800edca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d002      	beq.n	800ecc2 <USBD_SetConfig+0x3e>
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	d029      	beq.n	800ed14 <USBD_SetConfig+0x90>
 800ecc0:	e075      	b.n	800edae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ecc2:	4b44      	ldr	r3, [pc, #272]	; (800edd4 <USBD_SetConfig+0x150>)
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d020      	beq.n	800ed0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ecca:	4b42      	ldr	r3, [pc, #264]	; (800edd4 <USBD_SetConfig+0x150>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ecd4:	4b3f      	ldr	r3, [pc, #252]	; (800edd4 <USBD_SetConfig+0x150>)
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7fe ffe1 	bl	800dca2 <USBD_SetClassConfig>
 800ece0:	4603      	mov	r3, r0
 800ece2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d008      	beq.n	800ecfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f962 	bl	800efb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ecfa:	e065      	b.n	800edc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fa25 	bl	800f14c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2203      	movs	r2, #3
 800ed06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed0a:	e05d      	b.n	800edc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fa1d 	bl	800f14c <USBD_CtlSendStatus>
      break;
 800ed12:	e059      	b.n	800edc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ed14:	4b2f      	ldr	r3, [pc, #188]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d112      	bne.n	800ed42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ed24:	4b2b      	ldr	r3, [pc, #172]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed2e:	4b29      	ldr	r3, [pc, #164]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7fe ffd0 	bl	800dcda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fa06 	bl	800f14c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed40:	e042      	b.n	800edc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ed42:	4b24      	ldr	r3, [pc, #144]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d02a      	beq.n	800eda6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	4619      	mov	r1, r3
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7fe ffbe 	bl	800dcda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ed5e:	4b1d      	ldr	r3, [pc, #116]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed68:	4b1a      	ldr	r3, [pc, #104]	; (800edd4 <USBD_SetConfig+0x150>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7fe ff97 	bl	800dca2 <USBD_SetClassConfig>
 800ed74:	4603      	mov	r3, r0
 800ed76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00f      	beq.n	800ed9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ed7e:	6839      	ldr	r1, [r7, #0]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f918 	bl	800efb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7fe ffa3 	bl	800dcda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2202      	movs	r2, #2
 800ed98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed9c:	e014      	b.n	800edc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f9d4 	bl	800f14c <USBD_CtlSendStatus>
      break;
 800eda4:	e010      	b.n	800edc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f9d0 	bl	800f14c <USBD_CtlSendStatus>
      break;
 800edac:	e00c      	b.n	800edc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f900 	bl	800efb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edb6:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <USBD_SetConfig+0x150>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7fe ff8c 	bl	800dcda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800edc2:	2303      	movs	r3, #3
 800edc4:	73fb      	strb	r3, [r7, #15]
      break;
 800edc6:	bf00      	nop
  }

  return ret;
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	200022b8 	.word	0x200022b8

0800edd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	88db      	ldrh	r3, [r3, #6]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d004      	beq.n	800edf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800edea:	6839      	ldr	r1, [r7, #0]
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f8e2 	bl	800efb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800edf2:	e023      	b.n	800ee3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	dc02      	bgt.n	800ee06 <USBD_GetConfig+0x2e>
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dc03      	bgt.n	800ee0c <USBD_GetConfig+0x34>
 800ee04:	e015      	b.n	800ee32 <USBD_GetConfig+0x5a>
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d00b      	beq.n	800ee22 <USBD_GetConfig+0x4a>
 800ee0a:	e012      	b.n	800ee32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3308      	adds	r3, #8
 800ee16:	2201      	movs	r2, #1
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f93c 	bl	800f098 <USBD_CtlSendData>
        break;
 800ee20:	e00c      	b.n	800ee3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3304      	adds	r3, #4
 800ee26:	2201      	movs	r2, #1
 800ee28:	4619      	mov	r1, r3
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 f934 	bl	800f098 <USBD_CtlSendData>
        break;
 800ee30:	e004      	b.n	800ee3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 f8be 	bl	800efb6 <USBD_CtlError>
        break;
 800ee3a:	bf00      	nop
}
 800ee3c:	bf00      	nop
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	3b01      	subs	r3, #1
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d81e      	bhi.n	800ee9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	88db      	ldrh	r3, [r3, #6]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d004      	beq.n	800ee6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ee64:	6839      	ldr	r1, [r7, #0]
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f8a5 	bl	800efb6 <USBD_CtlError>
        break;
 800ee6c:	e01a      	b.n	800eea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d005      	beq.n	800ee8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	f043 0202 	orr.w	r2, r3, #2
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	330c      	adds	r3, #12
 800ee8e:	2202      	movs	r2, #2
 800ee90:	4619      	mov	r1, r3
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f900 	bl	800f098 <USBD_CtlSendData>
      break;
 800ee98:	e004      	b.n	800eea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f88a 	bl	800efb6 <USBD_CtlError>
      break;
 800eea2:	bf00      	nop
  }
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	885b      	ldrh	r3, [r3, #2]
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d107      	bne.n	800eece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f940 	bl	800f14c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eecc:	e013      	b.n	800eef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	885b      	ldrh	r3, [r3, #2]
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d10b      	bne.n	800eeee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	889b      	ldrh	r3, [r3, #4]
 800eeda:	0a1b      	lsrs	r3, r3, #8
 800eedc:	b29b      	uxth	r3, r3
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f930 	bl	800f14c <USBD_CtlSendStatus>
}
 800eeec:	e003      	b.n	800eef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f860 	bl	800efb6 <USBD_CtlError>
}
 800eef6:	bf00      	nop
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	3b01      	subs	r3, #1
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d80b      	bhi.n	800ef2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	885b      	ldrh	r3, [r3, #2]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d10c      	bne.n	800ef38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f910 	bl	800f14c <USBD_CtlSendStatus>
      }
      break;
 800ef2c:	e004      	b.n	800ef38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f840 	bl	800efb6 <USBD_CtlError>
      break;
 800ef36:	e000      	b.n	800ef3a <USBD_ClrFeature+0x3c>
      break;
 800ef38:	bf00      	nop
  }
}
 800ef3a:	bf00      	nop
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
 800ef4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	781a      	ldrb	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff fa41 	bl	800e3f4 <SWAPBYTE>
 800ef72:	4603      	mov	r3, r0
 800ef74:	461a      	mov	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	3301      	adds	r3, #1
 800ef84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff fa34 	bl	800e3f4 <SWAPBYTE>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461a      	mov	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	3301      	adds	r3, #1
 800ef98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7ff fa27 	bl	800e3f4 <SWAPBYTE>
 800efa6:	4603      	mov	r3, r0
 800efa8:	461a      	mov	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	80da      	strh	r2, [r3, #6]
}
 800efae:	bf00      	nop
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800efc0:	2180      	movs	r1, #128	; 0x80
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f002 fad0 	bl	8011568 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800efc8:	2100      	movs	r1, #0
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f002 facc 	bl	8011568 <USBD_LL_StallEP>
}
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800efe4:	2300      	movs	r3, #0
 800efe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d036      	beq.n	800f05c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eff2:	6938      	ldr	r0, [r7, #16]
 800eff4:	f000 f836 	bl	800f064 <USBD_GetLen>
 800eff8:	4603      	mov	r3, r0
 800effa:	3301      	adds	r3, #1
 800effc:	b29b      	uxth	r3, r3
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f006:	7dfb      	ldrb	r3, [r7, #23]
 800f008:	68ba      	ldr	r2, [r7, #8]
 800f00a:	4413      	add	r3, r2
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	7812      	ldrb	r2, [r2, #0]
 800f010:	701a      	strb	r2, [r3, #0]
  idx++;
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	3301      	adds	r3, #1
 800f016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f018:	7dfb      	ldrb	r3, [r7, #23]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	4413      	add	r3, r2
 800f01e:	2203      	movs	r2, #3
 800f020:	701a      	strb	r2, [r3, #0]
  idx++;
 800f022:	7dfb      	ldrb	r3, [r7, #23]
 800f024:	3301      	adds	r3, #1
 800f026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f028:	e013      	b.n	800f052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f02a:	7dfb      	ldrb	r3, [r7, #23]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	4413      	add	r3, r2
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	3301      	adds	r3, #1
 800f03a:	613b      	str	r3, [r7, #16]
    idx++;
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	3301      	adds	r3, #1
 800f040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f042:	7dfb      	ldrb	r3, [r7, #23]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	4413      	add	r3, r2
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	3301      	adds	r3, #1
 800f050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e7      	bne.n	800f02a <USBD_GetString+0x52>
 800f05a:	e000      	b.n	800f05e <USBD_GetString+0x86>
    return;
 800f05c:	bf00      	nop
  }
}
 800f05e:	3718      	adds	r7, #24
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f074:	e005      	b.n	800f082 <USBD_GetLen+0x1e>
  {
    len++;
 800f076:	7bfb      	ldrb	r3, [r7, #15]
 800f078:	3301      	adds	r3, #1
 800f07a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	3301      	adds	r3, #1
 800f080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1f5      	bne.n	800f076 <USBD_GetLen+0x12>
  }

  return len;
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2202      	movs	r2, #2
 800f0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	2100      	movs	r1, #0
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f002 fadb 	bl	801167a <USBD_LL_Transmit>

  return USBD_OK;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	60f8      	str	r0, [r7, #12]
 800f0d6:	60b9      	str	r1, [r7, #8]
 800f0d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	2100      	movs	r1, #0
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f002 faca 	bl	801167a <USBD_LL_Transmit>

  return USBD_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2203      	movs	r2, #3
 800f100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	2100      	movs	r1, #0
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f002 face 	bl	80116bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	2100      	movs	r1, #0
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f002 fabd 	bl	80116bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2204      	movs	r2, #4
 800f158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f15c:	2300      	movs	r3, #0
 800f15e:	2200      	movs	r2, #0
 800f160:	2100      	movs	r1, #0
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f002 fa89 	bl	801167a <USBD_LL_Transmit>

  return USBD_OK;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b082      	sub	sp, #8
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2205      	movs	r2, #5
 800f17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f182:	2300      	movs	r3, #0
 800f184:	2200      	movs	r2, #0
 800f186:	2100      	movs	r1, #0
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f002 fa97 	bl	80116bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f1a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1aa:	2b84      	cmp	r3, #132	; 0x84
 800f1ac:	d005      	beq.n	800f1ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f1ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	3303      	adds	r3, #3
 800f1b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3714      	adds	r7, #20
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ce:	f3ef 8305 	mrs	r3, IPSR
 800f1d2:	607b      	str	r3, [r7, #4]
  return(result);
 800f1d4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	bf14      	ite	ne
 800f1da:	2301      	movne	r3, #1
 800f1dc:	2300      	moveq	r3, #0
 800f1de:	b2db      	uxtb	r3, r3
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f1f0:	f000 fba8 	bl	800f944 <vTaskStartScheduler>
  
  return osOK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f1fe:	f7ff ffe3 	bl	800f1c8 <inHandlerMode>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d003      	beq.n	800f210 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f208:	f000 fca6 	bl	800fb58 <xTaskGetTickCountFromISR>
 800f20c:	4603      	mov	r3, r0
 800f20e:	e002      	b.n	800f216 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f210:	f000 fc92 	bl	800fb38 <xTaskGetTickCount>
 800f214:	4603      	mov	r3, r0
  }
}
 800f216:	4618      	mov	r0, r3
 800f218:	bd80      	pop	{r7, pc}

0800f21a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21c:	b087      	sub	sp, #28
 800f21e:	af02      	add	r7, sp, #8
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685c      	ldr	r4, [r3, #4]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f230:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff ffad 	bl	800f198 <makeFreeRtosPriority>
 800f23e:	4602      	mov	r2, r0
 800f240:	f107 030c 	add.w	r3, r7, #12
 800f244:	9301      	str	r3, [sp, #4]
 800f246:	9200      	str	r2, [sp, #0]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	4632      	mov	r2, r6
 800f24c:	4629      	mov	r1, r5
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 f974 	bl	800f53c <xTaskCreate>
 800f254:	4603      	mov	r3, r0
 800f256:	2b01      	cmp	r3, #1
 800f258:	d001      	beq.n	800f25e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f25a:	2300      	movs	r3, #0
 800f25c:	e000      	b.n	800f260 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f25e:	68fb      	ldr	r3, [r7, #12]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3714      	adds	r7, #20
 800f264:	46bd      	mov	sp, r7
 800f266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <osDelay+0x16>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	e000      	b.n	800f280 <osDelay+0x18>
 800f27e:	2301      	movs	r3, #1
 800f280:	4618      	mov	r0, r3
 800f282:	f000 fb2b 	bl	800f8dc <vTaskDelay>
  
  return osOK;
 800f286:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af02      	add	r7, sp, #8
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f29a:	2300      	movs	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800f2a2:	f7ff ff91 	bl	800f1c8 <inHandlerMode>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d01c      	beq.n	800f2e6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	f107 0208 	add.w	r2, r7, #8
 800f2b2:	f107 030c 	add.w	r3, r7, #12
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 ff77 	bl	80101b0 <xTaskGenericNotifyFromISR>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d002      	beq.n	800f2ce <osSignalSet+0x3e>
      return 0x80000000;
 800f2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2cc:	e019      	b.n	800f302 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d015      	beq.n	800f300 <osSignalSet+0x70>
 800f2d4:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <osSignalSet+0x7c>)
 800f2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	e00c      	b.n	800f300 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	f107 0308 	add.w	r3, r7, #8
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fea0 	bl	8010034 <xTaskGenericNotify>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d002      	beq.n	800f300 <osSignalSet+0x70>
    return 0x80000000;
 800f2fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2fe:	e000      	b.n	800f302 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800f300:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800f302:	4618      	mov	r0, r3
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	e000ed04 	.word	0xe000ed04

0800f310 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b089      	sub	sp, #36	; 0x24
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800f31c:	2300      	movs	r3, #0
 800f31e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f32a:	d103      	bne.n	800f334 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800f32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f330:	61fb      	str	r3, [r7, #28]
 800f332:	e009      	b.n	800f348 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d006      	beq.n	800f348 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d101      	bne.n	800f348 <osSignalWait+0x38>
      ticks = 1;
 800f344:	2301      	movs	r3, #1
 800f346:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800f348:	f7ff ff3e 	bl	800f1c8 <inHandlerMode>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d002      	beq.n	800f358 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800f352:	2382      	movs	r3, #130	; 0x82
 800f354:	613b      	str	r3, [r7, #16]
 800f356:	e01b      	b.n	800f390 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	f107 0310 	add.w	r3, r7, #16
 800f35e:	1d1a      	adds	r2, r3, #4
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2000      	movs	r0, #0
 800f364:	f000 fe06 	bl	800ff74 <xTaskNotifyWait>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d008      	beq.n	800f380 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d102      	bne.n	800f37a <osSignalWait+0x6a>
 800f374:	2300      	movs	r3, #0
 800f376:	613b      	str	r3, [r7, #16]
 800f378:	e00a      	b.n	800f390 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800f37a:	2340      	movs	r3, #64	; 0x40
 800f37c:	613b      	str	r3, [r7, #16]
 800f37e:	e007      	b.n	800f390 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2b00      	cmp	r3, #0
 800f384:	da02      	bge.n	800f38c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800f386:	2386      	movs	r3, #134	; 0x86
 800f388:	613b      	str	r3, [r7, #16]
 800f38a:	e001      	b.n	800f390 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800f38c:	2308      	movs	r3, #8
 800f38e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	461c      	mov	r4, r3
 800f394:	f107 0310 	add.w	r3, r7, #16
 800f398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f39c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	3724      	adds	r7, #36	; 0x24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd90      	pop	{r4, r7, pc}

0800f3a8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <osDelayUntil+0x18>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	e000      	b.n	800f3c2 <osDelayUntil+0x1a>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fa0b 	bl	800f7e0 <vTaskDelayUntil>
  
  return osOK;
 800f3ca:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f103 0208 	add.w	r2, r3, #8
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f103 0208 	add.w	r2, r3, #8
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f103 0208 	add.w	r2, r3, #8
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f422:	bf00      	nop
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f42e:	b480      	push	{r7}
 800f430:	b085      	sub	sp, #20
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	689a      	ldr	r2, [r3, #8]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	683a      	ldr	r2, [r7, #0]
 800f452:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	601a      	str	r2, [r3, #0]
}
 800f46a:	bf00      	nop
 800f46c:	3714      	adds	r7, #20
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr

0800f476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f476:	b480      	push	{r7}
 800f478:	b085      	sub	sp, #20
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f48c:	d103      	bne.n	800f496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	e00c      	b.n	800f4b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3308      	adds	r3, #8
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	e002      	b.n	800f4a4 <vListInsert+0x2e>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68ba      	ldr	r2, [r7, #8]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d2f6      	bcs.n	800f49e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	1c5a      	adds	r2, r3, #1
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	601a      	str	r2, [r3, #0]
}
 800f4dc:	bf00      	nop
 800f4de:	3714      	adds	r7, #20
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	6892      	ldr	r2, [r2, #8]
 800f4fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	6852      	ldr	r2, [r2, #4]
 800f508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	429a      	cmp	r2, r3
 800f512:	d103      	bne.n	800f51c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	689a      	ldr	r2, [r3, #8]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	1e5a      	subs	r2, r3, #1
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
}
 800f530:	4618      	mov	r0, r3
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08c      	sub	sp, #48	; 0x30
 800f540:	af04      	add	r7, sp, #16
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	603b      	str	r3, [r7, #0]
 800f548:	4613      	mov	r3, r2
 800f54a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4618      	mov	r0, r3
 800f552:	f001 f9c9 	bl	80108e8 <pvPortMalloc>
 800f556:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00e      	beq.n	800f57c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f55e:	20a0      	movs	r0, #160	; 0xa0
 800f560:	f001 f9c2 	bl	80108e8 <pvPortMalloc>
 800f564:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	697a      	ldr	r2, [r7, #20]
 800f570:	631a      	str	r2, [r3, #48]	; 0x30
 800f572:	e005      	b.n	800f580 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f574:	6978      	ldr	r0, [r7, #20]
 800f576:	f001 fa87 	bl	8010a88 <vPortFree>
 800f57a:	e001      	b.n	800f580 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f57c:	2300      	movs	r3, #0
 800f57e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d013      	beq.n	800f5ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f586:	88fa      	ldrh	r2, [r7, #6]
 800f588:	2300      	movs	r3, #0
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	9302      	str	r3, [sp, #8]
 800f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	68b9      	ldr	r1, [r7, #8]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 f80f 	bl	800f5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5a2:	69f8      	ldr	r0, [r7, #28]
 800f5a4:	f000 f8b2 	bl	800f70c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	e002      	b.n	800f5b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5b4:	69bb      	ldr	r3, [r7, #24]
	}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3720      	adds	r7, #32
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	21a5      	movs	r1, #165	; 0xa5
 800f5da:	f005 f974 	bl	80148c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4413      	add	r3, r2
 800f5ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f023 0307 	bic.w	r3, r3, #7
 800f5f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	f003 0307 	and.w	r3, r3, #7
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00a      	beq.n	800f618 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f614:	bf00      	nop
 800f616:	e7fe      	b.n	800f616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d01f      	beq.n	800f65e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f61e:	2300      	movs	r3, #0
 800f620:	61fb      	str	r3, [r7, #28]
 800f622:	e012      	b.n	800f64a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	4413      	add	r3, r2
 800f62a:	7819      	ldrb	r1, [r3, #0]
 800f62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	4413      	add	r3, r2
 800f632:	3334      	adds	r3, #52	; 0x34
 800f634:	460a      	mov	r2, r1
 800f636:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	4413      	add	r3, r2
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d006      	beq.n	800f652 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	3301      	adds	r3, #1
 800f648:	61fb      	str	r3, [r7, #28]
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	2b0f      	cmp	r3, #15
 800f64e:	d9e9      	bls.n	800f624 <prvInitialiseNewTask+0x64>
 800f650:	e000      	b.n	800f654 <prvInitialiseNewTask+0x94>
			{
				break;
 800f652:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	2200      	movs	r2, #0
 800f658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f65c:	e003      	b.n	800f666 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	2200      	movs	r2, #0
 800f662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	2b06      	cmp	r3, #6
 800f66a:	d901      	bls.n	800f670 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f66c:	2306      	movs	r3, #6
 800f66e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f674:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f67a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	2200      	movs	r2, #0
 800f680:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	3304      	adds	r3, #4
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff fec4 	bl	800f414 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	3318      	adds	r3, #24
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff febf 	bl	800f414 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f69a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	f1c3 0207 	rsb	r2, r3, #7
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	334c      	adds	r3, #76	; 0x4c
 800f6c0:	224c      	movs	r2, #76	; 0x4c
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f005 f8fe 	bl	80148c6 <memset>
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6cc:	4a0c      	ldr	r2, [pc, #48]	; (800f700 <prvInitialiseNewTask+0x140>)
 800f6ce:	651a      	str	r2, [r3, #80]	; 0x50
 800f6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d2:	4a0c      	ldr	r2, [pc, #48]	; (800f704 <prvInitialiseNewTask+0x144>)
 800f6d4:	655a      	str	r2, [r3, #84]	; 0x54
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d8:	4a0b      	ldr	r2, [pc, #44]	; (800f708 <prvInitialiseNewTask+0x148>)
 800f6da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	68f9      	ldr	r1, [r7, #12]
 800f6e0:	69b8      	ldr	r0, [r7, #24]
 800f6e2:	f000 feaf 	bl	8010444 <pxPortInitialiseStack>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d002      	beq.n	800f6f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6f8:	bf00      	nop
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	2001774c 	.word	0x2001774c
 800f704:	200177b4 	.word	0x200177b4
 800f708:	2001781c 	.word	0x2001781c

0800f70c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f714:	f000 ffc6 	bl	80106a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f718:	4b2a      	ldr	r3, [pc, #168]	; (800f7c4 <prvAddNewTaskToReadyList+0xb8>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3301      	adds	r3, #1
 800f71e:	4a29      	ldr	r2, [pc, #164]	; (800f7c4 <prvAddNewTaskToReadyList+0xb8>)
 800f720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f722:	4b29      	ldr	r3, [pc, #164]	; (800f7c8 <prvAddNewTaskToReadyList+0xbc>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d109      	bne.n	800f73e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f72a:	4a27      	ldr	r2, [pc, #156]	; (800f7c8 <prvAddNewTaskToReadyList+0xbc>)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f730:	4b24      	ldr	r3, [pc, #144]	; (800f7c4 <prvAddNewTaskToReadyList+0xb8>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d110      	bne.n	800f75a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f738:	f000 fb78 	bl	800fe2c <prvInitialiseTaskLists>
 800f73c:	e00d      	b.n	800f75a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f73e:	4b23      	ldr	r3, [pc, #140]	; (800f7cc <prvAddNewTaskToReadyList+0xc0>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f746:	4b20      	ldr	r3, [pc, #128]	; (800f7c8 <prvAddNewTaskToReadyList+0xbc>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f750:	429a      	cmp	r2, r3
 800f752:	d802      	bhi.n	800f75a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f754:	4a1c      	ldr	r2, [pc, #112]	; (800f7c8 <prvAddNewTaskToReadyList+0xbc>)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f75a:	4b1d      	ldr	r3, [pc, #116]	; (800f7d0 <prvAddNewTaskToReadyList+0xc4>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3301      	adds	r3, #1
 800f760:	4a1b      	ldr	r2, [pc, #108]	; (800f7d0 <prvAddNewTaskToReadyList+0xc4>)
 800f762:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f768:	2201      	movs	r2, #1
 800f76a:	409a      	lsls	r2, r3
 800f76c:	4b19      	ldr	r3, [pc, #100]	; (800f7d4 <prvAddNewTaskToReadyList+0xc8>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4313      	orrs	r3, r2
 800f772:	4a18      	ldr	r2, [pc, #96]	; (800f7d4 <prvAddNewTaskToReadyList+0xc8>)
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f77a:	4613      	mov	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	4a15      	ldr	r2, [pc, #84]	; (800f7d8 <prvAddNewTaskToReadyList+0xcc>)
 800f784:	441a      	add	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3304      	adds	r3, #4
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f7ff fe4e 	bl	800f42e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f792:	f000 ffb7 	bl	8010704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f796:	4b0d      	ldr	r3, [pc, #52]	; (800f7cc <prvAddNewTaskToReadyList+0xc0>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00e      	beq.n	800f7bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f79e:	4b0a      	ldr	r3, [pc, #40]	; (800f7c8 <prvAddNewTaskToReadyList+0xbc>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d207      	bcs.n	800f7bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7ac:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <prvAddNewTaskToReadyList+0xd0>)
 800f7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	200023bc 	.word	0x200023bc
 800f7c8:	200022bc 	.word	0x200022bc
 800f7cc:	200023c8 	.word	0x200023c8
 800f7d0:	200023d8 	.word	0x200023d8
 800f7d4:	200023c4 	.word	0x200023c4
 800f7d8:	200022c0 	.word	0x200022c0
 800f7dc:	e000ed04 	.word	0xe000ed04

0800f7e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08a      	sub	sp, #40	; 0x28
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10a      	bne.n	800f80a <vTaskDelayUntil+0x2a>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	617b      	str	r3, [r7, #20]
}
 800f806:	bf00      	nop
 800f808:	e7fe      	b.n	800f808 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10a      	bne.n	800f826 <vTaskDelayUntil+0x46>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	613b      	str	r3, [r7, #16]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800f826:	4b2a      	ldr	r3, [pc, #168]	; (800f8d0 <vTaskDelayUntil+0xf0>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00a      	beq.n	800f844 <vTaskDelayUntil+0x64>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	60fb      	str	r3, [r7, #12]
}
 800f840:	bf00      	nop
 800f842:	e7fe      	b.n	800f842 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800f844:	f000 f8ce 	bl	800f9e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f848:	4b22      	ldr	r3, [pc, #136]	; (800f8d4 <vTaskDelayUntil+0xf4>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	4413      	add	r3, r2
 800f856:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	6a3a      	ldr	r2, [r7, #32]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d20b      	bcs.n	800f87a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	69fa      	ldr	r2, [r7, #28]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d211      	bcs.n	800f890 <vTaskDelayUntil+0xb0>
 800f86c:	69fa      	ldr	r2, [r7, #28]
 800f86e:	6a3b      	ldr	r3, [r7, #32]
 800f870:	429a      	cmp	r2, r3
 800f872:	d90d      	bls.n	800f890 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f874:	2301      	movs	r3, #1
 800f876:	627b      	str	r3, [r7, #36]	; 0x24
 800f878:	e00a      	b.n	800f890 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	69fa      	ldr	r2, [r7, #28]
 800f880:	429a      	cmp	r2, r3
 800f882:	d303      	bcc.n	800f88c <vTaskDelayUntil+0xac>
 800f884:	69fa      	ldr	r2, [r7, #28]
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d901      	bls.n	800f890 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f88c:	2301      	movs	r3, #1
 800f88e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	69fa      	ldr	r2, [r7, #28]
 800f894:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d006      	beq.n	800f8aa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f89c:	69fa      	ldr	r2, [r7, #28]
 800f89e:	6a3b      	ldr	r3, [r7, #32]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 fd67 	bl	8010378 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f8aa:	f000 f8a9 	bl	800fa00 <xTaskResumeAll>
 800f8ae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d107      	bne.n	800f8c6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800f8b6:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <vTaskDelayUntil+0xf8>)
 800f8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8bc:	601a      	str	r2, [r3, #0]
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8c6:	bf00      	nop
 800f8c8:	3728      	adds	r7, #40	; 0x28
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	200023e4 	.word	0x200023e4
 800f8d4:	200023c0 	.word	0x200023c0
 800f8d8:	e000ed04 	.word	0xe000ed04

0800f8dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d017      	beq.n	800f91e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8ee:	4b13      	ldr	r3, [pc, #76]	; (800f93c <vTaskDelay+0x60>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00a      	beq.n	800f90c <vTaskDelay+0x30>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	60bb      	str	r3, [r7, #8]
}
 800f908:	bf00      	nop
 800f90a:	e7fe      	b.n	800f90a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f90c:	f000 f86a 	bl	800f9e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f910:	2100      	movs	r1, #0
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fd30 	bl	8010378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f918:	f000 f872 	bl	800fa00 <xTaskResumeAll>
 800f91c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d107      	bne.n	800f934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f924:	4b06      	ldr	r3, [pc, #24]	; (800f940 <vTaskDelay+0x64>)
 800f926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	200023e4 	.word	0x200023e4
 800f940:	e000ed04 	.word	0xe000ed04

0800f944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f94a:	4b1e      	ldr	r3, [pc, #120]	; (800f9c4 <vTaskStartScheduler+0x80>)
 800f94c:	9301      	str	r3, [sp, #4]
 800f94e:	2300      	movs	r3, #0
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	2300      	movs	r3, #0
 800f954:	2280      	movs	r2, #128	; 0x80
 800f956:	491c      	ldr	r1, [pc, #112]	; (800f9c8 <vTaskStartScheduler+0x84>)
 800f958:	481c      	ldr	r0, [pc, #112]	; (800f9cc <vTaskStartScheduler+0x88>)
 800f95a:	f7ff fdef 	bl	800f53c <xTaskCreate>
 800f95e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d11b      	bne.n	800f99e <vTaskStartScheduler+0x5a>
	__asm volatile
 800f966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96a:	f383 8811 	msr	BASEPRI, r3
 800f96e:	f3bf 8f6f 	isb	sy
 800f972:	f3bf 8f4f 	dsb	sy
 800f976:	60bb      	str	r3, [r7, #8]
}
 800f978:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f97a:	4b15      	ldr	r3, [pc, #84]	; (800f9d0 <vTaskStartScheduler+0x8c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	334c      	adds	r3, #76	; 0x4c
 800f980:	4a14      	ldr	r2, [pc, #80]	; (800f9d4 <vTaskStartScheduler+0x90>)
 800f982:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f984:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <vTaskStartScheduler+0x94>)
 800f986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f98a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f98c:	4b13      	ldr	r3, [pc, #76]	; (800f9dc <vTaskStartScheduler+0x98>)
 800f98e:	2201      	movs	r2, #1
 800f990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f992:	4b13      	ldr	r3, [pc, #76]	; (800f9e0 <vTaskStartScheduler+0x9c>)
 800f994:	2200      	movs	r2, #0
 800f996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f998:	f000 fde2 	bl	8010560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f99c:	e00e      	b.n	800f9bc <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9a4:	d10a      	bne.n	800f9bc <vTaskStartScheduler+0x78>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	607b      	str	r3, [r7, #4]
}
 800f9b8:	bf00      	nop
 800f9ba:	e7fe      	b.n	800f9ba <vTaskStartScheduler+0x76>
}
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	200023e0 	.word	0x200023e0
 800f9c8:	08015fd0 	.word	0x08015fd0
 800f9cc:	0800fdfd 	.word	0x0800fdfd
 800f9d0:	200022bc 	.word	0x200022bc
 800f9d4:	20000198 	.word	0x20000198
 800f9d8:	200023dc 	.word	0x200023dc
 800f9dc:	200023c8 	.word	0x200023c8
 800f9e0:	200023c0 	.word	0x200023c0

0800f9e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9e8:	4b04      	ldr	r3, [pc, #16]	; (800f9fc <vTaskSuspendAll+0x18>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	4a03      	ldr	r2, [pc, #12]	; (800f9fc <vTaskSuspendAll+0x18>)
 800f9f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9f2:	bf00      	nop
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	200023e4 	.word	0x200023e4

0800fa00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa0e:	4b41      	ldr	r3, [pc, #260]	; (800fb14 <xTaskResumeAll+0x114>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10a      	bne.n	800fa2c <xTaskResumeAll+0x2c>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	603b      	str	r3, [r7, #0]
}
 800fa28:	bf00      	nop
 800fa2a:	e7fe      	b.n	800fa2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa2c:	f000 fe3a 	bl	80106a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa30:	4b38      	ldr	r3, [pc, #224]	; (800fb14 <xTaskResumeAll+0x114>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	4a37      	ldr	r2, [pc, #220]	; (800fb14 <xTaskResumeAll+0x114>)
 800fa38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa3a:	4b36      	ldr	r3, [pc, #216]	; (800fb14 <xTaskResumeAll+0x114>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d161      	bne.n	800fb06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa42:	4b35      	ldr	r3, [pc, #212]	; (800fb18 <xTaskResumeAll+0x118>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d05d      	beq.n	800fb06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa4a:	e02e      	b.n	800faaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa4c:	4b33      	ldr	r3, [pc, #204]	; (800fb1c <xTaskResumeAll+0x11c>)
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	3318      	adds	r3, #24
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fd45 	bl	800f4e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3304      	adds	r3, #4
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7ff fd40 	bl	800f4e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	409a      	lsls	r2, r3
 800fa70:	4b2b      	ldr	r3, [pc, #172]	; (800fb20 <xTaskResumeAll+0x120>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	4a2a      	ldr	r2, [pc, #168]	; (800fb20 <xTaskResumeAll+0x120>)
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4a27      	ldr	r2, [pc, #156]	; (800fb24 <xTaskResumeAll+0x124>)
 800fa88:	441a      	add	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f7ff fccc 	bl	800f42e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa9a:	4b23      	ldr	r3, [pc, #140]	; (800fb28 <xTaskResumeAll+0x128>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d302      	bcc.n	800faaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800faa4:	4b21      	ldr	r3, [pc, #132]	; (800fb2c <xTaskResumeAll+0x12c>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faaa:	4b1c      	ldr	r3, [pc, #112]	; (800fb1c <xTaskResumeAll+0x11c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1cc      	bne.n	800fa4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fab8:	f000 fa3c 	bl	800ff34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fabc:	4b1c      	ldr	r3, [pc, #112]	; (800fb30 <xTaskResumeAll+0x130>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d010      	beq.n	800faea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fac8:	f000 f858 	bl	800fb7c <xTaskIncrementTick>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fad2:	4b16      	ldr	r3, [pc, #88]	; (800fb2c <xTaskResumeAll+0x12c>)
 800fad4:	2201      	movs	r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3b01      	subs	r3, #1
 800fadc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1f1      	bne.n	800fac8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fae4:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <xTaskResumeAll+0x130>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800faea:	4b10      	ldr	r3, [pc, #64]	; (800fb2c <xTaskResumeAll+0x12c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d009      	beq.n	800fb06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800faf2:	2301      	movs	r3, #1
 800faf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800faf6:	4b0f      	ldr	r3, [pc, #60]	; (800fb34 <xTaskResumeAll+0x134>)
 800faf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb06:	f000 fdfd 	bl	8010704 <vPortExitCritical>

	return xAlreadyYielded;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	200023e4 	.word	0x200023e4
 800fb18:	200023bc 	.word	0x200023bc
 800fb1c:	2000237c 	.word	0x2000237c
 800fb20:	200023c4 	.word	0x200023c4
 800fb24:	200022c0 	.word	0x200022c0
 800fb28:	200022bc 	.word	0x200022bc
 800fb2c:	200023d0 	.word	0x200023d0
 800fb30:	200023cc 	.word	0x200023cc
 800fb34:	e000ed04 	.word	0xe000ed04

0800fb38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb3e:	4b05      	ldr	r3, [pc, #20]	; (800fb54 <xTaskGetTickCount+0x1c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb44:	687b      	ldr	r3, [r7, #4]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	370c      	adds	r7, #12
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	200023c0 	.word	0x200023c0

0800fb58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb5e:	f000 fe83 	bl	8010868 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fb62:	2300      	movs	r3, #0
 800fb64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fb66:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <xTaskGetTickCountFromISR+0x20>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb6c:	683b      	ldr	r3, [r7, #0]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	200023c0 	.word	0x200023c0

0800fb7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb82:	2300      	movs	r3, #0
 800fb84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb86:	4b4e      	ldr	r3, [pc, #312]	; (800fcc0 <xTaskIncrementTick+0x144>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f040 808e 	bne.w	800fcac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb90:	4b4c      	ldr	r3, [pc, #304]	; (800fcc4 <xTaskIncrementTick+0x148>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	3301      	adds	r3, #1
 800fb96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb98:	4a4a      	ldr	r2, [pc, #296]	; (800fcc4 <xTaskIncrementTick+0x148>)
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d120      	bne.n	800fbe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fba4:	4b48      	ldr	r3, [pc, #288]	; (800fcc8 <xTaskIncrementTick+0x14c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <xTaskIncrementTick+0x48>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	603b      	str	r3, [r7, #0]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <xTaskIncrementTick+0x46>
 800fbc4:	4b40      	ldr	r3, [pc, #256]	; (800fcc8 <xTaskIncrementTick+0x14c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	60fb      	str	r3, [r7, #12]
 800fbca:	4b40      	ldr	r3, [pc, #256]	; (800fccc <xTaskIncrementTick+0x150>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a3e      	ldr	r2, [pc, #248]	; (800fcc8 <xTaskIncrementTick+0x14c>)
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	4a3e      	ldr	r2, [pc, #248]	; (800fccc <xTaskIncrementTick+0x150>)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	4b3d      	ldr	r3, [pc, #244]	; (800fcd0 <xTaskIncrementTick+0x154>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	4a3c      	ldr	r2, [pc, #240]	; (800fcd0 <xTaskIncrementTick+0x154>)
 800fbe0:	6013      	str	r3, [r2, #0]
 800fbe2:	f000 f9a7 	bl	800ff34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbe6:	4b3b      	ldr	r3, [pc, #236]	; (800fcd4 <xTaskIncrementTick+0x158>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	693a      	ldr	r2, [r7, #16]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d348      	bcc.n	800fc82 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbf0:	4b35      	ldr	r3, [pc, #212]	; (800fcc8 <xTaskIncrementTick+0x14c>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d104      	bne.n	800fc04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbfa:	4b36      	ldr	r3, [pc, #216]	; (800fcd4 <xTaskIncrementTick+0x158>)
 800fbfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc00:	601a      	str	r2, [r3, #0]
					break;
 800fc02:	e03e      	b.n	800fc82 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc04:	4b30      	ldr	r3, [pc, #192]	; (800fcc8 <xTaskIncrementTick+0x14c>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d203      	bcs.n	800fc24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc1c:	4a2d      	ldr	r2, [pc, #180]	; (800fcd4 <xTaskIncrementTick+0x158>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc22:	e02e      	b.n	800fc82 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	3304      	adds	r3, #4
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff fc5d 	bl	800f4e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d004      	beq.n	800fc40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	3318      	adds	r3, #24
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fc54 	bl	800f4e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc44:	2201      	movs	r2, #1
 800fc46:	409a      	lsls	r2, r3
 800fc48:	4b23      	ldr	r3, [pc, #140]	; (800fcd8 <xTaskIncrementTick+0x15c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	4a22      	ldr	r2, [pc, #136]	; (800fcd8 <xTaskIncrementTick+0x15c>)
 800fc50:	6013      	str	r3, [r2, #0]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc56:	4613      	mov	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	4413      	add	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4a1f      	ldr	r2, [pc, #124]	; (800fcdc <xTaskIncrementTick+0x160>)
 800fc60:	441a      	add	r2, r3
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	3304      	adds	r3, #4
 800fc66:	4619      	mov	r1, r3
 800fc68:	4610      	mov	r0, r2
 800fc6a:	f7ff fbe0 	bl	800f42e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc72:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <xTaskIncrementTick+0x164>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d3b9      	bcc.n	800fbf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc80:	e7b6      	b.n	800fbf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc82:	4b17      	ldr	r3, [pc, #92]	; (800fce0 <xTaskIncrementTick+0x164>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc88:	4914      	ldr	r1, [pc, #80]	; (800fcdc <xTaskIncrementTick+0x160>)
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	4413      	add	r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	440b      	add	r3, r1
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d901      	bls.n	800fc9e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc9e:	4b11      	ldr	r3, [pc, #68]	; (800fce4 <xTaskIncrementTick+0x168>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d007      	beq.n	800fcb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fca6:	2301      	movs	r3, #1
 800fca8:	617b      	str	r3, [r7, #20]
 800fcaa:	e004      	b.n	800fcb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fcac:	4b0e      	ldr	r3, [pc, #56]	; (800fce8 <xTaskIncrementTick+0x16c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4a0d      	ldr	r2, [pc, #52]	; (800fce8 <xTaskIncrementTick+0x16c>)
 800fcb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fcb6:	697b      	ldr	r3, [r7, #20]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3718      	adds	r7, #24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	200023e4 	.word	0x200023e4
 800fcc4:	200023c0 	.word	0x200023c0
 800fcc8:	20002374 	.word	0x20002374
 800fccc:	20002378 	.word	0x20002378
 800fcd0:	200023d4 	.word	0x200023d4
 800fcd4:	200023dc 	.word	0x200023dc
 800fcd8:	200023c4 	.word	0x200023c4
 800fcdc:	200022c0 	.word	0x200022c0
 800fce0:	200022bc 	.word	0x200022bc
 800fce4:	200023d0 	.word	0x200023d0
 800fce8:	200023cc 	.word	0x200023cc

0800fcec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcf2:	4b3c      	ldr	r3, [pc, #240]	; (800fde4 <vTaskSwitchContext+0xf8>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	; (800fde8 <vTaskSwitchContext+0xfc>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd00:	e06b      	b.n	800fdda <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800fd02:	4b39      	ldr	r3, [pc, #228]	; (800fde8 <vTaskSwitchContext+0xfc>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fd08:	4b38      	ldr	r3, [pc, #224]	; (800fdec <vTaskSwitchContext+0x100>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd0e:	61fb      	str	r3, [r7, #28]
 800fd10:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fd14:	61bb      	str	r3, [r7, #24]
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	69ba      	ldr	r2, [r7, #24]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d111      	bne.n	800fd44 <vTaskSwitchContext+0x58>
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	3304      	adds	r3, #4
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	69ba      	ldr	r2, [r7, #24]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d10b      	bne.n	800fd44 <vTaskSwitchContext+0x58>
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	3308      	adds	r3, #8
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	69ba      	ldr	r2, [r7, #24]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d105      	bne.n	800fd44 <vTaskSwitchContext+0x58>
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	330c      	adds	r3, #12
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	69ba      	ldr	r2, [r7, #24]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d008      	beq.n	800fd56 <vTaskSwitchContext+0x6a>
 800fd44:	4b29      	ldr	r3, [pc, #164]	; (800fdec <vTaskSwitchContext+0x100>)
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	4b28      	ldr	r3, [pc, #160]	; (800fdec <vTaskSwitchContext+0x100>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3334      	adds	r3, #52	; 0x34
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4610      	mov	r0, r2
 800fd52:	f7f4 fd19 	bl	8004788 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd56:	4b26      	ldr	r3, [pc, #152]	; (800fdf0 <vTaskSwitchContext+0x104>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	fab3 f383 	clz	r3, r3
 800fd62:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fd64:	7afb      	ldrb	r3, [r7, #11]
 800fd66:	f1c3 031f 	rsb	r3, r3, #31
 800fd6a:	617b      	str	r3, [r7, #20]
 800fd6c:	4921      	ldr	r1, [pc, #132]	; (800fdf4 <vTaskSwitchContext+0x108>)
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	4613      	mov	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d10a      	bne.n	800fd96 <vTaskSwitchContext+0xaa>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	607b      	str	r3, [r7, #4]
}
 800fd92:	bf00      	nop
 800fd94:	e7fe      	b.n	800fd94 <vTaskSwitchContext+0xa8>
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	4613      	mov	r3, r2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	4a14      	ldr	r2, [pc, #80]	; (800fdf4 <vTaskSwitchContext+0x108>)
 800fda2:	4413      	add	r3, r2
 800fda4:	613b      	str	r3, [r7, #16]
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	685a      	ldr	r2, [r3, #4]
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	605a      	str	r2, [r3, #4]
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	685a      	ldr	r2, [r3, #4]
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	3308      	adds	r3, #8
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d104      	bne.n	800fdc6 <vTaskSwitchContext+0xda>
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	605a      	str	r2, [r3, #4]
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	4a07      	ldr	r2, [pc, #28]	; (800fdec <vTaskSwitchContext+0x100>)
 800fdce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fdd0:	4b06      	ldr	r3, [pc, #24]	; (800fdec <vTaskSwitchContext+0x100>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	334c      	adds	r3, #76	; 0x4c
 800fdd6:	4a08      	ldr	r2, [pc, #32]	; (800fdf8 <vTaskSwitchContext+0x10c>)
 800fdd8:	6013      	str	r3, [r2, #0]
}
 800fdda:	bf00      	nop
 800fddc:	3720      	adds	r7, #32
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	200023e4 	.word	0x200023e4
 800fde8:	200023d0 	.word	0x200023d0
 800fdec:	200022bc 	.word	0x200022bc
 800fdf0:	200023c4 	.word	0x200023c4
 800fdf4:	200022c0 	.word	0x200022c0
 800fdf8:	20000198 	.word	0x20000198

0800fdfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe04:	f000 f852 	bl	800feac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe08:	4b06      	ldr	r3, [pc, #24]	; (800fe24 <prvIdleTask+0x28>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d9f9      	bls.n	800fe04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe10:	4b05      	ldr	r3, [pc, #20]	; (800fe28 <prvIdleTask+0x2c>)
 800fe12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe20:	e7f0      	b.n	800fe04 <prvIdleTask+0x8>
 800fe22:	bf00      	nop
 800fe24:	200022c0 	.word	0x200022c0
 800fe28:	e000ed04 	.word	0xe000ed04

0800fe2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe32:	2300      	movs	r3, #0
 800fe34:	607b      	str	r3, [r7, #4]
 800fe36:	e00c      	b.n	800fe52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4a12      	ldr	r2, [pc, #72]	; (800fe8c <prvInitialiseTaskLists+0x60>)
 800fe44:	4413      	add	r3, r2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff fac4 	bl	800f3d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	607b      	str	r3, [r7, #4]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2b06      	cmp	r3, #6
 800fe56:	d9ef      	bls.n	800fe38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe58:	480d      	ldr	r0, [pc, #52]	; (800fe90 <prvInitialiseTaskLists+0x64>)
 800fe5a:	f7ff fabb 	bl	800f3d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe5e:	480d      	ldr	r0, [pc, #52]	; (800fe94 <prvInitialiseTaskLists+0x68>)
 800fe60:	f7ff fab8 	bl	800f3d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe64:	480c      	ldr	r0, [pc, #48]	; (800fe98 <prvInitialiseTaskLists+0x6c>)
 800fe66:	f7ff fab5 	bl	800f3d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe6a:	480c      	ldr	r0, [pc, #48]	; (800fe9c <prvInitialiseTaskLists+0x70>)
 800fe6c:	f7ff fab2 	bl	800f3d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe70:	480b      	ldr	r0, [pc, #44]	; (800fea0 <prvInitialiseTaskLists+0x74>)
 800fe72:	f7ff faaf 	bl	800f3d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe76:	4b0b      	ldr	r3, [pc, #44]	; (800fea4 <prvInitialiseTaskLists+0x78>)
 800fe78:	4a05      	ldr	r2, [pc, #20]	; (800fe90 <prvInitialiseTaskLists+0x64>)
 800fe7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe7c:	4b0a      	ldr	r3, [pc, #40]	; (800fea8 <prvInitialiseTaskLists+0x7c>)
 800fe7e:	4a05      	ldr	r2, [pc, #20]	; (800fe94 <prvInitialiseTaskLists+0x68>)
 800fe80:	601a      	str	r2, [r3, #0]
}
 800fe82:	bf00      	nop
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	200022c0 	.word	0x200022c0
 800fe90:	2000234c 	.word	0x2000234c
 800fe94:	20002360 	.word	0x20002360
 800fe98:	2000237c 	.word	0x2000237c
 800fe9c:	20002390 	.word	0x20002390
 800fea0:	200023a8 	.word	0x200023a8
 800fea4:	20002374 	.word	0x20002374
 800fea8:	20002378 	.word	0x20002378

0800feac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800feb2:	e019      	b.n	800fee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800feb4:	f000 fbf6 	bl	80106a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb8:	4b10      	ldr	r3, [pc, #64]	; (800fefc <prvCheckTasksWaitingTermination+0x50>)
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	3304      	adds	r3, #4
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff fb0f 	bl	800f4e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800feca:	4b0d      	ldr	r3, [pc, #52]	; (800ff00 <prvCheckTasksWaitingTermination+0x54>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3b01      	subs	r3, #1
 800fed0:	4a0b      	ldr	r2, [pc, #44]	; (800ff00 <prvCheckTasksWaitingTermination+0x54>)
 800fed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fed4:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <prvCheckTasksWaitingTermination+0x58>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	3b01      	subs	r3, #1
 800feda:	4a0a      	ldr	r2, [pc, #40]	; (800ff04 <prvCheckTasksWaitingTermination+0x58>)
 800fedc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fede:	f000 fc11 	bl	8010704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f810 	bl	800ff08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fee8:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <prvCheckTasksWaitingTermination+0x58>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d1e1      	bne.n	800feb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20002390 	.word	0x20002390
 800ff00:	200023bc 	.word	0x200023bc
 800ff04:	200023a4 	.word	0x200023a4

0800ff08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	334c      	adds	r3, #76	; 0x4c
 800ff14:	4618      	mov	r0, r3
 800ff16:	f004 fcdf 	bl	80148d8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 fdb2 	bl	8010a88 <vPortFree>
			vPortFree( pxTCB );
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fdaf 	bl	8010a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
	...

0800ff34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff3a:	4b0c      	ldr	r3, [pc, #48]	; (800ff6c <prvResetNextTaskUnblockTime+0x38>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d104      	bne.n	800ff4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff44:	4b0a      	ldr	r3, [pc, #40]	; (800ff70 <prvResetNextTaskUnblockTime+0x3c>)
 800ff46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff4c:	e008      	b.n	800ff60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff4e:	4b07      	ldr	r3, [pc, #28]	; (800ff6c <prvResetNextTaskUnblockTime+0x38>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	4a04      	ldr	r2, [pc, #16]	; (800ff70 <prvResetNextTaskUnblockTime+0x3c>)
 800ff5e:	6013      	str	r3, [r2, #0]
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	20002374 	.word	0x20002374
 800ff70:	200023dc 	.word	0x200023dc

0800ff74 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ff82:	f000 fb8f 	bl	80106a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ff86:	4b29      	ldr	r3, [pc, #164]	; (801002c <xTaskNotifyWait+0xb8>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d01c      	beq.n	800ffce <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ff94:	4b25      	ldr	r3, [pc, #148]	; (801002c <xTaskNotifyWait+0xb8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	43d2      	mvns	r2, r2
 800ffa0:	400a      	ands	r2, r1
 800ffa2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ffa6:	4b21      	ldr	r3, [pc, #132]	; (801002c <xTaskNotifyWait+0xb8>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00b      	beq.n	800ffce <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffb6:	2101      	movs	r1, #1
 800ffb8:	6838      	ldr	r0, [r7, #0]
 800ffba:	f000 f9dd 	bl	8010378 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ffbe:	4b1c      	ldr	r3, [pc, #112]	; (8010030 <xTaskNotifyWait+0xbc>)
 800ffc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc4:	601a      	str	r2, [r3, #0]
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ffce:	f000 fb99 	bl	8010704 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ffd2:	f000 fb67 	bl	80106a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d005      	beq.n	800ffe8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ffdc:	4b13      	ldr	r3, [pc, #76]	; (801002c <xTaskNotifyWait+0xb8>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ffe8:	4b10      	ldr	r3, [pc, #64]	; (801002c <xTaskNotifyWait+0xb8>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d002      	beq.n	800fffc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fff6:	2300      	movs	r3, #0
 800fff8:	617b      	str	r3, [r7, #20]
 800fffa:	e00a      	b.n	8010012 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fffc:	4b0b      	ldr	r3, [pc, #44]	; (801002c <xTaskNotifyWait+0xb8>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	43d2      	mvns	r2, r2
 8010008:	400a      	ands	r2, r1
 801000a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 801000e:	2301      	movs	r3, #1
 8010010:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010012:	4b06      	ldr	r3, [pc, #24]	; (801002c <xTaskNotifyWait+0xb8>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2200      	movs	r2, #0
 8010018:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 801001c:	f000 fb72 	bl	8010704 <vPortExitCritical>

		return xReturn;
 8010020:	697b      	ldr	r3, [r7, #20]
	}
 8010022:	4618      	mov	r0, r3
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	200022bc 	.word	0x200022bc
 8010030:	e000ed04 	.word	0xe000ed04

08010034 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010034:	b580      	push	{r7, lr}
 8010036:	b08a      	sub	sp, #40	; 0x28
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	60b9      	str	r1, [r7, #8]
 801003e:	603b      	str	r3, [r7, #0]
 8010040:	4613      	mov	r3, r2
 8010042:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010044:	2301      	movs	r3, #1
 8010046:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10a      	bne.n	8010064 <xTaskGenericNotify+0x30>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010052:	f383 8811 	msr	BASEPRI, r3
 8010056:	f3bf 8f6f 	isb	sy
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	61bb      	str	r3, [r7, #24]
}
 8010060:	bf00      	nop
 8010062:	e7fe      	b.n	8010062 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010068:	f000 fb1c 	bl	80106a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d004      	beq.n	801007c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801007c:	6a3b      	ldr	r3, [r7, #32]
 801007e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010082:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	2202      	movs	r2, #2
 8010088:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	2b04      	cmp	r3, #4
 8010090:	d82d      	bhi.n	80100ee <xTaskGenericNotify+0xba>
 8010092:	a201      	add	r2, pc, #4	; (adr r2, 8010098 <xTaskGenericNotify+0x64>)
 8010094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010098:	08010111 	.word	0x08010111
 801009c:	080100ad 	.word	0x080100ad
 80100a0:	080100bf 	.word	0x080100bf
 80100a4:	080100cf 	.word	0x080100cf
 80100a8:	080100d9 	.word	0x080100d9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	431a      	orrs	r2, r3
 80100b6:	6a3b      	ldr	r3, [r7, #32]
 80100b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80100bc:	e02b      	b.n	8010116 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80100c4:	1c5a      	adds	r2, r3, #1
 80100c6:	6a3b      	ldr	r3, [r7, #32]
 80100c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80100cc:	e023      	b.n	8010116 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80100d6:	e01e      	b.n	8010116 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80100d8:	7ffb      	ldrb	r3, [r7, #31]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d004      	beq.n	80100e8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80100e6:	e016      	b.n	8010116 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80100e8:	2300      	movs	r3, #0
 80100ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80100ec:	e013      	b.n	8010116 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80100f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100f8:	d00c      	beq.n	8010114 <xTaskGenericNotify+0xe0>
	__asm volatile
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	617b      	str	r3, [r7, #20]
}
 801010c:	bf00      	nop
 801010e:	e7fe      	b.n	801010e <xTaskGenericNotify+0xda>
					break;
 8010110:	bf00      	nop
 8010112:	e000      	b.n	8010116 <xTaskGenericNotify+0xe2>

					break;
 8010114:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010116:	7ffb      	ldrb	r3, [r7, #31]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d139      	bne.n	8010190 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	3304      	adds	r3, #4
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff f9e1 	bl	800f4e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801012a:	2201      	movs	r2, #1
 801012c:	409a      	lsls	r2, r3
 801012e:	4b1c      	ldr	r3, [pc, #112]	; (80101a0 <xTaskGenericNotify+0x16c>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4313      	orrs	r3, r2
 8010134:	4a1a      	ldr	r2, [pc, #104]	; (80101a0 <xTaskGenericNotify+0x16c>)
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	6a3b      	ldr	r3, [r7, #32]
 801013a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801013c:	4613      	mov	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	4a17      	ldr	r2, [pc, #92]	; (80101a4 <xTaskGenericNotify+0x170>)
 8010146:	441a      	add	r2, r3
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	3304      	adds	r3, #4
 801014c:	4619      	mov	r1, r3
 801014e:	4610      	mov	r0, r2
 8010150:	f7ff f96d 	bl	800f42e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00a      	beq.n	8010172 <xTaskGenericNotify+0x13e>
	__asm volatile
 801015c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010160:	f383 8811 	msr	BASEPRI, r3
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	613b      	str	r3, [r7, #16]
}
 801016e:	bf00      	nop
 8010170:	e7fe      	b.n	8010170 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010172:	6a3b      	ldr	r3, [r7, #32]
 8010174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010176:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <xTaskGenericNotify+0x174>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	429a      	cmp	r2, r3
 801017e:	d907      	bls.n	8010190 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010180:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <xTaskGenericNotify+0x178>)
 8010182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010190:	f000 fab8 	bl	8010704 <vPortExitCritical>

		return xReturn;
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010196:	4618      	mov	r0, r3
 8010198:	3728      	adds	r7, #40	; 0x28
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	200023c4 	.word	0x200023c4
 80101a4:	200022c0 	.word	0x200022c0
 80101a8:	200022bc 	.word	0x200022bc
 80101ac:	e000ed04 	.word	0xe000ed04

080101b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08e      	sub	sp, #56	; 0x38
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	603b      	str	r3, [r7, #0]
 80101bc:	4613      	mov	r3, r2
 80101be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80101c0:	2301      	movs	r3, #1
 80101c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d10a      	bne.n	80101e0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80101ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ce:	f383 8811 	msr	BASEPRI, r3
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	f3bf 8f4f 	dsb	sy
 80101da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80101dc:	bf00      	nop
 80101de:	e7fe      	b.n	80101de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101e0:	f000 fb42 	bl	8010868 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80101e8:	f3ef 8211 	mrs	r2, BASEPRI
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	f383 8811 	msr	BASEPRI, r3
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	623a      	str	r2, [r7, #32]
 80101fe:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010200:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010202:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d004      	beq.n	8010214 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010216:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801021a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	2202      	movs	r2, #2
 8010222:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 8010226:	79fb      	ldrb	r3, [r7, #7]
 8010228:	2b04      	cmp	r3, #4
 801022a:	d82f      	bhi.n	801028c <xTaskGenericNotifyFromISR+0xdc>
 801022c:	a201      	add	r2, pc, #4	; (adr r2, 8010234 <xTaskGenericNotifyFromISR+0x84>)
 801022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010232:	bf00      	nop
 8010234:	080102af 	.word	0x080102af
 8010238:	08010249 	.word	0x08010249
 801023c:	0801025b 	.word	0x0801025b
 8010240:	0801026b 	.word	0x0801026b
 8010244:	08010275 	.word	0x08010275
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	431a      	orrs	r2, r3
 8010252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010254:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8010258:	e02c      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801025a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8010268:	e024      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8010272:	e01f      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010278:	2b02      	cmp	r3, #2
 801027a:	d004      	beq.n	8010286 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010284:	e016      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8010286:	2300      	movs	r3, #0
 8010288:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801028a:	e013      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010296:	d00c      	beq.n	80102b2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8010298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029c:	f383 8811 	msr	BASEPRI, r3
 80102a0:	f3bf 8f6f 	isb	sy
 80102a4:	f3bf 8f4f 	dsb	sy
 80102a8:	61bb      	str	r3, [r7, #24]
}
 80102aa:	bf00      	nop
 80102ac:	e7fe      	b.n	80102ac <xTaskGenericNotifyFromISR+0xfc>
					break;
 80102ae:	bf00      	nop
 80102b0:	e000      	b.n	80102b4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80102b2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80102b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d145      	bne.n	8010348 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00a      	beq.n	80102da <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	617b      	str	r3, [r7, #20]
}
 80102d6:	bf00      	nop
 80102d8:	e7fe      	b.n	80102d8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <xTaskGenericNotifyFromISR+0x1b0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d11c      	bne.n	801031c <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e4:	3304      	adds	r3, #4
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7ff f8fe 	bl	800f4e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f0:	2201      	movs	r2, #1
 80102f2:	409a      	lsls	r2, r3
 80102f4:	4b1b      	ldr	r3, [pc, #108]	; (8010364 <xTaskGenericNotifyFromISR+0x1b4>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	4a1a      	ldr	r2, [pc, #104]	; (8010364 <xTaskGenericNotifyFromISR+0x1b4>)
 80102fc:	6013      	str	r3, [r2, #0]
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010302:	4613      	mov	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4a17      	ldr	r2, [pc, #92]	; (8010368 <xTaskGenericNotifyFromISR+0x1b8>)
 801030c:	441a      	add	r2, r3
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	3304      	adds	r3, #4
 8010312:	4619      	mov	r1, r3
 8010314:	4610      	mov	r0, r2
 8010316:	f7ff f88a 	bl	800f42e <vListInsertEnd>
 801031a:	e005      	b.n	8010328 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801031c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031e:	3318      	adds	r3, #24
 8010320:	4619      	mov	r1, r3
 8010322:	4812      	ldr	r0, [pc, #72]	; (801036c <xTaskGenericNotifyFromISR+0x1bc>)
 8010324:	f7ff f883 	bl	800f42e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032c:	4b10      	ldr	r3, [pc, #64]	; (8010370 <xTaskGenericNotifyFromISR+0x1c0>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010332:	429a      	cmp	r2, r3
 8010334:	d908      	bls.n	8010348 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010338:	2b00      	cmp	r3, #0
 801033a:	d002      	beq.n	8010342 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801033c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801033e:	2201      	movs	r2, #1
 8010340:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010342:	4b0c      	ldr	r3, [pc, #48]	; (8010374 <xTaskGenericNotifyFromISR+0x1c4>)
 8010344:	2201      	movs	r2, #1
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010352:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010356:	4618      	mov	r0, r3
 8010358:	3738      	adds	r7, #56	; 0x38
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	200023e4 	.word	0x200023e4
 8010364:	200023c4 	.word	0x200023c4
 8010368:	200022c0 	.word	0x200022c0
 801036c:	2000237c 	.word	0x2000237c
 8010370:	200022bc 	.word	0x200022bc
 8010374:	200023d0 	.word	0x200023d0

08010378 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010382:	4b29      	ldr	r3, [pc, #164]	; (8010428 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010388:	4b28      	ldr	r3, [pc, #160]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3304      	adds	r3, #4
 801038e:	4618      	mov	r0, r3
 8010390:	f7ff f8aa 	bl	800f4e8 <uxListRemove>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10b      	bne.n	80103b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801039a:	4b24      	ldr	r3, [pc, #144]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a0:	2201      	movs	r2, #1
 80103a2:	fa02 f303 	lsl.w	r3, r2, r3
 80103a6:	43da      	mvns	r2, r3
 80103a8:	4b21      	ldr	r3, [pc, #132]	; (8010430 <prvAddCurrentTaskToDelayedList+0xb8>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4013      	ands	r3, r2
 80103ae:	4a20      	ldr	r2, [pc, #128]	; (8010430 <prvAddCurrentTaskToDelayedList+0xb8>)
 80103b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103b8:	d10a      	bne.n	80103d0 <prvAddCurrentTaskToDelayedList+0x58>
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d007      	beq.n	80103d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103c0:	4b1a      	ldr	r3, [pc, #104]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4619      	mov	r1, r3
 80103c8:	481a      	ldr	r0, [pc, #104]	; (8010434 <prvAddCurrentTaskToDelayedList+0xbc>)
 80103ca:	f7ff f830 	bl	800f42e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80103ce:	e026      	b.n	801041e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4413      	add	r3, r2
 80103d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80103d8:	4b14      	ldr	r3, [pc, #80]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	68ba      	ldr	r2, [r7, #8]
 80103de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d209      	bcs.n	80103fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103e8:	4b13      	ldr	r3, [pc, #76]	; (8010438 <prvAddCurrentTaskToDelayedList+0xc0>)
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	4b0f      	ldr	r3, [pc, #60]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3304      	adds	r3, #4
 80103f2:	4619      	mov	r1, r3
 80103f4:	4610      	mov	r0, r2
 80103f6:	f7ff f83e 	bl	800f476 <vListInsert>
}
 80103fa:	e010      	b.n	801041e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103fc:	4b0f      	ldr	r3, [pc, #60]	; (801043c <prvAddCurrentTaskToDelayedList+0xc4>)
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	4b0a      	ldr	r3, [pc, #40]	; (801042c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	3304      	adds	r3, #4
 8010406:	4619      	mov	r1, r3
 8010408:	4610      	mov	r0, r2
 801040a:	f7ff f834 	bl	800f476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801040e:	4b0c      	ldr	r3, [pc, #48]	; (8010440 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	429a      	cmp	r2, r3
 8010416:	d202      	bcs.n	801041e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010418:	4a09      	ldr	r2, [pc, #36]	; (8010440 <prvAddCurrentTaskToDelayedList+0xc8>)
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	6013      	str	r3, [r2, #0]
}
 801041e:	bf00      	nop
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	200023c0 	.word	0x200023c0
 801042c:	200022bc 	.word	0x200022bc
 8010430:	200023c4 	.word	0x200023c4
 8010434:	200023a8 	.word	0x200023a8
 8010438:	20002378 	.word	0x20002378
 801043c:	20002374 	.word	0x20002374
 8010440:	200023dc 	.word	0x200023dc

08010444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	3b04      	subs	r3, #4
 8010454:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801045c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3b04      	subs	r3, #4
 8010462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	f023 0201 	bic.w	r2, r3, #1
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	3b04      	subs	r3, #4
 8010472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010474:	4a0c      	ldr	r2, [pc, #48]	; (80104a8 <pxPortInitialiseStack+0x64>)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	3b14      	subs	r3, #20
 801047e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	3b04      	subs	r3, #4
 801048a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f06f 0202 	mvn.w	r2, #2
 8010492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	3b20      	subs	r3, #32
 8010498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801049a:	68fb      	ldr	r3, [r7, #12]
}
 801049c:	4618      	mov	r0, r3
 801049e:	3714      	adds	r7, #20
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	080104ad 	.word	0x080104ad

080104ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80104b6:	4b12      	ldr	r3, [pc, #72]	; (8010500 <prvTaskExitError+0x54>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104be:	d00a      	beq.n	80104d6 <prvTaskExitError+0x2a>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	60fb      	str	r3, [r7, #12]
}
 80104d2:	bf00      	nop
 80104d4:	e7fe      	b.n	80104d4 <prvTaskExitError+0x28>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	60bb      	str	r3, [r7, #8]
}
 80104e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80104ea:	bf00      	nop
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d0fc      	beq.n	80104ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104f2:	bf00      	nop
 80104f4:	bf00      	nop
 80104f6:	3714      	adds	r7, #20
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr
 8010500:	2000009c 	.word	0x2000009c
	...

08010510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010510:	4b07      	ldr	r3, [pc, #28]	; (8010530 <pxCurrentTCBConst2>)
 8010512:	6819      	ldr	r1, [r3, #0]
 8010514:	6808      	ldr	r0, [r1, #0]
 8010516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051a:	f380 8809 	msr	PSP, r0
 801051e:	f3bf 8f6f 	isb	sy
 8010522:	f04f 0000 	mov.w	r0, #0
 8010526:	f380 8811 	msr	BASEPRI, r0
 801052a:	4770      	bx	lr
 801052c:	f3af 8000 	nop.w

08010530 <pxCurrentTCBConst2>:
 8010530:	200022bc 	.word	0x200022bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010534:	bf00      	nop
 8010536:	bf00      	nop

08010538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010538:	4808      	ldr	r0, [pc, #32]	; (801055c <prvPortStartFirstTask+0x24>)
 801053a:	6800      	ldr	r0, [r0, #0]
 801053c:	6800      	ldr	r0, [r0, #0]
 801053e:	f380 8808 	msr	MSP, r0
 8010542:	f04f 0000 	mov.w	r0, #0
 8010546:	f380 8814 	msr	CONTROL, r0
 801054a:	b662      	cpsie	i
 801054c:	b661      	cpsie	f
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	df00      	svc	0
 8010558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801055a:	bf00      	nop
 801055c:	e000ed08 	.word	0xe000ed08

08010560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b086      	sub	sp, #24
 8010564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010566:	4b46      	ldr	r3, [pc, #280]	; (8010680 <xPortStartScheduler+0x120>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a46      	ldr	r2, [pc, #280]	; (8010684 <xPortStartScheduler+0x124>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d10a      	bne.n	8010586 <xPortStartScheduler+0x26>
	__asm volatile
 8010570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	613b      	str	r3, [r7, #16]
}
 8010582:	bf00      	nop
 8010584:	e7fe      	b.n	8010584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010586:	4b3e      	ldr	r3, [pc, #248]	; (8010680 <xPortStartScheduler+0x120>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4a3f      	ldr	r2, [pc, #252]	; (8010688 <xPortStartScheduler+0x128>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d10a      	bne.n	80105a6 <xPortStartScheduler+0x46>
	__asm volatile
 8010590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010594:	f383 8811 	msr	BASEPRI, r3
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	60fb      	str	r3, [r7, #12]
}
 80105a2:	bf00      	nop
 80105a4:	e7fe      	b.n	80105a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105a6:	4b39      	ldr	r3, [pc, #228]	; (801068c <xPortStartScheduler+0x12c>)
 80105a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	22ff      	movs	r2, #255	; 0xff
 80105b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105c0:	78fb      	ldrb	r3, [r7, #3]
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80105c8:	b2da      	uxtb	r2, r3
 80105ca:	4b31      	ldr	r3, [pc, #196]	; (8010690 <xPortStartScheduler+0x130>)
 80105cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105ce:	4b31      	ldr	r3, [pc, #196]	; (8010694 <xPortStartScheduler+0x134>)
 80105d0:	2207      	movs	r2, #7
 80105d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105d4:	e009      	b.n	80105ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80105d6:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <xPortStartScheduler+0x134>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3b01      	subs	r3, #1
 80105dc:	4a2d      	ldr	r2, [pc, #180]	; (8010694 <xPortStartScheduler+0x134>)
 80105de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105ea:	78fb      	ldrb	r3, [r7, #3]
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105f2:	2b80      	cmp	r3, #128	; 0x80
 80105f4:	d0ef      	beq.n	80105d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80105f6:	4b27      	ldr	r3, [pc, #156]	; (8010694 <xPortStartScheduler+0x134>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f1c3 0307 	rsb	r3, r3, #7
 80105fe:	2b04      	cmp	r3, #4
 8010600:	d00a      	beq.n	8010618 <xPortStartScheduler+0xb8>
	__asm volatile
 8010602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010606:	f383 8811 	msr	BASEPRI, r3
 801060a:	f3bf 8f6f 	isb	sy
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	60bb      	str	r3, [r7, #8]
}
 8010614:	bf00      	nop
 8010616:	e7fe      	b.n	8010616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010618:	4b1e      	ldr	r3, [pc, #120]	; (8010694 <xPortStartScheduler+0x134>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	021b      	lsls	r3, r3, #8
 801061e:	4a1d      	ldr	r2, [pc, #116]	; (8010694 <xPortStartScheduler+0x134>)
 8010620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010622:	4b1c      	ldr	r3, [pc, #112]	; (8010694 <xPortStartScheduler+0x134>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801062a:	4a1a      	ldr	r2, [pc, #104]	; (8010694 <xPortStartScheduler+0x134>)
 801062c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	b2da      	uxtb	r2, r3
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010636:	4b18      	ldr	r3, [pc, #96]	; (8010698 <xPortStartScheduler+0x138>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a17      	ldr	r2, [pc, #92]	; (8010698 <xPortStartScheduler+0x138>)
 801063c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010642:	4b15      	ldr	r3, [pc, #84]	; (8010698 <xPortStartScheduler+0x138>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a14      	ldr	r2, [pc, #80]	; (8010698 <xPortStartScheduler+0x138>)
 8010648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801064c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801064e:	f000 f8dd 	bl	801080c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010652:	4b12      	ldr	r3, [pc, #72]	; (801069c <xPortStartScheduler+0x13c>)
 8010654:	2200      	movs	r2, #0
 8010656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010658:	f000 f8fc 	bl	8010854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801065c:	4b10      	ldr	r3, [pc, #64]	; (80106a0 <xPortStartScheduler+0x140>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a0f      	ldr	r2, [pc, #60]	; (80106a0 <xPortStartScheduler+0x140>)
 8010662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010668:	f7ff ff66 	bl	8010538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801066c:	f7ff fb3e 	bl	800fcec <vTaskSwitchContext>
	prvTaskExitError();
 8010670:	f7ff ff1c 	bl	80104ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	e000ed00 	.word	0xe000ed00
 8010684:	410fc271 	.word	0x410fc271
 8010688:	410fc270 	.word	0x410fc270
 801068c:	e000e400 	.word	0xe000e400
 8010690:	200023e8 	.word	0x200023e8
 8010694:	200023ec 	.word	0x200023ec
 8010698:	e000ed20 	.word	0xe000ed20
 801069c:	2000009c 	.word	0x2000009c
 80106a0:	e000ef34 	.word	0xe000ef34

080106a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
	__asm volatile
 80106aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ae:	f383 8811 	msr	BASEPRI, r3
 80106b2:	f3bf 8f6f 	isb	sy
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	607b      	str	r3, [r7, #4]
}
 80106bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106be:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <vPortEnterCritical+0x58>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3301      	adds	r3, #1
 80106c4:	4a0d      	ldr	r2, [pc, #52]	; (80106fc <vPortEnterCritical+0x58>)
 80106c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106c8:	4b0c      	ldr	r3, [pc, #48]	; (80106fc <vPortEnterCritical+0x58>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d10f      	bne.n	80106f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106d0:	4b0b      	ldr	r3, [pc, #44]	; (8010700 <vPortEnterCritical+0x5c>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00a      	beq.n	80106f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80106da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	603b      	str	r3, [r7, #0]
}
 80106ec:	bf00      	nop
 80106ee:	e7fe      	b.n	80106ee <vPortEnterCritical+0x4a>
	}
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	2000009c 	.word	0x2000009c
 8010700:	e000ed04 	.word	0xe000ed04

08010704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801070a:	4b12      	ldr	r3, [pc, #72]	; (8010754 <vPortExitCritical+0x50>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d10a      	bne.n	8010728 <vPortExitCritical+0x24>
	__asm volatile
 8010712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010716:	f383 8811 	msr	BASEPRI, r3
 801071a:	f3bf 8f6f 	isb	sy
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	607b      	str	r3, [r7, #4]
}
 8010724:	bf00      	nop
 8010726:	e7fe      	b.n	8010726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010728:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <vPortExitCritical+0x50>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	3b01      	subs	r3, #1
 801072e:	4a09      	ldr	r2, [pc, #36]	; (8010754 <vPortExitCritical+0x50>)
 8010730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010732:	4b08      	ldr	r3, [pc, #32]	; (8010754 <vPortExitCritical+0x50>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d105      	bne.n	8010746 <vPortExitCritical+0x42>
 801073a:	2300      	movs	r3, #0
 801073c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	f383 8811 	msr	BASEPRI, r3
}
 8010744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010746:	bf00      	nop
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	2000009c 	.word	0x2000009c
	...

08010760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010760:	f3ef 8009 	mrs	r0, PSP
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	4b15      	ldr	r3, [pc, #84]	; (80107c0 <pxCurrentTCBConst>)
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	f01e 0f10 	tst.w	lr, #16
 8010770:	bf08      	it	eq
 8010772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077a:	6010      	str	r0, [r2, #0]
 801077c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010784:	f380 8811 	msr	BASEPRI, r0
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f7ff faac 	bl	800fcec <vTaskSwitchContext>
 8010794:	f04f 0000 	mov.w	r0, #0
 8010798:	f380 8811 	msr	BASEPRI, r0
 801079c:	bc09      	pop	{r0, r3}
 801079e:	6819      	ldr	r1, [r3, #0]
 80107a0:	6808      	ldr	r0, [r1, #0]
 80107a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a6:	f01e 0f10 	tst.w	lr, #16
 80107aa:	bf08      	it	eq
 80107ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107b0:	f380 8809 	msr	PSP, r0
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	f3af 8000 	nop.w

080107c0 <pxCurrentTCBConst>:
 80107c0:	200022bc 	.word	0x200022bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107c4:	bf00      	nop
 80107c6:	bf00      	nop

080107c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	607b      	str	r3, [r7, #4]
}
 80107e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80107e2:	f7ff f9cb 	bl	800fb7c <xTaskIncrementTick>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d003      	beq.n	80107f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80107ec:	4b06      	ldr	r3, [pc, #24]	; (8010808 <SysTick_Handler+0x40>)
 80107ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	2300      	movs	r3, #0
 80107f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	f383 8811 	msr	BASEPRI, r3
}
 80107fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010800:	bf00      	nop
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	e000ed04 	.word	0xe000ed04

0801080c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801080c:	b480      	push	{r7}
 801080e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010810:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <vPortSetupTimerInterrupt+0x34>)
 8010812:	2200      	movs	r2, #0
 8010814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010816:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <vPortSetupTimerInterrupt+0x38>)
 8010818:	2200      	movs	r2, #0
 801081a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801081c:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <vPortSetupTimerInterrupt+0x3c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4a0a      	ldr	r2, [pc, #40]	; (801084c <vPortSetupTimerInterrupt+0x40>)
 8010822:	fba2 2303 	umull	r2, r3, r2, r3
 8010826:	099b      	lsrs	r3, r3, #6
 8010828:	4a09      	ldr	r2, [pc, #36]	; (8010850 <vPortSetupTimerInterrupt+0x44>)
 801082a:	3b01      	subs	r3, #1
 801082c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801082e:	4b04      	ldr	r3, [pc, #16]	; (8010840 <vPortSetupTimerInterrupt+0x34>)
 8010830:	2207      	movs	r2, #7
 8010832:	601a      	str	r2, [r3, #0]
}
 8010834:	bf00      	nop
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	e000e010 	.word	0xe000e010
 8010844:	e000e018 	.word	0xe000e018
 8010848:	20000004 	.word	0x20000004
 801084c:	10624dd3 	.word	0x10624dd3
 8010850:	e000e014 	.word	0xe000e014

08010854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010864 <vPortEnableVFP+0x10>
 8010858:	6801      	ldr	r1, [r0, #0]
 801085a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801085e:	6001      	str	r1, [r0, #0]
 8010860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010862:	bf00      	nop
 8010864:	e000ed88 	.word	0xe000ed88

08010868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801086e:	f3ef 8305 	mrs	r3, IPSR
 8010872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2b0f      	cmp	r3, #15
 8010878:	d914      	bls.n	80108a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801087a:	4a17      	ldr	r2, [pc, #92]	; (80108d8 <vPortValidateInterruptPriority+0x70>)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	4413      	add	r3, r2
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010884:	4b15      	ldr	r3, [pc, #84]	; (80108dc <vPortValidateInterruptPriority+0x74>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	7afa      	ldrb	r2, [r7, #11]
 801088a:	429a      	cmp	r2, r3
 801088c:	d20a      	bcs.n	80108a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	607b      	str	r3, [r7, #4]
}
 80108a0:	bf00      	nop
 80108a2:	e7fe      	b.n	80108a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108a4:	4b0e      	ldr	r3, [pc, #56]	; (80108e0 <vPortValidateInterruptPriority+0x78>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80108ac:	4b0d      	ldr	r3, [pc, #52]	; (80108e4 <vPortValidateInterruptPriority+0x7c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d90a      	bls.n	80108ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80108b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	603b      	str	r3, [r7, #0]
}
 80108c6:	bf00      	nop
 80108c8:	e7fe      	b.n	80108c8 <vPortValidateInterruptPriority+0x60>
	}
 80108ca:	bf00      	nop
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	e000e3f0 	.word	0xe000e3f0
 80108dc:	200023e8 	.word	0x200023e8
 80108e0:	e000ed0c 	.word	0xe000ed0c
 80108e4:	200023ec 	.word	0x200023ec

080108e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b08a      	sub	sp, #40	; 0x28
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108f0:	2300      	movs	r3, #0
 80108f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108f4:	f7ff f876 	bl	800f9e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108f8:	4b5d      	ldr	r3, [pc, #372]	; (8010a70 <pvPortMalloc+0x188>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010900:	f000 f924 	bl	8010b4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010904:	4b5b      	ldr	r3, [pc, #364]	; (8010a74 <pvPortMalloc+0x18c>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4013      	ands	r3, r2
 801090c:	2b00      	cmp	r3, #0
 801090e:	f040 8093 	bne.w	8010a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d01d      	beq.n	8010954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010918:	2208      	movs	r2, #8
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4413      	add	r3, r2
 801091e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f003 0307 	and.w	r3, r3, #7
 8010926:	2b00      	cmp	r3, #0
 8010928:	d014      	beq.n	8010954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f023 0307 	bic.w	r3, r3, #7
 8010930:	3308      	adds	r3, #8
 8010932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f003 0307 	and.w	r3, r3, #7
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00a      	beq.n	8010954 <pvPortMalloc+0x6c>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	617b      	str	r3, [r7, #20]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d06e      	beq.n	8010a38 <pvPortMalloc+0x150>
 801095a:	4b47      	ldr	r3, [pc, #284]	; (8010a78 <pvPortMalloc+0x190>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	429a      	cmp	r2, r3
 8010962:	d869      	bhi.n	8010a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010964:	4b45      	ldr	r3, [pc, #276]	; (8010a7c <pvPortMalloc+0x194>)
 8010966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010968:	4b44      	ldr	r3, [pc, #272]	; (8010a7c <pvPortMalloc+0x194>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801096e:	e004      	b.n	801097a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	429a      	cmp	r2, r3
 8010982:	d903      	bls.n	801098c <pvPortMalloc+0xa4>
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1f1      	bne.n	8010970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801098c:	4b38      	ldr	r3, [pc, #224]	; (8010a70 <pvPortMalloc+0x188>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010992:	429a      	cmp	r2, r3
 8010994:	d050      	beq.n	8010a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2208      	movs	r2, #8
 801099c:	4413      	add	r3, r2
 801099e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	685a      	ldr	r2, [r3, #4]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	2308      	movs	r3, #8
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d91f      	bls.n	80109f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4413      	add	r3, r2
 80109be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	f003 0307 	and.w	r3, r3, #7
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00a      	beq.n	80109e0 <pvPortMalloc+0xf8>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	613b      	str	r3, [r7, #16]
}
 80109dc:	bf00      	nop
 80109de:	e7fe      	b.n	80109de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	685a      	ldr	r2, [r3, #4]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	1ad2      	subs	r2, r2, r3
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109f2:	69b8      	ldr	r0, [r7, #24]
 80109f4:	f000 f90c 	bl	8010c10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109f8:	4b1f      	ldr	r3, [pc, #124]	; (8010a78 <pvPortMalloc+0x190>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	4a1d      	ldr	r2, [pc, #116]	; (8010a78 <pvPortMalloc+0x190>)
 8010a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a06:	4b1c      	ldr	r3, [pc, #112]	; (8010a78 <pvPortMalloc+0x190>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	4b1d      	ldr	r3, [pc, #116]	; (8010a80 <pvPortMalloc+0x198>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d203      	bcs.n	8010a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a12:	4b19      	ldr	r3, [pc, #100]	; (8010a78 <pvPortMalloc+0x190>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a1a      	ldr	r2, [pc, #104]	; (8010a80 <pvPortMalloc+0x198>)
 8010a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	4b15      	ldr	r3, [pc, #84]	; (8010a74 <pvPortMalloc+0x18c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	431a      	orrs	r2, r3
 8010a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a2e:	4b15      	ldr	r3, [pc, #84]	; (8010a84 <pvPortMalloc+0x19c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	3301      	adds	r3, #1
 8010a34:	4a13      	ldr	r2, [pc, #76]	; (8010a84 <pvPortMalloc+0x19c>)
 8010a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a38:	f7fe ffe2 	bl	800fa00 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010a42:	f7f3 feac 	bl	800479e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	f003 0307 	and.w	r3, r3, #7
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00a      	beq.n	8010a66 <pvPortMalloc+0x17e>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	60fb      	str	r3, [r7, #12]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <pvPortMalloc+0x17c>
	return pvReturn;
 8010a66:	69fb      	ldr	r3, [r7, #28]
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3728      	adds	r7, #40	; 0x28
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20005ff8 	.word	0x20005ff8
 8010a74:	2000600c 	.word	0x2000600c
 8010a78:	20005ffc 	.word	0x20005ffc
 8010a7c:	20005ff0 	.word	0x20005ff0
 8010a80:	20006000 	.word	0x20006000
 8010a84:	20006004 	.word	0x20006004

08010a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d04d      	beq.n	8010b36 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a9a:	2308      	movs	r3, #8
 8010a9c:	425b      	negs	r3, r3
 8010a9e:	697a      	ldr	r2, [r7, #20]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	4b24      	ldr	r3, [pc, #144]	; (8010b40 <vPortFree+0xb8>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d10a      	bne.n	8010acc <vPortFree+0x44>
	__asm volatile
 8010ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	60fb      	str	r3, [r7, #12]
}
 8010ac8:	bf00      	nop
 8010aca:	e7fe      	b.n	8010aca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00a      	beq.n	8010aea <vPortFree+0x62>
	__asm volatile
 8010ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	60bb      	str	r3, [r7, #8]
}
 8010ae6:	bf00      	nop
 8010ae8:	e7fe      	b.n	8010ae8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	4b14      	ldr	r3, [pc, #80]	; (8010b40 <vPortFree+0xb8>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4013      	ands	r3, r2
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d01e      	beq.n	8010b36 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d11a      	bne.n	8010b36 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	685a      	ldr	r2, [r3, #4]
 8010b04:	4b0e      	ldr	r3, [pc, #56]	; (8010b40 <vPortFree+0xb8>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	43db      	mvns	r3, r3
 8010b0a:	401a      	ands	r2, r3
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b10:	f7fe ff68 	bl	800f9e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	4b0a      	ldr	r3, [pc, #40]	; (8010b44 <vPortFree+0xbc>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	4a09      	ldr	r2, [pc, #36]	; (8010b44 <vPortFree+0xbc>)
 8010b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b22:	6938      	ldr	r0, [r7, #16]
 8010b24:	f000 f874 	bl	8010c10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b28:	4b07      	ldr	r3, [pc, #28]	; (8010b48 <vPortFree+0xc0>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	4a06      	ldr	r2, [pc, #24]	; (8010b48 <vPortFree+0xc0>)
 8010b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b32:	f7fe ff65 	bl	800fa00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b36:	bf00      	nop
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	2000600c 	.word	0x2000600c
 8010b44:	20005ffc 	.word	0x20005ffc
 8010b48:	20006008 	.word	0x20006008

08010b4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010b56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b58:	4b27      	ldr	r3, [pc, #156]	; (8010bf8 <prvHeapInit+0xac>)
 8010b5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f003 0307 	and.w	r3, r3, #7
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00c      	beq.n	8010b80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3307      	adds	r3, #7
 8010b6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f023 0307 	bic.w	r3, r3, #7
 8010b72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b74:	68ba      	ldr	r2, [r7, #8]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	4a1f      	ldr	r2, [pc, #124]	; (8010bf8 <prvHeapInit+0xac>)
 8010b7c:	4413      	add	r3, r2
 8010b7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b84:	4a1d      	ldr	r2, [pc, #116]	; (8010bfc <prvHeapInit+0xb0>)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b8a:	4b1c      	ldr	r3, [pc, #112]	; (8010bfc <prvHeapInit+0xb0>)
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	4413      	add	r3, r2
 8010b96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b98:	2208      	movs	r2, #8
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	1a9b      	subs	r3, r3, r2
 8010b9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f023 0307 	bic.w	r3, r3, #7
 8010ba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	4a15      	ldr	r2, [pc, #84]	; (8010c00 <prvHeapInit+0xb4>)
 8010bac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bae:	4b14      	ldr	r3, [pc, #80]	; (8010c00 <prvHeapInit+0xb4>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010bb6:	4b12      	ldr	r3, [pc, #72]	; (8010c00 <prvHeapInit+0xb4>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	1ad2      	subs	r2, r2, r3
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010bcc:	4b0c      	ldr	r3, [pc, #48]	; (8010c00 <prvHeapInit+0xb4>)
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	4a0a      	ldr	r2, [pc, #40]	; (8010c04 <prvHeapInit+0xb8>)
 8010bda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	4a09      	ldr	r2, [pc, #36]	; (8010c08 <prvHeapInit+0xbc>)
 8010be2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010be4:	4b09      	ldr	r3, [pc, #36]	; (8010c0c <prvHeapInit+0xc0>)
 8010be6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010bea:	601a      	str	r2, [r3, #0]
}
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr
 8010bf8:	200023f0 	.word	0x200023f0
 8010bfc:	20005ff0 	.word	0x20005ff0
 8010c00:	20005ff8 	.word	0x20005ff8
 8010c04:	20006000 	.word	0x20006000
 8010c08:	20005ffc 	.word	0x20005ffc
 8010c0c:	2000600c 	.word	0x2000600c

08010c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c18:	4b28      	ldr	r3, [pc, #160]	; (8010cbc <prvInsertBlockIntoFreeList+0xac>)
 8010c1a:	60fb      	str	r3, [r7, #12]
 8010c1c:	e002      	b.n	8010c24 <prvInsertBlockIntoFreeList+0x14>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d8f7      	bhi.n	8010c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	4413      	add	r3, r2
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d108      	bne.n	8010c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	685a      	ldr	r2, [r3, #4]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	441a      	add	r2, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	441a      	add	r2, r3
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d118      	bne.n	8010c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	4b15      	ldr	r3, [pc, #84]	; (8010cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d00d      	beq.n	8010c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685a      	ldr	r2, [r3, #4]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	441a      	add	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
 8010c8c:	e008      	b.n	8010ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c8e:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	e003      	b.n	8010ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d002      	beq.n	8010cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cae:	bf00      	nop
 8010cb0:	3714      	adds	r7, #20
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	20005ff0 	.word	0x20005ff0
 8010cc0:	20005ff8 	.word	0x20005ff8

08010cc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010cc8:	2200      	movs	r2, #0
 8010cca:	4912      	ldr	r1, [pc, #72]	; (8010d14 <MX_USB_DEVICE_Init+0x50>)
 8010ccc:	4812      	ldr	r0, [pc, #72]	; (8010d18 <MX_USB_DEVICE_Init+0x54>)
 8010cce:	f7fc ff6b 	bl	800dba8 <USBD_Init>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d001      	beq.n	8010cdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010cd8:	f7f3 ffee 	bl	8004cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010cdc:	490f      	ldr	r1, [pc, #60]	; (8010d1c <MX_USB_DEVICE_Init+0x58>)
 8010cde:	480e      	ldr	r0, [pc, #56]	; (8010d18 <MX_USB_DEVICE_Init+0x54>)
 8010ce0:	f7fc ff92 	bl	800dc08 <USBD_RegisterClass>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010cea:	f7f3 ffe5 	bl	8004cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010cee:	490c      	ldr	r1, [pc, #48]	; (8010d20 <MX_USB_DEVICE_Init+0x5c>)
 8010cf0:	4809      	ldr	r0, [pc, #36]	; (8010d18 <MX_USB_DEVICE_Init+0x54>)
 8010cf2:	f7fc fe89 	bl	800da08 <USBD_CDC_RegisterInterface>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010cfc:	f7f3 ffdc 	bl	8004cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010d00:	4805      	ldr	r0, [pc, #20]	; (8010d18 <MX_USB_DEVICE_Init+0x54>)
 8010d02:	f7fc ffb7 	bl	800dc74 <USBD_Start>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010d0c:	f7f3 ffd4 	bl	8004cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010d10:	bf00      	nop
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	200000b4 	.word	0x200000b4
 8010d18:	20006010 	.word	0x20006010
 8010d1c:	2000001c 	.word	0x2000001c
 8010d20:	200000a0 	.word	0x200000a0

08010d24 <CDC_Init_FS>:
#include "fifo.h"
fifo_s_t usb_tx_fifo;
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];

static int8_t CDC_Init_FS(void)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010d28:	2200      	movs	r2, #0
 8010d2a:	4908      	ldr	r1, [pc, #32]	; (8010d4c <CDC_Init_FS+0x28>)
 8010d2c:	4808      	ldr	r0, [pc, #32]	; (8010d50 <CDC_Init_FS+0x2c>)
 8010d2e:	f7fc fe85 	bl	800da3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010d32:	4908      	ldr	r1, [pc, #32]	; (8010d54 <CDC_Init_FS+0x30>)
 8010d34:	4806      	ldr	r0, [pc, #24]	; (8010d50 <CDC_Init_FS+0x2c>)
 8010d36:	f7fc fea3 	bl	800da80 <USBD_CDC_SetRxBuffer>
  fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 8010d3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d3e:	4906      	ldr	r1, [pc, #24]	; (8010d58 <CDC_Init_FS+0x34>)
 8010d40:	4806      	ldr	r0, [pc, #24]	; (8010d5c <CDC_Init_FS+0x38>)
 8010d42:	f002 fd0c 	bl	801375e <fifo_s_init>
  return (USBD_OK);
 8010d46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	20006b00 	.word	0x20006b00
 8010d50:	20006010 	.word	0x20006010
 8010d54:	20006300 	.word	0x20006300
 8010d58:	20007318 	.word	0x20007318
 8010d5c:	20007300 	.word	0x20007300

08010d60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010d60:	b480      	push	{r7}
 8010d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010d64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	6039      	str	r1, [r7, #0]
 8010d7a:	71fb      	strb	r3, [r7, #7]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010d80:	79fb      	ldrb	r3, [r7, #7]
 8010d82:	2b23      	cmp	r3, #35	; 0x23
 8010d84:	d84a      	bhi.n	8010e1c <CDC_Control_FS+0xac>
 8010d86:	a201      	add	r2, pc, #4	; (adr r2, 8010d8c <CDC_Control_FS+0x1c>)
 8010d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8c:	08010e1d 	.word	0x08010e1d
 8010d90:	08010e1d 	.word	0x08010e1d
 8010d94:	08010e1d 	.word	0x08010e1d
 8010d98:	08010e1d 	.word	0x08010e1d
 8010d9c:	08010e1d 	.word	0x08010e1d
 8010da0:	08010e1d 	.word	0x08010e1d
 8010da4:	08010e1d 	.word	0x08010e1d
 8010da8:	08010e1d 	.word	0x08010e1d
 8010dac:	08010e1d 	.word	0x08010e1d
 8010db0:	08010e1d 	.word	0x08010e1d
 8010db4:	08010e1d 	.word	0x08010e1d
 8010db8:	08010e1d 	.word	0x08010e1d
 8010dbc:	08010e1d 	.word	0x08010e1d
 8010dc0:	08010e1d 	.word	0x08010e1d
 8010dc4:	08010e1d 	.word	0x08010e1d
 8010dc8:	08010e1d 	.word	0x08010e1d
 8010dcc:	08010e1d 	.word	0x08010e1d
 8010dd0:	08010e1d 	.word	0x08010e1d
 8010dd4:	08010e1d 	.word	0x08010e1d
 8010dd8:	08010e1d 	.word	0x08010e1d
 8010ddc:	08010e1d 	.word	0x08010e1d
 8010de0:	08010e1d 	.word	0x08010e1d
 8010de4:	08010e1d 	.word	0x08010e1d
 8010de8:	08010e1d 	.word	0x08010e1d
 8010dec:	08010e1d 	.word	0x08010e1d
 8010df0:	08010e1d 	.word	0x08010e1d
 8010df4:	08010e1d 	.word	0x08010e1d
 8010df8:	08010e1d 	.word	0x08010e1d
 8010dfc:	08010e1d 	.word	0x08010e1d
 8010e00:	08010e1d 	.word	0x08010e1d
 8010e04:	08010e1d 	.word	0x08010e1d
 8010e08:	08010e1d 	.word	0x08010e1d
 8010e0c:	08010e1d 	.word	0x08010e1d
 8010e10:	08010e1d 	.word	0x08010e1d
 8010e14:	08010e1d 	.word	0x08010e1d
 8010e18:	08010e1d 	.word	0x08010e1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010e1c:	bf00      	nop
  }

  return (USBD_OK);
 8010e1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	370c      	adds	r7, #12
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr

08010e2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010e36:	6879      	ldr	r1, [r7, #4]
 8010e38:	4805      	ldr	r0, [pc, #20]	; (8010e50 <CDC_Receive_FS+0x24>)
 8010e3a:	f7fc fe21 	bl	800da80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010e3e:	4804      	ldr	r0, [pc, #16]	; (8010e50 <CDC_Receive_FS+0x24>)
 8010e40:	f7fc fe7c 	bl	800db3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010e44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	20006010 	.word	0x20006010

08010e54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	73fb      	strb	r3, [r7, #15]
  // if (hcdc->TxState != 0){
  //   return USBD_BUSY;
  // }
  // USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  // result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  fifo_s_puts(&usb_tx_fifo, (char*)Buf, Len);
 8010e64:	887b      	ldrh	r3, [r7, #2]
 8010e66:	461a      	mov	r2, r3
 8010e68:	6879      	ldr	r1, [r7, #4]
 8010e6a:	4804      	ldr	r0, [pc, #16]	; (8010e7c <CDC_Transmit_FS+0x28>)
 8010e6c:	f002 fc99 	bl	80137a2 <fifo_s_puts>
  return result;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20007300 	.word	0x20007300

08010e80 <usb_tx_flush>:

int32_t usb_tx_flush(void* argc)
{
 8010e80:	b590      	push	{r4, r7, lr}
 8010e82:	b089      	sub	sp, #36	; 0x24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
	uint8_t result = USBD_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	77fb      	strb	r3, [r7, #31]
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010e8c:	4b17      	ldr	r3, [pc, #92]	; (8010eec <usb_tx_flush+0x6c>)
 8010e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e92:	61bb      	str	r3, [r7, #24]
	
	if (hcdc->TxState != 0){
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d001      	beq.n	8010ea2 <usb_tx_flush+0x22>
    return USBD_BUSY;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e01f      	b.n	8010ee2 <usb_tx_flush+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ea6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
  }
	else
	{
		FIFO_CPU_SR_TYPE cpu_sr;
		uint32_t send_num;
    cpu_sr = FIFO_GET_CPU_SR();
 8010eaa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010eac:	b672      	cpsid	i
}
 8010eae:	bf00      	nop

    FIFO_ENTER_CRITICAL(); 
		send_num = usb_tx_fifo.used_num;
 8010eb0:	4b0f      	ldr	r3, [pc, #60]	; (8010ef0 <usb_tx_flush+0x70>)
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	617b      	str	r3, [r7, #20]
		fifo_s_gets_noprotect(&usb_tx_fifo, (char*)UserTxBufferFS, send_num);
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	490e      	ldr	r1, [pc, #56]	; (8010ef4 <usb_tx_flush+0x74>)
 8010ebc:	480c      	ldr	r0, [pc, #48]	; (8010ef0 <usb_tx_flush+0x70>)
 8010ebe:	f002 fe0a 	bl	8013ad6 <fifo_s_gets_noprotect>
 8010ec2:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	f383 8810 	msr	PRIMASK, r3
}
 8010eca:	bf00      	nop
		FIFO_RESTORE_CPU_SR(cpu_sr);

		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	4909      	ldr	r1, [pc, #36]	; (8010ef4 <usb_tx_flush+0x74>)
 8010ed0:	4806      	ldr	r0, [pc, #24]	; (8010eec <usb_tx_flush+0x6c>)
 8010ed2:	f7fc fdb3 	bl	800da3c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010ed6:	4805      	ldr	r0, [pc, #20]	; (8010eec <usb_tx_flush+0x6c>)
 8010ed8:	f7fc fdf0 	bl	800dabc <USBD_CDC_TransmitPacket>
 8010edc:	4603      	mov	r3, r0
 8010ede:	77fb      	strb	r3, [r7, #31]
		return result;
 8010ee0:	7ffb      	ldrb	r3, [r7, #31]
	}
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3724      	adds	r7, #36	; 0x24
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd90      	pop	{r4, r7, pc}
 8010eea:	bf00      	nop
 8010eec:	20006010 	.word	0x20006010
 8010ef0:	20007300 	.word	0x20007300
 8010ef4:	20006b00 	.word	0x20006b00

08010ef8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b087      	sub	sp, #28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4613      	mov	r3, r2
 8010f04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	371c      	adds	r7, #28
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
	...

08010f1c <usb_vcp_rx_callback_register>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
    
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 8010f24:	2300      	movs	r3, #0
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	e00f      	b.n	8010f4a <usb_vcp_rx_callback_register+0x2e>
  {
    if(usb_vcp_call_back[i] == NULL)
 8010f2a:	4a0d      	ldr	r2, [pc, #52]	; (8010f60 <usb_vcp_rx_callback_register+0x44>)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d106      	bne.n	8010f44 <usb_vcp_rx_callback_register+0x28>
    {
      usb_vcp_call_back[i] = fun;
 8010f36:	490a      	ldr	r1, [pc, #40]	; (8010f60 <usb_vcp_rx_callback_register+0x44>)
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	e006      	b.n	8010f52 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	3301      	adds	r3, #1
 8010f48:	60fb      	str	r3, [r7, #12]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2b04      	cmp	r3, #4
 8010f4e:	ddec      	ble.n	8010f2a <usb_vcp_rx_callback_register+0xe>
    }
  }
    
  return USBD_FAIL;
 8010f50:	2303      	movs	r3, #3
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop
 8010f60:	200062ec 	.word	0x200062ec

08010f64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	6039      	str	r1, [r7, #0]
 8010f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	2212      	movs	r2, #18
 8010f74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f76:	4b03      	ldr	r3, [pc, #12]	; (8010f84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr
 8010f84:	200000d0 	.word	0x200000d0

08010f88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	4603      	mov	r3, r0
 8010f90:	6039      	str	r1, [r7, #0]
 8010f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	2204      	movs	r2, #4
 8010f98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010f9a:	4b03      	ldr	r3, [pc, #12]	; (8010fa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	370c      	adds	r7, #12
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr
 8010fa8:	200000e4 	.word	0x200000e4

08010fac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	6039      	str	r1, [r7, #0]
 8010fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d105      	bne.n	8010fca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	4907      	ldr	r1, [pc, #28]	; (8010fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fc2:	4808      	ldr	r0, [pc, #32]	; (8010fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fc4:	f7fe f808 	bl	800efd8 <USBD_GetString>
 8010fc8:	e004      	b.n	8010fd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	4904      	ldr	r1, [pc, #16]	; (8010fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fce:	4805      	ldr	r0, [pc, #20]	; (8010fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fd0:	f7fe f802 	bl	800efd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fd4:	4b02      	ldr	r3, [pc, #8]	; (8010fe0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20007b18 	.word	0x20007b18
 8010fe4:	08015fd8 	.word	0x08015fd8

08010fe8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	4603      	mov	r3, r0
 8010ff0:	6039      	str	r1, [r7, #0]
 8010ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	4904      	ldr	r1, [pc, #16]	; (8011008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ff8:	4804      	ldr	r0, [pc, #16]	; (801100c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010ffa:	f7fd ffed 	bl	800efd8 <USBD_GetString>
  return USBD_StrDesc;
 8010ffe:	4b02      	ldr	r3, [pc, #8]	; (8011008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011000:	4618      	mov	r0, r3
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	20007b18 	.word	0x20007b18
 801100c:	08015ff0 	.word	0x08015ff0

08011010 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	4603      	mov	r3, r0
 8011018:	6039      	str	r1, [r7, #0]
 801101a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	221a      	movs	r2, #26
 8011020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011022:	f000 f843 	bl	80110ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011026:	4b02      	ldr	r3, [pc, #8]	; (8011030 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	200000e8 	.word	0x200000e8

08011034 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	4603      	mov	r3, r0
 801103c:	6039      	str	r1, [r7, #0]
 801103e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011040:	79fb      	ldrb	r3, [r7, #7]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d105      	bne.n	8011052 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	4907      	ldr	r1, [pc, #28]	; (8011068 <USBD_FS_ConfigStrDescriptor+0x34>)
 801104a:	4808      	ldr	r0, [pc, #32]	; (801106c <USBD_FS_ConfigStrDescriptor+0x38>)
 801104c:	f7fd ffc4 	bl	800efd8 <USBD_GetString>
 8011050:	e004      	b.n	801105c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	4904      	ldr	r1, [pc, #16]	; (8011068 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011056:	4805      	ldr	r0, [pc, #20]	; (801106c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011058:	f7fd ffbe 	bl	800efd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801105c:	4b02      	ldr	r3, [pc, #8]	; (8011068 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	20007b18 	.word	0x20007b18
 801106c:	08016004 	.word	0x08016004

08011070 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	6039      	str	r1, [r7, #0]
 801107a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801107c:	79fb      	ldrb	r3, [r7, #7]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d105      	bne.n	801108e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	4907      	ldr	r1, [pc, #28]	; (80110a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011086:	4808      	ldr	r0, [pc, #32]	; (80110a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011088:	f7fd ffa6 	bl	800efd8 <USBD_GetString>
 801108c:	e004      	b.n	8011098 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	4904      	ldr	r1, [pc, #16]	; (80110a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011092:	4805      	ldr	r0, [pc, #20]	; (80110a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011094:	f7fd ffa0 	bl	800efd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011098:	4b02      	ldr	r3, [pc, #8]	; (80110a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801109a:	4618      	mov	r0, r3
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	20007b18 	.word	0x20007b18
 80110a8:	08016010 	.word	0x08016010

080110ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110b2:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <Get_SerialNum+0x44>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110b8:	4b0e      	ldr	r3, [pc, #56]	; (80110f4 <Get_SerialNum+0x48>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110be:	4b0e      	ldr	r3, [pc, #56]	; (80110f8 <Get_SerialNum+0x4c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4413      	add	r3, r2
 80110ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d009      	beq.n	80110e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80110d2:	2208      	movs	r2, #8
 80110d4:	4909      	ldr	r1, [pc, #36]	; (80110fc <Get_SerialNum+0x50>)
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f000 f814 	bl	8011104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80110dc:	2204      	movs	r2, #4
 80110de:	4908      	ldr	r1, [pc, #32]	; (8011100 <Get_SerialNum+0x54>)
 80110e0:	68b8      	ldr	r0, [r7, #8]
 80110e2:	f000 f80f 	bl	8011104 <IntToUnicode>
  }
}
 80110e6:	bf00      	nop
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	1fff7a10 	.word	0x1fff7a10
 80110f4:	1fff7a14 	.word	0x1fff7a14
 80110f8:	1fff7a18 	.word	0x1fff7a18
 80110fc:	200000ea 	.word	0x200000ea
 8011100:	200000fa 	.word	0x200000fa

08011104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011104:	b480      	push	{r7}
 8011106:	b087      	sub	sp, #28
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4613      	mov	r3, r2
 8011110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011116:	2300      	movs	r3, #0
 8011118:	75fb      	strb	r3, [r7, #23]
 801111a:	e027      	b.n	801116c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	0f1b      	lsrs	r3, r3, #28
 8011120:	2b09      	cmp	r3, #9
 8011122:	d80b      	bhi.n	801113c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	0f1b      	lsrs	r3, r3, #28
 8011128:	b2da      	uxtb	r2, r3
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	4619      	mov	r1, r3
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	440b      	add	r3, r1
 8011134:	3230      	adds	r2, #48	; 0x30
 8011136:	b2d2      	uxtb	r2, r2
 8011138:	701a      	strb	r2, [r3, #0]
 801113a:	e00a      	b.n	8011152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	0f1b      	lsrs	r3, r3, #28
 8011140:	b2da      	uxtb	r2, r3
 8011142:	7dfb      	ldrb	r3, [r7, #23]
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4619      	mov	r1, r3
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	440b      	add	r3, r1
 801114c:	3237      	adds	r2, #55	; 0x37
 801114e:	b2d2      	uxtb	r2, r2
 8011150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	011b      	lsls	r3, r3, #4
 8011156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011158:	7dfb      	ldrb	r3, [r7, #23]
 801115a:	005b      	lsls	r3, r3, #1
 801115c:	3301      	adds	r3, #1
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	4413      	add	r3, r2
 8011162:	2200      	movs	r2, #0
 8011164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	3301      	adds	r3, #1
 801116a:	75fb      	strb	r3, [r7, #23]
 801116c:	7dfa      	ldrb	r2, [r7, #23]
 801116e:	79fb      	ldrb	r3, [r7, #7]
 8011170:	429a      	cmp	r2, r3
 8011172:	d3d3      	bcc.n	801111c <IntToUnicode+0x18>
  }
}
 8011174:	bf00      	nop
 8011176:	bf00      	nop
 8011178:	371c      	adds	r7, #28
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
	...

08011184 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b08a      	sub	sp, #40	; 0x28
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801118c:	f107 0314 	add.w	r3, r7, #20
 8011190:	2200      	movs	r2, #0
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	605a      	str	r2, [r3, #4]
 8011196:	609a      	str	r2, [r3, #8]
 8011198:	60da      	str	r2, [r3, #12]
 801119a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80111a4:	d13a      	bne.n	801121c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111a6:	2300      	movs	r3, #0
 80111a8:	613b      	str	r3, [r7, #16]
 80111aa:	4b1e      	ldr	r3, [pc, #120]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ae:	4a1d      	ldr	r2, [pc, #116]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111b0:	f043 0301 	orr.w	r3, r3, #1
 80111b4:	6313      	str	r3, [r2, #48]	; 0x30
 80111b6:	4b1b      	ldr	r3, [pc, #108]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	613b      	str	r3, [r7, #16]
 80111c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80111c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80111c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111c8:	2302      	movs	r3, #2
 80111ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111cc:	2300      	movs	r3, #0
 80111ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80111d0:	2303      	movs	r3, #3
 80111d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80111d4:	230a      	movs	r3, #10
 80111d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111d8:	f107 0314 	add.w	r3, r7, #20
 80111dc:	4619      	mov	r1, r3
 80111de:	4812      	ldr	r0, [pc, #72]	; (8011228 <HAL_PCD_MspInit+0xa4>)
 80111e0:	f7f5 fe96 	bl	8006f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80111e4:	4b0f      	ldr	r3, [pc, #60]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e8:	4a0e      	ldr	r2, [pc, #56]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111ee:	6353      	str	r3, [r2, #52]	; 0x34
 80111f0:	2300      	movs	r3, #0
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111f8:	4a0a      	ldr	r2, [pc, #40]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 80111fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80111fe:	6453      	str	r3, [r2, #68]	; 0x44
 8011200:	4b08      	ldr	r3, [pc, #32]	; (8011224 <HAL_PCD_MspInit+0xa0>)
 8011202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011208:	60fb      	str	r3, [r7, #12]
 801120a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801120c:	2200      	movs	r2, #0
 801120e:	2105      	movs	r1, #5
 8011210:	2043      	movs	r0, #67	; 0x43
 8011212:	f7f5 fa51 	bl	80066b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011216:	2043      	movs	r0, #67	; 0x43
 8011218:	f7f5 fa6a 	bl	80066f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801121c:	bf00      	nop
 801121e:	3728      	adds	r7, #40	; 0x28
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	40023800 	.word	0x40023800
 8011228:	40020000 	.word	0x40020000

0801122c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011240:	4619      	mov	r1, r3
 8011242:	4610      	mov	r0, r2
 8011244:	f7fc fd63 	bl	800dd0e <USBD_LL_SetupStage>
}
 8011248:	bf00      	nop
 801124a:	3708      	adds	r7, #8
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	460b      	mov	r3, r1
 801125a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011262:	78fa      	ldrb	r2, [r7, #3]
 8011264:	6879      	ldr	r1, [r7, #4]
 8011266:	4613      	mov	r3, r2
 8011268:	00db      	lsls	r3, r3, #3
 801126a:	4413      	add	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	440b      	add	r3, r1
 8011270:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	78fb      	ldrb	r3, [r7, #3]
 8011278:	4619      	mov	r1, r3
 801127a:	f7fc fd9d 	bl	800ddb8 <USBD_LL_DataOutStage>
}
 801127e:	bf00      	nop
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}

08011286 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011286:	b580      	push	{r7, lr}
 8011288:	b082      	sub	sp, #8
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
 801128e:	460b      	mov	r3, r1
 8011290:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011298:	78fa      	ldrb	r2, [r7, #3]
 801129a:	6879      	ldr	r1, [r7, #4]
 801129c:	4613      	mov	r3, r2
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	4413      	add	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	440b      	add	r3, r1
 80112a6:	3320      	adds	r3, #32
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	78fb      	ldrb	r3, [r7, #3]
 80112ac:	4619      	mov	r1, r3
 80112ae:	f7fc fe36 	bl	800df1e <USBD_LL_DataInStage>
}
 80112b2:	bf00      	nop
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b082      	sub	sp, #8
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7fc ff70 	bl	800e1ae <USBD_LL_SOF>
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b084      	sub	sp, #16
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80112de:	2301      	movs	r3, #1
 80112e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	79db      	ldrb	r3, [r3, #7]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d102      	bne.n	80112f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80112ea:	2300      	movs	r3, #0
 80112ec:	73fb      	strb	r3, [r7, #15]
 80112ee:	e008      	b.n	8011302 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	79db      	ldrb	r3, [r3, #7]
 80112f4:	2b02      	cmp	r3, #2
 80112f6:	d102      	bne.n	80112fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80112f8:	2301      	movs	r3, #1
 80112fa:	73fb      	strb	r3, [r7, #15]
 80112fc:	e001      	b.n	8011302 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80112fe:	f7f3 fcdb 	bl	8004cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011308:	7bfa      	ldrb	r2, [r7, #15]
 801130a:	4611      	mov	r1, r2
 801130c:	4618      	mov	r0, r3
 801130e:	f7fc ff0a 	bl	800e126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011318:	4618      	mov	r0, r3
 801131a:	f7fc feb2 	bl	800e082 <USBD_LL_Reset>
}
 801131e:	bf00      	nop
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
	...

08011328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011336:	4618      	mov	r0, r3
 8011338:	f7fc ff05 	bl	800e146 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	6812      	ldr	r2, [r2, #0]
 801134a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801134e:	f043 0301 	orr.w	r3, r3, #1
 8011352:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	7adb      	ldrb	r3, [r3, #11]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d005      	beq.n	8011368 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801135c:	4b04      	ldr	r3, [pc, #16]	; (8011370 <HAL_PCD_SuspendCallback+0x48>)
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	4a03      	ldr	r2, [pc, #12]	; (8011370 <HAL_PCD_SuspendCallback+0x48>)
 8011362:	f043 0306 	orr.w	r3, r3, #6
 8011366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011368:	bf00      	nop
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}
 8011370:	e000ed00 	.word	0xe000ed00

08011374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011382:	4618      	mov	r0, r3
 8011384:	f7fc fefb 	bl	800e17e <USBD_LL_Resume>
}
 8011388:	bf00      	nop
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	460b      	mov	r3, r1
 801139a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80113a2:	78fa      	ldrb	r2, [r7, #3]
 80113a4:	4611      	mov	r1, r2
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fc ff53 	bl	800e252 <USBD_LL_IsoOUTIncomplete>
}
 80113ac:	bf00      	nop
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80113c6:	78fa      	ldrb	r2, [r7, #3]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fc ff0f 	bl	800e1ee <USBD_LL_IsoINIncomplete>
}
 80113d0:	bf00      	nop
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fc ff65 	bl	800e2b6 <USBD_LL_DevConnected>
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011402:	4618      	mov	r0, r3
 8011404:	f7fc ff62 	bl	800e2cc <USBD_LL_DevDisconnected>
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d13c      	bne.n	801149a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011420:	4a20      	ldr	r2, [pc, #128]	; (80114a4 <USBD_LL_Init+0x94>)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	4a1e      	ldr	r2, [pc, #120]	; (80114a4 <USBD_LL_Init+0x94>)
 801142c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011430:	4b1c      	ldr	r3, [pc, #112]	; (80114a4 <USBD_LL_Init+0x94>)
 8011432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011438:	4b1a      	ldr	r3, [pc, #104]	; (80114a4 <USBD_LL_Init+0x94>)
 801143a:	2204      	movs	r2, #4
 801143c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801143e:	4b19      	ldr	r3, [pc, #100]	; (80114a4 <USBD_LL_Init+0x94>)
 8011440:	2202      	movs	r2, #2
 8011442:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011444:	4b17      	ldr	r3, [pc, #92]	; (80114a4 <USBD_LL_Init+0x94>)
 8011446:	2200      	movs	r2, #0
 8011448:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801144a:	4b16      	ldr	r3, [pc, #88]	; (80114a4 <USBD_LL_Init+0x94>)
 801144c:	2202      	movs	r2, #2
 801144e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011450:	4b14      	ldr	r3, [pc, #80]	; (80114a4 <USBD_LL_Init+0x94>)
 8011452:	2200      	movs	r2, #0
 8011454:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011456:	4b13      	ldr	r3, [pc, #76]	; (80114a4 <USBD_LL_Init+0x94>)
 8011458:	2200      	movs	r2, #0
 801145a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801145c:	4b11      	ldr	r3, [pc, #68]	; (80114a4 <USBD_LL_Init+0x94>)
 801145e:	2200      	movs	r2, #0
 8011460:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011462:	4b10      	ldr	r3, [pc, #64]	; (80114a4 <USBD_LL_Init+0x94>)
 8011464:	2200      	movs	r2, #0
 8011466:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011468:	4b0e      	ldr	r3, [pc, #56]	; (80114a4 <USBD_LL_Init+0x94>)
 801146a:	2200      	movs	r2, #0
 801146c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801146e:	480d      	ldr	r0, [pc, #52]	; (80114a4 <USBD_LL_Init+0x94>)
 8011470:	f7f5 ff45 	bl	80072fe <HAL_PCD_Init>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d001      	beq.n	801147e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801147a:	f7f3 fc1d 	bl	8004cb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801147e:	2180      	movs	r1, #128	; 0x80
 8011480:	4808      	ldr	r0, [pc, #32]	; (80114a4 <USBD_LL_Init+0x94>)
 8011482:	f7f7 f970 	bl	8008766 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011486:	2240      	movs	r2, #64	; 0x40
 8011488:	2100      	movs	r1, #0
 801148a:	4806      	ldr	r0, [pc, #24]	; (80114a4 <USBD_LL_Init+0x94>)
 801148c:	f7f7 f924 	bl	80086d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011490:	2280      	movs	r2, #128	; 0x80
 8011492:	2101      	movs	r1, #1
 8011494:	4803      	ldr	r0, [pc, #12]	; (80114a4 <USBD_LL_Init+0x94>)
 8011496:	f7f7 f91f 	bl	80086d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	20007d18 	.word	0x20007d18

080114a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f6 f82c 	bl	800751c <HAL_PCD_Start>
 80114c4:	4603      	mov	r3, r0
 80114c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114c8:	7bfb      	ldrb	r3, [r7, #15]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 f942 	bl	8011754 <USBD_Get_USB_Status>
 80114d0:	4603      	mov	r3, r0
 80114d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3710      	adds	r7, #16
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b084      	sub	sp, #16
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	4608      	mov	r0, r1
 80114e8:	4611      	mov	r1, r2
 80114ea:	461a      	mov	r2, r3
 80114ec:	4603      	mov	r3, r0
 80114ee:	70fb      	strb	r3, [r7, #3]
 80114f0:	460b      	mov	r3, r1
 80114f2:	70bb      	strb	r3, [r7, #2]
 80114f4:	4613      	mov	r3, r2
 80114f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114f8:	2300      	movs	r3, #0
 80114fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011506:	78bb      	ldrb	r3, [r7, #2]
 8011508:	883a      	ldrh	r2, [r7, #0]
 801150a:	78f9      	ldrb	r1, [r7, #3]
 801150c:	f7f6 fd00 	bl	8007f10 <HAL_PCD_EP_Open>
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011514:	7bfb      	ldrb	r3, [r7, #15]
 8011516:	4618      	mov	r0, r3
 8011518:	f000 f91c 	bl	8011754 <USBD_Get_USB_Status>
 801151c:	4603      	mov	r3, r0
 801151e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011520:	7bbb      	ldrb	r3, [r7, #14]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b084      	sub	sp, #16
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	460b      	mov	r3, r1
 8011534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011536:	2300      	movs	r3, #0
 8011538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011544:	78fa      	ldrb	r2, [r7, #3]
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f7f6 fd49 	bl	8007fe0 <HAL_PCD_EP_Close>
 801154e:	4603      	mov	r3, r0
 8011550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011552:	7bfb      	ldrb	r3, [r7, #15]
 8011554:	4618      	mov	r0, r3
 8011556:	f000 f8fd 	bl	8011754 <USBD_Get_USB_Status>
 801155a:	4603      	mov	r3, r0
 801155c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801155e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011560:	4618      	mov	r0, r3
 8011562:	3710      	adds	r7, #16
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	460b      	mov	r3, r1
 8011572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011582:	78fa      	ldrb	r2, [r7, #3]
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f7f6 fe01 	bl	800818e <HAL_PCD_EP_SetStall>
 801158c:	4603      	mov	r3, r0
 801158e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011590:	7bfb      	ldrb	r3, [r7, #15]
 8011592:	4618      	mov	r0, r3
 8011594:	f000 f8de 	bl	8011754 <USBD_Get_USB_Status>
 8011598:	4603      	mov	r3, r0
 801159a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801159c:	7bbb      	ldrb	r3, [r7, #14]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b084      	sub	sp, #16
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	460b      	mov	r3, r1
 80115b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115b2:	2300      	movs	r3, #0
 80115b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115b6:	2300      	movs	r3, #0
 80115b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115c0:	78fa      	ldrb	r2, [r7, #3]
 80115c2:	4611      	mov	r1, r2
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7f6 fe45 	bl	8008254 <HAL_PCD_EP_ClrStall>
 80115ca:	4603      	mov	r3, r0
 80115cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115ce:	7bfb      	ldrb	r3, [r7, #15]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f000 f8bf 	bl	8011754 <USBD_Get_USB_Status>
 80115d6:	4603      	mov	r3, r0
 80115d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115da:	7bbb      	ldrb	r3, [r7, #14]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	460b      	mov	r3, r1
 80115ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80115f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	da0b      	bge.n	8011618 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011600:	78fb      	ldrb	r3, [r7, #3]
 8011602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011606:	68f9      	ldr	r1, [r7, #12]
 8011608:	4613      	mov	r3, r2
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	4413      	add	r3, r2
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	440b      	add	r3, r1
 8011612:	3316      	adds	r3, #22
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	e00b      	b.n	8011630 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011618:	78fb      	ldrb	r3, [r7, #3]
 801161a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801161e:	68f9      	ldr	r1, [r7, #12]
 8011620:	4613      	mov	r3, r2
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	4413      	add	r3, r2
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	440b      	add	r3, r1
 801162a:	f203 2356 	addw	r3, r3, #598	; 0x256
 801162e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011630:	4618      	mov	r0, r3
 8011632:	3714      	adds	r7, #20
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	460b      	mov	r3, r1
 8011646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011648:	2300      	movs	r3, #0
 801164a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801164c:	2300      	movs	r3, #0
 801164e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011656:	78fa      	ldrb	r2, [r7, #3]
 8011658:	4611      	mov	r1, r2
 801165a:	4618      	mov	r0, r3
 801165c:	f7f6 fc34 	bl	8007ec8 <HAL_PCD_SetAddress>
 8011660:	4603      	mov	r3, r0
 8011662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011664:	7bfb      	ldrb	r3, [r7, #15]
 8011666:	4618      	mov	r0, r3
 8011668:	f000 f874 	bl	8011754 <USBD_Get_USB_Status>
 801166c:	4603      	mov	r3, r0
 801166e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011670:	7bbb      	ldrb	r3, [r7, #14]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b086      	sub	sp, #24
 801167e:	af00      	add	r7, sp, #0
 8011680:	60f8      	str	r0, [r7, #12]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	603b      	str	r3, [r7, #0]
 8011686:	460b      	mov	r3, r1
 8011688:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801168e:	2300      	movs	r3, #0
 8011690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011698:	7af9      	ldrb	r1, [r7, #11]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	f7f6 fd3c 	bl	800811a <HAL_PCD_EP_Transmit>
 80116a2:	4603      	mov	r3, r0
 80116a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116a6:	7dfb      	ldrb	r3, [r7, #23]
 80116a8:	4618      	mov	r0, r3
 80116aa:	f000 f853 	bl	8011754 <USBD_Get_USB_Status>
 80116ae:	4603      	mov	r3, r0
 80116b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3718      	adds	r7, #24
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b086      	sub	sp, #24
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	607a      	str	r2, [r7, #4]
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	460b      	mov	r3, r1
 80116ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116cc:	2300      	movs	r3, #0
 80116ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116d0:	2300      	movs	r3, #0
 80116d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80116da:	7af9      	ldrb	r1, [r7, #11]
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	f7f6 fcc8 	bl	8008074 <HAL_PCD_EP_Receive>
 80116e4:	4603      	mov	r3, r0
 80116e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e8:	7dfb      	ldrb	r3, [r7, #23]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f000 f832 	bl	8011754 <USBD_Get_USB_Status>
 80116f0:	4603      	mov	r3, r0
 80116f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b082      	sub	sp, #8
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	460b      	mov	r3, r1
 8011708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011710:	78fa      	ldrb	r2, [r7, #3]
 8011712:	4611      	mov	r1, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f7f6 fce8 	bl	80080ea <HAL_PCD_EP_GetRxCount>
 801171a:	4603      	mov	r3, r0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801172c:	4b03      	ldr	r3, [pc, #12]	; (801173c <USBD_static_malloc+0x18>)
}
 801172e:	4618      	mov	r0, r3
 8011730:	370c      	adds	r7, #12
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop
 801173c:	200081fc 	.word	0x200081fc

08011740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]

}
 8011748:	bf00      	nop
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011762:	79fb      	ldrb	r3, [r7, #7]
 8011764:	2b03      	cmp	r3, #3
 8011766:	d817      	bhi.n	8011798 <USBD_Get_USB_Status+0x44>
 8011768:	a201      	add	r2, pc, #4	; (adr r2, 8011770 <USBD_Get_USB_Status+0x1c>)
 801176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176e:	bf00      	nop
 8011770:	08011781 	.word	0x08011781
 8011774:	08011787 	.word	0x08011787
 8011778:	0801178d 	.word	0x0801178d
 801177c:	08011793 	.word	0x08011793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011780:	2300      	movs	r3, #0
 8011782:	73fb      	strb	r3, [r7, #15]
    break;
 8011784:	e00b      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011786:	2303      	movs	r3, #3
 8011788:	73fb      	strb	r3, [r7, #15]
    break;
 801178a:	e008      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801178c:	2301      	movs	r3, #1
 801178e:	73fb      	strb	r3, [r7, #15]
    break;
 8011790:	e005      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011792:	2303      	movs	r3, #3
 8011794:	73fb      	strb	r3, [r7, #15]
    break;
 8011796:	e002      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011798:	2303      	movs	r3, #3
 801179a:	73fb      	strb	r3, [r7, #15]
    break;
 801179c:	bf00      	nop
  }
  return usb_status;
 801179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b08a      	sub	sp, #40	; 0x28
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80117c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80117c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80117d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80117dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117e0:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8011afc <mecanum_calculate+0x350>
 80117e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80117e8:	4bc5      	ldr	r3, [pc, #788]	; (8011b00 <mecanum_calculate+0x354>)
 80117ea:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80117fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011802:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	edd3 7a03 	vldr	s15, [r3, #12]
 801180c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	edd3 7a04 	vldr	s15, [r3, #16]
 8011816:	ee37 7a67 	vsub.f32	s14, s14, s15
 801181a:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8011afc <mecanum_calculate+0x350>
 801181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011822:	4bb8      	ldr	r3, [pc, #736]	; (8011b04 <mecanum_calculate+0x358>)
 8011824:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	ed93 7a02 	vldr	s14, [r3, #8]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	edd3 7a01 	vldr	s15, [r3, #4]
 8011834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011838:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801183c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	edd3 7a03 	vldr	s15, [r3, #12]
 8011846:	ee37 7a27 	vadd.f32	s14, s14, s15
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	edd3 7a04 	vldr	s15, [r3, #16]
 8011850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011854:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8011afc <mecanum_calculate+0x350>
 8011858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801185c:	4baa      	ldr	r3, [pc, #680]	; (8011b08 <mecanum_calculate+0x35c>)
 801185e:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	ed93 7a02 	vldr	s14, [r3, #8]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	edd3 7a01 	vldr	s15, [r3, #4]
 801186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011872:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011876:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	edd3 7a04 	vldr	s15, [r3, #16]
 801188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801188e:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8011afc <mecanum_calculate+0x350>
 8011892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011896:	4b9d      	ldr	r3, [pc, #628]	; (8011b0c <mecanum_calculate+0x360>)
 8011898:	edc3 7a00 	vstr	s15, [r3]

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	edd3 7a00 	vldr	s15, [r3]
 80118a2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8011b10 <mecanum_calculate+0x364>
 80118a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118aa:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8011b14 <mecanum_calculate+0x368>
 80118ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118b2:	4b99      	ldr	r3, [pc, #612]	; (8011b18 <mecanum_calculate+0x36c>)
 80118b4:	edc3 7a00 	vstr	s15, [r3]

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80118be:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8011b1c <mecanum_calculate+0x370>
 80118c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ca:	d803      	bhi.n	80118d4 <mecanum_calculate+0x128>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a94      	ldr	r2, [pc, #592]	; (8011b20 <mecanum_calculate+0x374>)
 80118d0:	615a      	str	r2, [r3, #20]
 80118d2:	e00c      	b.n	80118ee <mecanum_calculate+0x142>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80118da:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8011b24 <mecanum_calculate+0x378>
 80118de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e6:	db02      	blt.n	80118ee <mecanum_calculate+0x142>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a8f      	ldr	r2, [pc, #572]	; (8011b28 <mecanum_calculate+0x37c>)
 80118ec:	615a      	str	r2, [r3, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80118f4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8011b1c <mecanum_calculate+0x370>
 80118f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	d803      	bhi.n	801190a <mecanum_calculate+0x15e>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4a86      	ldr	r2, [pc, #536]	; (8011b20 <mecanum_calculate+0x374>)
 8011906:	619a      	str	r2, [r3, #24]
 8011908:	e00c      	b.n	8011924 <mecanum_calculate+0x178>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	edd3 7a06 	vldr	s15, [r3, #24]
 8011910:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8011b24 <mecanum_calculate+0x378>
 8011914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	db02      	blt.n	8011924 <mecanum_calculate+0x178>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4a81      	ldr	r2, [pc, #516]	; (8011b28 <mecanum_calculate+0x37c>)
 8011922:	619a      	str	r2, [r3, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	edd3 7a07 	vldr	s15, [r3, #28]
 801192a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8011b2c <mecanum_calculate+0x380>
 801192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	d803      	bhi.n	8011940 <mecanum_calculate+0x194>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4a7d      	ldr	r2, [pc, #500]	; (8011b30 <mecanum_calculate+0x384>)
 801193c:	61da      	str	r2, [r3, #28]
 801193e:	e00c      	b.n	801195a <mecanum_calculate+0x1ae>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	edd3 7a07 	vldr	s15, [r3, #28]
 8011946:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8011b34 <mecanum_calculate+0x388>
 801194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011952:	db02      	blt.n	801195a <mecanum_calculate+0x1ae>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	4a78      	ldr	r2, [pc, #480]	; (8011b38 <mecanum_calculate+0x38c>)
 8011958:	61da      	str	r2, [r3, #28]

  float wheel_rpm[4];
  float max = 0;
 801195a:	f04f 0300 	mov.w	r3, #0
 801195e:	627b      	str	r3, [r7, #36]	; 0x24

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	edd3 7a05 	vldr	s15, [r3, #20]
 8011966:	eeb1 7a67 	vneg.f32	s14, s15
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	edd3 7a06 	vldr	s15, [r3, #24]
 8011970:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	edd3 6a07 	vldr	s13, [r3, #28]
 801197a:	4b61      	ldr	r3, [pc, #388]	; (8011b00 <mecanum_calculate+0x354>)
 801197c:	edd3 7a00 	vldr	s15, [r3]
 8011980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011988:	4b63      	ldr	r3, [pc, #396]	; (8011b18 <mecanum_calculate+0x36c>)
 801198a:	edd3 7a00 	vldr	s15, [r3]
 801198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011992:	edc7 7a03 	vstr	s15, [r7, #12]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	ed93 7a05 	vldr	s14, [r3, #20]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	edd3 7a06 	vldr	s15, [r3, #24]
 80119a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80119ac:	4b55      	ldr	r3, [pc, #340]	; (8011b04 <mecanum_calculate+0x358>)
 80119ae:	edd3 7a00 	vldr	s15, [r3]
 80119b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119ba:	4b57      	ldr	r3, [pc, #348]	; (8011b18 <mecanum_calculate+0x36c>)
 80119bc:	edd3 7a00 	vldr	s15, [r3]
 80119c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119c4:	edc7 7a04 	vstr	s15, [r7, #16]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80119d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	edd3 6a07 	vldr	s13, [r3, #28]
 80119de:	4b4a      	ldr	r3, [pc, #296]	; (8011b08 <mecanum_calculate+0x35c>)
 80119e0:	edd3 7a00 	vldr	s15, [r3]
 80119e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119ec:	4b4a      	ldr	r3, [pc, #296]	; (8011b18 <mecanum_calculate+0x36c>)
 80119ee:	edd3 7a00 	vldr	s15, [r3]
 80119f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119f6:	edc7 7a05 	vstr	s15, [r7, #20]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	edd3 7a05 	vldr	s15, [r3, #20]
 8011a06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	edd3 6a07 	vldr	s13, [r3, #28]
 8011a10:	4b3e      	ldr	r3, [pc, #248]	; (8011b0c <mecanum_calculate+0x360>)
 8011a12:	edd3 7a00 	vldr	s15, [r3]
 8011a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a1e:	4b3e      	ldr	r3, [pc, #248]	; (8011b18 <mecanum_calculate+0x36c>)
 8011a20:	edd3 7a00 	vldr	s15, [r3]
 8011a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a28:	edc7 7a06 	vstr	s15, [r7, #24]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011a32:	e021      	b.n	8011a78 <mecanum_calculate+0x2cc>
  {
    if (fabs(wheel_rpm[i]) > max)
 8011a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	3328      	adds	r3, #40	; 0x28
 8011a3c:	443b      	add	r3, r7
 8011a3e:	3b1c      	subs	r3, #28
 8011a40:	edd3 7a00 	vldr	s15, [r3]
 8011a44:	eef0 7ae7 	vabs.f32	s15, s15
 8011a48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a54:	d50b      	bpl.n	8011a6e <mecanum_calculate+0x2c2>
      max = fabs(wheel_rpm[i]);
 8011a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	3328      	adds	r3, #40	; 0x28
 8011a5e:	443b      	add	r3, r7
 8011a60:	3b1c      	subs	r3, #28
 8011a62:	edd3 7a00 	vldr	s15, [r3]
 8011a66:	eef0 7ae7 	vabs.f32	s15, s15
 8011a6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++)
 8011a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a72:	3301      	adds	r3, #1
 8011a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a7c:	2b03      	cmp	r3, #3
 8011a7e:	d9d9      	bls.n	8011a34 <mecanum_calculate+0x288>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8011a80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011a84:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8011b3c <mecanum_calculate+0x390>
 8011a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a90:	dd28      	ble.n	8011ae4 <mecanum_calculate+0x338>
  {
    float rate = MAX_WHEEL_RPM / max;
 8011a92:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8011b3c <mecanum_calculate+0x390>
 8011a96:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a9e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011aa8:	e018      	b.n	8011adc <mecanum_calculate+0x330>
      wheel_rpm[i] *= rate;
 8011aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011aae:	009b      	lsls	r3, r3, #2
 8011ab0:	3328      	adds	r3, #40	; 0x28
 8011ab2:	443b      	add	r3, r7
 8011ab4:	3b1c      	subs	r3, #28
 8011ab6:	ed93 7a00 	vldr	s14, [r3]
 8011aba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011abe:	edd7 7a07 	vldr	s15, [r7, #28]
 8011ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	3328      	adds	r3, #40	; 0x28
 8011aca:	443b      	add	r3, r7
 8011acc:	3b1c      	subs	r3, #28
 8011ace:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 8011ad2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ae0:	2b03      	cmp	r3, #3
 8011ae2:	d9e2      	bls.n	8011aaa <mecanum_calculate+0x2fe>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	3340      	adds	r3, #64	; 0x40
 8011ae8:	f107 010c 	add.w	r1, r7, #12
 8011aec:	2210      	movs	r2, #16
 8011aee:	4618      	mov	r0, r3
 8011af0:	f002 ff6e 	bl	80149d0 <memcpy>
}
 8011af4:	bf00      	nop
 8011af6:	3728      	adds	r7, #40	; 0x28
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	42653333 	.word	0x42653333
 8011b00:	2000841c 	.word	0x2000841c
 8011b04:	20008420 	.word	0x20008420
 8011b08:	20008424 	.word	0x20008424
 8011b0c:	20008428 	.word	0x20008428
 8011b10:	3d579436 	.word	0x3d579436
 8011b14:	42700000 	.word	0x42700000
 8011b18:	2000842c 	.word	0x2000842c
 8011b1c:	c54e4000 	.word	0xc54e4000
 8011b20:	c54e4000 	.word	0xc54e4000
 8011b24:	454e4000 	.word	0x454e4000
 8011b28:	454e4000 	.word	0x454e4000
 8011b2c:	c3960000 	.word	0xc3960000
 8011b30:	c3960000 	.word	0xc3960000
 8011b34:	43960000 	.word	0x43960000
 8011b38:	43960000 	.word	0x43960000
 8011b3c:	4604d000 	.word	0x4604d000

08011b40 <mecanum_position_measure>:

void mecanum_position_measure(struct mecanum *mec, struct mecanum_motor_fdb wheel_fdb[])
{
 8011b40:	b5b0      	push	{r4, r5, r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
  static double mecanum_angle;
  static double last_d_x, last_d_y, last_d_w, d_x, d_y, d_w, diff_d_x, diff_d_y, diff_d_w;
  static double position_x, position_y, angle_w;
  static double v_x, v_y, v_w;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	edd3 7a01 	vldr	s15, [r3, #4]
 8011b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011b68:	ee37 7a67 	vsub.f32	s14, s14, s15
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8011b72:	ee77 7a27 	vadd.f32	s15, s14, s15
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011b76:	4bc2      	ldr	r3, [pc, #776]	; (8011e80 <mecanum_position_measure+0x340>)
 8011b78:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	edd3 7a01 	vldr	s15, [r3, #4]
 8011b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	edd3 7a04 	vldr	s15, [r3, #16]
 8011ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 8011ba8:	4bb6      	ldr	r3, [pc, #728]	; (8011e84 <mecanum_position_measure+0x344>)
 8011baa:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8011bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011bc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8011bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011bda:	4bab      	ldr	r3, [pc, #684]	; (8011e88 <mecanum_position_measure+0x348>)
 8011bdc:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8011bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011bf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8011c08:	ee77 7a27 	vadd.f32	s15, s14, s15
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 8011c0c:	4b9f      	ldr	r3, [pc, #636]	; (8011e8c <mecanum_position_measure+0x34c>)
 8011c0e:	edc3 7a00 	vstr	s15, [r3]
  rpm_ratio = mec->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * 60.0f);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	edd3 7a00 	vldr	s15, [r3]
 8011c18:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8011e90 <mecanum_position_measure+0x350>
 8011c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011c20:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8011e94 <mecanum_position_measure+0x354>
 8011c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c28:	4b9b      	ldr	r3, [pc, #620]	; (8011e98 <mecanum_position_measure+0x358>)
 8011c2a:	edc3 7a00 	vstr	s15, [r3]
  ecd_ratio = mec->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * MOTOR_ENCODER_ACCURACY);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	edd3 7a00 	vldr	s15, [r3]
 8011c34:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8011e90 <mecanum_position_measure+0x350>
 8011c38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011c3c:	eddf 6a97 	vldr	s13, [pc, #604]	; 8011e9c <mecanum_position_measure+0x35c>
 8011c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c44:	4b96      	ldr	r3, [pc, #600]	; (8011ea0 <mecanum_position_measure+0x360>)
 8011c46:	edc3 7a00 	vstr	s15, [r3]

  last_d_x = d_x;
 8011c4a:	4b96      	ldr	r3, [pc, #600]	; (8011ea4 <mecanum_position_measure+0x364>)
 8011c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c50:	4995      	ldr	r1, [pc, #596]	; (8011ea8 <mecanum_position_measure+0x368>)
 8011c52:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_y = d_y;
 8011c56:	4b95      	ldr	r3, [pc, #596]	; (8011eac <mecanum_position_measure+0x36c>)
 8011c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5c:	4994      	ldr	r1, [pc, #592]	; (8011eb0 <mecanum_position_measure+0x370>)
 8011c5e:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_w = d_w;
 8011c62:	4b94      	ldr	r3, [pc, #592]	; (8011eb4 <mecanum_position_measure+0x374>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	4993      	ldr	r1, [pc, #588]	; (8011eb8 <mecanum_position_measure+0x378>)
 8011c6a:	e9c1 2300 	strd	r2, r3, [r1]
  d_x = ecd_ratio * (-wheel_fdb[0].total_ecd + wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd - wheel_fdb[3].total_ecd);
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	3308      	adds	r3, #8
 8011c72:	ed93 7a00 	vldr	s14, [r3]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	edd3 7a00 	vldr	s15, [r3]
 8011c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	3310      	adds	r3, #16
 8011c84:	edd3 7a00 	vldr	s15, [r3]
 8011c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	3318      	adds	r3, #24
 8011c90:	edd3 7a00 	vldr	s15, [r3]
 8011c94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c98:	4b81      	ldr	r3, [pc, #516]	; (8011ea0 <mecanum_position_measure+0x360>)
 8011c9a:	edd3 7a00 	vldr	s15, [r3]
 8011c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ca2:	ee17 0a90 	vmov	r0, s15
 8011ca6:	f7ee fc0f 	bl	80004c8 <__aeabi_f2d>
 8011caa:	4602      	mov	r2, r0
 8011cac:	460b      	mov	r3, r1
 8011cae:	497d      	ldr	r1, [pc, #500]	; (8011ea4 <mecanum_position_measure+0x364>)
 8011cb0:	e9c1 2300 	strd	r2, r3, [r1]
  d_y = ecd_ratio * (-wheel_fdb[0].total_ecd - wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd + wheel_fdb[3].total_ecd);
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	edd3 7a00 	vldr	s15, [r3]
 8011cba:	eeb1 7a67 	vneg.f32	s14, s15
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	3308      	adds	r3, #8
 8011cc2:	edd3 7a00 	vldr	s15, [r3]
 8011cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	3310      	adds	r3, #16
 8011cce:	edd3 7a00 	vldr	s15, [r3]
 8011cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	3318      	adds	r3, #24
 8011cda:	edd3 7a00 	vldr	s15, [r3]
 8011cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ce2:	4b6f      	ldr	r3, [pc, #444]	; (8011ea0 <mecanum_position_measure+0x360>)
 8011ce4:	edd3 7a00 	vldr	s15, [r3]
 8011ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cec:	ee17 0a90 	vmov	r0, s15
 8011cf0:	f7ee fbea 	bl	80004c8 <__aeabi_f2d>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	496c      	ldr	r1, [pc, #432]	; (8011eac <mecanum_position_measure+0x36c>)
 8011cfa:	e9c1 2300 	strd	r2, r3, [r1]
  d_w = ecd_ratio * (-wheel_fdb[0].total_ecd / rotate_ratio_fr - wheel_fdb[1].total_ecd / rotate_ratio_fl - wheel_fdb[2].total_ecd / rotate_ratio_bl - wheel_fdb[3].total_ecd / rotate_ratio_br);
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	edd3 7a00 	vldr	s15, [r3]
 8011d04:	eef1 6a67 	vneg.f32	s13, s15
 8011d08:	4b5d      	ldr	r3, [pc, #372]	; (8011e80 <mecanum_position_measure+0x340>)
 8011d0a:	edd3 7a00 	vldr	s15, [r3]
 8011d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	3308      	adds	r3, #8
 8011d16:	ed93 6a00 	vldr	s12, [r3]
 8011d1a:	4b5a      	ldr	r3, [pc, #360]	; (8011e84 <mecanum_position_measure+0x344>)
 8011d1c:	edd3 6a00 	vldr	s13, [r3]
 8011d20:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8011d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	3310      	adds	r3, #16
 8011d2c:	ed93 6a00 	vldr	s12, [r3]
 8011d30:	4b55      	ldr	r3, [pc, #340]	; (8011e88 <mecanum_position_measure+0x348>)
 8011d32:	edd3 6a00 	vldr	s13, [r3]
 8011d36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8011d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	3318      	adds	r3, #24
 8011d42:	ed93 6a00 	vldr	s12, [r3]
 8011d46:	4b51      	ldr	r3, [pc, #324]	; (8011e8c <mecanum_position_measure+0x34c>)
 8011d48:	edd3 6a00 	vldr	s13, [r3]
 8011d4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8011d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d54:	4b52      	ldr	r3, [pc, #328]	; (8011ea0 <mecanum_position_measure+0x360>)
 8011d56:	edd3 7a00 	vldr	s15, [r3]
 8011d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d5e:	ee17 0a90 	vmov	r0, s15
 8011d62:	f7ee fbb1 	bl	80004c8 <__aeabi_f2d>
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4952      	ldr	r1, [pc, #328]	; (8011eb4 <mecanum_position_measure+0x374>)
 8011d6c:	e9c1 2300 	strd	r2, r3, [r1]

  diff_d_x = d_x - last_d_x;
 8011d70:	4b4c      	ldr	r3, [pc, #304]	; (8011ea4 <mecanum_position_measure+0x364>)
 8011d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d76:	4b4c      	ldr	r3, [pc, #304]	; (8011ea8 <mecanum_position_measure+0x368>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee fa44 	bl	8000208 <__aeabi_dsub>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	494d      	ldr	r1, [pc, #308]	; (8011ebc <mecanum_position_measure+0x37c>)
 8011d86:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_y = d_y - last_d_y;
 8011d8a:	4b48      	ldr	r3, [pc, #288]	; (8011eac <mecanum_position_measure+0x36c>)
 8011d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d90:	4b47      	ldr	r3, [pc, #284]	; (8011eb0 <mecanum_position_measure+0x370>)
 8011d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d96:	f7ee fa37 	bl	8000208 <__aeabi_dsub>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	4948      	ldr	r1, [pc, #288]	; (8011ec0 <mecanum_position_measure+0x380>)
 8011da0:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_w = d_w - last_d_w;
 8011da4:	4b43      	ldr	r3, [pc, #268]	; (8011eb4 <mecanum_position_measure+0x374>)
 8011da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011daa:	4b43      	ldr	r3, [pc, #268]	; (8011eb8 <mecanum_position_measure+0x378>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	f7ee fa2a 	bl	8000208 <__aeabi_dsub>
 8011db4:	4602      	mov	r2, r0
 8011db6:	460b      	mov	r3, r1
 8011db8:	4942      	ldr	r1, [pc, #264]	; (8011ec4 <mecanum_position_measure+0x384>)
 8011dba:	e9c1 2300 	strd	r2, r3, [r1]

  /* use glb_chassis gyro angle data */
  mecanum_angle = mec->gyro.yaw_gyro_angle / RADIAN_COEF;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011dc4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8011ec8 <mecanum_position_measure+0x388>
 8011dc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011dcc:	ee16 0a90 	vmov	r0, s13
 8011dd0:	f7ee fb7a 	bl	80004c8 <__aeabi_f2d>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	493c      	ldr	r1, [pc, #240]	; (8011ecc <mecanum_position_measure+0x38c>)
 8011dda:	e9c1 2300 	strd	r2, r3, [r1]

  position_x += diff_d_x * cos(mecanum_angle) - diff_d_y * sin(mecanum_angle);
 8011dde:	4b3b      	ldr	r3, [pc, #236]	; (8011ecc <mecanum_position_measure+0x38c>)
 8011de0:	ed93 7b00 	vldr	d7, [r3]
 8011de4:	eeb0 0a47 	vmov.f32	s0, s14
 8011de8:	eef0 0a67 	vmov.f32	s1, s15
 8011dec:	f002 fe4c 	bl	8014a88 <cos>
 8011df0:	ec51 0b10 	vmov	r0, r1, d0
 8011df4:	4b31      	ldr	r3, [pc, #196]	; (8011ebc <mecanum_position_measure+0x37c>)
 8011df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfa:	f7ee fbbd 	bl	8000578 <__aeabi_dmul>
 8011dfe:	4602      	mov	r2, r0
 8011e00:	460b      	mov	r3, r1
 8011e02:	4614      	mov	r4, r2
 8011e04:	461d      	mov	r5, r3
 8011e06:	4b31      	ldr	r3, [pc, #196]	; (8011ecc <mecanum_position_measure+0x38c>)
 8011e08:	ed93 7b00 	vldr	d7, [r3]
 8011e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8011e10:	eef0 0a67 	vmov.f32	s1, s15
 8011e14:	f002 fe98 	bl	8014b48 <sin>
 8011e18:	ec51 0b10 	vmov	r0, r1, d0
 8011e1c:	4b28      	ldr	r3, [pc, #160]	; (8011ec0 <mecanum_position_measure+0x380>)
 8011e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e22:	f7ee fba9 	bl	8000578 <__aeabi_dmul>
 8011e26:	4602      	mov	r2, r0
 8011e28:	460b      	mov	r3, r1
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	f7ee f9eb 	bl	8000208 <__aeabi_dsub>
 8011e32:	4602      	mov	r2, r0
 8011e34:	460b      	mov	r3, r1
 8011e36:	4610      	mov	r0, r2
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4b25      	ldr	r3, [pc, #148]	; (8011ed0 <mecanum_position_measure+0x390>)
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	f7ee f9e4 	bl	800020c <__adddf3>
 8011e44:	4602      	mov	r2, r0
 8011e46:	460b      	mov	r3, r1
 8011e48:	4921      	ldr	r1, [pc, #132]	; (8011ed0 <mecanum_position_measure+0x390>)
 8011e4a:	e9c1 2300 	strd	r2, r3, [r1]
  position_y += diff_d_x * sin(mecanum_angle) + diff_d_y * cos(mecanum_angle);
 8011e4e:	4b1f      	ldr	r3, [pc, #124]	; (8011ecc <mecanum_position_measure+0x38c>)
 8011e50:	ed93 7b00 	vldr	d7, [r3]
 8011e54:	eeb0 0a47 	vmov.f32	s0, s14
 8011e58:	eef0 0a67 	vmov.f32	s1, s15
 8011e5c:	f002 fe74 	bl	8014b48 <sin>
 8011e60:	ec51 0b10 	vmov	r0, r1, d0
 8011e64:	4b15      	ldr	r3, [pc, #84]	; (8011ebc <mecanum_position_measure+0x37c>)
 8011e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6a:	f7ee fb85 	bl	8000578 <__aeabi_dmul>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	460b      	mov	r3, r1
 8011e72:	4614      	mov	r4, r2
 8011e74:	461d      	mov	r5, r3
 8011e76:	4b15      	ldr	r3, [pc, #84]	; (8011ecc <mecanum_position_measure+0x38c>)
 8011e78:	ed93 7b00 	vldr	d7, [r3]
 8011e7c:	e02a      	b.n	8011ed4 <mecanum_position_measure+0x394>
 8011e7e:	bf00      	nop
 8011e80:	20008430 	.word	0x20008430
 8011e84:	20008434 	.word	0x20008434
 8011e88:	20008438 	.word	0x20008438
 8011e8c:	2000843c 	.word	0x2000843c
 8011e90:	3d579436 	.word	0x3d579436
 8011e94:	43700000 	.word	0x43700000
 8011e98:	20008440 	.word	0x20008440
 8011e9c:	47000000 	.word	0x47000000
 8011ea0:	20008444 	.word	0x20008444
 8011ea4:	20008448 	.word	0x20008448
 8011ea8:	20008450 	.word	0x20008450
 8011eac:	20008458 	.word	0x20008458
 8011eb0:	20008460 	.word	0x20008460
 8011eb4:	20008468 	.word	0x20008468
 8011eb8:	20008470 	.word	0x20008470
 8011ebc:	20008478 	.word	0x20008478
 8011ec0:	20008480 	.word	0x20008480
 8011ec4:	20008488 	.word	0x20008488
 8011ec8:	42653333 	.word	0x42653333
 8011ecc:	20008490 	.word	0x20008490
 8011ed0:	20008498 	.word	0x20008498
 8011ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8011ed8:	eef0 0a67 	vmov.f32	s1, s15
 8011edc:	f002 fdd4 	bl	8014a88 <cos>
 8011ee0:	ec51 0b10 	vmov	r0, r1, d0
 8011ee4:	4b7c      	ldr	r3, [pc, #496]	; (80120d8 <mecanum_position_measure+0x598>)
 8011ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eea:	f7ee fb45 	bl	8000578 <__aeabi_dmul>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	f7ee f989 	bl	800020c <__adddf3>
 8011efa:	4602      	mov	r2, r0
 8011efc:	460b      	mov	r3, r1
 8011efe:	4610      	mov	r0, r2
 8011f00:	4619      	mov	r1, r3
 8011f02:	4b76      	ldr	r3, [pc, #472]	; (80120dc <mecanum_position_measure+0x59c>)
 8011f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f08:	f7ee f980 	bl	800020c <__adddf3>
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	460b      	mov	r3, r1
 8011f10:	4972      	ldr	r1, [pc, #456]	; (80120dc <mecanum_position_measure+0x59c>)
 8011f12:	e9c1 2300 	strd	r2, r3, [r1]

  angle_w += diff_d_w;
 8011f16:	4b72      	ldr	r3, [pc, #456]	; (80120e0 <mecanum_position_measure+0x5a0>)
 8011f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f1c:	4b71      	ldr	r3, [pc, #452]	; (80120e4 <mecanum_position_measure+0x5a4>)
 8011f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f22:	f7ee f973 	bl	800020c <__adddf3>
 8011f26:	4602      	mov	r2, r0
 8011f28:	460b      	mov	r3, r1
 8011f2a:	496d      	ldr	r1, [pc, #436]	; (80120e0 <mecanum_position_measure+0x5a0>)
 8011f2c:	e9c1 2300 	strd	r2, r3, [r1]

  mec->position.position_x_mm = position_x;        //mm
 8011f30:	4b6d      	ldr	r3, [pc, #436]	; (80120e8 <mecanum_position_measure+0x5a8>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	4610      	mov	r0, r2
 8011f38:	4619      	mov	r1, r3
 8011f3a:	f7ee fddf 	bl	8000afc <__aeabi_d2f>
 8011f3e:	4602      	mov	r2, r0
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	62da      	str	r2, [r3, #44]	; 0x2c
  mec->position.position_y_mm = position_y;        //mm
 8011f44:	4b65      	ldr	r3, [pc, #404]	; (80120dc <mecanum_position_measure+0x59c>)
 8011f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4a:	4610      	mov	r0, r2
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	f7ee fdd5 	bl	8000afc <__aeabi_d2f>
 8011f52:	4602      	mov	r2, r0
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	631a      	str	r2, [r3, #48]	; 0x30
  mec->position.angle_deg = angle_w * RADIAN_COEF; //degree
 8011f58:	4b61      	ldr	r3, [pc, #388]	; (80120e0 <mecanum_position_measure+0x5a0>)
 8011f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f5e:	a35c      	add	r3, pc, #368	; (adr r3, 80120d0 <mecanum_position_measure+0x590>)
 8011f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f64:	f7ee fb08 	bl	8000578 <__aeabi_dmul>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	4619      	mov	r1, r3
 8011f70:	f7ee fdc4 	bl	8000afc <__aeabi_d2f>
 8011f74:	4602      	mov	r2, r0
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	635a      	str	r2, [r3, #52]	; 0x34

  v_x = rpm_ratio * (-wheel_fdb[0].speed_rpm + wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm - wheel_fdb[3].speed_rpm);
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	3308      	adds	r3, #8
 8011f7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	3310      	adds	r3, #16
 8011f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	3318      	adds	r3, #24
 8011f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011fa4:	4b51      	ldr	r3, [pc, #324]	; (80120ec <mecanum_position_measure+0x5ac>)
 8011fa6:	edd3 7a00 	vldr	s15, [r3]
 8011faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fae:	ee17 0a90 	vmov	r0, s15
 8011fb2:	f7ee fa89 	bl	80004c8 <__aeabi_f2d>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	460b      	mov	r3, r1
 8011fba:	494d      	ldr	r1, [pc, #308]	; (80120f0 <mecanum_position_measure+0x5b0>)
 8011fbc:	e9c1 2300 	strd	r2, r3, [r1]
  v_y = rpm_ratio * (-wheel_fdb[0].speed_rpm - wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm + wheel_fdb[3].speed_rpm);
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fc6:	eeb1 7a67 	vneg.f32	s14, s15
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	3308      	adds	r3, #8
 8011fce:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	3310      	adds	r3, #16
 8011fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	3318      	adds	r3, #24
 8011fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fee:	4b3f      	ldr	r3, [pc, #252]	; (80120ec <mecanum_position_measure+0x5ac>)
 8011ff0:	edd3 7a00 	vldr	s15, [r3]
 8011ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ff8:	ee17 0a90 	vmov	r0, s15
 8011ffc:	f7ee fa64 	bl	80004c8 <__aeabi_f2d>
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	493b      	ldr	r1, [pc, #236]	; (80120f4 <mecanum_position_measure+0x5b4>)
 8012006:	e9c1 2300 	strd	r2, r3, [r1]
  v_w = rpm_ratio * (-wheel_fdb[0].speed_rpm / rotate_ratio_fr - wheel_fdb[1].speed_rpm / rotate_ratio_fl - wheel_fdb[2].speed_rpm / rotate_ratio_bl - wheel_fdb[3].speed_rpm / rotate_ratio_br);
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012010:	eef1 6a67 	vneg.f32	s13, s15
 8012014:	4b38      	ldr	r3, [pc, #224]	; (80120f8 <mecanum_position_measure+0x5b8>)
 8012016:	edd3 7a00 	vldr	s15, [r3]
 801201a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	3308      	adds	r3, #8
 8012022:	ed93 6a01 	vldr	s12, [r3, #4]
 8012026:	4b35      	ldr	r3, [pc, #212]	; (80120fc <mecanum_position_measure+0x5bc>)
 8012028:	edd3 6a00 	vldr	s13, [r3]
 801202c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	3310      	adds	r3, #16
 8012038:	ed93 6a01 	vldr	s12, [r3, #4]
 801203c:	4b30      	ldr	r3, [pc, #192]	; (8012100 <mecanum_position_measure+0x5c0>)
 801203e:	edd3 6a00 	vldr	s13, [r3]
 8012042:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012046:	ee37 7a67 	vsub.f32	s14, s14, s15
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	3318      	adds	r3, #24
 801204e:	ed93 6a01 	vldr	s12, [r3, #4]
 8012052:	4b2c      	ldr	r3, [pc, #176]	; (8012104 <mecanum_position_measure+0x5c4>)
 8012054:	edd3 6a00 	vldr	s13, [r3]
 8012058:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801205c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012060:	4b22      	ldr	r3, [pc, #136]	; (80120ec <mecanum_position_measure+0x5ac>)
 8012062:	edd3 7a00 	vldr	s15, [r3]
 8012066:	ee67 7a27 	vmul.f32	s15, s14, s15
 801206a:	ee17 0a90 	vmov	r0, s15
 801206e:	f7ee fa2b 	bl	80004c8 <__aeabi_f2d>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4924      	ldr	r1, [pc, #144]	; (8012108 <mecanum_position_measure+0x5c8>)
 8012078:	e9c1 2300 	strd	r2, r3, [r1]

  mec->position.v_x_mm = v_x;                 //mm/s
 801207c:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <mecanum_position_measure+0x5b0>)
 801207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012082:	4610      	mov	r0, r2
 8012084:	4619      	mov	r1, r3
 8012086:	f7ee fd39 	bl	8000afc <__aeabi_d2f>
 801208a:	4602      	mov	r2, r0
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	621a      	str	r2, [r3, #32]
  mec->position.v_y_mm = v_y;                 //mm/s
 8012090:	4b18      	ldr	r3, [pc, #96]	; (80120f4 <mecanum_position_measure+0x5b4>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	4610      	mov	r0, r2
 8012098:	4619      	mov	r1, r3
 801209a:	f7ee fd2f 	bl	8000afc <__aeabi_d2f>
 801209e:	4602      	mov	r2, r0
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	625a      	str	r2, [r3, #36]	; 0x24
  mec->position.rate_deg = v_w * RADIAN_COEF; //degree/s
 80120a4:	4b18      	ldr	r3, [pc, #96]	; (8012108 <mecanum_position_measure+0x5c8>)
 80120a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80120aa:	a309      	add	r3, pc, #36	; (adr r3, 80120d0 <mecanum_position_measure+0x590>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee fa62 	bl	8000578 <__aeabi_dmul>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	4610      	mov	r0, r2
 80120ba:	4619      	mov	r1, r3
 80120bc:	f7ee fd1e 	bl	8000afc <__aeabi_d2f>
 80120c0:	4602      	mov	r2, r0
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80120c6:	bf00      	nop
 80120c8:	3708      	adds	r7, #8
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bdb0      	pop	{r4, r5, r7, pc}
 80120ce:	bf00      	nop
 80120d0:	60000000 	.word	0x60000000
 80120d4:	404ca666 	.word	0x404ca666
 80120d8:	20008480 	.word	0x20008480
 80120dc:	200084a0 	.word	0x200084a0
 80120e0:	200084a8 	.word	0x200084a8
 80120e4:	20008488 	.word	0x20008488
 80120e8:	20008498 	.word	0x20008498
 80120ec:	20008440 	.word	0x20008440
 80120f0:	200084b0 	.word	0x200084b0
 80120f4:	200084b8 	.word	0x200084b8
 80120f8:	20008430 	.word	0x20008430
 80120fc:	20008434 	.word	0x20008434
 8012100:	20008438 	.word	0x20008438
 8012104:	2000843c 	.word	0x2000843c
 8012108:	200084c0 	.word	0x200084c0

0801210c <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	edd3 7a00 	vldr	s15, [r3]
 801211e:	ed97 7a00 	vldr	s14, [r7]
 8012122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212a:	d502      	bpl.n	8012132 <abs_limit+0x26>
    *a = ABS_MAX;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	ed93 7a00 	vldr	s14, [r3]
 8012138:	edd7 7a00 	vldr	s15, [r7]
 801213c:	eef1 7a67 	vneg.f32	s15, s15
 8012140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012148:	d400      	bmi.n	801214c <abs_limit+0x40>
    *a = -ABS_MAX;
}
 801214a:	e006      	b.n	801215a <abs_limit+0x4e>
    *a = -ABS_MAX;
 801214c:	edd7 7a00 	vldr	s15, [r7]
 8012150:	eef1 7a67 	vneg.f32	s15, s15
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	edc3 7a00 	vstr	s15, [r3]
}
 801215a:	bf00      	nop
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr

08012166 <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 8012166:	b480      	push	{r7}
 8012168:	b087      	sub	sp, #28
 801216a:	af00      	add	r7, sp, #0
 801216c:	6178      	str	r0, [r7, #20]
 801216e:	ed87 0a04 	vstr	s0, [r7, #16]
 8012172:	edc7 0a03 	vstr	s1, [r7, #12]
 8012176:	ed87 1a02 	vstr	s2, [r7, #8]
 801217a:	edc7 1a01 	vstr	s3, [r7, #4]
 801217e:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	68fa      	ldr	r2, [r7, #12]
 8012186:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	693a      	ldr	r2, [r7, #16]
 801218c:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	683a      	ldr	r2, [r7, #0]
 801219e:	609a      	str	r2, [r3, #8]
}
 80121a0:	bf00      	nop
 80121a2:	371c      	adds	r7, #28
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b085      	sub	sp, #20
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80121b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80121bc:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	683a      	ldr	r2, [r7, #0]
 80121d0:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f04f 0200 	mov.w	r2, #0
 80121d8:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f04f 0200 	mov.w	r2, #0
 80121e0:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f04f 0200 	mov.w	r2, #0
 80121e8:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f04f 0200 	mov.w	r2, #0
 80121f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80121f2:	bf00      	nop
 80121f4:	3714      	adds	r7, #20
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b084      	sub	sp, #16
 8012202:	af00      	add	r7, sp, #0
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	ed87 0a02 	vstr	s0, [r7, #8]
 801220a:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	68ba      	ldr	r2, [r7, #8]
 8012212:	61da      	str	r2, [r3, #28]
  pid->set = set;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 801221a:	ed97 7a01 	vldr	s14, [r7, #4]
 801221e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	edd3 7a03 	vldr	s15, [r3, #12]
 8012232:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223a:	d00f      	beq.n	801225c <pid_calculate+0x5e>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	edd3 7a08 	vldr	s15, [r3, #32]
 8012242:	eeb0 7ae7 	vabs.f32	s14, s15
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	edd3 7a03 	vldr	s15, [r3, #12]
 801224c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012254:	dd02      	ble.n	801225c <pid_calculate+0x5e>
    return 0;
 8012256:	f04f 0300 	mov.w	r3, #0
 801225a:	e052      	b.n	8012302 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	ed93 7a00 	vldr	s14, [r3]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	edd3 7a08 	vldr	s15, [r3, #32]
 8012268:	ee67 7a27 	vmul.f32	s15, s14, s15
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	edd3 6a01 	vldr	s13, [r3, #4]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	edd3 7a08 	vldr	s15, [r3, #32]
 8012284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012288:	ee77 7a27 	vadd.f32	s15, s14, s15
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	ed93 7a02 	vldr	s14, [r3, #8]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	edd3 6a08 	vldr	s13, [r3, #32]
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80122a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80122a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80122be:	eeb0 0a67 	vmov.f32	s0, s15
 80122c2:	4610      	mov	r0, r2
 80122c4:	f7ff ff22 	bl	801210c <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80122d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80122de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80122f4:	eeb0 0a67 	vmov.f32	s0, s15
 80122f8:	4610      	mov	r0, r2
 80122fa:	f7ff ff07 	bl	801210c <abs_limit>

  return pid->out;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012302:	ee07 3a90 	vmov	s15, r3
 8012306:	eeb0 0a67 	vmov.f32	s0, s15
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	6178      	str	r0, [r7, #20]
 8012318:	ed87 0a04 	vstr	s0, [r7, #16]
 801231c:	edc7 0a03 	vstr	s1, [r7, #12]
 8012320:	ed87 1a02 	vstr	s2, [r7, #8]
 8012324:	edc7 1a01 	vstr	s3, [r7, #4]
 8012328:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	4a10      	ldr	r2, [pc, #64]	; (8012370 <pid_struct_init+0x60>)
 8012330:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	4a0f      	ldr	r2, [pc, #60]	; (8012374 <pid_struct_init+0x64>)
 8012336:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801233c:	ed97 2a00 	vldr	s4, [r7]
 8012340:	edd7 1a01 	vldr	s3, [r7, #4]
 8012344:	ed97 1a02 	vldr	s2, [r7, #8]
 8012348:	edd7 0a03 	vldr	s1, [r7, #12]
 801234c:	ed97 0a04 	vldr	s0, [r7, #16]
 8012350:	6978      	ldr	r0, [r7, #20]
 8012352:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012358:	ed97 1a00 	vldr	s2, [r7]
 801235c:	edd7 0a01 	vldr	s1, [r7, #4]
 8012360:	ed97 0a02 	vldr	s0, [r7, #8]
 8012364:	6978      	ldr	r0, [r7, #20]
 8012366:	4798      	blx	r3
}
 8012368:	bf00      	nop
 801236a:	3718      	adds	r7, #24
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	08012167 	.word	0x08012167
 8012374:	080121ad 	.word	0x080121ad

08012378 <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	603b      	str	r3, [r7, #0]
 8012384:	4613      	mov	r3, r2
 8012386:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d102      	bne.n	8012394 <controller_register+0x1c>
    return -RM_INVAL;
 801238e:	f06f 0301 	mvn.w	r3, #1
 8012392:	e01d      	b.n	80123d0 <controller_register+0x58>
  if (controller_find(name) != NULL)
 8012394:	68b8      	ldr	r0, [r7, #8]
 8012396:	f000 f81f 	bl	80123d8 <controller_find>
 801239a:	4603      	mov	r3, r0
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <controller_register+0x2e>
    return -RM_EXISTED;
 80123a0:	f06f 0302 	mvn.w	r3, #2
 80123a4:	e014      	b.n	80123d0 <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	68ba      	ldr	r2, [r7, #8]
 80123aa:	2102      	movs	r1, #2
 80123ac:	4618      	mov	r0, r3
 80123ae:	f001 f931 	bl	8013614 <object_init>

  ctrl->type = type;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	79fa      	ldrb	r2, [r7, #7]
 80123b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	7f3a      	ldrb	r2, [r7, #28]
 80123be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	69ba      	ldr	r2, [r7, #24]
 80123cc:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 80123e0:	2102      	movs	r1, #2
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f001 f952 	bl	801368c <object_find>
 80123e8:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 80123ea:	68fb      	ldr	r3, [r7, #12]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3710      	adds	r7, #16
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <controller_execute>:

  return RM_OK;
}

int32_t controller_execute(struct controller *ctrl, void *feedback)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d102      	bne.n	801240a <controller_execute+0x16>
    return -RM_INVAL;
 8012404:	f06f 0301 	mvn.w	r3, #1
 8012408:	e029      	b.n	801245e <controller_execute+0x6a>

  if (feedback == NULL)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d102      	bne.n	8012416 <controller_execute+0x22>
    return -RM_INVAL;
 8012410:	f06f 0301 	mvn.w	r3, #1
 8012414:	e023      	b.n	801245e <controller_execute+0x6a>

  if (ctrl->convert_feedback == NULL)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801241a:	2b00      	cmp	r3, #0
 801241c:	d102      	bne.n	8012424 <controller_execute+0x30>
  {
    return -RM_INVAL;
 801241e:	f06f 0301 	mvn.w	r3, #1
 8012422:	e01c      	b.n	801245e <controller_execute+0x6a>
  }
  else
  {
    ctrl->convert_feedback(ctrl, feedback);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	4798      	blx	r3
  }

  if ((ctrl->control != NULL) && (ctrl->enable == 1))
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012432:	2b00      	cmp	r3, #0
 8012434:	d012      	beq.n	801245c <controller_execute+0x68>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801243c:	2b01      	cmp	r3, #1
 801243e:	d10d      	bne.n	801245c <controller_execute+0x68>
  {
    ctrl->control(ctrl, ctrl->param, ctrl->feedback, ctrl->input);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8012452:	eeb0 0a67 	vmov.f32	s0, s15
 8012456:	4602      	mov	r2, r0
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	4798      	blx	r3
  }

  return RM_OK;
 801245c:	2300      	movs	r3, #0
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <controller_set_input>:

int32_t controller_set_input(struct controller *ctrl, float input)
{
 8012466:	b480      	push	{r7}
 8012468:	b083      	sub	sp, #12
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	ed87 0a00 	vstr	s0, [r7]
  if (ctrl == NULL)
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d101      	bne.n	801247c <controller_set_input+0x16>
    return 0;
 8012478:	2300      	movs	r3, #0
 801247a:	e003      	b.n	8012484 <controller_set_input+0x1e>
  ctrl->input = input;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <controller_get_output>:

float controller_get_output(struct controller *ctrl, float *out)
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d102      	bne.n	80124a6 <controller_get_output+0x16>
    return 0;
 80124a0:	f04f 0300 	mov.w	r3, #0
 80124a4:	e005      	b.n	80124b2 <controller_get_output+0x22>
  *out = ctrl->output;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	601a      	str	r2, [r3, #0]
  return ctrl->output;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80124b2:	ee07 3a90 	vmov	s15, r3
 80124b6:	eeb0 0a67 	vmov.f32	s0, s15
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <controller_disable>:
  ctrl->enable = 1;
  return RM_OK;
}

int32_t controller_disable(struct controller *ctrl)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <controller_disable+0x12>
    return RM_INVAL;
 80124d2:	2302      	movs	r3, #2
 80124d4:	e00c      	b.n	80124f0 <controller_disable+0x2c>
  ctrl->enable = 0;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2200      	movs	r2, #0
 80124da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f04f 0200 	mov.w	r2, #0
 80124e4:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f04f 0200 	mov.w	r2, #0
 80124ec:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 80124ee:	2300      	movs	r3, #0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af02      	add	r7, sp, #8
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
 8012508:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d102      	bne.n	8012516 <pid_controller_register+0x1a>
    return -RM_INVAL;
 8012510:	f06f 0301 	mvn.w	r3, #1
 8012514:	e00d      	b.n	8012532 <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	4a08      	ldr	r2, [pc, #32]	; (801253c <pid_controller_register+0x40>)
 801251a:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 801251c:	7e3b      	ldrb	r3, [r7, #24]
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	68b9      	ldr	r1, [r7, #8]
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ff ff24 	bl	8012378 <controller_register>

  return RM_OK;
 8012530:	2300      	movs	r3, #0
}              
 8012532:	4618      	mov	r0, r3
 8012534:	3710      	adds	r7, #16
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	08012541 	.word	0x08012541

08012540 <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	edd3 7a00 	vldr	s15, [r3]
 801255e:	edd7 0a00 	vldr	s1, [r7]
 8012562:	eeb0 0a67 	vmov.f32	s0, s15
 8012566:	6978      	ldr	r0, [r7, #20]
 8012568:	f7ff fe49 	bl	80121fe <pid_calculate>
  
  ctrl->output = pid_param->out;
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 8012574:	2300      	movs	r3, #0
}
 8012576:	4618      	mov	r0, r3
 8012578:	3718      	adds	r7, #24
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <rc_device_get_state>:
  }
  return -RM_UNREGISTERED;
}

int32_t rc_device_get_state(rc_device_t rc_dev, uint16_t state)
{
 801257e:	b490      	push	{r4, r7}
 8012580:	b086      	sub	sp, #24
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	460b      	mov	r3, r1
 8012588:	807b      	strh	r3, [r7, #2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801258a:	f3ef 8310 	mrs	r3, PRIMASK
 801258e:	617b      	str	r3, [r7, #20]
  return(result);
 8012590:	697b      	ldr	r3, [r7, #20]
  var_cpu_sr();
    
  enter_critical();
 8012592:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012594:	b672      	cpsid	i
}
 8012596:	bf00      	nop

  if (rc_dev != NULL)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d027      	beq.n	80125ee <rc_device_get_state+0x70>
  {
    if((rc_dev->state & state) == state)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80125a4:	887b      	ldrh	r3, [r7, #2]
 80125a6:	4013      	ands	r3, r2
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	887a      	ldrh	r2, [r7, #2]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d116      	bne.n	80125de <rc_device_get_state+0x60>
    {
      rc_dev->state &=(~(state & 0x00FF));
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125b6:	b21a      	sxth	r2, r3
 80125b8:	887b      	ldrh	r3, [r7, #2]
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	b29b      	uxth	r3, r3
 80125be:	43db      	mvns	r3, r3
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	b21b      	sxth	r3, r3
 80125c4:	4013      	ands	r3, r2
 80125c6:	b21b      	sxth	r3, r3
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80125d0:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	f383 8810 	msr	PRIMASK, r3
}
 80125d8:	bf00      	nop
      exit_critical();
      return RM_OK;   
 80125da:	2300      	movs	r3, #0
 80125dc:	e00e      	b.n	80125fc <rc_device_get_state+0x7e>
 80125de:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f383 8810 	msr	PRIMASK, r3
}
 80125e6:	bf00      	nop
    }
    else
    {
      exit_critical();
      return -RM_NOSTATE;
 80125e8:	f06f 0304 	mvn.w	r3, #4
 80125ec:	e006      	b.n	80125fc <rc_device_get_state+0x7e>
 80125ee:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	f383 8810 	msr	PRIMASK, r3
}
 80125f6:	bf00      	nop
    }
  }
  
  exit_critical();

  return -RM_UNREGISTERED;
 80125f8:	f06f 0303 	mvn.w	r3, #3
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bc90      	pop	{r4, r7}
 8012604:	4770      	bx	lr

08012606 <rc_device_get_info>:

rc_info_t rc_device_get_info(rc_device_t rc_dev)
{
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
  if (rc_dev == NULL)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <rc_device_get_info+0x12>
  {
    return NULL;
 8012614:	2300      	movs	r3, #0
 8012616:	e001      	b.n	801261c <rc_device_get_info+0x16>
  }

  return &(rc_dev->rc_info);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	3338      	adds	r3, #56	; 0x38
}
 801261c:	4618      	mov	r0, r3
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr

08012628 <rc_device_find>:

rc_device_t rc_device_find(const char *name)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  rc_device_t rc_dev;
  enum device_type type;

  rc_dev = (rc_device_t)device_find(name);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f8e5 	bl	8012800 <device_find>
 8012636:	60f8      	str	r0, [r7, #12]
  
  if(rc_dev == NULL)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <rc_device_find+0x1a>
    return NULL;
 801263e:	2300      	movs	r3, #0
 8012640:	e009      	b.n	8012656 <rc_device_find+0x2e>
  
  type = ((device_t)rc_dev)->type;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012648:	72fb      	strb	r3, [r7, #11]
  
  if (type == Device_Class_RC)
 801264a:	7afb      	ldrb	r3, [r7, #11]
 801264c:	2b01      	cmp	r3, #1
 801264e:	d101      	bne.n	8012654 <rc_device_find+0x2c>
  {
    return rc_dev;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	e000      	b.n	8012656 <rc_device_find+0x2e>
  }
  else
  {
    return NULL;
 8012654:	2300      	movs	r3, #0
  }
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <detect_device_register>:

int32_t detect_device_register(detect_device_t detect_dev,
                               const char *name,
                               uint16_t flags,
                               uint8_t callback_mode)
{
 801265e:	b580      	push	{r7, lr}
 8012660:	b084      	sub	sp, #16
 8012662:	af00      	add	r7, sp, #0
 8012664:	60f8      	str	r0, [r7, #12]
 8012666:	60b9      	str	r1, [r7, #8]
 8012668:	4611      	mov	r1, r2
 801266a:	461a      	mov	r2, r3
 801266c:	460b      	mov	r3, r1
 801266e:	80fb      	strh	r3, [r7, #6]
 8012670:	4613      	mov	r3, r2
 8012672:	717b      	strb	r3, [r7, #5]
  if (detect_dev == NULL)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d102      	bne.n	8012680 <detect_device_register+0x22>
    return -RM_INVAL;
 801267a:	f06f 0301 	mvn.w	r3, #1
 801267e:	e017      	b.n	80126b0 <detect_device_register+0x52>

  if (device_find(name) != NULL)
 8012680:	68b8      	ldr	r0, [r7, #8]
 8012682:	f000 f8bd 	bl	8012800 <device_find>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <detect_device_register+0x34>
    return -RM_EXISTED;
 801268c:	f06f 0302 	mvn.w	r3, #2
 8012690:	e00e      	b.n	80126b0 <detect_device_register+0x52>

  ((device_t)detect_dev)->type = Device_Class_Detect;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2202      	movs	r2, #2
 8012696:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  detect_dev->callback_mode = callback_mode;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	797a      	ldrb	r2, [r7, #5]
 801269e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  device_register(&(detect_dev->parent), name, flags);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	88fa      	ldrh	r2, [r7, #6]
 80126a6:	68b9      	ldr	r1, [r7, #8]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 f87e 	bl	80127aa <device_register>

  return RM_OK;
 80126ae:	2300      	movs	r3, #0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <detect_device_update>:

int32_t detect_device_update(detect_device_t detect_dev, uint32_t event)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  if (detect_dev == NULL)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d102      	bne.n	80126ce <detect_device_update+0x16>
    return -RM_INVAL;
 80126c8:	f06f 0301 	mvn.w	r3, #1
 80126cc:	e024      	b.n	8012718 <detect_device_update+0x60>

  uint32_t temp = 1;
 80126ce:	2301      	movs	r3, #1
 80126d0:	60bb      	str	r3, [r7, #8]

  event &= detect_dev->enable;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	4013      	ands	r3, r2
 80126da:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 32; i++)
 80126dc:	2300      	movs	r3, #0
 80126de:	60fb      	str	r3, [r7, #12]
 80126e0:	e016      	b.n	8012710 <detect_device_update+0x58>
  {
    temp = 1 << i;
 80126e2:	2201      	movs	r2, #1
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	fa02 f303 	lsl.w	r3, r2, r3
 80126ea:	60bb      	str	r3, [r7, #8]
    if ((event & temp) == temp)
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	4013      	ands	r3, r2
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d108      	bne.n	801270a <detect_device_update+0x52>
    {
      detect_dev->last_time[i] = offline_get_ms();
 80126f8:	f7f3 f85e 	bl	80057b8 <HAL_GetTick>
 80126fc:	4601      	mov	r1, r0
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	3310      	adds	r3, #16
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	4413      	add	r3, r2
 8012708:	6059      	str	r1, [r3, #4]
  for (int i = 0; i < 32; i++)
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	3301      	adds	r3, #1
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b1f      	cmp	r3, #31
 8012714:	dde5      	ble.n	80126e2 <detect_device_update+0x2a>
    }
  }

  return RM_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <detect_device_add_event>:
int32_t detect_device_add_event(detect_device_t detect_dev,
                                uint32_t event,
                                uint32_t timeout,
                                int32_t (*offline_callback)(void *argc),
                                void *argc)
{
 8012720:	b480      	push	{r7}
 8012722:	b087      	sub	sp, #28
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	603b      	str	r3, [r7, #0]
  if (detect_dev == NULL)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d102      	bne.n	801273a <detect_device_add_event+0x1a>
    return -RM_INVAL;
 8012734:	f06f 0301 	mvn.w	r3, #1
 8012738:	e031      	b.n	801279e <detect_device_add_event+0x7e>

  uint32_t temp = 1;
 801273a:	2301      	movs	r3, #1
 801273c:	613b      	str	r3, [r7, #16]
  detect_dev->enable |= event;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	431a      	orrs	r2, r3
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	641a      	str	r2, [r3, #64]	; 0x40

  for (int i = 0; i < 32; i++)
 801274a:	2300      	movs	r3, #0
 801274c:	617b      	str	r3, [r7, #20]
 801274e:	e022      	b.n	8012796 <detect_device_add_event+0x76>
  {
    temp = 1 << i;
 8012750:	2201      	movs	r2, #1
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	fa02 f303 	lsl.w	r3, r2, r3
 8012758:	613b      	str	r3, [r7, #16]
    if ((event & temp) == temp)
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	4013      	ands	r3, r2
 8012760:	693a      	ldr	r2, [r7, #16]
 8012762:	429a      	cmp	r2, r3
 8012764:	d114      	bne.n	8012790 <detect_device_add_event+0x70>
    {
      detect_dev->timeout[i] = timeout;
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	3330      	adds	r3, #48	; 0x30
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4413      	add	r3, r2
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	605a      	str	r2, [r3, #4]
      detect_dev->argc[i] = argc;
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	3350      	adds	r3, #80	; 0x50
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	4413      	add	r3, r2
 801277e:	6a3a      	ldr	r2, [r7, #32]
 8012780:	605a      	str	r2, [r3, #4]
      detect_dev->offline_callback[i] = offline_callback;
 8012782:	68fa      	ldr	r2, [r7, #12]
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	3370      	adds	r3, #112	; 0x70
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	4413      	add	r3, r2
 801278c:	683a      	ldr	r2, [r7, #0]
 801278e:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < 32; i++)
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	3301      	adds	r3, #1
 8012794:	617b      	str	r3, [r7, #20]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	2b1f      	cmp	r3, #31
 801279a:	ddd9      	ble.n	8012750 <detect_device_add_event+0x30>
    }
  }

  return RM_OK;
 801279c:	2300      	movs	r3, #0
}
 801279e:	4618      	mov	r0, r3
 80127a0:	371c      	adds	r7, #28
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr

080127aa <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b084      	sub	sp, #16
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	60f8      	str	r0, [r7, #12]
 80127b2:	60b9      	str	r1, [r7, #8]
 80127b4:	4613      	mov	r3, r2
 80127b6:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d102      	bne.n	80127c4 <device_register+0x1a>
    return -RM_INVAL;
 80127be:	f06f 0301 	mvn.w	r3, #1
 80127c2:	e019      	b.n	80127f8 <device_register+0x4e>
  if (device_find(name) != NULL)
 80127c4:	68b8      	ldr	r0, [r7, #8]
 80127c6:	f000 f81b 	bl	8012800 <device_find>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <device_register+0x2c>
    return -RM_EXISTED;
 80127d0:	f06f 0302 	mvn.w	r3, #2
 80127d4:	e010      	b.n	80127f8 <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	68ba      	ldr	r2, [r7, #8]
 80127da:	2100      	movs	r1, #0
 80127dc:	4618      	mov	r0, r3
 80127de:	f000 ff19 	bl	8013614 <object_init>

  dev->flag = flags;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	88fa      	ldrh	r2, [r7, #6]
 80127e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2200      	movs	r2, #0
 80127ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2200      	movs	r2, #0
 80127f4:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 8012808:	2100      	movs	r1, #0
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 ff3e 	bl	801368c <object_find>
 8012810:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 8012812:	68fb      	ldr	r3, [r7, #12]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <motor_device_register>:
static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev,
                              const char *name,
                              uint16_t flags)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	4613      	mov	r3, r2
 8012828:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <motor_device_register+0x1a>
    return -RM_INVAL;
 8012830:	f06f 0301 	mvn.w	r3, #1
 8012834:	e035      	b.n	80128a2 <motor_device_register+0x86>

  if (device_find(name) != NULL)
 8012836:	68b8      	ldr	r0, [r7, #8]
 8012838:	f7ff ffe2 	bl	8012800 <device_find>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d002      	beq.n	8012848 <motor_device_register+0x2c>
    return -RM_EXISTED;
 8012842:	f06f 0302 	mvn.w	r3, #2
 8012846:	e02c      	b.n	80128a2 <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) != NULL)
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012854:	4619      	mov	r1, r3
 8012856:	4610      	mov	r0, r2
 8012858:	f000 f864 	bl	8012924 <motor_device_find_by_canid>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d002      	beq.n	8012868 <motor_device_register+0x4c>
    return -RM_EXISTED;
 8012862:	f06f 0302 	mvn.w	r3, #2
 8012866:	e01c      	b.n	80128a2 <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801286e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012872:	d808      	bhi.n	8012886 <motor_device_register+0x6a>
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801287a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801287e:	d902      	bls.n	8012886 <motor_device_register+0x6a>
    return -RM_ERROR;
 8012880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012884:	e00d      	b.n	80128a2 <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	4a06      	ldr	r2, [pc, #24]	; (80128ac <motor_device_register+0x90>)
 8012892:	661a      	str	r2, [r3, #96]	; 0x60

  device_register( &(motor_dev->parent), name, flags);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	88fa      	ldrh	r2, [r7, #6]
 8012898:	68b9      	ldr	r1, [r7, #8]
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff ff85 	bl	80127aa <device_register>

  return RM_OK;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	08012be5 	.word	0x08012be5

080128b0 <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b083      	sub	sp, #12
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d002      	beq.n	80128c4 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 80128be:	4a04      	ldr	r2, [pc, #16]	; (80128d0 <motor_device_can_send_register+0x20>)
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6013      	str	r3, [r2, #0]
}
 80128c4:	bf00      	nop
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	200084c8 	.word	0x200084c8

080128d4 <motor_device_get_data>:
    return NULL;
  }
}

motor_data_t motor_device_get_data(motor_device_t motor_dev)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  if (motor_dev != NULL)
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d002      	beq.n	80128e8 <motor_device_get_data+0x14>
  {
    return &(motor_dev->data);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	3338      	adds	r3, #56	; 0x38
 80128e6:	e000      	b.n	80128ea <motor_device_get_data+0x16>
  }
  return NULL;
 80128e8:	2300      	movs	r3, #0
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	370c      	adds	r7, #12
 80128ee:	46bd      	mov	sp, r7
 80128f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f4:	4770      	bx	lr

080128f6 <motor_device_set_current>:

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current)
{
 80128f6:	b480      	push	{r7}
 80128f8:	b083      	sub	sp, #12
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
 80128fe:	460b      	mov	r3, r1
 8012900:	807b      	strh	r3, [r7, #2]

  if (motor_dev != NULL)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d005      	beq.n	8012914 <motor_device_set_current+0x1e>
  {
    motor_dev->current = current;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	887a      	ldrh	r2, [r7, #2]
 801290c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    return RM_OK;
 8012910:	2300      	movs	r3, #0
 8012912:	e001      	b.n	8012918 <motor_device_set_current+0x22>
  }
  return -RM_ERROR;
 8012914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012918:	4618      	mov	r0, r3
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <motor_device_find_by_canid>:

motor_device_t motor_device_find_by_canid(enum device_can can, uint16_t can_id)
{
 8012924:	b590      	push	{r4, r7, lr}
 8012926:	b08b      	sub	sp, #44	; 0x2c
 8012928:	af00      	add	r7, sp, #0
 801292a:	4603      	mov	r3, r0
 801292c:	460a      	mov	r2, r1
 801292e:	71fb      	strb	r3, [r7, #7]
 8012930:	4613      	mov	r3, r2
 8012932:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 8012934:	2300      	movs	r3, #0
 8012936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012938:	f3ef 8310 	mrs	r3, PRIMASK
 801293c:	617b      	str	r3, [r7, #20]
  return(result);
 801293e:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();
  
  /* enter critical */
  enter_critical();
 8012940:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012942:	b672      	cpsid	i
}
 8012944:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8012946:	2000      	movs	r0, #0
 8012948:	f000 fe3a 	bl	80135c0 <object_get_information>
 801294c:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 801294e:	6a3b      	ldr	r3, [r7, #32]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	627b      	str	r3, [r7, #36]	; 0x24
 8012954:	e020      	b.n	8012998 <motor_device_find_by_canid+0x74>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	3b24      	subs	r3, #36	; 0x24
 801295a:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012962:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor)
 8012964:	7efb      	ldrb	r3, [r7, #27]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d112      	bne.n	8012990 <motor_device_find_by_canid+0x6c>
    {
      continue;
    }  
    else if ((((motor_device_t)object)->can_id == can_id) && (((motor_device_t)object)->can_periph == can))
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012970:	88ba      	ldrh	r2, [r7, #4]
 8012972:	429a      	cmp	r2, r3
 8012974:	d10d      	bne.n	8012992 <motor_device_find_by_canid+0x6e>
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801297c:	79fa      	ldrb	r2, [r7, #7]
 801297e:	429a      	cmp	r2, r3
 8012980:	d107      	bne.n	8012992 <motor_device_find_by_canid+0x6e>
 8012982:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	f383 8810 	msr	PRIMASK, r3
}
 801298a:	bf00      	nop
    {
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	e00e      	b.n	80129ae <motor_device_find_by_canid+0x8a>
      continue;
 8012990:	bf00      	nop
       node = node->next)
 8012992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 8012998:	6a3b      	ldr	r3, [r7, #32]
 801299a:	3304      	adds	r3, #4
 801299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299e:	429a      	cmp	r2, r3
 80129a0:	d1d9      	bne.n	8012956 <motor_device_find_by_canid+0x32>
 80129a2:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f383 8810 	msr	PRIMASK, r3
}
 80129aa:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	372c      	adds	r7, #44	; 0x2c
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd90      	pop	{r4, r7, pc}
	...

080129b8 <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];

int32_t motor_device_can_output(enum device_can m_can)
{
 80129b8:	b590      	push	{r4, r7, lr}
 80129ba:	b08d      	sub	sp, #52	; 0x34
 80129bc:	af02      	add	r7, sp, #8
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 80129c6:	2240      	movs	r2, #64	; 0x40
 80129c8:	2100      	movs	r1, #0
 80129ca:	4873      	ldr	r0, [pc, #460]	; (8012b98 <motor_device_can_output+0x1e0>)
 80129cc:	f001 ff7b 	bl	80148c6 <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80129d0:	f3ef 8310 	mrs	r3, PRIMASK
 80129d4:	613b      	str	r3, [r7, #16]
  return(result);
 80129d6:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();
   
  /* enter critical */
  enter_critical();
 80129d8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80129da:	b672      	cpsid	i
}
 80129dc:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 80129de:	2000      	movs	r0, #0
 80129e0:	f000 fdee 	bl	80135c0 <object_get_information>
 80129e4:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	627b      	str	r3, [r7, #36]	; 0x24
 80129ec:	e098      	b.n	8012b20 <motor_device_can_output+0x168>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	3b24      	subs	r3, #36	; 0x24
 80129f2:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	617b      	str	r3, [r7, #20]
    if(motor_dev->parent.type == Device_Class_Motor)
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f040 808b 	bne.w	8012b1a <motor_device_can_output+0x162>
    {
      if (((motor_device_t)object)->can_id < 0x205)
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012a0a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8012a0e:	d841      	bhi.n	8012a94 <motor_device_can_output+0xdc>
      {
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a16:	4a60      	ldr	r2, [pc, #384]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012a18:	015b      	lsls	r3, r3, #5
 8012a1a:	441a      	add	r2, r3
 8012a1c:	6813      	ldr	r3, [r2, #0]
 8012a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012a22:	f361 031c 	bfi	r3, r1, #0, #29
 8012a26:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8012a2e:	121b      	asrs	r3, r3, #8
 8012a30:	b219      	sxth	r1, r3
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a38:	461a      	mov	r2, r3
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012a40:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012a44:	005b      	lsls	r3, r3, #1
 8012a46:	b2c8      	uxtb	r0, r1
 8012a48:	4953      	ldr	r1, [pc, #332]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012a4a:	0152      	lsls	r2, r2, #5
 8012a4c:	440a      	add	r2, r1
 8012a4e:	4413      	add	r3, r2
 8012a50:	3308      	adds	r3, #8
 8012a52:	4602      	mov	r2, r0
 8012a54:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a62:	461a      	mov	r2, r3
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012a6a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	3301      	adds	r3, #1
 8012a72:	b2c8      	uxtb	r0, r1
 8012a74:	4948      	ldr	r1, [pc, #288]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012a76:	0152      	lsls	r2, r2, #5
 8012a78:	440a      	add	r2, r1
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	4602      	mov	r2, r0
 8012a80:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a88:	461a      	mov	r2, r3
 8012a8a:	4b44      	ldr	r3, [pc, #272]	; (8012b9c <motor_device_can_output+0x1e4>)
 8012a8c:	2101      	movs	r1, #1
 8012a8e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 8012a92:	e042      	b.n	8012b1a <motor_device_can_output+0x162>
      }
      else
      {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a9a:	4a3f      	ldr	r2, [pc, #252]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012a9c:	015b      	lsls	r3, r3, #5
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f103 0210 	add.w	r2, r3, #16
 8012aa4:	6813      	ldr	r3, [r2, #0]
 8012aa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012aaa:	f361 031c 	bfi	r3, r1, #0, #29
 8012aae:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8012ab6:	121b      	asrs	r3, r3, #8
 8012ab8:	b219      	sxth	r1, r3
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012ac8:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	b2c8      	uxtb	r0, r1
 8012ad0:	4931      	ldr	r1, [pc, #196]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012ad2:	0152      	lsls	r2, r2, #5
 8012ad4:	440a      	add	r2, r1
 8012ad6:	4413      	add	r3, r2
 8012ad8:	3318      	adds	r3, #24
 8012ada:	4602      	mov	r2, r0
 8012adc:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012aea:	461a      	mov	r2, r3
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012af2:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	3301      	adds	r3, #1
 8012afa:	b2c8      	uxtb	r0, r1
 8012afc:	4926      	ldr	r1, [pc, #152]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012afe:	0152      	lsls	r2, r2, #5
 8012b00:	440a      	add	r2, r1
 8012b02:	4413      	add	r3, r2
 8012b04:	3318      	adds	r3, #24
 8012b06:	4602      	mov	r2, r0
 8012b08:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012b10:	4a22      	ldr	r2, [pc, #136]	; (8012b9c <motor_device_can_output+0x1e4>)
 8012b12:	005b      	lsls	r3, r3, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	2201      	movs	r2, #1
 8012b18:	705a      	strb	r2, [r3, #1]
       node = node->next)
 8012b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	3304      	adds	r3, #4
 8012b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b26:	429a      	cmp	r2, r3
 8012b28:	f47f af61 	bne.w	80129ee <motor_device_can_output+0x36>
 8012b2c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f383 8810 	msr	PRIMASK, r3
}
 8012b34:	bf00      	nop
  }

  /* leave critical */
  exit_critical();
  
  for (int j = 0; j < 2; j++)
 8012b36:	2300      	movs	r3, #0
 8012b38:	623b      	str	r3, [r7, #32]
 8012b3a:	e025      	b.n	8012b88 <motor_device_can_output+0x1d0>
  {
    if (motor_send_flag[m_can][j] == 1)
 8012b3c:	79fb      	ldrb	r3, [r7, #7]
 8012b3e:	4a17      	ldr	r2, [pc, #92]	; (8012b9c <motor_device_can_output+0x1e4>)
 8012b40:	005b      	lsls	r3, r3, #1
 8012b42:	441a      	add	r2, r3
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	4413      	add	r3, r2
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d119      	bne.n	8012b82 <motor_device_can_output+0x1ca>
    {
      if (motor_can_send != NULL)
 8012b4e:	4b14      	ldr	r3, [pc, #80]	; (8012ba0 <motor_device_can_output+0x1e8>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d00d      	beq.n	8012b72 <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 8012b56:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <motor_device_can_output+0x1e8>)
 8012b58:	681c      	ldr	r4, [r3, #0]
 8012b5a:	79fb      	ldrb	r3, [r7, #7]
 8012b5c:	490e      	ldr	r1, [pc, #56]	; (8012b98 <motor_device_can_output+0x1e0>)
 8012b5e:	005a      	lsls	r2, r3, #1
 8012b60:	6a3b      	ldr	r3, [r7, #32]
 8012b62:	4413      	add	r3, r2
 8012b64:	011b      	lsls	r3, r3, #4
 8012b66:	440b      	add	r3, r1
 8012b68:	79f8      	ldrb	r0, [r7, #7]
 8012b6a:	68da      	ldr	r2, [r3, #12]
 8012b6c:	9200      	str	r2, [sp, #0]
 8012b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012b70:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 8012b72:	79fb      	ldrb	r3, [r7, #7]
 8012b74:	4a09      	ldr	r2, [pc, #36]	; (8012b9c <motor_device_can_output+0x1e4>)
 8012b76:	005b      	lsls	r3, r3, #1
 8012b78:	441a      	add	r2, r3
 8012b7a:	6a3b      	ldr	r3, [r7, #32]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	2200      	movs	r2, #0
 8012b80:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++)
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	3301      	adds	r3, #1
 8012b86:	623b      	str	r3, [r7, #32]
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	ddd6      	ble.n	8012b3c <motor_device_can_output+0x184>
    }
  }

  /* not found */
  return RM_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	372c      	adds	r7, #44	; 0x2c
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd90      	pop	{r4, r7, pc}
 8012b98:	200084d0 	.word	0x200084d0
 8012b9c:	200084cc 	.word	0x200084cc
 8012ba0:	200084c8 	.word	0x200084c8

08012ba4 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id, uint8_t can_rx_data[])
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	603a      	str	r2, [r7, #0]
 8012bae:	71fb      	strb	r3, [r7, #7]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 8012bb4:	88ba      	ldrh	r2, [r7, #4]
 8012bb6:	79fb      	ldrb	r3, [r7, #7]
 8012bb8:	4611      	mov	r1, r2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff feb2 	bl	8012924 <motor_device_find_by_canid>
 8012bc0:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL)
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d006      	beq.n	8012bd6 <motor_device_data_update+0x32>
  {
    motor_dev->get_data(motor_dev, can_rx_data);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012bcc:	6839      	ldr	r1, [r7, #0]
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	4798      	blx	r3
    return RM_OK;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e001      	b.n	8012bda <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 8012bd6:	f06f 0303 	mvn.w	r3, #3
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
	...

08012be4 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[])
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	3338      	adds	r3, #56	; 0x38
 8012bf2:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	699b      	ldr	r3, [r3, #24]
 8012bf8:	1c5a      	adds	r2, r3, #1
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50)
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	699b      	ldr	r3, [r3, #24]
 8012c02:	2b32      	cmp	r3, #50	; 0x32
 8012c04:	d903      	bls.n	8012c0e <get_encoder_data+0x2a>
  {
    motor->init_offset_f = 0;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d104      	bne.n	8012c22 <get_encoder_data+0x3e>
  {
    get_motor_offset(ptr, can_rx_data);
 8012c18:	6839      	ldr	r1, [r7, #0]
 8012c1a:	68f8      	ldr	r0, [r7, #12]
 8012c1c:	f000 f886 	bl	8012d2c <get_motor_offset>
    return;
 8012c20:	e07f      	b.n	8012d22 <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	881a      	ldrh	r2, [r3, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	021b      	lsls	r3, r3, #8
 8012c30:	b21a      	sxth	r2, r3
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	3301      	adds	r3, #1
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	b21b      	sxth	r3, r3
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	b21b      	sxth	r3, r3
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	885b      	ldrh	r3, [r3, #2]
 8012c4e:	1ad3      	subs	r3, r2, r3
 8012c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c54:	dd0f      	ble.n	8012c76 <get_encoder_data+0x92>
  {
    ptr->round_cnt--;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	689b      	ldr	r3, [r3, #8]
 8012c5a:	1e5a      	subs	r2, r3, #1
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	461a      	mov	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	885b      	ldrh	r3, [r3, #2]
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	615a      	str	r2, [r3, #20]
 8012c74:	e020      	b.n	8012cb8 <get_encoder_data+0xd4>
  }
  else if (ptr->ecd - ptr->last_ecd < -4096)
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	885b      	ldrh	r3, [r3, #2]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8012c86:	da0f      	bge.n	8012ca8 <get_encoder_data+0xc4>
  {
    ptr->round_cnt++;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	881b      	ldrh	r3, [r3, #0]
 8012c96:	461a      	mov	r2, r3
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	885b      	ldrh	r3, [r3, #2]
 8012c9c:	1ad3      	subs	r3, r2, r3
 8012c9e:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	615a      	str	r2, [r3, #20]
 8012ca6:	e007      	b.n	8012cb8 <get_encoder_data+0xd4>
  }
  else
  {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	461a      	mov	r2, r3
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	885b      	ldrh	r3, [r3, #2]
 8012cb2:	1ad2      	subs	r2, r2, r3
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	689b      	ldr	r3, [r3, #8]
 8012cbc:	035b      	lsls	r3, r3, #13
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	8812      	ldrh	r2, [r2, #0]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	8b92      	ldrh	r2, [r2, #28]
 8012cc8:	1a9a      	subs	r2, r3, r2
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	ee07 3a90 	vmov	s15, r3
 8012cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012cda:	eddf 6a13 	vldr	s13, [pc, #76]	; 8012d28 <get_encoder_data+0x144>
 8012cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ce6:	ee17 2a90 	vmov	r2, s15
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	3302      	adds	r3, #2
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	021b      	lsls	r3, r3, #8
 8012cf6:	b21a      	sxth	r2, r3
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	3303      	adds	r3, #3
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	b21b      	sxth	r3, r3
 8012d00:	4313      	orrs	r3, r2
 8012d02:	b21a      	sxth	r2, r3
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	021b      	lsls	r3, r3, #8
 8012d10:	b21a      	sxth	r2, r3
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	3305      	adds	r3, #5
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	b21b      	sxth	r3, r3
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	b21a      	sxth	r2, r3
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	80da      	strh	r2, [r3, #6]
}
 8012d22:	3710      	adds	r7, #16
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	41b60b61 	.word	0x41b60b61

08012d2c <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[])
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	021b      	lsls	r3, r3, #8
 8012d3c:	b21a      	sxth	r2, r3
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	3301      	adds	r3, #1
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	b21b      	sxth	r3, r3
 8012d46:	4313      	orrs	r3, r2
 8012d48:	b21b      	sxth	r3, r3
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	881a      	ldrh	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	839a      	strh	r2, [r3, #28]
}
 8012d58:	bf00      	nop
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <chassis_pid_register>:
#include "chassis.h"
 
static int32_t motor_pid_input_convert(struct controller *ctrl, void *input);

int32_t chassis_pid_register(struct chassis *chassis, const char *name, enum device_can can)
{
 8012d64:	b590      	push	{r4, r7, lr}
 8012d66:	b0ad      	sub	sp, #180	; 0xb4
 8012d68:	af02      	add	r7, sp, #8
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	71fb      	strb	r3, [r7, #7]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 8012d72:	f107 0314 	add.w	r3, r7, #20
 8012d76:	2280      	movs	r2, #128	; 0x80
 8012d78:	2100      	movs	r1, #0
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f001 fda3 	bl	80148c6 <memset>
  uint8_t name_len;

  int32_t err;

  if (chassis == NULL)
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d102      	bne.n	8012d8c <chassis_pid_register+0x28>
    return -RM_INVAL;
 8012d86:	f06f 0301 	mvn.w	r3, #1
 8012d8a:	e143      	b.n	8013014 <chassis_pid_register+0x2b0>
  if (chassis_find(name) != NULL)
 8012d8c:	68b8      	ldr	r0, [r7, #8]
 8012d8e:	f000 fb81 	bl	8013494 <chassis_find>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <chassis_pid_register+0x3a>
    return -RM_EXISTED;
 8012d98:	f06f 0302 	mvn.w	r3, #2
 8012d9c:	e13a      	b.n	8013014 <chassis_pid_register+0x2b0>

  object_init(&(chassis->parent), Object_Class_Chassis, name);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	68ba      	ldr	r2, [r7, #8]
 8012da2:	2103      	movs	r1, #3
 8012da4:	4618      	mov	r0, r3
 8012da6:	f000 fc35 	bl	8013614 <object_init>

  name_len = strlen(name);
 8012daa:	68b8      	ldr	r0, [r7, #8]
 8012dac:	f7ed fa20 	bl	80001f0 <strlen>
 8012db0:	4603      	mov	r3, r0
 8012db2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  if (name_len > OBJECT_NAME_MAX_LEN / 2)
 8012db6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012dba:	2b10      	cmp	r3, #16
 8012dbc:	d902      	bls.n	8012dc4 <chassis_pid_register+0x60>
  {
    name_len = OBJECT_NAME_MAX_LEN / 2;
 8012dbe:	2310      	movs	r3, #16
 8012dc0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  }

  for (int i = 0; i < 4; i++)
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012dca:	e054      	b.n	8012e76 <chassis_pid_register+0x112>
  {
    memcpy(&motor_name[i], name, name_len);
 8012dcc:	f107 0214 	add.w	r2, r7, #20
 8012dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012dd4:	015b      	lsls	r3, r3, #5
 8012dd6:	4413      	add	r3, r2
 8012dd8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8012ddc:	68b9      	ldr	r1, [r7, #8]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f001 fdf6 	bl	80149d0 <memcpy>
    chassis->motor[i].can_periph = can;
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012dea:	2164      	movs	r1, #100	; 0x64
 8012dec:	fb01 f303 	mul.w	r3, r1, r3
 8012df0:	4413      	add	r3, r2
 8012df2:	33e0      	adds	r3, #224	; 0xe0
 8012df4:	79fa      	ldrb	r2, [r7, #7]
 8012df6:	701a      	strb	r2, [r3, #0]
    chassis->motor[i].can_id = 0x201 + i;
 8012df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	f203 2301 	addw	r3, r3, #513	; 0x201
 8012e02:	b298      	uxth	r0, r3
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e0a:	2164      	movs	r1, #100	; 0x64
 8012e0c:	fb01 f303 	mul.w	r3, r1, r3
 8012e10:	4413      	add	r3, r2
 8012e12:	33e2      	adds	r3, #226	; 0xe2
 8012e14:	4602      	mov	r2, r0
 8012e16:	801a      	strh	r2, [r3, #0]
    chassis->motor[i].init_offset_f = 1;
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e1e:	2164      	movs	r1, #100	; 0x64
 8012e20:	fb01 f303 	mul.w	r3, r1, r3
 8012e24:	4413      	add	r3, r2
 8012e26:	33e4      	adds	r3, #228	; 0xe4
 8012e28:	2201      	movs	r2, #1
 8012e2a:	801a      	strh	r2, [r3, #0]

    chassis->ctrl[i].convert_feedback = motor_pid_input_convert;
 8012e2c:	68f9      	ldr	r1, [r7, #12]
 8012e2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e32:	4613      	mov	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	4413      	add	r3, r2
 8012e38:	00db      	lsls	r3, r3, #3
 8012e3a:	440b      	add	r3, r1
 8012e3c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8012e40:	4a76      	ldr	r2, [pc, #472]	; (801301c <chassis_pid_register+0x2b8>)
 8012e42:	601a      	str	r2, [r3, #0]
    pid_struct_init(&chassis->motor_pid[i], 15000, 500, 6.5f, 0.1, 0);
 8012e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e48:	019b      	lsls	r3, r3, #6
 8012e4a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	4413      	add	r3, r2
 8012e52:	ed9f 2a73 	vldr	s4, [pc, #460]	; 8013020 <chassis_pid_register+0x2bc>
 8012e56:	eddf 1a73 	vldr	s3, [pc, #460]	; 8013024 <chassis_pid_register+0x2c0>
 8012e5a:	eeb1 1a0a 	vmov.f32	s2, #26	; 0x40d00000  6.5
 8012e5e:	eddf 0a72 	vldr	s1, [pc, #456]	; 8013028 <chassis_pid_register+0x2c4>
 8012e62:	ed9f 0a72 	vldr	s0, [pc, #456]	; 801302c <chassis_pid_register+0x2c8>
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff fa52 	bl	8012310 <pid_struct_init>
  for (int i = 0; i < 4; i++)
 8012e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e70:	3301      	adds	r3, #1
 8012e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e7a:	2b03      	cmp	r3, #3
 8012e7c:	dda6      	ble.n	8012dcc <chassis_pid_register+0x68>
  }

  chassis->mecanum.param.wheel_perimeter = PERIMETER;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	4a6b      	ldr	r2, [pc, #428]	; (8013030 <chassis_pid_register+0x2cc>)
 8012e82:	62da      	str	r2, [r3, #44]	; 0x2c
  chassis->mecanum.param.wheeltrack = WHEELTRACK;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	4a6b      	ldr	r2, [pc, #428]	; (8013034 <chassis_pid_register+0x2d0>)
 8012e88:	631a      	str	r2, [r3, #48]	; 0x30
  chassis->mecanum.param.wheelbase = WHEELBASE;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	4a6a      	ldr	r2, [pc, #424]	; (8013038 <chassis_pid_register+0x2d4>)
 8012e8e:	635a      	str	r2, [r3, #52]	; 0x34
  chassis->mecanum.param.rotate_x_offset = ROTATE_X_OFFSET;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	4a6a      	ldr	r2, [pc, #424]	; (801303c <chassis_pid_register+0x2d8>)
 8012e94:	639a      	str	r2, [r3, #56]	; 0x38
  chassis->mecanum.param.rotate_y_offset = ROTATE_Y_OFFSET;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f04f 0200 	mov.w	r2, #0
 8012e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  memcpy(&motor_name[0][name_len], "_FR\0", 4);
 8012e9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012ea2:	f107 0214 	add.w	r2, r7, #20
 8012ea6:	4413      	add	r3, r2
 8012ea8:	2204      	movs	r2, #4
 8012eaa:	4965      	ldr	r1, [pc, #404]	; (8013040 <chassis_pid_register+0x2dc>)
 8012eac:	4618      	mov	r0, r3
 8012eae:	f001 fd8f 	bl	80149d0 <memcpy>
  memcpy(&motor_name[1][name_len], "_FL\0", 4);
 8012eb2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012eb6:	f107 0214 	add.w	r2, r7, #20
 8012eba:	3320      	adds	r3, #32
 8012ebc:	4413      	add	r3, r2
 8012ebe:	2204      	movs	r2, #4
 8012ec0:	4960      	ldr	r1, [pc, #384]	; (8013044 <chassis_pid_register+0x2e0>)
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f001 fd84 	bl	80149d0 <memcpy>
  memcpy(&motor_name[2][name_len], "_BL\0", 4);
 8012ec8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012ecc:	f107 0214 	add.w	r2, r7, #20
 8012ed0:	3340      	adds	r3, #64	; 0x40
 8012ed2:	4413      	add	r3, r2
 8012ed4:	2204      	movs	r2, #4
 8012ed6:	495c      	ldr	r1, [pc, #368]	; (8013048 <chassis_pid_register+0x2e4>)
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f001 fd79 	bl	80149d0 <memcpy>
  memcpy(&motor_name[3][name_len], "_BR\0", 4);
 8012ede:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012ee2:	f107 0214 	add.w	r2, r7, #20
 8012ee6:	3360      	adds	r3, #96	; 0x60
 8012ee8:	4413      	add	r3, r2
 8012eea:	2204      	movs	r2, #4
 8012eec:	4957      	ldr	r1, [pc, #348]	; (801304c <chassis_pid_register+0x2e8>)
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f001 fd6e 	bl	80149d0 <memcpy>

  for (int i = 0; i < 4; i++)
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012efa:	e01c      	b.n	8012f36 <chassis_pid_register+0x1d2>
  {
    err = motor_device_register(&(chassis->motor[i]), motor_name[i], 0);
 8012efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f00:	2264      	movs	r2, #100	; 0x64
 8012f02:	fb02 f303 	mul.w	r3, r2, r3
 8012f06:	3388      	adds	r3, #136	; 0x88
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	18d0      	adds	r0, r2, r3
 8012f0c:	f107 0214 	add.w	r2, r7, #20
 8012f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f14:	015b      	lsls	r3, r3, #5
 8012f16:	4413      	add	r3, r2
 8012f18:	2200      	movs	r2, #0
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	f7ff fc7e 	bl	801281c <motor_device_register>
 8012f20:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8012f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d16a      	bne.n	8013002 <chassis_pid_register+0x29e>
  for (int i = 0; i < 4; i++)
 8012f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f30:	3301      	adds	r3, #1
 8012f32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f3a:	2b03      	cmp	r3, #3
 8012f3c:	ddde      	ble.n	8012efc <chassis_pid_register+0x198>
      goto end;
  }

  memcpy(&motor_name[0][name_len], "_CTLFR\0", 7);
 8012f3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012f42:	f107 0214 	add.w	r2, r7, #20
 8012f46:	4413      	add	r3, r2
 8012f48:	2207      	movs	r2, #7
 8012f4a:	4941      	ldr	r1, [pc, #260]	; (8013050 <chassis_pid_register+0x2ec>)
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f001 fd3f 	bl	80149d0 <memcpy>
  memcpy(&motor_name[1][name_len], "_CTLFL\0", 7);
 8012f52:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012f56:	f107 0214 	add.w	r2, r7, #20
 8012f5a:	3320      	adds	r3, #32
 8012f5c:	4413      	add	r3, r2
 8012f5e:	2207      	movs	r2, #7
 8012f60:	493c      	ldr	r1, [pc, #240]	; (8013054 <chassis_pid_register+0x2f0>)
 8012f62:	4618      	mov	r0, r3
 8012f64:	f001 fd34 	bl	80149d0 <memcpy>
  memcpy(&motor_name[2][name_len], "_CTLBL\0", 7);
 8012f68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012f6c:	f107 0214 	add.w	r2, r7, #20
 8012f70:	3340      	adds	r3, #64	; 0x40
 8012f72:	4413      	add	r3, r2
 8012f74:	2207      	movs	r2, #7
 8012f76:	4938      	ldr	r1, [pc, #224]	; (8013058 <chassis_pid_register+0x2f4>)
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f001 fd29 	bl	80149d0 <memcpy>
  memcpy(&motor_name[3][name_len], "_CTLBR\0", 7);
 8012f7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012f82:	f107 0214 	add.w	r2, r7, #20
 8012f86:	3360      	adds	r3, #96	; 0x60
 8012f88:	4413      	add	r3, r2
 8012f8a:	2207      	movs	r2, #7
 8012f8c:	4933      	ldr	r1, [pc, #204]	; (801305c <chassis_pid_register+0x2f8>)
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f001 fd1e 	bl	80149d0 <memcpy>

  for (int i = 0; i < 4; i++)
 8012f94:	2300      	movs	r3, #0
 8012f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012f9a:	e02c      	b.n	8012ff6 <chassis_pid_register+0x292>
  {
    err = pid_controller_register(&(chassis->ctrl[i]), motor_name[i], &(chassis->motor_pid[i]), &(chassis->motor_feedback[i]), 1);
 8012f9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	00db      	lsls	r3, r3, #3
 8012fa4:	4413      	add	r3, r2
 8012fa6:	00db      	lsls	r3, r3, #3
 8012fa8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	18d0      	adds	r0, r2, r3
 8012fb0:	f107 0214 	add.w	r2, r7, #20
 8012fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fb8:	015b      	lsls	r3, r3, #5
 8012fba:	18d1      	adds	r1, r2, r3
 8012fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fc0:	019b      	lsls	r3, r3, #6
 8012fc2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	18d4      	adds	r4, r2, r3
 8012fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fce:	33c6      	adds	r3, #198	; 0xc6
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	9200      	str	r2, [sp, #0]
 8012fda:	4622      	mov	r2, r4
 8012fdc:	f7ff fa8e 	bl	80124fc <pid_controller_register>
 8012fe0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8012fe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10c      	bne.n	8013006 <chassis_pid_register+0x2a2>
  for (int i = 0; i < 4; i++)
 8012fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	ddce      	ble.n	8012f9c <chassis_pid_register+0x238>
      goto end;
  }

  return RM_OK;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e008      	b.n	8013014 <chassis_pid_register+0x2b0>
      goto end;
 8013002:	bf00      	nop
 8013004:	e000      	b.n	8013008 <chassis_pid_register+0x2a4>
      goto end;
 8013006:	bf00      	nop
end:
  object_detach(&(chassis->parent));
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	4618      	mov	r0, r3
 801300c:	f000 fb8a 	bl	8013724 <object_detach>

  return err;
 8013010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 8013014:	4618      	mov	r0, r3
 8013016:	37ac      	adds	r7, #172	; 0xac
 8013018:	46bd      	mov	sp, r7
 801301a:	bd90      	pop	{r4, r7, pc}
 801301c:	080134f9 	.word	0x080134f9
 8013020:	00000000 	.word	0x00000000
 8013024:	3dcccccd 	.word	0x3dcccccd
 8013028:	43fa0000 	.word	0x43fa0000
 801302c:	466a6000 	.word	0x466a6000
 8013030:	43ef0000 	.word	0x43ef0000
 8013034:	43c50000 	.word	0x43c50000
 8013038:	43cf8000 	.word	0x43cf8000
 801303c:	40e00000 	.word	0x40e00000
 8013040:	08016020 	.word	0x08016020
 8013044:	08016028 	.word	0x08016028
 8013048:	08016030 	.word	0x08016030
 801304c:	08016038 	.word	0x08016038
 8013050:	08016040 	.word	0x08016040
 8013054:	08016048 	.word	0x08016048
 8013058:	08016050 	.word	0x08016050
 801305c:	08016058 	.word	0x08016058

08013060 <chassis_execute>:

int32_t chassis_execute(struct chassis *chassis)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b08e      	sub	sp, #56	; 0x38
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  struct mecanum_motor_fdb wheel_fdb[4];

  static uint8_t init_f = 0;
  static float last_time, period;
  
  if (chassis == NULL)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d102      	bne.n	8013074 <chassis_execute+0x14>
    return -RM_INVAL;
 801306e:	f06f 0301 	mvn.w	r3, #1
 8013072:	e0e2      	b.n	801323a <chassis_execute+0x1da>
  
	period  = get_time_ms_us() - last_time;
 8013074:	f7f0 fa82 	bl	800357c <get_time_ms_us>
 8013078:	eeb0 7a40 	vmov.f32	s14, s0
 801307c:	4b71      	ldr	r3, [pc, #452]	; (8013244 <chassis_execute+0x1e4>)
 801307e:	edd3 7a00 	vldr	s15, [r3]
 8013082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013086:	4b70      	ldr	r3, [pc, #448]	; (8013248 <chassis_execute+0x1e8>)
 8013088:	edc3 7a00 	vstr	s15, [r3]

  if(!init_f)
 801308c:	4b6f      	ldr	r3, [pc, #444]	; (801324c <chassis_execute+0x1ec>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d10e      	bne.n	80130b2 <chassis_execute+0x52>
  {
    period = 0;
 8013094:	4b6c      	ldr	r3, [pc, #432]	; (8013248 <chassis_execute+0x1e8>)
 8013096:	f04f 0200 	mov.w	r2, #0
 801309a:	601a      	str	r2, [r3, #0]
		last_time = get_time_ms_us();
 801309c:	f7f0 fa6e 	bl	800357c <get_time_ms_us>
 80130a0:	eef0 7a40 	vmov.f32	s15, s0
 80130a4:	4b67      	ldr	r3, [pc, #412]	; (8013244 <chassis_execute+0x1e4>)
 80130a6:	edc3 7a00 	vstr	s15, [r3]
    init_f = 1;
 80130aa:	4b68      	ldr	r3, [pc, #416]	; (801324c <chassis_execute+0x1ec>)
 80130ac:	2201      	movs	r2, #1
 80130ae:	701a      	strb	r2, [r3, #0]
 80130b0:	e042      	b.n	8013138 <chassis_execute+0xd8>
  }
  else
  {
    last_time = get_time_ms_us();
 80130b2:	f7f0 fa63 	bl	800357c <get_time_ms_us>
 80130b6:	eef0 7a40 	vmov.f32	s15, s0
 80130ba:	4b62      	ldr	r3, [pc, #392]	; (8013244 <chassis_execute+0x1e4>)
 80130bc:	edc3 7a00 	vstr	s15, [r3]

    chassis->mecanum.speed.vx += chassis->acc.ax/1000.0f*period;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80130cc:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8013250 <chassis_execute+0x1f0>
 80130d0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80130d4:	4b5c      	ldr	r3, [pc, #368]	; (8013248 <chassis_execute+0x1e8>)
 80130d6:	edd3 7a00 	vldr	s15, [r3]
 80130da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    chassis->mecanum.speed.vy += chassis->acc.ay/1000.0f*period;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80130f4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8013250 <chassis_execute+0x1f0>
 80130f8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80130fc:	4b52      	ldr	r3, [pc, #328]	; (8013248 <chassis_execute+0x1e8>)
 80130fe:	edd3 7a00 	vldr	s15, [r3]
 8013102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    chassis->mecanum.speed.vw += chassis->acc.wz/1000.0f*period;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 801311c:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 8013250 <chassis_execute+0x1f0>
 8013120:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8013124:	4b48      	ldr	r3, [pc, #288]	; (8013248 <chassis_execute+0x1e8>)
 8013126:	edd3 7a00 	vldr	s15, [r3]
 801312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  }
  
  mecanum_calculate(&(chassis->mecanum));
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	332c      	adds	r3, #44	; 0x2c
 801313c:	4618      	mov	r0, r3
 801313e:	f7fe fb35 	bl	80117ac <mecanum_calculate>

  for (int i = 0; i < 4; i++)
 8013142:	2300      	movs	r3, #0
 8013144:	637b      	str	r3, [r7, #52]	; 0x34
 8013146:	e06c      	b.n	8013222 <chassis_execute+0x1c2>
  {
    pdata = motor_device_get_data(&(chassis->motor[i]));
 8013148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314a:	2264      	movs	r2, #100	; 0x64
 801314c:	fb02 f303 	mul.w	r3, r2, r3
 8013150:	3388      	adds	r3, #136	; 0x88
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	4413      	add	r3, r2
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff fbbc 	bl	80128d4 <motor_device_get_data>
 801315c:	6338      	str	r0, [r7, #48]	; 0x30

    wheel_fdb[i].total_ecd = pdata->total_ecd;
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	ee07 3a90 	vmov	s15, r3
 8013166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801316c:	00db      	lsls	r3, r3, #3
 801316e:	3338      	adds	r3, #56	; 0x38
 8013170:	443b      	add	r3, r7
 8013172:	3b2c      	subs	r3, #44	; 0x2c
 8013174:	edc3 7a00 	vstr	s15, [r3]
    wheel_fdb[i].speed_rpm = pdata->speed_rpm;
 8013178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801317e:	ee07 3a90 	vmov	s15, r3
 8013182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013188:	00db      	lsls	r3, r3, #3
 801318a:	3338      	adds	r3, #56	; 0x38
 801318c:	443b      	add	r3, r7
 801318e:	3b28      	subs	r3, #40	; 0x28
 8013190:	edc3 7a00 	vstr	s15, [r3]

    controller_set_input(&chassis->ctrl[i], chassis->mecanum.wheel_rpm[i]);
 8013194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013196:	4613      	mov	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	18d1      	adds	r1, r2, r3
 80131a6:	687a      	ldr	r2, [r7, #4]
 80131a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131aa:	331a      	adds	r3, #26
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	4413      	add	r3, r2
 80131b0:	3304      	adds	r3, #4
 80131b2:	edd3 7a00 	vldr	s15, [r3]
 80131b6:	eeb0 0a67 	vmov.f32	s0, s15
 80131ba:	4608      	mov	r0, r1
 80131bc:	f7ff f953 	bl	8012466 <controller_set_input>
    controller_execute(&chassis->ctrl[i], (void *)pdata);
 80131c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131c2:	4613      	mov	r3, r2
 80131c4:	00db      	lsls	r3, r3, #3
 80131c6:	4413      	add	r3, r2
 80131c8:	00db      	lsls	r3, r3, #3
 80131ca:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	4413      	add	r3, r2
 80131d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff f90d 	bl	80123f4 <controller_execute>
    controller_get_output(&chassis->ctrl[i], &motor_out);
 80131da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131dc:	4613      	mov	r3, r2
 80131de:	00db      	lsls	r3, r3, #3
 80131e0:	4413      	add	r3, r2
 80131e2:	00db      	lsls	r3, r3, #3
 80131e4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	4413      	add	r3, r2
 80131ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7ff f94c 	bl	8012490 <controller_get_output>

    motor_device_set_current(&chassis->motor[i], (int16_t)motor_out);
 80131f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fa:	2264      	movs	r2, #100	; 0x64
 80131fc:	fb02 f303 	mul.w	r3, r2, r3
 8013200:	3388      	adds	r3, #136	; 0x88
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	4413      	add	r3, r2
 8013206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801320a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801320e:	ee17 2a90 	vmov	r2, s15
 8013212:	b212      	sxth	r2, r2
 8013214:	4611      	mov	r1, r2
 8013216:	4618      	mov	r0, r3
 8013218:	f7ff fb6d 	bl	80128f6 <motor_device_set_current>
  for (int i = 0; i < 4; i++)
 801321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801321e:	3301      	adds	r3, #1
 8013220:	637b      	str	r3, [r7, #52]	; 0x34
 8013222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013224:	2b03      	cmp	r3, #3
 8013226:	dd8f      	ble.n	8013148 <chassis_execute+0xe8>
  }

  mecanum_position_measure(&(chassis->mecanum), wheel_fdb);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	332c      	adds	r3, #44	; 0x2c
 801322c:	f107 020c 	add.w	r2, r7, #12
 8013230:	4611      	mov	r1, r2
 8013232:	4618      	mov	r0, r3
 8013234:	f7fe fc84 	bl	8011b40 <mecanum_position_measure>

  return RM_OK;
 8013238:	2300      	movs	r3, #0
}
 801323a:	4618      	mov	r0, r3
 801323c:	3738      	adds	r7, #56	; 0x38
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	20008510 	.word	0x20008510
 8013248:	20008514 	.word	0x20008514
 801324c:	20008518 	.word	0x20008518
 8013250:	447a0000 	.word	0x447a0000

08013254 <chassis_set_speed>:
  chassis->mecanum.gyro.yaw_gyro_rate = yaw_rate;
  return RM_OK;
}

int32_t chassis_set_speed(struct chassis *chassis, float vx, float vy, float vw)
{
 8013254:	b480      	push	{r7}
 8013256:	b085      	sub	sp, #20
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	ed87 0a02 	vstr	s0, [r7, #8]
 8013260:	edc7 0a01 	vstr	s1, [r7, #4]
 8013264:	ed87 1a00 	vstr	s2, [r7]
  if (chassis == NULL)
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d102      	bne.n	8013274 <chassis_set_speed+0x20>
    return -RM_INVAL;
 801326e:	f06f 0301 	mvn.w	r3, #1
 8013272:	e009      	b.n	8013288 <chassis_set_speed+0x34>
  chassis->mecanum.speed.vx = vx;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	641a      	str	r2, [r3, #64]	; 0x40
  chassis->mecanum.speed.vy = vy;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	645a      	str	r2, [r3, #68]	; 0x44
  chassis->mecanum.speed.vw = vw;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	683a      	ldr	r2, [r7, #0]
 8013284:	649a      	str	r2, [r3, #72]	; 0x48
  return RM_OK;
 8013286:	2300      	movs	r3, #0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3714      	adds	r7, #20
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <chassis_set_acc>:

int32_t chassis_set_acc(struct chassis *chassis, float ax, float ay, float wz)
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	ed87 0a02 	vstr	s0, [r7, #8]
 80132a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80132a4:	ed87 1a00 	vstr	s2, [r7]
  if (chassis == NULL)
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d102      	bne.n	80132b4 <chassis_set_acc+0x20>
    return -RM_INVAL;
 80132ae:	f06f 0301 	mvn.w	r3, #1
 80132b2:	e00b      	b.n	80132cc <chassis_set_acc+0x38>
  chassis->acc.ax = ax;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	67da      	str	r2, [r3, #124]	; 0x7c
  chassis->acc.ay = ay;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  chassis->acc.wz = wz;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  return RM_OK;
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3714      	adds	r7, #20
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <chassis_set_offset>:
  chassis->mecanum.speed.vy = vy;
  return RM_OK;
}

int32_t chassis_set_offset(struct chassis *chassis, float offset_x, float offset_y)
{
 80132d8:	b480      	push	{r7}
 80132da:	b085      	sub	sp, #20
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80132e4:	edc7 0a01 	vstr	s1, [r7, #4]
  if (chassis == NULL)
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d102      	bne.n	80132f4 <chassis_set_offset+0x1c>
    return -RM_INVAL;
 80132ee:	f06f 0301 	mvn.w	r3, #1
 80132f2:	e006      	b.n	8013302 <chassis_set_offset+0x2a>

  chassis->mecanum.param.rotate_x_offset = offset_x;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	639a      	str	r2, [r3, #56]	; 0x38
  chassis->mecanum.param.rotate_y_offset = offset_y;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK;
 8013300:	2300      	movs	r3, #0
}
 8013302:	4618      	mov	r0, r3
 8013304:	3714      	adds	r7, #20
 8013306:	46bd      	mov	sp, r7
 8013308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330c:	4770      	bx	lr
	...

08013310 <chassis_get_info>:

int32_t chassis_get_info(struct chassis *chassis, struct chassis_info *info)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	6039      	str	r1, [r7, #0]
  if (chassis == NULL)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d101      	bne.n	8013324 <chassis_get_info+0x14>
    return NULL;
 8013320:	2300      	movs	r3, #0
 8013322:	e0ab      	b.n	801347c <chassis_get_info+0x16c>

  memcpy(info, &(chassis->mecanum.position), sizeof(struct mecanum_position));
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	334c      	adds	r3, #76	; 0x4c
 8013328:	2218      	movs	r2, #24
 801332a:	4619      	mov	r1, r3
 801332c:	6838      	ldr	r0, [r7, #0]
 801332e:	f001 fb4f 	bl	80149d0 <memcpy>
  ANGLE_LIMIT_360(info->angle_deg, chassis->mecanum.position.angle_deg);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801333e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013346:	ee77 7a67 	vsub.f32	s15, s14, s15
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	edc3 7a05 	vstr	s15, [r3, #20]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	ed93 7a05 	vldr	s14, [r3, #20]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801335c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013360:	ee17 3a90 	vmov	r3, s15
 8013364:	4a47      	ldr	r2, [pc, #284]	; (8013484 <chassis_get_info+0x174>)
 8013366:	fb82 1203 	smull	r1, r2, r2, r3
 801336a:	441a      	add	r2, r3
 801336c:	1211      	asrs	r1, r2, #8
 801336e:	17da      	asrs	r2, r3, #31
 8013370:	1a8a      	subs	r2, r1, r2
 8013372:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8013376:	fb01 f202 	mul.w	r2, r1, r2
 801337a:	1a9a      	subs	r2, r3, r2
 801337c:	ee07 2a90 	vmov	s15, r2
 8013380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360_TO_180(info->angle_deg);
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	edd3 7a05 	vldr	s15, [r3, #20]
 8013394:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8013488 <chassis_get_info+0x178>
 8013398:	eef4 7ac7 	vcmpe.f32	s15, s14
 801339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a0:	dd09      	ble.n	80133b6 <chassis_get_info+0xa6>
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80133a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801348c <chassis_get_info+0x17c>
 80133ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360(info->yaw_gyro_angle, chassis->mecanum.gyro.yaw_gyro_angle);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80133c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	edc3 7a06 	vstr	s15, [r3, #24]
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80133e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133e4:	ee17 3a90 	vmov	r3, s15
 80133e8:	4a26      	ldr	r2, [pc, #152]	; (8013484 <chassis_get_info+0x174>)
 80133ea:	fb82 1203 	smull	r1, r2, r2, r3
 80133ee:	441a      	add	r2, r3
 80133f0:	1211      	asrs	r1, r2, #8
 80133f2:	17da      	asrs	r2, r3, #31
 80133f4:	1a8a      	subs	r2, r1, r2
 80133f6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80133fa:	fb01 f202 	mul.w	r2, r1, r2
 80133fe:	1a9a      	subs	r2, r3, r2
 8013400:	ee07 2a90 	vmov	s15, r2
 8013404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013408:	ee77 7a27 	vadd.f32	s15, s14, s15
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	edc3 7a06 	vstr	s15, [r3, #24]
  ANGLE_LIMIT_360_TO_180(info->yaw_gyro_angle);
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	edd3 7a06 	vldr	s15, [r3, #24]
 8013418:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8013488 <chassis_get_info+0x178>
 801341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013424:	dd09      	ble.n	801343a <chassis_get_info+0x12a>
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	edd3 7a06 	vldr	s15, [r3, #24]
 801342c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801348c <chassis_get_info+0x17c>
 8013430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	edc3 7a06 	vstr	s15, [r3, #24]
  info->yaw_gyro_rate = chassis->mecanum.gyro.yaw_gyro_rate;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	61da      	str	r2, [r3, #28]

  for (int i = 0; i < 4; i++)
 8013442:	2300      	movs	r3, #0
 8013444:	60fb      	str	r3, [r7, #12]
 8013446:	e015      	b.n	8013474 <chassis_get_info+0x164>
  {
    info->wheel_rpm[i] = chassis->mecanum.wheel_rpm[i] * MOTOR_DECELE_RATIO;
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	331a      	adds	r3, #26
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	3304      	adds	r3, #4
 8013454:	edd3 7a00 	vldr	s15, [r3]
 8013458:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013490 <chassis_get_info+0x180>
 801345c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	3308      	adds	r3, #8
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	3301      	adds	r3, #1
 8013472:	60fb      	str	r3, [r7, #12]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b03      	cmp	r3, #3
 8013478:	dde6      	ble.n	8013448 <chassis_get_info+0x138>
  }

  return RM_OK;
 801347a:	2300      	movs	r3, #0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	b60b60b7 	.word	0xb60b60b7
 8013488:	43340000 	.word	0x43340000
 801348c:	43b40000 	.word	0x43b40000
 8013490:	3d579436 	.word	0x3d579436

08013494 <chassis_find>:

chassis_t chassis_find(const char *name)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b084      	sub	sp, #16
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 801349c:	2103      	movs	r1, #3
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 f8f4 	bl	801368c <object_find>
 80134a4:	60f8      	str	r0, [r7, #12]

  return (chassis_t)object;
 80134a6:	68fb      	ldr	r3, [r7, #12]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <chassis_disable>:

  return RM_OK;
}

int32_t chassis_disable(struct chassis *chassis)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d102      	bne.n	80134c4 <chassis_disable+0x14>
    return -RM_INVAL;
 80134be:	f06f 0301 	mvn.w	r3, #1
 80134c2:	e015      	b.n	80134f0 <chassis_disable+0x40>

  for (int i = 0; i < 4; i++)
 80134c4:	2300      	movs	r3, #0
 80134c6:	60fb      	str	r3, [r7, #12]
 80134c8:	e00e      	b.n	80134e8 <chassis_disable+0x38>
  {
    controller_disable(&(chassis->ctrl[i])); 
 80134ca:	68fa      	ldr	r2, [r7, #12]
 80134cc:	4613      	mov	r3, r2
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	4413      	add	r3, r2
 80134d2:	00db      	lsls	r3, r3, #3
 80134d4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	4413      	add	r3, r2
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fe fff1 	bl	80124c4 <controller_disable>
  for (int i = 0; i < 4; i++)
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	3301      	adds	r3, #1
 80134e6:	60fb      	str	r3, [r7, #12]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2b03      	cmp	r3, #3
 80134ec:	dded      	ble.n	80134ca <chassis_disable+0x1a>
  }

  return RM_OK;
 80134ee:	2300      	movs	r3, #0
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3710      	adds	r7, #16
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <motor_pid_input_convert>:

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013506:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013512:	ee07 3a90 	vmov	s15, r3
 8013516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3714      	adds	r7, #20
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr

0801352e <__list_add>:
{
 801352e:	b480      	push	{r7}
 8013530:	b085      	sub	sp, #20
 8013532:	af00      	add	r7, sp, #0
 8013534:	60f8      	str	r0, [r7, #12]
 8013536:	60b9      	str	r1, [r7, #8]
 8013538:	607a      	str	r2, [r7, #4]
  next->prev = new;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	68fa      	ldr	r2, [r7, #12]
 801353e:	605a      	str	r2, [r3, #4]
  new->next = next;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	605a      	str	r2, [r3, #4]
  prev->next = new;
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	601a      	str	r2, [r3, #0]
}
 8013552:	bf00      	nop
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355c:	4770      	bx	lr

0801355e <list_add>:
{
 801355e:	b580      	push	{r7, lr}
 8013560:	b082      	sub	sp, #8
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
 8013566:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	461a      	mov	r2, r3
 801356e:	6839      	ldr	r1, [r7, #0]
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff ffdc 	bl	801352e <__list_add>
}
 8013576:	bf00      	nop
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <__list_del>:
{
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	605a      	str	r2, [r3, #4]
  prev->next = next;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	601a      	str	r2, [r3, #0]
}
 8013594:	bf00      	nop
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <list_del>:
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	685a      	ldr	r2, [r3, #4]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4619      	mov	r1, r3
 80135b2:	4610      	mov	r0, r2
 80135b4:	f7ff ffe3 	bl	801357e <__list_del>
}
 80135b8:	bf00      	nop
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <object_get_information>:
        {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *
object_get_information(enum object_class_type type)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	4603      	mov	r3, r0
 80135c8:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 80135ca:	2300      	movs	r3, #0
 80135cc:	60fb      	str	r3, [r7, #12]
 80135ce:	e015      	b.n	80135fc <object_get_information+0x3c>
    if (object_container[index].type == type)
 80135d0:	490f      	ldr	r1, [pc, #60]	; (8013610 <object_get_information+0x50>)
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	4613      	mov	r3, r2
 80135d6:	005b      	lsls	r3, r3, #1
 80135d8:	4413      	add	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	440b      	add	r3, r1
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	79fa      	ldrb	r2, [r7, #7]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d107      	bne.n	80135f6 <object_get_information+0x36>
      return &object_container[index];
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	4613      	mov	r3, r2
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	4413      	add	r3, r2
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4a07      	ldr	r2, [pc, #28]	; (8013610 <object_get_information+0x50>)
 80135f2:	4413      	add	r3, r2
 80135f4:	e006      	b.n	8013604 <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	3301      	adds	r3, #1
 80135fa:	60fb      	str	r3, [r7, #12]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2b05      	cmp	r3, #5
 8013600:	dde6      	ble.n	80135d0 <object_get_information+0x10>

  return NULL;
 8013602:	2300      	movs	r3, #0
}
 8013604:	4618      	mov	r0, r3
 8013606:	3714      	adds	r7, #20
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	20000104 	.word	0x20000104

08013614 <object_init>:

int32_t object_init(struct object *object,
                    enum object_class_type type,
                    const char *name)
{
 8013614:	b590      	push	{r4, r7, lr}
 8013616:	b089      	sub	sp, #36	; 0x24
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	460b      	mov	r3, r1
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 8013622:	7afb      	ldrb	r3, [r7, #11]
 8013624:	4618      	mov	r0, r3
 8013626:	f7ff ffcb 	bl	80135c0 <object_get_information>
 801362a:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	7afa      	ldrb	r2, [r7, #11]
 8013630:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1)
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f7ec fddb 	bl	80001f0 <strlen>
 801363a:	4603      	mov	r3, r0
 801363c:	2b1f      	cmp	r3, #31
 801363e:	d902      	bls.n	8013646 <object_init+0x32>
  {
    return -1;
 8013640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013644:	e01e      	b.n	8013684 <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2220      	movs	r2, #32
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	f001 f927 	bl	80148a0 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2200      	movs	r2, #0
 8013656:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013658:	f3ef 8310 	mrs	r3, PRIMASK
 801365c:	617b      	str	r3, [r7, #20]
  return(result);
 801365e:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 8013660:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013662:	b672      	cpsid	i
}
 8013664:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	3304      	adds	r3, #4
 8013670:	4619      	mov	r1, r3
 8013672:	4610      	mov	r0, r2
 8013674:	f7ff ff73 	bl	801355e <list_add>
 8013678:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	f383 8810 	msr	PRIMASK, r3
}
 8013680:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 8013682:	2300      	movs	r3, #0
}
 8013684:	4618      	mov	r0, r3
 8013686:	3724      	adds	r7, #36	; 0x24
 8013688:	46bd      	mov	sp, r7
 801368a:	bd90      	pop	{r4, r7, pc}

0801368c <object_find>:

object_t object_find(const char *name, enum object_class_type type)
{
 801368c:	b590      	push	{r4, r7, lr}
 801368e:	b089      	sub	sp, #36	; 0x24
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	460b      	mov	r3, r1
 8013696:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 8013698:	2300      	movs	r3, #0
 801369a:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 801369c:	2300      	movs	r3, #0
 801369e:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 80136a0:	2300      	movs	r3, #0
 80136a2:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <object_find+0x24>
 80136aa:	78fb      	ldrb	r3, [r7, #3]
 80136ac:	2b05      	cmp	r3, #5
 80136ae:	d901      	bls.n	80136b4 <object_find+0x28>
    return NULL;
 80136b0:	2300      	movs	r3, #0
 80136b2:	e033      	b.n	801371c <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80136b4:	f3ef 8310 	mrs	r3, PRIMASK
 80136b8:	613b      	str	r3, [r7, #16]
  return(result);
 80136ba:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 80136bc:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80136be:	b672      	cpsid	i
}
 80136c0:	bf00      	nop

  /* try to find object */
  if (information == NULL)
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d104      	bne.n	80136d2 <object_find+0x46>
  {
    information = object_get_information(type);
 80136c8:	78fb      	ldrb	r3, [r7, #3]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff ff78 	bl	80135c0 <object_get_information>
 80136d0:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	61bb      	str	r3, [r7, #24]
 80136d8:	e015      	b.n	8013706 <object_find+0x7a>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	3b24      	subs	r3, #36	; 0x24
 80136de:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0)
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2220      	movs	r2, #32
 80136e4:	6879      	ldr	r1, [r7, #4]
 80136e6:	4618      	mov	r0, r3
 80136e8:	f001 f8c8 	bl	801487c <strncmp>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d106      	bne.n	8013700 <object_find+0x74>
 80136f2:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f383 8810 	msr	PRIMASK, r3
}
 80136fa:	bf00      	nop
    {
      /* leave critical */
      exit_critical();

      return object;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	e00d      	b.n	801371c <object_find+0x90>
       node = node->next)
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	61bb      	str	r3, [r7, #24]
       node != &(information->object_list);
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	3304      	adds	r3, #4
 801370a:	69ba      	ldr	r2, [r7, #24]
 801370c:	429a      	cmp	r2, r3
 801370e:	d1e4      	bne.n	80136da <object_find+0x4e>
 8013710:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	f383 8810 	msr	PRIMASK, r3
}
 8013718:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 801371a:	2300      	movs	r3, #0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3724      	adds	r7, #36	; 0x24
 8013720:	46bd      	mov	sp, r7
 8013722:	bd90      	pop	{r4, r7, pc}

08013724 <object_detach>:

void object_detach(object_t object)
{
 8013724:	b590      	push	{r4, r7, lr}
 8013726:	b085      	sub	sp, #20
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2206      	movs	r2, #6
 8013730:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013734:	f3ef 8310 	mrs	r3, PRIMASK
 8013738:	60bb      	str	r3, [r7, #8]
  return(result);
 801373a:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 801373c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801373e:	b672      	cpsid	i
}
 8013740:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	3324      	adds	r3, #36	; 0x24
 8013746:	4618      	mov	r0, r3
 8013748:	f7ff ff2a 	bl	80135a0 <list_del>
 801374c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f383 8810 	msr	PRIMASK, r3
}
 8013754:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 8013756:	bf00      	nop
 8013758:	3714      	adds	r7, #20
 801375a:	46bd      	mov	sp, r7
 801375c:	bd90      	pop	{r4, r7, pc}

0801375e <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 801375e:	b480      	push	{r7}
 8013760:	b085      	sub	sp, #20
 8013762:	af00      	add	r7, sp, #0
 8013764:	60f8      	str	r0, [r7, #12]
 8013766:	60b9      	str	r1, [r7, #8]
 8013768:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	68ba      	ldr	r2, [r7, #8]
 801376e:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	3b01      	subs	r3, #1
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	441a      	add	r2, r3
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	68ba      	ldr	r2, [r7, #8]
 8013792:	615a      	str	r2, [r3, #20]

  return (0);
 8013794:	2300      	movs	r3, #0
}
 8013796:	4618      	mov	r0, r3
 8013798:	3714      	adds	r7, #20
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr

080137a2 <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 80137a2:	b590      	push	{r4, r7, lr}
 80137a4:	b08b      	sub	sp, #44	; 0x2c
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	60f8      	str	r0, [r7, #12]
 80137aa:	60b9      	str	r1, [r7, #8]
 80137ac:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80137ae:	f3ef 8310 	mrs	r3, PRIMASK
 80137b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80137b4:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80137b6:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80137b8:	b672      	cpsid	i
}
 80137ba:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d05e      	beq.n	8013880 <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d05c      	beq.n	8013884 <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	695a      	ldr	r2, [r3, #20]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d903      	bls.n	80137de <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	689b      	ldr	r3, [r3, #8]
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	4293      	cmp	r3, r2
 80137e6:	bfa8      	it	ge
 80137e8:	4613      	movge	r3, r2
 80137ea:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	685a      	ldr	r2, [r3, #4]
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	695b      	ldr	r3, [r3, #20]
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	3301      	adds	r3, #1
 80137f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 80137fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	429a      	cmp	r2, r3
 8013800:	db0f      	blt.n	8013822 <fifo_s_puts+0x80>
  {
    len_to_end = len;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801380c:	68b9      	ldr	r1, [r7, #8]
 801380e:	4618      	mov	r0, r3
 8013810:	f001 f8de 	bl	80149d0 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	695a      	ldr	r2, [r3, #20]
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	441a      	add	r2, r3
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	615a      	str	r2, [r3, #20]
 8013820:	e019      	b.n	8013856 <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013826:	1ad3      	subs	r3, r2, r3
 8013828:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	695b      	ldr	r3, [r3, #20]
 801382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013830:	68b9      	ldr	r1, [r7, #8]
 8013832:	4618      	mov	r0, r3
 8013834:	f001 f8cc 	bl	80149d0 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	6818      	ldr	r0, [r3, #0]
 801383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	4413      	add	r3, r2
 8013842:	6a3a      	ldr	r2, [r7, #32]
 8013844:	4619      	mov	r1, r3
 8013846:	f001 f8c3 	bl	80149d0 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	441a      	add	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	689a      	ldr	r2, [r3, #8]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	1ad2      	subs	r2, r2, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	68da      	ldr	r2, [r3, #12]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	441a      	add	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	60da      	str	r2, [r3, #12]
  retval = len;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	61fb      	str	r3, [r7, #28]
 8013872:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	f383 8810 	msr	PRIMASK, r3
}
 801387a:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	e009      	b.n	8013894 <fifo_s_puts+0xf2>
      goto end;
 8013880:	bf00      	nop
 8013882:	e000      	b.n	8013886 <fifo_s_puts+0xe4>
      goto end;
 8013884:	bf00      	nop
 8013886:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	f383 8810 	msr	PRIMASK, r3
}
 801388e:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013894:	4618      	mov	r0, r3
 8013896:	372c      	adds	r7, #44	; 0x2c
 8013898:	46bd      	mov	sp, r7
 801389a:	bd90      	pop	{r4, r7, pc}

0801389c <fifo_s_puts_noprotect>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts_noprotect(fifo_s_t *p_fifo, char *p_source, int len)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b088      	sub	sp, #32
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_source)
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d102      	bne.n	80138b4 <fifo_s_puts_noprotect+0x18>
    return -1;
 80138ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138b2:	e05a      	b.n	801396a <fifo_s_puts_noprotect+0xce>

  if (0 == p_fifo->free_num)
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d101      	bne.n	80138c0 <fifo_s_puts_noprotect+0x24>
    return 0;
 80138bc:	2300      	movs	r3, #0
 80138be:	e054      	b.n	801396a <fifo_s_puts_noprotect+0xce>

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	695a      	ldr	r2, [r3, #20]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d903      	bls.n	80138d4 <fifo_s_puts_noprotect+0x38>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	689b      	ldr	r3, [r3, #8]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	4293      	cmp	r3, r2
 80138dc:	bfa8      	it	ge
 80138de:	4613      	movge	r3, r2
 80138e0:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	695b      	ldr	r3, [r3, #20]
 80138ea:	1ad3      	subs	r3, r2, r3
 80138ec:	3301      	adds	r3, #1
 80138ee:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 80138f0:	69fa      	ldr	r2, [r7, #28]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	db0f      	blt.n	8013918 <fifo_s_puts_noprotect+0x7c>
  {
    len_to_end = len;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	61fb      	str	r3, [r7, #28]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	695b      	ldr	r3, [r3, #20]
 8013900:	69fa      	ldr	r2, [r7, #28]
 8013902:	68b9      	ldr	r1, [r7, #8]
 8013904:	4618      	mov	r0, r3
 8013906:	f001 f863 	bl	80149d0 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	695a      	ldr	r2, [r3, #20]
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	441a      	add	r2, r3
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	615a      	str	r2, [r3, #20]
 8013916:	e019      	b.n	801394c <fifo_s_puts_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	61bb      	str	r3, [r7, #24]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	695b      	ldr	r3, [r3, #20]
 8013924:	69fa      	ldr	r2, [r7, #28]
 8013926:	68b9      	ldr	r1, [r7, #8]
 8013928:	4618      	mov	r0, r3
 801392a:	f001 f851 	bl	80149d0 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	6818      	ldr	r0, [r3, #0]
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	68ba      	ldr	r2, [r7, #8]
 8013936:	4413      	add	r3, r2
 8013938:	69ba      	ldr	r2, [r7, #24]
 801393a:	4619      	mov	r1, r3
 801393c:	f001 f848 	bl	80149d0 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	441a      	add	r2, r3
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	689a      	ldr	r2, [r3, #8]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	1ad2      	subs	r2, r2, r3
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	68da      	ldr	r2, [r3, #12]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	441a      	add	r2, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	60da      	str	r2, [r3, #12]
  retval = len;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	617b      	str	r3, [r7, #20]

  return retval;
 8013968:	697b      	ldr	r3, [r7, #20]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3720      	adds	r7, #32
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 8013972:	b490      	push	{r4, r7}
 8013974:	b086      	sub	sp, #24
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 801397a:	2300      	movs	r3, #0
 801397c:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801397e:	f3ef 8310 	mrs	r3, PRIMASK
 8013982:	613b      	str	r3, [r7, #16]
  return(result);
 8013984:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013986:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013988:	b672      	cpsid	i
}
 801398a:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	691a      	ldr	r2, [r3, #16]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	429a      	cmp	r2, r3
 8013996:	d903      	bls.n	80139a0 <fifo_s_get+0x2e>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	691b      	ldr	r3, [r3, #16]
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	691b      	ldr	r3, [r3, #16]
 80139ac:	1c5a      	adds	r2, r3, #1
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	1c5a      	adds	r2, r3, #1
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	68db      	ldr	r3, [r3, #12]
 80139c0:	1e5a      	subs	r2, r3, #1
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	60da      	str	r2, [r3, #12]
 80139c6:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f383 8810 	msr	PRIMASK, r3
}
 80139ce:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 80139d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3718      	adds	r7, #24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bc90      	pop	{r4, r7}
 80139da:	4770      	bx	lr

080139dc <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 80139dc:	b590      	push	{r4, r7, lr}
 80139de:	b08b      	sub	sp, #44	; 0x2c
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80139e8:	f3ef 8310 	mrs	r3, PRIMASK
 80139ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80139ee:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80139f0:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80139f2:	b672      	cpsid	i
}
 80139f4:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d05e      	beq.n	8013aba <fifo_s_gets+0xde>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d05c      	beq.n	8013abe <fifo_s_gets+0xe2>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	691a      	ldr	r2, [r3, #16]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d903      	bls.n	8013a18 <fifo_s_gets+0x3c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	bfa8      	it	ge
 8013a22:	4613      	movge	r3, r2
 8013a24:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	3301      	adds	r3, #1
 8013a32:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 8013a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	db0f      	blt.n	8013a5c <fifo_s_gets+0x80>
  {
    len_to_end = len;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	691b      	ldr	r3, [r3, #16]
 8013a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a46:	4619      	mov	r1, r3
 8013a48:	68b8      	ldr	r0, [r7, #8]
 8013a4a:	f000 ffc1 	bl	80149d0 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	691a      	ldr	r2, [r3, #16]
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	441a      	add	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	611a      	str	r2, [r3, #16]
 8013a5a:	e019      	b.n	8013a90 <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	691b      	ldr	r3, [r3, #16]
 8013a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	68b8      	ldr	r0, [r7, #8]
 8013a6e:	f000 ffaf 	bl	80149d0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a74:	68ba      	ldr	r2, [r7, #8]
 8013a76:	18d0      	adds	r0, r2, r3
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	6a3a      	ldr	r2, [r7, #32]
 8013a7e:	4619      	mov	r1, r3
 8013a80:	f000 ffa6 	bl	80149d0 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	6a3b      	ldr	r3, [r7, #32]
 8013a8a:	441a      	add	r2, r3
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	689a      	ldr	r2, [r3, #8]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	441a      	add	r2, r3
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	68da      	ldr	r2, [r3, #12]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	1ad2      	subs	r2, r2, r3
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	60da      	str	r2, [r3, #12]
  retval = len;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	61fb      	str	r3, [r7, #28]
 8013aac:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	f383 8810 	msr	PRIMASK, r3
}
 8013ab4:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	e009      	b.n	8013ace <fifo_s_gets+0xf2>
    goto end;
 8013aba:	bf00      	nop
 8013abc:	e000      	b.n	8013ac0 <fifo_s_gets+0xe4>
    goto end;
 8013abe:	bf00      	nop
 8013ac0:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	f383 8810 	msr	PRIMASK, r3
}
 8013ac8:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	372c      	adds	r7, #44	; 0x2c
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd90      	pop	{r4, r7, pc}

08013ad6 <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 8013ad6:	b580      	push	{r7, lr}
 8013ad8:	b088      	sub	sp, #32
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	60f8      	str	r0, [r7, #12]
 8013ade:	60b9      	str	r1, [r7, #8]
 8013ae0:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d102      	bne.n	8013aee <fifo_s_gets_noprotect+0x18>
    return -1;
 8013ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013aec:	e05a      	b.n	8013ba4 <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d101      	bne.n	8013afa <fifo_s_gets_noprotect+0x24>
    return 0;
 8013af6:	2300      	movs	r3, #0
 8013af8:	e054      	b.n	8013ba4 <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	691a      	ldr	r2, [r3, #16]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d903      	bls.n	8013b0e <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	4293      	cmp	r3, r2
 8013b16:	bfa8      	it	ge
 8013b18:	4613      	movge	r3, r2
 8013b1a:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	685a      	ldr	r2, [r3, #4]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	691b      	ldr	r3, [r3, #16]
 8013b24:	1ad3      	subs	r3, r2, r3
 8013b26:	3301      	adds	r3, #1
 8013b28:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 8013b2a:	69fa      	ldr	r2, [r7, #28]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	db0f      	blt.n	8013b52 <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	691b      	ldr	r3, [r3, #16]
 8013b3a:	69fa      	ldr	r2, [r7, #28]
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	68b8      	ldr	r0, [r7, #8]
 8013b40:	f000 ff46 	bl	80149d0 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	691a      	ldr	r2, [r3, #16]
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	441a      	add	r2, r3
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	611a      	str	r2, [r3, #16]
 8013b50:	e019      	b.n	8013b86 <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	1ad3      	subs	r3, r2, r3
 8013b58:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	691b      	ldr	r3, [r3, #16]
 8013b5e:	69fa      	ldr	r2, [r7, #28]
 8013b60:	4619      	mov	r1, r3
 8013b62:	68b8      	ldr	r0, [r7, #8]
 8013b64:	f000 ff34 	bl	80149d0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	68ba      	ldr	r2, [r7, #8]
 8013b6c:	18d0      	adds	r0, r2, r3
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	69ba      	ldr	r2, [r7, #24]
 8013b74:	4619      	mov	r1, r3
 8013b76:	f000 ff2b 	bl	80149d0 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	441a      	add	r2, r3
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	689a      	ldr	r2, [r3, #8]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	441a      	add	r2, r3
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	68da      	ldr	r2, [r3, #12]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	1ad2      	subs	r2, r2, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	60da      	str	r2, [r3, #12]
  retval = len;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	617b      	str	r3, [r7, #20]

  return retval;
 8013ba2:	697b      	ldr	r3, [r7, #20]
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3720      	adds	r7, #32
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <fifo_s_preread>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_preread(fifo_s_t *p_fifo, int offset)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  char *tmp_read_addr;

  //! Check input parameters.
  ASSERT(p_fifo);

  if (offset > p_fifo->used_num)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	683a      	ldr	r2, [r7, #0]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	dd01      	ble.n	8013bc4 <fifo_s_preread+0x18>
  {
    return 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	e014      	b.n	8013bee <fifo_s_preread+0x42>
  }
  else
  {
    // Move Read Pointer to right position
    tmp_read_addr = p_fifo->p_read_addr + offset;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	691a      	ldr	r2, [r3, #16]
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	4413      	add	r3, r2
 8013bcc:	60fb      	str	r3, [r7, #12]
    if (tmp_read_addr > p_fifo->p_end_addr)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d908      	bls.n	8013bea <fifo_s_preread+0x3e>
      tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	68f9      	ldr	r1, [r7, #12]
 8013be2:	1acb      	subs	r3, r1, r3
 8013be4:	3b01      	subs	r3, #1
 8013be6:	4413      	add	r3, r2
 8013be8:	60fb      	str	r3, [r7, #12]

    return *tmp_read_addr;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <fifo_s_prereads>:
 *
 *
 *
 */
int fifo_s_prereads(fifo_s_t *p_fifo, char *p_dest, int offset, int len)
{
 8013bfa:	b590      	push	{r4, r7, lr}
 8013bfc:	b08d      	sub	sp, #52	; 0x34
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	60f8      	str	r0, [r7, #12]
 8013c02:	60b9      	str	r1, [r7, #8]
 8013c04:	607a      	str	r2, [r7, #4]
 8013c06:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013c08:	f3ef 8310 	mrs	r3, PRIMASK
 8013c0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8013c0e:	69fb      	ldr	r3, [r7, #28]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013c10:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013c12:	b672      	cpsid	i
}
 8013c14:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d053      	beq.n	8013cc4 <fifo_s_prereads+0xca>
    goto end;

  if (0 == p_fifo->used_num)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d051      	beq.n	8013cc8 <fifo_s_prereads+0xce>
    goto end;

  if (offset >= p_fifo->used_num)
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	da4e      	bge.n	8013ccc <fifo_s_prereads+0xd2>
    goto end;

  tmp_read_addr = p_fifo->p_read_addr + offset;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	691a      	ldr	r2, [r3, #16]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	4413      	add	r3, r2
 8013c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (tmp_read_addr > p_fifo->p_end_addr)
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d908      	bls.n	8013c54 <fifo_s_prereads+0x5a>
    tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	681a      	ldr	r2, [r3, #0]
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c4c:	1acb      	subs	r3, r1, r3
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	4413      	add	r3, r2
 8013c52:	62fb      	str	r3, [r7, #44]	; 0x2c

  len = (len < (p_fifo->used_num - offset)) ? len : (p_fifo->used_num - offset);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	68da      	ldr	r2, [r3, #12]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	bfa8      	it	ge
 8013c62:	4613      	movge	r3, r2
 8013c64:	603b      	str	r3, [r7, #0]
  len_to_end = p_fifo->p_end_addr - tmp_read_addr + 1;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	685a      	ldr	r2, [r3, #4]
 8013c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	3301      	adds	r3, #1
 8013c70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (len_to_end >= len) //no rollback
 8013c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	db08      	blt.n	8013c8c <fifo_s_prereads+0x92>
  {
    len_to_end = len;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8013c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c80:	461a      	mov	r2, r3
 8013c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c84:	68b8      	ldr	r0, [r7, #8]
 8013c86:	f000 fea3 	bl	80149d0 <memcpy>
 8013c8a:	e012      	b.n	8013cb2 <fifo_s_prereads+0xb8>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013c8c:	683a      	ldr	r2, [r7, #0]
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8013c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c96:	461a      	mov	r2, r3
 8013c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c9a:	68b8      	ldr	r0, [r7, #8]
 8013c9c:	f000 fe98 	bl	80149d0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	18d0      	adds	r0, r2, r3
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cac:	4619      	mov	r1, r3
 8013cae:	f000 fe8f 	bl	80149d0 <memcpy>
  }

  retval = len;
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	623b      	str	r3, [r7, #32]
 8013cb6:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	f383 8810 	msr	PRIMASK, r3
}
 8013cbe:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8013cc0:	6a3b      	ldr	r3, [r7, #32]
 8013cc2:	e00b      	b.n	8013cdc <fifo_s_prereads+0xe2>
    goto end;
 8013cc4:	bf00      	nop
 8013cc6:	e002      	b.n	8013cce <fifo_s_prereads+0xd4>
    goto end;
 8013cc8:	bf00      	nop
 8013cca:	e000      	b.n	8013cce <fifo_s_prereads+0xd4>
    goto end;
 8013ccc:	bf00      	nop
 8013cce:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	f383 8810 	msr	PRIMASK, r3
}
 8013cd6:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3734      	adds	r7, #52	; 0x34
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd90      	pop	{r4, r7, pc}

08013ce4 <fifo_s_isempty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
char fifo_s_isempty(fifo_s_t *p_fifo)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b083      	sub	sp, #12
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return (p_fifo->used_num ? 0 : 1);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	bf0c      	ite	eq
 8013cf4:	2301      	moveq	r3, #1
 8013cf6:	2300      	movne	r3, #0
 8013cf8:	b2db      	uxtb	r3, r3
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	370c      	adds	r7, #12
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr

08013d06 <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 8013d06:	b480      	push	{r7}
 8013d08:	b085      	sub	sp, #20
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	60f8      	str	r0, [r7, #12]
 8013d0e:	60b9      	str	r1, [r7, #8]
 8013d10:	603b      	str	r3, [r7, #0]
 8013d12:	4613      	mov	r3, r2
 8013d14:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	fb02 f303 	mul.w	r3, r2, r3
 8013d24:	3b01      	subs	r3, #1
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	441a      	add	r2, r3
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	683a      	ldr	r2, [r7, #0]
 8013d32:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2200      	movs	r2, #0
 8013d38:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 8013d3a:	79fa      	ldrb	r2, [r7, #7]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	68ba      	ldr	r2, [r7, #8]
 8013d44:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	619a      	str	r2, [r3, #24]

  return (0);
 8013d4c:	2300      	movs	r3, #0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3714      	adds	r7, #20
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr

08013d5a <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 8013d5a:	b590      	push	{r4, r7, lr}
 8013d5c:	b087      	sub	sp, #28
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013d64:	f3ef 8310 	mrs	r3, PRIMASK
 8013d68:	617b      	str	r3, [r7, #20]
  return(result);
 8013d6a:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013d6c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013d6e:	b672      	cpsid	i
}
 8013d70:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d029      	beq.n	8013dce <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	699a      	ldr	r2, [r3, #24]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d903      	bls.n	8013d8e <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6998      	ldr	r0, [r3, #24]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	461a      	mov	r2, r3
 8013d98:	6839      	ldr	r1, [r7, #0]
 8013d9a:	f000 fe19 	bl	80149d0 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	699b      	ldr	r3, [r3, #24]
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	6912      	ldr	r2, [r2, #16]
 8013da6:	441a      	add	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	689b      	ldr	r3, [r3, #8]
 8013db0:	1e5a      	subs	r2, r3, #1
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	1c5a      	adds	r2, r3, #1
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	60da      	str	r2, [r3, #12]
 8013dc0:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	f383 8810 	msr	PRIMASK, r3
}
 8013dc8:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8013dca:	2300      	movs	r3, #0
 8013dcc:	e007      	b.n	8013dde <fifo_put+0x84>
    goto end;
 8013dce:	bf00      	nop
 8013dd0:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f383 8810 	msr	PRIMASK, r3
}
 8013dd8:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	371c      	adds	r7, #28
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd90      	pop	{r4, r7, pc}

08013de6 <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 8013de6:	b590      	push	{r4, r7, lr}
 8013de8:	b087      	sub	sp, #28
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013df0:	f3ef 8310 	mrs	r3, PRIMASK
 8013df4:	617b      	str	r3, [r7, #20]
  return(result);
 8013df6:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013df8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013dfa:	b672      	cpsid	i
}
 8013dfc:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d029      	beq.n	8013e5a <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	695a      	ldr	r2, [r3, #20]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d903      	bls.n	8013e1a <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6959      	ldr	r1, [r3, #20]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	691b      	ldr	r3, [r3, #16]
 8013e22:	461a      	mov	r2, r3
 8013e24:	6838      	ldr	r0, [r7, #0]
 8013e26:	f000 fdd3 	bl	80149d0 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	695b      	ldr	r3, [r3, #20]
 8013e2e:	687a      	ldr	r2, [r7, #4]
 8013e30:	6912      	ldr	r2, [r2, #16]
 8013e32:	441a      	add	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	689b      	ldr	r3, [r3, #8]
 8013e3c:	1c5a      	adds	r2, r3, #1
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	1e5a      	subs	r2, r3, #1
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	60da      	str	r2, [r3, #12]
 8013e4c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	f383 8810 	msr	PRIMASK, r3
}
 8013e54:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8013e56:	2300      	movs	r3, #0
 8013e58:	e007      	b.n	8013e6a <fifo_get+0x84>
    goto end;
 8013e5a:	bf00      	nop
 8013e5c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f383 8810 	msr	PRIMASK, r3
}
 8013e64:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	371c      	adds	r7, #28
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd90      	pop	{r4, r7, pc}

08013e72 <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b082      	sub	sp, #8
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
 8013e7a:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d102      	bne.n	8013e8a <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 8013e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e88:	e023      	b.n	8013ed2 <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	695a      	ldr	r2, [r3, #20]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d903      	bls.n	8013e9e <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6959      	ldr	r1, [r3, #20]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	691b      	ldr	r3, [r3, #16]
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	6838      	ldr	r0, [r7, #0]
 8013eaa:	f000 fd91 	bl	80149d0 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	695b      	ldr	r3, [r3, #20]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	6912      	ldr	r2, [r2, #16]
 8013eb6:	441a      	add	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	689b      	ldr	r3, [r3, #8]
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	1e5a      	subs	r2, r3, #1
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	60da      	str	r2, [r3, #12]

  return (0);
 8013ed0:	2300      	movs	r3, #0
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3708      	adds	r7, #8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}

08013eda <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b083      	sub	sp, #12
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	bf0c      	ite	eq
 8013eea:	2301      	moveq	r3, #1
 8013eec:	2300      	movne	r3, #0
 8013eee:	b2db      	uxtb	r3, r3
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	370c      	adds	r7, #12
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	bf0c      	ite	eq
 8013f0c:	2301      	moveq	r3, #1
 8013f0e:	2300      	movne	r3, #0
 8013f10:	b2db      	uxtb	r3, r3
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	370c      	adds	r7, #12
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
	...

08013f20 <heap_malloc>:
static uint32_t block_allocated_bit = 0;

/*-----------------------------------------------------------*/

void *heap_malloc(uint32_t wanted_size)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b088      	sub	sp, #32
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  block_link_t *block, *prev_block, *new_block;
  void *reval = NULL;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	617b      	str	r3, [r7, #20]

  if (mutex_init == 0)
 8013f2c:	4b4a      	ldr	r3, [pc, #296]	; (8014058 <heap_malloc+0x138>)
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d102      	bne.n	8013f3a <heap_malloc+0x1a>
  {
    mutex_init = 1;
 8013f34:	4b48      	ldr	r3, [pc, #288]	; (8014058 <heap_malloc+0x138>)
 8013f36:	2201      	movs	r2, #1
 8013f38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f40:	68fb      	ldr	r3, [r7, #12]
    MUTEX_INIT(mem_mutex);
  }

  MUTEX_LOCK(mem_mutex);
 8013f42:	4a46      	ldr	r2, [pc, #280]	; (801405c <heap_malloc+0x13c>)
 8013f44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f46:	b672      	cpsid	i
}
 8013f48:	bf00      	nop
  {
    /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
    if (end == NULL)
 8013f4a:	4b45      	ldr	r3, [pc, #276]	; (8014060 <heap_malloc+0x140>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <heap_malloc+0x36>
    {
      heap_init();
 8013f52:	f000 f8d5 	bl	8014100 <heap_init>

    /* Check the requested block size is not so large that the top bit is
        set.  The top bit of the block size member of the block_link_t structure
        is used to determine who owns the block - the application or the
        kernel, so it must be free. */
    if ((wanted_size & block_allocated_bit) == 0)
 8013f56:	4b43      	ldr	r3, [pc, #268]	; (8014064 <heap_malloc+0x144>)
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	4013      	ands	r3, r2
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d16d      	bne.n	801403e <heap_malloc+0x11e>
    {
      /* The wanted size is increased so it can contain a block_link_t
            structure in addition to the requested amount of bytes. */
      if (wanted_size > 0)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00d      	beq.n	8013f84 <heap_malloc+0x64>
      {
        wanted_size += STRUCT_SIZE;
 8013f68:	2208      	movs	r2, #8
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
                of bytes. */
        if ((wanted_size & BYTE_ALIGNMENT_MASK) != 0x00)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f003 0307 	and.w	r3, r3, #7
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d004      	beq.n	8013f84 <heap_malloc+0x64>
        {
          /* Byte alignment required. */
          wanted_size += (BYTE_ALIGNMENT - (wanted_size & BYTE_ALIGNMENT_MASK));
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f023 0307 	bic.w	r3, r3, #7
 8013f80:	3308      	adds	r3, #8
 8013f82:	607b      	str	r3, [r7, #4]
          HEAP_ASSERT((wanted_size & BYTE_ALIGNMENT_MASK) == 0);
        }
      }

      if ((wanted_size > 0) && (wanted_size <= free_bytes_remain))
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d059      	beq.n	801403e <heap_malloc+0x11e>
 8013f8a:	4b37      	ldr	r3, [pc, #220]	; (8014068 <heap_malloc+0x148>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d854      	bhi.n	801403e <heap_malloc+0x11e>
      {
        /* Traverse the list from the start    (lowest address) block until
                one    of adequate size is found. */
        prev_block = &start;
 8013f94:	4b35      	ldr	r3, [pc, #212]	; (801406c <heap_malloc+0x14c>)
 8013f96:	61bb      	str	r3, [r7, #24]
        block = start.next_free;
 8013f98:	4b34      	ldr	r3, [pc, #208]	; (801406c <heap_malloc+0x14c>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013f9e:	e004      	b.n	8013faa <heap_malloc+0x8a>
        {
          prev_block = block;
 8013fa0:	69fb      	ldr	r3, [r7, #28]
 8013fa2:	61bb      	str	r3, [r7, #24]
          block = block->next_free;
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d903      	bls.n	8013fbc <heap_malloc+0x9c>
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1f1      	bne.n	8013fa0 <heap_malloc+0x80>
        }

        /* If the end marker was reached then a block of adequate size
                was    not found. */
        if (block != end)
 8013fbc:	4b28      	ldr	r3, [pc, #160]	; (8014060 <heap_malloc+0x140>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	69fa      	ldr	r2, [r7, #28]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d03b      	beq.n	801403e <heap_malloc+0x11e>
        {
          /* Return the memory space pointed to - jumping over the
                    block_link_t structure at its start. */
          reval = (void *)(((uint8_t *)prev_block->next_free) + STRUCT_SIZE);
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2208      	movs	r2, #8
 8013fcc:	4413      	add	r3, r2
 8013fce:	617b      	str	r3, [r7, #20]

          /* This block is being returned for use so must be taken out
                    of the list of free blocks. */
          prev_block->next_free = block->next_free;
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	69bb      	ldr	r3, [r7, #24]
 8013fd6:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
                    two. */
          if ((block->block_size - wanted_size) > MINIMUM_BLOCK_SIZE)
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	685a      	ldr	r2, [r3, #4]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	1ad2      	subs	r2, r2, r3
 8013fe0:	2308      	movs	r3, #8
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d90f      	bls.n	8014008 <heap_malloc+0xe8>
          {
            /* This block is to be split into two.  Create a new
                        block following the number of bytes requested. The void
                        cast is used to prevent byte alignment warnings from the
                        compiler. */
            new_block = (void *)(((uint8_t *)block) + wanted_size);
 8013fe8:	69fa      	ldr	r2, [r7, #28]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4413      	add	r3, r2
 8013fee:	613b      	str	r3, [r7, #16]
            HEAP_ASSERT((((uint32_t)new_block) & BYTE_ALIGNMENT_MASK) == 0);

            /* Calculate the sizes of two blocks split from the
                        single block. */
            new_block->block_size = block->block_size - wanted_size;
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	685a      	ldr	r2, [r3, #4]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	1ad2      	subs	r2, r2, r3
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	605a      	str	r2, [r3, #4]
            block->block_size = wanted_size;
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            insert_into_free_list(new_block);
 8014002:	6938      	ldr	r0, [r7, #16]
 8014004:	f000 f8de 	bl	80141c4 <insert_into_free_list>
          }

          free_bytes_remain -= block->block_size;
 8014008:	4b17      	ldr	r3, [pc, #92]	; (8014068 <heap_malloc+0x148>)
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	685b      	ldr	r3, [r3, #4]
 8014010:	1ad3      	subs	r3, r2, r3
 8014012:	4a15      	ldr	r2, [pc, #84]	; (8014068 <heap_malloc+0x148>)
 8014014:	6013      	str	r3, [r2, #0]

          if (free_bytes_remain < ever_free_bytes_remain)
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <heap_malloc+0x148>)
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	4b15      	ldr	r3, [pc, #84]	; (8014070 <heap_malloc+0x150>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	429a      	cmp	r2, r3
 8014020:	d203      	bcs.n	801402a <heap_malloc+0x10a>
          {
            ever_free_bytes_remain = free_bytes_remain;
 8014022:	4b11      	ldr	r3, [pc, #68]	; (8014068 <heap_malloc+0x148>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4a12      	ldr	r2, [pc, #72]	; (8014070 <heap_malloc+0x150>)
 8014028:	6013      	str	r3, [r2, #0]
          }

          /* The block is being returned - it is allocated and owned
                    by the application and has no "next" block. */
          block->block_size |= block_allocated_bit;
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	685a      	ldr	r2, [r3, #4]
 801402e:	4b0d      	ldr	r3, [pc, #52]	; (8014064 <heap_malloc+0x144>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	431a      	orrs	r2, r3
 8014034:	69fb      	ldr	r3, [r7, #28]
 8014036:	605a      	str	r2, [r3, #4]
          block->next_free = NULL;
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	2200      	movs	r2, #0
 801403c:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 801403e:	4b07      	ldr	r3, [pc, #28]	; (801405c <heap_malloc+0x13c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	f383 8810 	msr	PRIMASK, r3
}
 801404a:	bf00      	nop

  HEAP_ASSERT((((uint32_t)reval) & (uint32_t)BYTE_ALIGNMENT_MASK) == 0);
  return reval;
 801404c:	697b      	ldr	r3, [r7, #20]
}
 801404e:	4618      	mov	r0, r3
 8014050:	3720      	adds	r7, #32
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
 8014056:	bf00      	nop
 8014058:	20017520 	.word	0x20017520
 801405c:	2000851c 	.word	0x2000851c
 8014060:	2001752c 	.word	0x2001752c
 8014064:	20017538 	.word	0x20017538
 8014068:	20017530 	.word	0x20017530
 801406c:	20017524 	.word	0x20017524
 8014070:	20017534 	.word	0x20017534

08014074 <heap_free>:
/*-----------------------------------------------------------*/

void heap_free(void *pv)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014080:	f3ef 8310 	mrs	r3, PRIMASK
 8014084:	60fb      	str	r3, [r7, #12]
  return(result);
 8014086:	68fb      	ldr	r3, [r7, #12]
  block_link_t *block;

  MUTEX_LOCK(mem_mutex);
 8014088:	4a1a      	ldr	r2, [pc, #104]	; (80140f4 <heap_free+0x80>)
 801408a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801408c:	b672      	cpsid	i
}
 801408e:	bf00      	nop

  if (pv != NULL)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d023      	beq.n	80140de <heap_free+0x6a>
  {
    /* The memory being freed will have an block_link_t structure immediately
        before it. */
    puc -= STRUCT_SIZE;
 8014096:	2308      	movs	r3, #8
 8014098:	425b      	negs	r3, r3
 801409a:	697a      	ldr	r2, [r7, #20]
 801409c:	4413      	add	r3, r2
 801409e:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    block = (void *)puc;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    HEAP_ASSERT((block->block_size & block_allocated_bit) != 0);
    HEAP_ASSERT(block->next_free == NULL);

    if ((block->block_size & block_allocated_bit) != 0)
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	4b13      	ldr	r3, [pc, #76]	; (80140f8 <heap_free+0x84>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4013      	ands	r3, r2
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d015      	beq.n	80140de <heap_free+0x6a>
    {
      if (block->next_free == NULL)
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d111      	bne.n	80140de <heap_free+0x6a>
      {
        /* The block is being returned to the heap - it is no longer
                allocated. */
        block->block_size &= ~block_allocated_bit;
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	685a      	ldr	r2, [r3, #4]
 80140be:	4b0e      	ldr	r3, [pc, #56]	; (80140f8 <heap_free+0x84>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	43db      	mvns	r3, r3
 80140c4:	401a      	ands	r2, r3
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	605a      	str	r2, [r3, #4]

        {
          /* Add this block to the list of free blocks. */
          free_bytes_remain += block->block_size;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	4b0b      	ldr	r3, [pc, #44]	; (80140fc <heap_free+0x88>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	4413      	add	r3, r2
 80140d4:	4a09      	ldr	r2, [pc, #36]	; (80140fc <heap_free+0x88>)
 80140d6:	6013      	str	r3, [r2, #0]
          insert_into_free_list(((block_link_t *)block));
 80140d8:	6938      	ldr	r0, [r7, #16]
 80140da:	f000 f873 	bl	80141c4 <insert_into_free_list>
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 80140de:	4b05      	ldr	r3, [pc, #20]	; (80140f4 <heap_free+0x80>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	f383 8810 	msr	PRIMASK, r3
}
 80140ea:	bf00      	nop
}
 80140ec:	bf00      	nop
 80140ee:	3718      	adds	r7, #24
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}
 80140f4:	2000851c 	.word	0x2000851c
 80140f8:	20017538 	.word	0x20017538
 80140fc:	20017530 	.word	0x20017530

08014100 <heap_init>:
  return ever_free_bytes_remain;
}
/*-----------------------------------------------------------*/

static void heap_init(void)
{
 8014100:	b480      	push	{r7}
 8014102:	b085      	sub	sp, #20
 8014104:	af00      	add	r7, sp, #0
  block_link_t *first_free_block;
  uint8_t *aligned_heap;
  uint32_t address;
  uint32_t total_heap_size = TOTAL_HEAP_SIZE;
 8014106:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801410a:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  address = (uint32_t)heap;
 801410c:	4b27      	ldr	r3, [pc, #156]	; (80141ac <heap_init+0xac>)
 801410e:	60fb      	str	r3, [r7, #12]

  if ((address & BYTE_ALIGNMENT_MASK) != 0)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	f003 0307 	and.w	r3, r3, #7
 8014116:	2b00      	cmp	r3, #0
 8014118:	d00c      	beq.n	8014134 <heap_init+0x34>
  {
    address += (BYTE_ALIGNMENT - 1);
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	3307      	adds	r3, #7
 801411e:	60fb      	str	r3, [r7, #12]
    address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f023 0307 	bic.w	r3, r3, #7
 8014126:	60fb      	str	r3, [r7, #12]
    total_heap_size -= address - (uint32_t)heap;
 8014128:	68ba      	ldr	r2, [r7, #8]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	1ad3      	subs	r3, r2, r3
 801412e:	4a1f      	ldr	r2, [pc, #124]	; (80141ac <heap_init+0xac>)
 8014130:	4413      	add	r3, r2
 8014132:	60bb      	str	r3, [r7, #8]
  }

  aligned_heap = (uint8_t *)address;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	607b      	str	r3, [r7, #4]

  /* start is used to hold a pointer to the first item in the list of free
    blocks.  The void cast is used to prevent compiler warnings. */
  start.next_free = (void *)aligned_heap;
 8014138:	4a1d      	ldr	r2, [pc, #116]	; (80141b0 <heap_init+0xb0>)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6013      	str	r3, [r2, #0]
  start.block_size = (uint32_t)0;
 801413e:	4b1c      	ldr	r3, [pc, #112]	; (80141b0 <heap_init+0xb0>)
 8014140:	2200      	movs	r2, #0
 8014142:	605a      	str	r2, [r3, #4]

  /* end is used to mark the end of the list of free blocks and is inserted
    at the end of the heap space. */
  address = ((uint32_t)aligned_heap) + total_heap_size;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	4413      	add	r3, r2
 801414a:	60fb      	str	r3, [r7, #12]
  address -= STRUCT_SIZE;
 801414c:	2208      	movs	r2, #8
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	1a9b      	subs	r3, r3, r2
 8014152:	60fb      	str	r3, [r7, #12]
  address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f023 0307 	bic.w	r3, r3, #7
 801415a:	60fb      	str	r3, [r7, #12]
  end = (void *)address;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	4a15      	ldr	r2, [pc, #84]	; (80141b4 <heap_init+0xb4>)
 8014160:	6013      	str	r3, [r2, #0]
  end->block_size = 0;
 8014162:	4b14      	ldr	r3, [pc, #80]	; (80141b4 <heap_init+0xb4>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2200      	movs	r2, #0
 8014168:	605a      	str	r2, [r3, #4]
  end->next_free = NULL;
 801416a:	4b12      	ldr	r3, [pc, #72]	; (80141b4 <heap_init+0xb4>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	2200      	movs	r2, #0
 8014170:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
    entire heap space, minus the space taken by end. */
  first_free_block = (void *)aligned_heap;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	603b      	str	r3, [r7, #0]
  first_free_block->block_size = address - (uint32_t)first_free_block;
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	1ad2      	subs	r2, r2, r3
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	605a      	str	r2, [r3, #4]
  first_free_block->next_free = end;
 8014180:	4b0c      	ldr	r3, [pc, #48]	; (80141b4 <heap_init+0xb4>)
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  ever_free_bytes_remain = first_free_block->block_size;
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	4a0a      	ldr	r2, [pc, #40]	; (80141b8 <heap_init+0xb8>)
 801418e:	6013      	str	r3, [r2, #0]
  free_bytes_remain = first_free_block->block_size;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	4a09      	ldr	r2, [pc, #36]	; (80141bc <heap_init+0xbc>)
 8014196:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a uint32_t variable. */
  block_allocated_bit = ((uint32_t)1) << ((sizeof(uint32_t) * BITS_PER_BYTE) - 1);
 8014198:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <heap_init+0xc0>)
 801419a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801419e:	601a      	str	r2, [r3, #0]
}
 80141a0:	bf00      	nop
 80141a2:	3714      	adds	r7, #20
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr
 80141ac:	20008520 	.word	0x20008520
 80141b0:	20017524 	.word	0x20017524
 80141b4:	2001752c 	.word	0x2001752c
 80141b8:	20017534 	.word	0x20017534
 80141bc:	20017530 	.word	0x20017530
 80141c0:	20017538 	.word	0x20017538

080141c4 <insert_into_free_list>:
/*-----------------------------------------------------------*/

static void insert_into_free_list(block_link_t *block_to_insert)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b085      	sub	sp, #20
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  block_link_t *iterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
  for (iterator = &start; iterator->next_free < block_to_insert; iterator = iterator->next_free)
 80141cc:	4b28      	ldr	r3, [pc, #160]	; (8014270 <insert_into_free_list+0xac>)
 80141ce:	60fb      	str	r3, [r7, #12]
 80141d0:	e002      	b.n	80141d8 <insert_into_free_list+0x14>
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	60fb      	str	r3, [r7, #12]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d8f7      	bhi.n	80141d2 <insert_into_free_list+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
  puc = (uint8_t *)iterator;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	60bb      	str	r3, [r7, #8]
  if ((puc + iterator->block_size) == (uint8_t *)block_to_insert)
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	4413      	add	r3, r2
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d108      	bne.n	8014206 <insert_into_free_list+0x42>
  {
    iterator->block_size += block_to_insert->block_size;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	685a      	ldr	r2, [r3, #4]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	441a      	add	r2, r3
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	605a      	str	r2, [r3, #4]
    block_to_insert = iterator;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	607b      	str	r3, [r7, #4]
  }

  /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
  puc = (uint8_t *)block_to_insert;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	60bb      	str	r3, [r7, #8]
  if ((puc + block_to_insert->block_size) == (uint8_t *)iterator->next_free)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	441a      	add	r2, r3
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	429a      	cmp	r2, r3
 8014218:	d118      	bne.n	801424c <insert_into_free_list+0x88>
  {
    if (iterator->next_free != end)
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	4b15      	ldr	r3, [pc, #84]	; (8014274 <insert_into_free_list+0xb0>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	429a      	cmp	r2, r3
 8014224:	d00d      	beq.n	8014242 <insert_into_free_list+0x7e>
    {
      /* Form one big block from the two blocks. */
      block_to_insert->block_size += iterator->next_free->block_size;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	441a      	add	r2, r3
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	605a      	str	r2, [r3, #4]
      block_to_insert->next_free = iterator->next_free->next_free;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	601a      	str	r2, [r3, #0]
 8014240:	e008      	b.n	8014254 <insert_into_free_list+0x90>
    }
    else
    {
      block_to_insert->next_free = end;
 8014242:	4b0c      	ldr	r3, [pc, #48]	; (8014274 <insert_into_free_list+0xb0>)
 8014244:	681a      	ldr	r2, [r3, #0]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	601a      	str	r2, [r3, #0]
 801424a:	e003      	b.n	8014254 <insert_into_free_list+0x90>
    }
  }
  else
  {
    block_to_insert->next_free = iterator->next_free;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's next_free pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
  if (iterator != block_to_insert)
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	429a      	cmp	r2, r3
 801425a:	d002      	beq.n	8014262 <insert_into_free_list+0x9e>
  {
    iterator->next_free = block_to_insert;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	601a      	str	r2, [r3, #0]
  }
}
 8014262:	bf00      	nop
 8014264:	3714      	adds	r7, #20
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop
 8014270:	20017524 	.word	0x20017524
 8014274:	2001752c 	.word	0x2001752c

08014278 <get_crc16>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint16_t get_crc16(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
{
 8014278:	b480      	push	{r7}
 801427a:	b087      	sub	sp, #28
 801427c:	af00      	add	r7, sp, #0
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	4613      	mov	r3, r2
 8014284:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pchMessage == NULL)
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d113      	bne.n	80142b4 <get_crc16+0x3c>
    {
        return 0xFFFF;
 801428c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014290:	e016      	b.n	80142c0 <get_crc16+0x48>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	1c5a      	adds	r2, r3, #1
 8014296:	60fa      	str	r2, [r7, #12]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8)  ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 801429c:	88fb      	ldrh	r3, [r7, #6]
 801429e:	0a1b      	lsrs	r3, r3, #8
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	88f9      	ldrh	r1, [r7, #6]
 80142a4:	7dfb      	ldrb	r3, [r7, #23]
 80142a6:	404b      	eors	r3, r1
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	4908      	ldr	r1, [pc, #32]	; (80142cc <get_crc16+0x54>)
 80142ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80142b0:	4053      	eors	r3, r2
 80142b2:	80fb      	strh	r3, [r7, #6]
    while(dwLength--)
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	1e5a      	subs	r2, r3, #1
 80142b8:	60ba      	str	r2, [r7, #8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d1e9      	bne.n	8014292 <get_crc16+0x1a>
    }

    return wCRC;
 80142be:	88fb      	ldrh	r3, [r7, #6]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	371c      	adds	r7, #28
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr
 80142cc:	08016088 	.word	0x08016088

080142d0 <verify_crc16>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc16(uint8_t *pchMessage, uint32_t dwLength)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d002      	beq.n	80142ea <verify_crc16+0x1a>
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d801      	bhi.n	80142ee <verify_crc16+0x1e>
    {
        return __FALSE;
 80142ea:	2300      	movs	r3, #0
 80142ec:	e020      	b.n	8014330 <verify_crc16+0x60>
    }
    wExpected = get_crc16(pchMessage, dwLength - 2, CRC16_INIT);
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	3b02      	subs	r3, #2
 80142f2:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 80142f6:	4619      	mov	r1, r3
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7ff ffbd 	bl	8014278 <get_crc16>
 80142fe:	4603      	mov	r3, r0
 8014300:	81fb      	strh	r3, [r7, #14]

    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8014302:	89fb      	ldrh	r3, [r7, #14]
 8014304:	b2db      	uxtb	r3, r3
 8014306:	683a      	ldr	r2, [r7, #0]
 8014308:	3a02      	subs	r2, #2
 801430a:	6879      	ldr	r1, [r7, #4]
 801430c:	440a      	add	r2, r1
 801430e:	7812      	ldrb	r2, [r2, #0]
 8014310:	4293      	cmp	r3, r2
 8014312:	d10c      	bne.n	801432e <verify_crc16+0x5e>
 8014314:	89fb      	ldrh	r3, [r7, #14]
 8014316:	0a1b      	lsrs	r3, r3, #8
 8014318:	b29b      	uxth	r3, r3
 801431a:	b2db      	uxtb	r3, r3
 801431c:	683a      	ldr	r2, [r7, #0]
 801431e:	3a01      	subs	r2, #1
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	440a      	add	r2, r1
 8014324:	7812      	ldrb	r2, [r2, #0]
 8014326:	4293      	cmp	r3, r2
 8014328:	d101      	bne.n	801432e <verify_crc16+0x5e>
 801432a:	2301      	movs	r3, #1
 801432c:	e000      	b.n	8014330 <verify_crc16+0x60>
 801432e:	2300      	movs	r3, #0
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <append_crc16>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc16(uint8_t* pchMessage,uint32_t dwLength)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 8014342:	2300      	movs	r3, #0
 8014344:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d01d      	beq.n	8014388 <append_crc16+0x50>
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	2b02      	cmp	r3, #2
 8014350:	d91a      	bls.n	8014388 <append_crc16+0x50>
    {
        return;
    }
    wCRC = get_crc16 ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	3b02      	subs	r3, #2
 8014356:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 801435a:	4619      	mov	r1, r3
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7ff ff8b 	bl	8014278 <get_crc16>
 8014362:	4603      	mov	r3, r0
 8014364:	81fb      	strh	r3, [r7, #14]

    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	3b02      	subs	r3, #2
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	4413      	add	r3, r2
 801436e:	89fa      	ldrh	r2, [r7, #14]
 8014370:	b2d2      	uxtb	r2, r2
 8014372:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 8014374:	89fb      	ldrh	r3, [r7, #14]
 8014376:	0a1b      	lsrs	r3, r3, #8
 8014378:	b299      	uxth	r1, r3
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	3b01      	subs	r3, #1
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	4413      	add	r3, r2
 8014382:	b2ca      	uxtb	r2, r1
 8014384:	701a      	strb	r2, [r3, #0]
 8014386:	e000      	b.n	801438a <append_crc16+0x52>
        return;
 8014388:	bf00      	nop
}
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <get_crc32>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint32_t get_crc32(uint8_t *pchMessage,uint32_t dwLength,uint32_t wCRC)
{
 8014390:	b480      	push	{r7}
 8014392:	b087      	sub	sp, #28
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
    uint8_t chData;
    if (pchMessage == NULL)
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d112      	bne.n	80143c8 <get_crc32+0x38>
    {
        return 0xFFFF;
 80143a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143a6:	e015      	b.n	80143d4 <get_crc32+0x44>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	1c5a      	adds	r2, r3, #1
 80143ac:	60fa      	str	r2, [r7, #12]
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint32_t)(wCRC) >> 8)  ^ CRC32_Table[((uint32_t)(wCRC) ^ (uint32_t)(chData)) & 0x000000ff];
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	0a1a      	lsrs	r2, r3, #8
 80143b6:	7df9      	ldrb	r1, [r7, #23]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	404b      	eors	r3, r1
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	4908      	ldr	r1, [pc, #32]	; (80143e0 <get_crc32+0x50>)
 80143c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80143c4:	4053      	eors	r3, r2
 80143c6:	607b      	str	r3, [r7, #4]
    while(dwLength--)
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	1e5a      	subs	r2, r3, #1
 80143cc:	60ba      	str	r2, [r7, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d1ea      	bne.n	80143a8 <get_crc32+0x18>
    }

    return wCRC;
 80143d2:	687b      	ldr	r3, [r7, #4]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	371c      	adds	r7, #28
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr
 80143e0:	08016288 	.word	0x08016288

080143e4 <verify_crc32>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc32(uint8_t *pchMessage, uint32_t dwLength)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	6039      	str	r1, [r7, #0]
    uint32_t wExpected = 0;
 80143ee:	2300      	movs	r3, #0
 80143f0:	60fb      	str	r3, [r7, #12]
    uint32_t input_crc = 0;
 80143f2:	2300      	movs	r3, #0
 80143f4:	60bb      	str	r3, [r7, #8]
    if ((pchMessage == NULL) || (dwLength <= 4))
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <verify_crc32+0x1e>
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	2b04      	cmp	r3, #4
 8014400:	d801      	bhi.n	8014406 <verify_crc32+0x22>
    {
        return __FALSE;
 8014402:	2300      	movs	r3, #0
 8014404:	e036      	b.n	8014474 <verify_crc32+0x90>
    }
    wExpected = get_crc32(pchMessage, dwLength - 4, CRC32_INIT);
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	3b04      	subs	r3, #4
 801440a:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 801440e:	4619      	mov	r1, r3
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f7ff ffbd 	bl	8014390 <get_crc32>
 8014416:	60f8      	str	r0, [r7, #12]

    input_crc |= pchMessage[dwLength - 4];
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	3b04      	subs	r3, #4
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	4413      	add	r3, r2
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	461a      	mov	r2, r3
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	4313      	orrs	r3, r2
 8014428:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 3]) << 8)  & 0xff00;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	3b03      	subs	r3, #3
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	4413      	add	r3, r2
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	021b      	lsls	r3, r3, #8
 8014436:	b29b      	uxth	r3, r3
 8014438:	68ba      	ldr	r2, [r7, #8]
 801443a:	4313      	orrs	r3, r2
 801443c:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 2]) << 16) & 0xff0000;
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	3b02      	subs	r3, #2
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	4413      	add	r3, r2
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	041b      	lsls	r3, r3, #16
 801444a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801444e:	68ba      	ldr	r2, [r7, #8]
 8014450:	4313      	orrs	r3, r2
 8014452:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 1]) << 24) & 0xff000000;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	3b01      	subs	r3, #1
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	4413      	add	r3, r2
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	061b      	lsls	r3, r3, #24
 8014460:	68ba      	ldr	r2, [r7, #8]
 8014462:	4313      	orrs	r3, r2
 8014464:	60bb      	str	r3, [r7, #8]

    return (input_crc == wExpected);
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	429a      	cmp	r2, r3
 801446c:	bf0c      	ite	eq
 801446e:	2301      	moveq	r3, #1
 8014470:	2300      	movne	r3, #0
 8014472:	b2db      	uxtb	r3, r3
}
 8014474:	4618      	mov	r0, r3
 8014476:	3710      	adds	r7, #16
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <append_crc32>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc32(uint8_t* pchMessage,uint32_t dwLength)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
    uint32_t wCRC = 0;
 8014486:	2300      	movs	r3, #0
 8014488:	60fb      	str	r3, [r7, #12]

    if ((pchMessage == NULL) || (dwLength <= 4))
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d02b      	beq.n	80144e8 <append_crc32+0x6c>
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	2b04      	cmp	r3, #4
 8014494:	d928      	bls.n	80144e8 <append_crc32+0x6c>
    {
        return;
    }
    wCRC = get_crc32 ( (uint8_t *)pchMessage, dwLength-4, CRC32_INIT);
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	3b04      	subs	r3, #4
 801449a:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 801449e:	4619      	mov	r1, r3
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f7ff ff75 	bl	8014390 <get_crc32>
 80144a6:	60f8      	str	r0, [r7, #12]

    pchMessage[dwLength-4] = (uint8_t)(wCRC & 0xff);
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	3b04      	subs	r3, #4
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	4413      	add	r3, r2
 80144b0:	68fa      	ldr	r2, [r7, #12]
 80144b2:	b2d2      	uxtb	r2, r2
 80144b4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-3] = (uint8_t)((wCRC >> 8)& 0xff);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	0a19      	lsrs	r1, r3, #8
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	3b03      	subs	r3, #3
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	4413      	add	r3, r2
 80144c2:	b2ca      	uxtb	r2, r1
 80144c4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-2] = (uint8_t)((wCRC >> 16)& 0xff);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	0c19      	lsrs	r1, r3, #16
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	3b02      	subs	r3, #2
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	4413      	add	r3, r2
 80144d2:	b2ca      	uxtb	r2, r1
 80144d4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 24)& 0xff);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	0e19      	lsrs	r1, r3, #24
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	3b01      	subs	r3, #1
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	4413      	add	r3, r2
 80144e2:	b2ca      	uxtb	r2, r1
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	e000      	b.n	80144ea <append_crc32+0x6e>
        return;
 80144e8:	bf00      	nop
}
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <test_init>:
}

#else

void test_init(void)
{
 80144f0:	b480      	push	{r7}
 80144f2:	af00      	add	r7, sp, #0

}
 80144f4:	bf00      	nop
 80144f6:	46bd      	mov	sp, r7
 80144f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fc:	4770      	bx	lr
	...

08014500 <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8014506:	2301      	movs	r3, #1
 8014508:	71fb      	strb	r3, [r7, #7]
 801450a:	e019      	b.n	8014540 <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 801450c:	79fb      	ldrb	r3, [r7, #7]
 801450e:	4a11      	ldr	r2, [pc, #68]	; (8014554 <TimerISR_Hook+0x54>)
 8014510:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d010      	beq.n	801453a <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 8014518:	79fb      	ldrb	r3, [r7, #7]
 801451a:	4a0e      	ldr	r2, [pc, #56]	; (8014554 <TimerISR_Hook+0x54>)
 801451c:	00db      	lsls	r3, r3, #3
 801451e:	4413      	add	r3, r2
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d009      	beq.n	801453a <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 8014526:	79fa      	ldrb	r2, [r7, #7]
 8014528:	490a      	ldr	r1, [pc, #40]	; (8014554 <TimerISR_Hook+0x54>)
 801452a:	00d3      	lsls	r3, r2, #3
 801452c:	440b      	add	r3, r1
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	1e59      	subs	r1, r3, #1
 8014532:	4808      	ldr	r0, [pc, #32]	; (8014554 <TimerISR_Hook+0x54>)
 8014534:	00d3      	lsls	r3, r2, #3
 8014536:	4403      	add	r3, r0
 8014538:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801453a:	79fb      	ldrb	r3, [r7, #7]
 801453c:	3301      	adds	r3, #1
 801453e:	71fb      	strb	r3, [r7, #7]
 8014540:	79fb      	ldrb	r3, [r7, #7]
 8014542:	2b13      	cmp	r3, #19
 8014544:	d9e2      	bls.n	801450c <TimerISR_Hook+0xc>
            }
        }
    }
}
 8014546:	bf00      	nop
 8014548:	bf00      	nop
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr
 8014554:	2001753c 	.word	0x2001753c

08014558 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 8014558:	b480      	push	{r7}
 801455a:	b083      	sub	sp, #12
 801455c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 801455e:	2300      	movs	r3, #0
 8014560:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8014562:	2301      	movs	r3, #1
 8014564:	71fb      	strb	r3, [r7, #7]
 8014566:	e00d      	b.n	8014584 <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 8014568:	79fb      	ldrb	r3, [r7, #7]
 801456a:	4a0b      	ldr	r2, [pc, #44]	; (8014598 <soft_timer_init+0x40>)
 801456c:	2100      	movs	r1, #0
 801456e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 8014572:	79fb      	ldrb	r3, [r7, #7]
 8014574:	4a08      	ldr	r2, [pc, #32]	; (8014598 <soft_timer_init+0x40>)
 8014576:	00db      	lsls	r3, r3, #3
 8014578:	4413      	add	r3, r2
 801457a:	2200      	movs	r2, #0
 801457c:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801457e:	79fb      	ldrb	r3, [r7, #7]
 8014580:	3301      	adds	r3, #1
 8014582:	71fb      	strb	r3, [r7, #7]
 8014584:	79fb      	ldrb	r3, [r7, #7]
 8014586:	2b13      	cmp	r3, #19
 8014588:	d9ee      	bls.n	8014568 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 801458a:	2300      	movs	r3, #0
}
 801458c:	4618      	mov	r0, r3
 801458e:	370c      	adds	r7, #12
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr
 8014598:	2001753c 	.word	0x2001753c

0801459c <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 801459c:	b480      	push	{r7}
 801459e:	b087      	sub	sp, #28
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80145a4:	2300      	movs	r3, #0
 80145a6:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80145a8:	2301      	movs	r3, #1
 80145aa:	75fb      	strb	r3, [r7, #23]
 80145ac:	e024      	b.n	80145f8 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 80145ae:	7dfb      	ldrb	r3, [r7, #23]
 80145b0:	4a16      	ldr	r2, [pc, #88]	; (801460c <soft_timer_req+0x70>)
 80145b2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d11b      	bne.n	80145f2 <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80145ba:	f3ef 8310 	mrs	r3, PRIMASK
 80145be:	60bb      	str	r3, [r7, #8]
  return(result);
 80145c0:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 80145c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80145c4:	b672      	cpsid	i
}
 80145c6:	bf00      	nop

            SoftTimer[i].handle    = i;
 80145c8:	7dfb      	ldrb	r3, [r7, #23]
 80145ca:	7dfa      	ldrb	r2, [r7, #23]
 80145cc:	b291      	uxth	r1, r2
 80145ce:	4a0f      	ldr	r2, [pc, #60]	; (801460c <soft_timer_req+0x70>)
 80145d0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 80145d4:	7dfb      	ldrb	r3, [r7, #23]
 80145d6:	4a0d      	ldr	r2, [pc, #52]	; (801460c <soft_timer_req+0x70>)
 80145d8:	00db      	lsls	r3, r3, #3
 80145da:	4413      	add	r3, r2
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	605a      	str	r2, [r3, #4]
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f383 8810 	msr	PRIMASK, r3
}
 80145ea:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 80145ec:	7dfb      	ldrb	r3, [r7, #23]
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	e006      	b.n	8014600 <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80145f2:	7dfb      	ldrb	r3, [r7, #23]
 80145f4:	3301      	adds	r3, #1
 80145f6:	75fb      	strb	r3, [r7, #23]
 80145f8:	7dfb      	ldrb	r3, [r7, #23]
 80145fa:	2b13      	cmp	r3, #19
 80145fc:	d9d7      	bls.n	80145ae <soft_timer_req+0x12>
        }
    }

    return (0);
 80145fe:	2300      	movs	r3, #0
}
 8014600:	4618      	mov	r0, r3
 8014602:	371c      	adds	r7, #28
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr
 801460c:	2001753c 	.word	0x2001753c

08014610 <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 8014610:	b480      	push	{r7}
 8014612:	b087      	sub	sp, #28
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801461a:	2301      	movs	r3, #1
 801461c:	75fb      	strb	r3, [r7, #23]
 801461e:	e01f      	b.n	8014660 <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	4a14      	ldr	r2, [pc, #80]	; (8014674 <soft_timer_update+0x64>)
 8014624:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8014628:	461a      	mov	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4293      	cmp	r3, r2
 801462e:	d114      	bne.n	801465a <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014630:	f3ef 8310 	mrs	r3, PRIMASK
 8014634:	60bb      	str	r3, [r7, #8]
  return(result);
 8014636:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 8014638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801463a:	b672      	cpsid	i
}
 801463c:	bf00      	nop

            SoftTimer[i].delay = Tick;
 801463e:	7dfb      	ldrb	r3, [r7, #23]
 8014640:	4a0c      	ldr	r2, [pc, #48]	; (8014674 <soft_timer_update+0x64>)
 8014642:	00db      	lsls	r3, r3, #3
 8014644:	4413      	add	r3, r2
 8014646:	683a      	ldr	r2, [r7, #0]
 8014648:	605a      	str	r2, [r3, #4]
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f383 8810 	msr	PRIMASK, r3
}
 8014654:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 8014656:	2300      	movs	r3, #0
 8014658:	e006      	b.n	8014668 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801465a:	7dfb      	ldrb	r3, [r7, #23]
 801465c:	3301      	adds	r3, #1
 801465e:	75fb      	strb	r3, [r7, #23]
 8014660:	7dfb      	ldrb	r3, [r7, #23]
 8014662:	2b13      	cmp	r3, #19
 8014664:	d9dc      	bls.n	8014620 <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 8014666:	2301      	movs	r3, #1
}
 8014668:	4618      	mov	r0, r3
 801466a:	371c      	adds	r7, #28
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr
 8014674:	2001753c 	.word	0x2001753c

08014678 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 8014678:	b480      	push	{r7}
 801467a:	b087      	sub	sp, #28
 801467c:	af00      	add	r7, sp, #0
 801467e:	4603      	mov	r3, r0
 8014680:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 8014682:	2303      	movs	r3, #3
 8014684:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014686:	f3ef 8310 	mrs	r3, PRIMASK
 801468a:	60fb      	str	r3, [r7, #12]
  return(result);
 801468c:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 801468e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014690:	b672      	cpsid	i
}
 8014692:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 8014694:	88fb      	ldrh	r3, [r7, #6]
 8014696:	4a0f      	ldr	r2, [pc, #60]	; (80146d4 <soft_timer_check+0x5c>)
 8014698:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d10b      	bne.n	80146ba <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 80146a2:	88fb      	ldrh	r3, [r7, #6]
 80146a4:	4a0b      	ldr	r2, [pc, #44]	; (80146d4 <soft_timer_check+0x5c>)
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	4413      	add	r3, r2
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 80146b0:	2301      	movs	r3, #1
 80146b2:	82fb      	strh	r3, [r7, #22]
 80146b4:	e001      	b.n	80146ba <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 80146b6:	2302      	movs	r3, #2
 80146b8:	82fb      	strh	r3, [r7, #22]
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	f383 8810 	msr	PRIMASK, r3
}
 80146c4:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 80146c6:	8afb      	ldrh	r3, [r7, #22]
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	371c      	adds	r7, #28
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr
 80146d4:	2001753c 	.word	0x2001753c

080146d8 <INIT_LIST_HEAD>:
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  list->next = list;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	601a      	str	r2, [r3, #0]
  list->prev = list;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	605a      	str	r2, [r3, #4]
}
 80146ec:	bf00      	nop
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr

080146f8 <__list_add>:
{
 80146f8:	b480      	push	{r7}
 80146fa:	b085      	sub	sp, #20
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	68fa      	ldr	r2, [r7, #12]
 8014708:	605a      	str	r2, [r3, #4]
  new->next = next;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	68ba      	ldr	r2, [r7, #8]
 8014714:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	601a      	str	r2, [r3, #0]
}
 801471c:	bf00      	nop
 801471e:	3714      	adds	r7, #20
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <list_add>:
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	461a      	mov	r2, r3
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f7ff ffdc 	bl	80146f8 <__list_add>
}
 8014740:	bf00      	nop
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <ulog_tag_lvl_list_get>:
 * get the tag's level list on filter
 *
 * @return tag's level list
 */
list_t *ulog_tag_lvl_list_get(void)
{
 8014748:	b480      	push	{r7}
 801474a:	af00      	add	r7, sp, #0
    return &ulog.filter.tag_lvl_list;
 801474c:	4b02      	ldr	r3, [pc, #8]	; (8014758 <ulog_tag_lvl_list_get+0x10>)
}
 801474e:	4618      	mov	r0, r3
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr
 8014758:	200176e8 	.word	0x200176e8

0801475c <ulog_global_filter_lvl_set>:
 * @param level log level: LOG_LVL_ASSERT, LOG_LVL_ERROR, LOG_LVL_WARNING, LOG_LVL_INFO, LOG_LVL_DBG
 *              LOG_FILTER_LVL_SILENT: disable all log output, except assert level
 *              LOG_FILTER_LVL_ALL: enable all log output
 */
void ulog_global_filter_lvl_set(uint32_t level)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
    ULOG_ASSERT(level <= LOG_FILTER_LVL_ALL);

    ulog.filter.level = level;
 8014764:	4a04      	ldr	r2, [pc, #16]	; (8014778 <ulog_global_filter_lvl_set+0x1c>)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 801476c:	bf00      	nop
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr
 8014778:	200175dc 	.word	0x200175dc

0801477c <ulog_backend_register>:
{
    return ulog.filter.keyword;
}

int32_t ulog_backend_register(ulog_backend_t backend, const char *name, ulog_bool_t support_color)
{
 801477c:	b590      	push	{r4, r7, lr}
 801477e:	b087      	sub	sp, #28
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	607a      	str	r2, [r7, #4]
    ULOG_ASSERT(backend);
    ULOG_ASSERT(name);
    ULOG_ASSERT(ulog.init_ok);
    ULOG_ASSERT(backend->output);

    if (backend->init)
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	695b      	ldr	r3, [r3, #20]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d003      	beq.n	8014798 <ulog_backend_register+0x1c>
    {
        backend->init(backend);
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	695b      	ldr	r3, [r3, #20]
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	4798      	blx	r3
    }

    backend->support_color = support_color;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	611a      	str	r2, [r3, #16]
    memcpy(backend->name, name, ULOG_NAME_MAX_NUM);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2210      	movs	r2, #16
 80147a2:	68b9      	ldr	r1, [r7, #8]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f000 f913 	bl	80149d0 <memcpy>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80147aa:	f3ef 8310 	mrs	r3, PRIMASK
 80147ae:	613b      	str	r3, [r7, #16]
  return(result);
 80147b0:	693b      	ldr	r3, [r7, #16]

    enter_critical();
 80147b2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80147b4:	b672      	cpsid	i
}
 80147b6:	bf00      	nop
    list_add(&backend->list, &ulog.backend_list);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	3324      	adds	r3, #36	; 0x24
 80147bc:	4906      	ldr	r1, [pc, #24]	; (80147d8 <ulog_backend_register+0x5c>)
 80147be:	4618      	mov	r0, r3
 80147c0:	f7ff ffb2 	bl	8014728 <list_add>
 80147c4:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	f383 8810 	msr	PRIMASK, r3
}
 80147cc:	bf00      	nop
    exit_critical();

    return RM_OK;
 80147ce:	2300      	movs	r3, #0
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	371c      	adds	r7, #28
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd90      	pop	{r4, r7, pc}
 80147d8:	200175e0 	.word	0x200175e0

080147dc <ulog_init>:
        }
    }
}

int ulog_init(void)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	af00      	add	r7, sp, #0
    if (ulog.init_ok)
 80147e0:	4b0b      	ldr	r3, [pc, #44]	; (8014810 <ulog_init+0x34>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d001      	beq.n	80147ec <ulog_init+0x10>
        return 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	e00f      	b.n	801480c <ulog_init+0x30>
    
    INIT_LIST_HEAD(&ulog.backend_list);
 80147ec:	4809      	ldr	r0, [pc, #36]	; (8014814 <ulog_init+0x38>)
 80147ee:	f7ff ff73 	bl	80146d8 <INIT_LIST_HEAD>

#ifdef ULOG_USING_FILTER
    INIT_LIST_HEAD(ulog_tag_lvl_list_get());
 80147f2:	f7ff ffa9 	bl	8014748 <ulog_tag_lvl_list_get>
 80147f6:	4603      	mov	r3, r0
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7ff ff6d 	bl	80146d8 <INIT_LIST_HEAD>
#endif

#ifdef ULOG_USING_FILTER
    ulog_global_filter_lvl_set(LOG_FILTER_LVL_ALL);
 80147fe:	2007      	movs	r0, #7
 8014800:	f7ff ffac 	bl	801475c <ulog_global_filter_lvl_set>
#endif

    ulog.init_ok = TRUE;
 8014804:	4b02      	ldr	r3, [pc, #8]	; (8014810 <ulog_init+0x34>)
 8014806:	2201      	movs	r2, #1
 8014808:	601a      	str	r2, [r3, #0]

    return 0;
 801480a:	2300      	movs	r3, #0
}
 801480c:	4618      	mov	r0, r3
 801480e:	bd80      	pop	{r7, pc}
 8014810:	200175dc 	.word	0x200175dc
 8014814:	200175e0 	.word	0x200175e0

08014818 <ulog_console_backend_output>:

static struct ulog_backend console;

void ulog_console_backend_output(struct ulog_backend *backend, uint32_t level, const char *tag, int32_t is_raw,
        const char *log, size_t len)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
 8014824:	603b      	str	r3, [r7, #0]
    usart6_transmit((uint8_t *)log, len); 
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	b29b      	uxth	r3, r3
 801482a:	4619      	mov	r1, r3
 801482c:	69b8      	ldr	r0, [r7, #24]
 801482e:	f7ef fe29 	bl	8004484 <usart6_transmit>
}
 8014832:	bf00      	nop
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
	...

0801483c <ulog_console_backend_init>:

int ulog_console_backend_init(void)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	af00      	add	r7, sp, #0
    console.output = ulog_console_backend_output;
 8014840:	4b05      	ldr	r3, [pc, #20]	; (8014858 <ulog_console_backend_init+0x1c>)
 8014842:	4a06      	ldr	r2, [pc, #24]	; (801485c <ulog_console_backend_init+0x20>)
 8014844:	619a      	str	r2, [r3, #24]

    ulog_backend_register(&console, "console", TRUE);
 8014846:	2201      	movs	r2, #1
 8014848:	4905      	ldr	r1, [pc, #20]	; (8014860 <ulog_console_backend_init+0x24>)
 801484a:	4803      	ldr	r0, [pc, #12]	; (8014858 <ulog_console_backend_init+0x1c>)
 801484c:	f7ff ff96 	bl	801477c <ulog_backend_register>

    return 0;
 8014850:	2300      	movs	r3, #0
}
 8014852:	4618      	mov	r0, r3
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	2001771c 	.word	0x2001771c
 801485c:	08014819 	.word	0x08014819
 8014860:	08016060 	.word	0x08016060

08014864 <__malloc_lock>:
 8014864:	4801      	ldr	r0, [pc, #4]	; (801486c <__malloc_lock+0x8>)
 8014866:	f000 b8b1 	b.w	80149cc <__retarget_lock_acquire_recursive>
 801486a:	bf00      	nop
 801486c:	20017884 	.word	0x20017884

08014870 <__malloc_unlock>:
 8014870:	4801      	ldr	r0, [pc, #4]	; (8014878 <__malloc_unlock+0x8>)
 8014872:	f000 b8ac 	b.w	80149ce <__retarget_lock_release_recursive>
 8014876:	bf00      	nop
 8014878:	20017884 	.word	0x20017884

0801487c <strncmp>:
 801487c:	b510      	push	{r4, lr}
 801487e:	b16a      	cbz	r2, 801489c <strncmp+0x20>
 8014880:	3901      	subs	r1, #1
 8014882:	1884      	adds	r4, r0, r2
 8014884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014888:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801488c:	429a      	cmp	r2, r3
 801488e:	d103      	bne.n	8014898 <strncmp+0x1c>
 8014890:	42a0      	cmp	r0, r4
 8014892:	d001      	beq.n	8014898 <strncmp+0x1c>
 8014894:	2a00      	cmp	r2, #0
 8014896:	d1f5      	bne.n	8014884 <strncmp+0x8>
 8014898:	1ad0      	subs	r0, r2, r3
 801489a:	bd10      	pop	{r4, pc}
 801489c:	4610      	mov	r0, r2
 801489e:	e7fc      	b.n	801489a <strncmp+0x1e>

080148a0 <strncpy>:
 80148a0:	b510      	push	{r4, lr}
 80148a2:	3901      	subs	r1, #1
 80148a4:	4603      	mov	r3, r0
 80148a6:	b132      	cbz	r2, 80148b6 <strncpy+0x16>
 80148a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80148ac:	f803 4b01 	strb.w	r4, [r3], #1
 80148b0:	3a01      	subs	r2, #1
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	d1f7      	bne.n	80148a6 <strncpy+0x6>
 80148b6:	441a      	add	r2, r3
 80148b8:	2100      	movs	r1, #0
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d100      	bne.n	80148c0 <strncpy+0x20>
 80148be:	bd10      	pop	{r4, pc}
 80148c0:	f803 1b01 	strb.w	r1, [r3], #1
 80148c4:	e7f9      	b.n	80148ba <strncpy+0x1a>

080148c6 <memset>:
 80148c6:	4402      	add	r2, r0
 80148c8:	4603      	mov	r3, r0
 80148ca:	4293      	cmp	r3, r2
 80148cc:	d100      	bne.n	80148d0 <memset+0xa>
 80148ce:	4770      	bx	lr
 80148d0:	f803 1b01 	strb.w	r1, [r3], #1
 80148d4:	e7f9      	b.n	80148ca <memset+0x4>
	...

080148d8 <_reclaim_reent>:
 80148d8:	4b29      	ldr	r3, [pc, #164]	; (8014980 <_reclaim_reent+0xa8>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	4283      	cmp	r3, r0
 80148de:	b570      	push	{r4, r5, r6, lr}
 80148e0:	4604      	mov	r4, r0
 80148e2:	d04b      	beq.n	801497c <_reclaim_reent+0xa4>
 80148e4:	69c3      	ldr	r3, [r0, #28]
 80148e6:	b143      	cbz	r3, 80148fa <_reclaim_reent+0x22>
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d144      	bne.n	8014978 <_reclaim_reent+0xa0>
 80148ee:	69e3      	ldr	r3, [r4, #28]
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	b111      	cbz	r1, 80148fa <_reclaim_reent+0x22>
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 f879 	bl	80149ec <_free_r>
 80148fa:	6961      	ldr	r1, [r4, #20]
 80148fc:	b111      	cbz	r1, 8014904 <_reclaim_reent+0x2c>
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 f874 	bl	80149ec <_free_r>
 8014904:	69e1      	ldr	r1, [r4, #28]
 8014906:	b111      	cbz	r1, 801490e <_reclaim_reent+0x36>
 8014908:	4620      	mov	r0, r4
 801490a:	f000 f86f 	bl	80149ec <_free_r>
 801490e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014910:	b111      	cbz	r1, 8014918 <_reclaim_reent+0x40>
 8014912:	4620      	mov	r0, r4
 8014914:	f000 f86a 	bl	80149ec <_free_r>
 8014918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801491a:	b111      	cbz	r1, 8014922 <_reclaim_reent+0x4a>
 801491c:	4620      	mov	r0, r4
 801491e:	f000 f865 	bl	80149ec <_free_r>
 8014922:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014924:	b111      	cbz	r1, 801492c <_reclaim_reent+0x54>
 8014926:	4620      	mov	r0, r4
 8014928:	f000 f860 	bl	80149ec <_free_r>
 801492c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801492e:	b111      	cbz	r1, 8014936 <_reclaim_reent+0x5e>
 8014930:	4620      	mov	r0, r4
 8014932:	f000 f85b 	bl	80149ec <_free_r>
 8014936:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014938:	b111      	cbz	r1, 8014940 <_reclaim_reent+0x68>
 801493a:	4620      	mov	r0, r4
 801493c:	f000 f856 	bl	80149ec <_free_r>
 8014940:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014942:	b111      	cbz	r1, 801494a <_reclaim_reent+0x72>
 8014944:	4620      	mov	r0, r4
 8014946:	f000 f851 	bl	80149ec <_free_r>
 801494a:	6a23      	ldr	r3, [r4, #32]
 801494c:	b1b3      	cbz	r3, 801497c <_reclaim_reent+0xa4>
 801494e:	4620      	mov	r0, r4
 8014950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014954:	4718      	bx	r3
 8014956:	5949      	ldr	r1, [r1, r5]
 8014958:	b941      	cbnz	r1, 801496c <_reclaim_reent+0x94>
 801495a:	3504      	adds	r5, #4
 801495c:	69e3      	ldr	r3, [r4, #28]
 801495e:	2d80      	cmp	r5, #128	; 0x80
 8014960:	68d9      	ldr	r1, [r3, #12]
 8014962:	d1f8      	bne.n	8014956 <_reclaim_reent+0x7e>
 8014964:	4620      	mov	r0, r4
 8014966:	f000 f841 	bl	80149ec <_free_r>
 801496a:	e7c0      	b.n	80148ee <_reclaim_reent+0x16>
 801496c:	680e      	ldr	r6, [r1, #0]
 801496e:	4620      	mov	r0, r4
 8014970:	f000 f83c 	bl	80149ec <_free_r>
 8014974:	4631      	mov	r1, r6
 8014976:	e7ef      	b.n	8014958 <_reclaim_reent+0x80>
 8014978:	2500      	movs	r5, #0
 801497a:	e7ef      	b.n	801495c <_reclaim_reent+0x84>
 801497c:	bd70      	pop	{r4, r5, r6, pc}
 801497e:	bf00      	nop
 8014980:	20000198 	.word	0x20000198

08014984 <__libc_init_array>:
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	4d0d      	ldr	r5, [pc, #52]	; (80149bc <__libc_init_array+0x38>)
 8014988:	4c0d      	ldr	r4, [pc, #52]	; (80149c0 <__libc_init_array+0x3c>)
 801498a:	1b64      	subs	r4, r4, r5
 801498c:	10a4      	asrs	r4, r4, #2
 801498e:	2600      	movs	r6, #0
 8014990:	42a6      	cmp	r6, r4
 8014992:	d109      	bne.n	80149a8 <__libc_init_array+0x24>
 8014994:	4d0b      	ldr	r5, [pc, #44]	; (80149c4 <__libc_init_array+0x40>)
 8014996:	4c0c      	ldr	r4, [pc, #48]	; (80149c8 <__libc_init_array+0x44>)
 8014998:	f001 f90e 	bl	8015bb8 <_init>
 801499c:	1b64      	subs	r4, r4, r5
 801499e:	10a4      	asrs	r4, r4, #2
 80149a0:	2600      	movs	r6, #0
 80149a2:	42a6      	cmp	r6, r4
 80149a4:	d105      	bne.n	80149b2 <__libc_init_array+0x2e>
 80149a6:	bd70      	pop	{r4, r5, r6, pc}
 80149a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80149ac:	4798      	blx	r3
 80149ae:	3601      	adds	r6, #1
 80149b0:	e7ee      	b.n	8014990 <__libc_init_array+0xc>
 80149b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80149b6:	4798      	blx	r3
 80149b8:	3601      	adds	r6, #1
 80149ba:	e7f2      	b.n	80149a2 <__libc_init_array+0x1e>
 80149bc:	08016868 	.word	0x08016868
 80149c0:	08016868 	.word	0x08016868
 80149c4:	08016868 	.word	0x08016868
 80149c8:	0801686c 	.word	0x0801686c

080149cc <__retarget_lock_acquire_recursive>:
 80149cc:	4770      	bx	lr

080149ce <__retarget_lock_release_recursive>:
 80149ce:	4770      	bx	lr

080149d0 <memcpy>:
 80149d0:	440a      	add	r2, r1
 80149d2:	4291      	cmp	r1, r2
 80149d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80149d8:	d100      	bne.n	80149dc <memcpy+0xc>
 80149da:	4770      	bx	lr
 80149dc:	b510      	push	{r4, lr}
 80149de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149e6:	4291      	cmp	r1, r2
 80149e8:	d1f9      	bne.n	80149de <memcpy+0xe>
 80149ea:	bd10      	pop	{r4, pc}

080149ec <_free_r>:
 80149ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149ee:	2900      	cmp	r1, #0
 80149f0:	d044      	beq.n	8014a7c <_free_r+0x90>
 80149f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149f6:	9001      	str	r0, [sp, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f1a1 0404 	sub.w	r4, r1, #4
 80149fe:	bfb8      	it	lt
 8014a00:	18e4      	addlt	r4, r4, r3
 8014a02:	f7ff ff2f 	bl	8014864 <__malloc_lock>
 8014a06:	4a1e      	ldr	r2, [pc, #120]	; (8014a80 <_free_r+0x94>)
 8014a08:	9801      	ldr	r0, [sp, #4]
 8014a0a:	6813      	ldr	r3, [r2, #0]
 8014a0c:	b933      	cbnz	r3, 8014a1c <_free_r+0x30>
 8014a0e:	6063      	str	r3, [r4, #4]
 8014a10:	6014      	str	r4, [r2, #0]
 8014a12:	b003      	add	sp, #12
 8014a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a18:	f7ff bf2a 	b.w	8014870 <__malloc_unlock>
 8014a1c:	42a3      	cmp	r3, r4
 8014a1e:	d908      	bls.n	8014a32 <_free_r+0x46>
 8014a20:	6825      	ldr	r5, [r4, #0]
 8014a22:	1961      	adds	r1, r4, r5
 8014a24:	428b      	cmp	r3, r1
 8014a26:	bf01      	itttt	eq
 8014a28:	6819      	ldreq	r1, [r3, #0]
 8014a2a:	685b      	ldreq	r3, [r3, #4]
 8014a2c:	1949      	addeq	r1, r1, r5
 8014a2e:	6021      	streq	r1, [r4, #0]
 8014a30:	e7ed      	b.n	8014a0e <_free_r+0x22>
 8014a32:	461a      	mov	r2, r3
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	b10b      	cbz	r3, 8014a3c <_free_r+0x50>
 8014a38:	42a3      	cmp	r3, r4
 8014a3a:	d9fa      	bls.n	8014a32 <_free_r+0x46>
 8014a3c:	6811      	ldr	r1, [r2, #0]
 8014a3e:	1855      	adds	r5, r2, r1
 8014a40:	42a5      	cmp	r5, r4
 8014a42:	d10b      	bne.n	8014a5c <_free_r+0x70>
 8014a44:	6824      	ldr	r4, [r4, #0]
 8014a46:	4421      	add	r1, r4
 8014a48:	1854      	adds	r4, r2, r1
 8014a4a:	42a3      	cmp	r3, r4
 8014a4c:	6011      	str	r1, [r2, #0]
 8014a4e:	d1e0      	bne.n	8014a12 <_free_r+0x26>
 8014a50:	681c      	ldr	r4, [r3, #0]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	6053      	str	r3, [r2, #4]
 8014a56:	440c      	add	r4, r1
 8014a58:	6014      	str	r4, [r2, #0]
 8014a5a:	e7da      	b.n	8014a12 <_free_r+0x26>
 8014a5c:	d902      	bls.n	8014a64 <_free_r+0x78>
 8014a5e:	230c      	movs	r3, #12
 8014a60:	6003      	str	r3, [r0, #0]
 8014a62:	e7d6      	b.n	8014a12 <_free_r+0x26>
 8014a64:	6825      	ldr	r5, [r4, #0]
 8014a66:	1961      	adds	r1, r4, r5
 8014a68:	428b      	cmp	r3, r1
 8014a6a:	bf04      	itt	eq
 8014a6c:	6819      	ldreq	r1, [r3, #0]
 8014a6e:	685b      	ldreq	r3, [r3, #4]
 8014a70:	6063      	str	r3, [r4, #4]
 8014a72:	bf04      	itt	eq
 8014a74:	1949      	addeq	r1, r1, r5
 8014a76:	6021      	streq	r1, [r4, #0]
 8014a78:	6054      	str	r4, [r2, #4]
 8014a7a:	e7ca      	b.n	8014a12 <_free_r+0x26>
 8014a7c:	b003      	add	sp, #12
 8014a7e:	bd30      	pop	{r4, r5, pc}
 8014a80:	20017748 	.word	0x20017748
 8014a84:	00000000 	.word	0x00000000

08014a88 <cos>:
 8014a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a8a:	ec53 2b10 	vmov	r2, r3, d0
 8014a8e:	4826      	ldr	r0, [pc, #152]	; (8014b28 <cos+0xa0>)
 8014a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014a94:	4281      	cmp	r1, r0
 8014a96:	dc06      	bgt.n	8014aa6 <cos+0x1e>
 8014a98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014b20 <cos+0x98>
 8014a9c:	b005      	add	sp, #20
 8014a9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014aa2:	f000 be01 	b.w	80156a8 <__kernel_cos>
 8014aa6:	4821      	ldr	r0, [pc, #132]	; (8014b2c <cos+0xa4>)
 8014aa8:	4281      	cmp	r1, r0
 8014aaa:	dd09      	ble.n	8014ac0 <cos+0x38>
 8014aac:	ee10 0a10 	vmov	r0, s0
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	f7eb fba9 	bl	8000208 <__aeabi_dsub>
 8014ab6:	ec41 0b10 	vmov	d0, r0, r1
 8014aba:	b005      	add	sp, #20
 8014abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ac0:	4668      	mov	r0, sp
 8014ac2:	f000 f899 	bl	8014bf8 <__ieee754_rem_pio2>
 8014ac6:	f000 0003 	and.w	r0, r0, #3
 8014aca:	2801      	cmp	r0, #1
 8014acc:	d00b      	beq.n	8014ae6 <cos+0x5e>
 8014ace:	2802      	cmp	r0, #2
 8014ad0:	d016      	beq.n	8014b00 <cos+0x78>
 8014ad2:	b9e0      	cbnz	r0, 8014b0e <cos+0x86>
 8014ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ad8:	ed9d 0b00 	vldr	d0, [sp]
 8014adc:	f000 fde4 	bl	80156a8 <__kernel_cos>
 8014ae0:	ec51 0b10 	vmov	r0, r1, d0
 8014ae4:	e7e7      	b.n	8014ab6 <cos+0x2e>
 8014ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014aea:	ed9d 0b00 	vldr	d0, [sp]
 8014aee:	f000 fea3 	bl	8015838 <__kernel_sin>
 8014af2:	ec53 2b10 	vmov	r2, r3, d0
 8014af6:	ee10 0a10 	vmov	r0, s0
 8014afa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014afe:	e7da      	b.n	8014ab6 <cos+0x2e>
 8014b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014b04:	ed9d 0b00 	vldr	d0, [sp]
 8014b08:	f000 fdce 	bl	80156a8 <__kernel_cos>
 8014b0c:	e7f1      	b.n	8014af2 <cos+0x6a>
 8014b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014b12:	ed9d 0b00 	vldr	d0, [sp]
 8014b16:	2001      	movs	r0, #1
 8014b18:	f000 fe8e 	bl	8015838 <__kernel_sin>
 8014b1c:	e7e0      	b.n	8014ae0 <cos+0x58>
 8014b1e:	bf00      	nop
	...
 8014b28:	3fe921fb 	.word	0x3fe921fb
 8014b2c:	7fefffff 	.word	0x7fefffff

08014b30 <fabs>:
 8014b30:	ec51 0b10 	vmov	r0, r1, d0
 8014b34:	ee10 2a10 	vmov	r2, s0
 8014b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b3c:	ec43 2b10 	vmov	d0, r2, r3
 8014b40:	4770      	bx	lr
 8014b42:	0000      	movs	r0, r0
 8014b44:	0000      	movs	r0, r0
	...

08014b48 <sin>:
 8014b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b4a:	ec53 2b10 	vmov	r2, r3, d0
 8014b4e:	4828      	ldr	r0, [pc, #160]	; (8014bf0 <sin+0xa8>)
 8014b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014b54:	4281      	cmp	r1, r0
 8014b56:	dc07      	bgt.n	8014b68 <sin+0x20>
 8014b58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8014be8 <sin+0xa0>
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	b005      	add	sp, #20
 8014b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b64:	f000 be68 	b.w	8015838 <__kernel_sin>
 8014b68:	4822      	ldr	r0, [pc, #136]	; (8014bf4 <sin+0xac>)
 8014b6a:	4281      	cmp	r1, r0
 8014b6c:	dd09      	ble.n	8014b82 <sin+0x3a>
 8014b6e:	ee10 0a10 	vmov	r0, s0
 8014b72:	4619      	mov	r1, r3
 8014b74:	f7eb fb48 	bl	8000208 <__aeabi_dsub>
 8014b78:	ec41 0b10 	vmov	d0, r0, r1
 8014b7c:	b005      	add	sp, #20
 8014b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b82:	4668      	mov	r0, sp
 8014b84:	f000 f838 	bl	8014bf8 <__ieee754_rem_pio2>
 8014b88:	f000 0003 	and.w	r0, r0, #3
 8014b8c:	2801      	cmp	r0, #1
 8014b8e:	d00c      	beq.n	8014baa <sin+0x62>
 8014b90:	2802      	cmp	r0, #2
 8014b92:	d011      	beq.n	8014bb8 <sin+0x70>
 8014b94:	b9f0      	cbnz	r0, 8014bd4 <sin+0x8c>
 8014b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014b9a:	ed9d 0b00 	vldr	d0, [sp]
 8014b9e:	2001      	movs	r0, #1
 8014ba0:	f000 fe4a 	bl	8015838 <__kernel_sin>
 8014ba4:	ec51 0b10 	vmov	r0, r1, d0
 8014ba8:	e7e6      	b.n	8014b78 <sin+0x30>
 8014baa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014bae:	ed9d 0b00 	vldr	d0, [sp]
 8014bb2:	f000 fd79 	bl	80156a8 <__kernel_cos>
 8014bb6:	e7f5      	b.n	8014ba4 <sin+0x5c>
 8014bb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014bbc:	ed9d 0b00 	vldr	d0, [sp]
 8014bc0:	2001      	movs	r0, #1
 8014bc2:	f000 fe39 	bl	8015838 <__kernel_sin>
 8014bc6:	ec53 2b10 	vmov	r2, r3, d0
 8014bca:	ee10 0a10 	vmov	r0, s0
 8014bce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014bd2:	e7d1      	b.n	8014b78 <sin+0x30>
 8014bd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014bd8:	ed9d 0b00 	vldr	d0, [sp]
 8014bdc:	f000 fd64 	bl	80156a8 <__kernel_cos>
 8014be0:	e7f1      	b.n	8014bc6 <sin+0x7e>
 8014be2:	bf00      	nop
 8014be4:	f3af 8000 	nop.w
	...
 8014bf0:	3fe921fb 	.word	0x3fe921fb
 8014bf4:	7fefffff 	.word	0x7fefffff

08014bf8 <__ieee754_rem_pio2>:
 8014bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bfc:	ed2d 8b02 	vpush	{d8}
 8014c00:	ec55 4b10 	vmov	r4, r5, d0
 8014c04:	4bca      	ldr	r3, [pc, #808]	; (8014f30 <__ieee754_rem_pio2+0x338>)
 8014c06:	b08b      	sub	sp, #44	; 0x2c
 8014c08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014c0c:	4598      	cmp	r8, r3
 8014c0e:	4682      	mov	sl, r0
 8014c10:	9502      	str	r5, [sp, #8]
 8014c12:	dc08      	bgt.n	8014c26 <__ieee754_rem_pio2+0x2e>
 8014c14:	2200      	movs	r2, #0
 8014c16:	2300      	movs	r3, #0
 8014c18:	ed80 0b00 	vstr	d0, [r0]
 8014c1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014c20:	f04f 0b00 	mov.w	fp, #0
 8014c24:	e028      	b.n	8014c78 <__ieee754_rem_pio2+0x80>
 8014c26:	4bc3      	ldr	r3, [pc, #780]	; (8014f34 <__ieee754_rem_pio2+0x33c>)
 8014c28:	4598      	cmp	r8, r3
 8014c2a:	dc78      	bgt.n	8014d1e <__ieee754_rem_pio2+0x126>
 8014c2c:	9b02      	ldr	r3, [sp, #8]
 8014c2e:	4ec2      	ldr	r6, [pc, #776]	; (8014f38 <__ieee754_rem_pio2+0x340>)
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	ee10 0a10 	vmov	r0, s0
 8014c36:	a3b0      	add	r3, pc, #704	; (adr r3, 8014ef8 <__ieee754_rem_pio2+0x300>)
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	dd39      	ble.n	8014cb4 <__ieee754_rem_pio2+0xbc>
 8014c40:	f7eb fae2 	bl	8000208 <__aeabi_dsub>
 8014c44:	45b0      	cmp	r8, r6
 8014c46:	4604      	mov	r4, r0
 8014c48:	460d      	mov	r5, r1
 8014c4a:	d01b      	beq.n	8014c84 <__ieee754_rem_pio2+0x8c>
 8014c4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8014f00 <__ieee754_rem_pio2+0x308>)
 8014c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c52:	f7eb fad9 	bl	8000208 <__aeabi_dsub>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	e9ca 2300 	strd	r2, r3, [sl]
 8014c5e:	4620      	mov	r0, r4
 8014c60:	4629      	mov	r1, r5
 8014c62:	f7eb fad1 	bl	8000208 <__aeabi_dsub>
 8014c66:	a3a6      	add	r3, pc, #664	; (adr r3, 8014f00 <__ieee754_rem_pio2+0x308>)
 8014c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6c:	f7eb facc 	bl	8000208 <__aeabi_dsub>
 8014c70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014c74:	f04f 0b01 	mov.w	fp, #1
 8014c78:	4658      	mov	r0, fp
 8014c7a:	b00b      	add	sp, #44	; 0x2c
 8014c7c:	ecbd 8b02 	vpop	{d8}
 8014c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c84:	a3a0      	add	r3, pc, #640	; (adr r3, 8014f08 <__ieee754_rem_pio2+0x310>)
 8014c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8a:	f7eb fabd 	bl	8000208 <__aeabi_dsub>
 8014c8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8014f10 <__ieee754_rem_pio2+0x318>)
 8014c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c94:	4604      	mov	r4, r0
 8014c96:	460d      	mov	r5, r1
 8014c98:	f7eb fab6 	bl	8000208 <__aeabi_dsub>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	e9ca 2300 	strd	r2, r3, [sl]
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f7eb faae 	bl	8000208 <__aeabi_dsub>
 8014cac:	a398      	add	r3, pc, #608	; (adr r3, 8014f10 <__ieee754_rem_pio2+0x318>)
 8014cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb2:	e7db      	b.n	8014c6c <__ieee754_rem_pio2+0x74>
 8014cb4:	f7eb faaa 	bl	800020c <__adddf3>
 8014cb8:	45b0      	cmp	r8, r6
 8014cba:	4604      	mov	r4, r0
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	d016      	beq.n	8014cee <__ieee754_rem_pio2+0xf6>
 8014cc0:	a38f      	add	r3, pc, #572	; (adr r3, 8014f00 <__ieee754_rem_pio2+0x308>)
 8014cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc6:	f7eb faa1 	bl	800020c <__adddf3>
 8014cca:	4602      	mov	r2, r0
 8014ccc:	460b      	mov	r3, r1
 8014cce:	e9ca 2300 	strd	r2, r3, [sl]
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	4629      	mov	r1, r5
 8014cd6:	f7eb fa97 	bl	8000208 <__aeabi_dsub>
 8014cda:	a389      	add	r3, pc, #548	; (adr r3, 8014f00 <__ieee754_rem_pio2+0x308>)
 8014cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce0:	f7eb fa94 	bl	800020c <__adddf3>
 8014ce4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014ce8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014cec:	e7c4      	b.n	8014c78 <__ieee754_rem_pio2+0x80>
 8014cee:	a386      	add	r3, pc, #536	; (adr r3, 8014f08 <__ieee754_rem_pio2+0x310>)
 8014cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf4:	f7eb fa8a 	bl	800020c <__adddf3>
 8014cf8:	a385      	add	r3, pc, #532	; (adr r3, 8014f10 <__ieee754_rem_pio2+0x318>)
 8014cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfe:	4604      	mov	r4, r0
 8014d00:	460d      	mov	r5, r1
 8014d02:	f7eb fa83 	bl	800020c <__adddf3>
 8014d06:	4602      	mov	r2, r0
 8014d08:	460b      	mov	r3, r1
 8014d0a:	e9ca 2300 	strd	r2, r3, [sl]
 8014d0e:	4620      	mov	r0, r4
 8014d10:	4629      	mov	r1, r5
 8014d12:	f7eb fa79 	bl	8000208 <__aeabi_dsub>
 8014d16:	a37e      	add	r3, pc, #504	; (adr r3, 8014f10 <__ieee754_rem_pio2+0x318>)
 8014d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1c:	e7e0      	b.n	8014ce0 <__ieee754_rem_pio2+0xe8>
 8014d1e:	4b87      	ldr	r3, [pc, #540]	; (8014f3c <__ieee754_rem_pio2+0x344>)
 8014d20:	4598      	cmp	r8, r3
 8014d22:	f300 80d8 	bgt.w	8014ed6 <__ieee754_rem_pio2+0x2de>
 8014d26:	f7ff ff03 	bl	8014b30 <fabs>
 8014d2a:	ec55 4b10 	vmov	r4, r5, d0
 8014d2e:	ee10 0a10 	vmov	r0, s0
 8014d32:	a379      	add	r3, pc, #484	; (adr r3, 8014f18 <__ieee754_rem_pio2+0x320>)
 8014d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d38:	4629      	mov	r1, r5
 8014d3a:	f7eb fc1d 	bl	8000578 <__aeabi_dmul>
 8014d3e:	4b80      	ldr	r3, [pc, #512]	; (8014f40 <__ieee754_rem_pio2+0x348>)
 8014d40:	2200      	movs	r2, #0
 8014d42:	f7eb fa63 	bl	800020c <__adddf3>
 8014d46:	f7eb feb1 	bl	8000aac <__aeabi_d2iz>
 8014d4a:	4683      	mov	fp, r0
 8014d4c:	f7eb fbaa 	bl	80004a4 <__aeabi_i2d>
 8014d50:	4602      	mov	r2, r0
 8014d52:	460b      	mov	r3, r1
 8014d54:	ec43 2b18 	vmov	d8, r2, r3
 8014d58:	a367      	add	r3, pc, #412	; (adr r3, 8014ef8 <__ieee754_rem_pio2+0x300>)
 8014d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5e:	f7eb fc0b 	bl	8000578 <__aeabi_dmul>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	4620      	mov	r0, r4
 8014d68:	4629      	mov	r1, r5
 8014d6a:	f7eb fa4d 	bl	8000208 <__aeabi_dsub>
 8014d6e:	a364      	add	r3, pc, #400	; (adr r3, 8014f00 <__ieee754_rem_pio2+0x308>)
 8014d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d74:	4606      	mov	r6, r0
 8014d76:	460f      	mov	r7, r1
 8014d78:	ec51 0b18 	vmov	r0, r1, d8
 8014d7c:	f7eb fbfc 	bl	8000578 <__aeabi_dmul>
 8014d80:	f1bb 0f1f 	cmp.w	fp, #31
 8014d84:	4604      	mov	r4, r0
 8014d86:	460d      	mov	r5, r1
 8014d88:	dc0d      	bgt.n	8014da6 <__ieee754_rem_pio2+0x1ae>
 8014d8a:	4b6e      	ldr	r3, [pc, #440]	; (8014f44 <__ieee754_rem_pio2+0x34c>)
 8014d8c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8014d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d94:	4543      	cmp	r3, r8
 8014d96:	d006      	beq.n	8014da6 <__ieee754_rem_pio2+0x1ae>
 8014d98:	4622      	mov	r2, r4
 8014d9a:	462b      	mov	r3, r5
 8014d9c:	4630      	mov	r0, r6
 8014d9e:	4639      	mov	r1, r7
 8014da0:	f7eb fa32 	bl	8000208 <__aeabi_dsub>
 8014da4:	e00e      	b.n	8014dc4 <__ieee754_rem_pio2+0x1cc>
 8014da6:	462b      	mov	r3, r5
 8014da8:	4622      	mov	r2, r4
 8014daa:	4630      	mov	r0, r6
 8014dac:	4639      	mov	r1, r7
 8014dae:	f7eb fa2b 	bl	8000208 <__aeabi_dsub>
 8014db2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014db6:	9303      	str	r3, [sp, #12]
 8014db8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014dbc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8014dc0:	2b10      	cmp	r3, #16
 8014dc2:	dc02      	bgt.n	8014dca <__ieee754_rem_pio2+0x1d2>
 8014dc4:	e9ca 0100 	strd	r0, r1, [sl]
 8014dc8:	e039      	b.n	8014e3e <__ieee754_rem_pio2+0x246>
 8014dca:	a34f      	add	r3, pc, #316	; (adr r3, 8014f08 <__ieee754_rem_pio2+0x310>)
 8014dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd0:	ec51 0b18 	vmov	r0, r1, d8
 8014dd4:	f7eb fbd0 	bl	8000578 <__aeabi_dmul>
 8014dd8:	4604      	mov	r4, r0
 8014dda:	460d      	mov	r5, r1
 8014ddc:	4602      	mov	r2, r0
 8014dde:	460b      	mov	r3, r1
 8014de0:	4630      	mov	r0, r6
 8014de2:	4639      	mov	r1, r7
 8014de4:	f7eb fa10 	bl	8000208 <__aeabi_dsub>
 8014de8:	4602      	mov	r2, r0
 8014dea:	460b      	mov	r3, r1
 8014dec:	4680      	mov	r8, r0
 8014dee:	4689      	mov	r9, r1
 8014df0:	4630      	mov	r0, r6
 8014df2:	4639      	mov	r1, r7
 8014df4:	f7eb fa08 	bl	8000208 <__aeabi_dsub>
 8014df8:	4622      	mov	r2, r4
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	f7eb fa04 	bl	8000208 <__aeabi_dsub>
 8014e00:	a343      	add	r3, pc, #268	; (adr r3, 8014f10 <__ieee754_rem_pio2+0x318>)
 8014e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e06:	4604      	mov	r4, r0
 8014e08:	460d      	mov	r5, r1
 8014e0a:	ec51 0b18 	vmov	r0, r1, d8
 8014e0e:	f7eb fbb3 	bl	8000578 <__aeabi_dmul>
 8014e12:	4622      	mov	r2, r4
 8014e14:	462b      	mov	r3, r5
 8014e16:	f7eb f9f7 	bl	8000208 <__aeabi_dsub>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	4604      	mov	r4, r0
 8014e20:	460d      	mov	r5, r1
 8014e22:	4640      	mov	r0, r8
 8014e24:	4649      	mov	r1, r9
 8014e26:	f7eb f9ef 	bl	8000208 <__aeabi_dsub>
 8014e2a:	9a03      	ldr	r2, [sp, #12]
 8014e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014e30:	1ad3      	subs	r3, r2, r3
 8014e32:	2b31      	cmp	r3, #49	; 0x31
 8014e34:	dc24      	bgt.n	8014e80 <__ieee754_rem_pio2+0x288>
 8014e36:	e9ca 0100 	strd	r0, r1, [sl]
 8014e3a:	4646      	mov	r6, r8
 8014e3c:	464f      	mov	r7, r9
 8014e3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8014e42:	4630      	mov	r0, r6
 8014e44:	4642      	mov	r2, r8
 8014e46:	464b      	mov	r3, r9
 8014e48:	4639      	mov	r1, r7
 8014e4a:	f7eb f9dd 	bl	8000208 <__aeabi_dsub>
 8014e4e:	462b      	mov	r3, r5
 8014e50:	4622      	mov	r2, r4
 8014e52:	f7eb f9d9 	bl	8000208 <__aeabi_dsub>
 8014e56:	9b02      	ldr	r3, [sp, #8]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014e5e:	f6bf af0b 	bge.w	8014c78 <__ieee754_rem_pio2+0x80>
 8014e62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014e66:	f8ca 3004 	str.w	r3, [sl, #4]
 8014e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e6e:	f8ca 8000 	str.w	r8, [sl]
 8014e72:	f8ca 0008 	str.w	r0, [sl, #8]
 8014e76:	f8ca 300c 	str.w	r3, [sl, #12]
 8014e7a:	f1cb 0b00 	rsb	fp, fp, #0
 8014e7e:	e6fb      	b.n	8014c78 <__ieee754_rem_pio2+0x80>
 8014e80:	a327      	add	r3, pc, #156	; (adr r3, 8014f20 <__ieee754_rem_pio2+0x328>)
 8014e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e86:	ec51 0b18 	vmov	r0, r1, d8
 8014e8a:	f7eb fb75 	bl	8000578 <__aeabi_dmul>
 8014e8e:	4604      	mov	r4, r0
 8014e90:	460d      	mov	r5, r1
 8014e92:	4602      	mov	r2, r0
 8014e94:	460b      	mov	r3, r1
 8014e96:	4640      	mov	r0, r8
 8014e98:	4649      	mov	r1, r9
 8014e9a:	f7eb f9b5 	bl	8000208 <__aeabi_dsub>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	4606      	mov	r6, r0
 8014ea4:	460f      	mov	r7, r1
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	4649      	mov	r1, r9
 8014eaa:	f7eb f9ad 	bl	8000208 <__aeabi_dsub>
 8014eae:	4622      	mov	r2, r4
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	f7eb f9a9 	bl	8000208 <__aeabi_dsub>
 8014eb6:	a31c      	add	r3, pc, #112	; (adr r3, 8014f28 <__ieee754_rem_pio2+0x330>)
 8014eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	460d      	mov	r5, r1
 8014ec0:	ec51 0b18 	vmov	r0, r1, d8
 8014ec4:	f7eb fb58 	bl	8000578 <__aeabi_dmul>
 8014ec8:	4622      	mov	r2, r4
 8014eca:	462b      	mov	r3, r5
 8014ecc:	f7eb f99c 	bl	8000208 <__aeabi_dsub>
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	e760      	b.n	8014d98 <__ieee754_rem_pio2+0x1a0>
 8014ed6:	4b1c      	ldr	r3, [pc, #112]	; (8014f48 <__ieee754_rem_pio2+0x350>)
 8014ed8:	4598      	cmp	r8, r3
 8014eda:	dd37      	ble.n	8014f4c <__ieee754_rem_pio2+0x354>
 8014edc:	ee10 2a10 	vmov	r2, s0
 8014ee0:	462b      	mov	r3, r5
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	4629      	mov	r1, r5
 8014ee6:	f7eb f98f 	bl	8000208 <__aeabi_dsub>
 8014eea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014eee:	e9ca 0100 	strd	r0, r1, [sl]
 8014ef2:	e695      	b.n	8014c20 <__ieee754_rem_pio2+0x28>
 8014ef4:	f3af 8000 	nop.w
 8014ef8:	54400000 	.word	0x54400000
 8014efc:	3ff921fb 	.word	0x3ff921fb
 8014f00:	1a626331 	.word	0x1a626331
 8014f04:	3dd0b461 	.word	0x3dd0b461
 8014f08:	1a600000 	.word	0x1a600000
 8014f0c:	3dd0b461 	.word	0x3dd0b461
 8014f10:	2e037073 	.word	0x2e037073
 8014f14:	3ba3198a 	.word	0x3ba3198a
 8014f18:	6dc9c883 	.word	0x6dc9c883
 8014f1c:	3fe45f30 	.word	0x3fe45f30
 8014f20:	2e000000 	.word	0x2e000000
 8014f24:	3ba3198a 	.word	0x3ba3198a
 8014f28:	252049c1 	.word	0x252049c1
 8014f2c:	397b839a 	.word	0x397b839a
 8014f30:	3fe921fb 	.word	0x3fe921fb
 8014f34:	4002d97b 	.word	0x4002d97b
 8014f38:	3ff921fb 	.word	0x3ff921fb
 8014f3c:	413921fb 	.word	0x413921fb
 8014f40:	3fe00000 	.word	0x3fe00000
 8014f44:	08016688 	.word	0x08016688
 8014f48:	7fefffff 	.word	0x7fefffff
 8014f4c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8014f50:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8014f54:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8014f58:	4620      	mov	r0, r4
 8014f5a:	460d      	mov	r5, r1
 8014f5c:	f7eb fda6 	bl	8000aac <__aeabi_d2iz>
 8014f60:	f7eb faa0 	bl	80004a4 <__aeabi_i2d>
 8014f64:	4602      	mov	r2, r0
 8014f66:	460b      	mov	r3, r1
 8014f68:	4620      	mov	r0, r4
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014f70:	f7eb f94a 	bl	8000208 <__aeabi_dsub>
 8014f74:	4b21      	ldr	r3, [pc, #132]	; (8014ffc <__ieee754_rem_pio2+0x404>)
 8014f76:	2200      	movs	r2, #0
 8014f78:	f7eb fafe 	bl	8000578 <__aeabi_dmul>
 8014f7c:	460d      	mov	r5, r1
 8014f7e:	4604      	mov	r4, r0
 8014f80:	f7eb fd94 	bl	8000aac <__aeabi_d2iz>
 8014f84:	f7eb fa8e 	bl	80004a4 <__aeabi_i2d>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	4629      	mov	r1, r5
 8014f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f94:	f7eb f938 	bl	8000208 <__aeabi_dsub>
 8014f98:	4b18      	ldr	r3, [pc, #96]	; (8014ffc <__ieee754_rem_pio2+0x404>)
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	f7eb faec 	bl	8000578 <__aeabi_dmul>
 8014fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014fa4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8014fa8:	2703      	movs	r7, #3
 8014faa:	2400      	movs	r4, #0
 8014fac:	2500      	movs	r5, #0
 8014fae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	462b      	mov	r3, r5
 8014fb6:	46b9      	mov	r9, r7
 8014fb8:	3f01      	subs	r7, #1
 8014fba:	f7eb fd45 	bl	8000a48 <__aeabi_dcmpeq>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d1f5      	bne.n	8014fae <__ieee754_rem_pio2+0x3b6>
 8014fc2:	4b0f      	ldr	r3, [pc, #60]	; (8015000 <__ieee754_rem_pio2+0x408>)
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	2302      	movs	r3, #2
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	4632      	mov	r2, r6
 8014fcc:	464b      	mov	r3, r9
 8014fce:	4651      	mov	r1, sl
 8014fd0:	a804      	add	r0, sp, #16
 8014fd2:	f000 f819 	bl	8015008 <__kernel_rem_pio2>
 8014fd6:	9b02      	ldr	r3, [sp, #8]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	4683      	mov	fp, r0
 8014fdc:	f6bf ae4c 	bge.w	8014c78 <__ieee754_rem_pio2+0x80>
 8014fe0:	e9da 2100 	ldrd	r2, r1, [sl]
 8014fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fe8:	e9ca 2300 	strd	r2, r3, [sl]
 8014fec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8014ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ff4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8014ff8:	e73f      	b.n	8014e7a <__ieee754_rem_pio2+0x282>
 8014ffa:	bf00      	nop
 8014ffc:	41700000 	.word	0x41700000
 8015000:	08016708 	.word	0x08016708
 8015004:	00000000 	.word	0x00000000

08015008 <__kernel_rem_pio2>:
 8015008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	ed2d 8b02 	vpush	{d8}
 8015010:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8015014:	f112 0f14 	cmn.w	r2, #20
 8015018:	9306      	str	r3, [sp, #24]
 801501a:	9104      	str	r1, [sp, #16]
 801501c:	4bc2      	ldr	r3, [pc, #776]	; (8015328 <__kernel_rem_pio2+0x320>)
 801501e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8015020:	9009      	str	r0, [sp, #36]	; 0x24
 8015022:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	9b06      	ldr	r3, [sp, #24]
 801502a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801502e:	bfa8      	it	ge
 8015030:	1ed4      	subge	r4, r2, #3
 8015032:	9305      	str	r3, [sp, #20]
 8015034:	bfb2      	itee	lt
 8015036:	2400      	movlt	r4, #0
 8015038:	2318      	movge	r3, #24
 801503a:	fb94 f4f3 	sdivge	r4, r4, r3
 801503e:	f06f 0317 	mvn.w	r3, #23
 8015042:	fb04 3303 	mla	r3, r4, r3, r3
 8015046:	eb03 0a02 	add.w	sl, r3, r2
 801504a:	9b00      	ldr	r3, [sp, #0]
 801504c:	9a05      	ldr	r2, [sp, #20]
 801504e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8015318 <__kernel_rem_pio2+0x310>
 8015052:	eb03 0802 	add.w	r8, r3, r2
 8015056:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015058:	1aa7      	subs	r7, r4, r2
 801505a:	ae20      	add	r6, sp, #128	; 0x80
 801505c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015060:	2500      	movs	r5, #0
 8015062:	4545      	cmp	r5, r8
 8015064:	dd13      	ble.n	801508e <__kernel_rem_pio2+0x86>
 8015066:	9b06      	ldr	r3, [sp, #24]
 8015068:	aa20      	add	r2, sp, #128	; 0x80
 801506a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801506e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8015072:	f04f 0800 	mov.w	r8, #0
 8015076:	9b00      	ldr	r3, [sp, #0]
 8015078:	4598      	cmp	r8, r3
 801507a:	dc31      	bgt.n	80150e0 <__kernel_rem_pio2+0xd8>
 801507c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8015318 <__kernel_rem_pio2+0x310>
 8015080:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015084:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015088:	462f      	mov	r7, r5
 801508a:	2600      	movs	r6, #0
 801508c:	e01b      	b.n	80150c6 <__kernel_rem_pio2+0xbe>
 801508e:	42ef      	cmn	r7, r5
 8015090:	d407      	bmi.n	80150a2 <__kernel_rem_pio2+0x9a>
 8015092:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015096:	f7eb fa05 	bl	80004a4 <__aeabi_i2d>
 801509a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801509e:	3501      	adds	r5, #1
 80150a0:	e7df      	b.n	8015062 <__kernel_rem_pio2+0x5a>
 80150a2:	ec51 0b18 	vmov	r0, r1, d8
 80150a6:	e7f8      	b.n	801509a <__kernel_rem_pio2+0x92>
 80150a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80150b0:	f7eb fa62 	bl	8000578 <__aeabi_dmul>
 80150b4:	4602      	mov	r2, r0
 80150b6:	460b      	mov	r3, r1
 80150b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150bc:	f7eb f8a6 	bl	800020c <__adddf3>
 80150c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150c4:	3601      	adds	r6, #1
 80150c6:	9b05      	ldr	r3, [sp, #20]
 80150c8:	429e      	cmp	r6, r3
 80150ca:	f1a7 0708 	sub.w	r7, r7, #8
 80150ce:	ddeb      	ble.n	80150a8 <__kernel_rem_pio2+0xa0>
 80150d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80150d4:	f108 0801 	add.w	r8, r8, #1
 80150d8:	ecab 7b02 	vstmia	fp!, {d7}
 80150dc:	3508      	adds	r5, #8
 80150de:	e7ca      	b.n	8015076 <__kernel_rem_pio2+0x6e>
 80150e0:	9b00      	ldr	r3, [sp, #0]
 80150e2:	aa0c      	add	r2, sp, #48	; 0x30
 80150e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80150e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80150ea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80150ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80150f0:	9c00      	ldr	r4, [sp, #0]
 80150f2:	930a      	str	r3, [sp, #40]	; 0x28
 80150f4:	00e3      	lsls	r3, r4, #3
 80150f6:	9308      	str	r3, [sp, #32]
 80150f8:	ab98      	add	r3, sp, #608	; 0x260
 80150fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80150fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015102:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8015106:	ab70      	add	r3, sp, #448	; 0x1c0
 8015108:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801510c:	46c3      	mov	fp, r8
 801510e:	46a1      	mov	r9, r4
 8015110:	f1b9 0f00 	cmp.w	r9, #0
 8015114:	f1a5 0508 	sub.w	r5, r5, #8
 8015118:	dc77      	bgt.n	801520a <__kernel_rem_pio2+0x202>
 801511a:	ec47 6b10 	vmov	d0, r6, r7
 801511e:	4650      	mov	r0, sl
 8015120:	f000 fc4a 	bl	80159b8 <scalbn>
 8015124:	ec57 6b10 	vmov	r6, r7, d0
 8015128:	2200      	movs	r2, #0
 801512a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801512e:	ee10 0a10 	vmov	r0, s0
 8015132:	4639      	mov	r1, r7
 8015134:	f7eb fa20 	bl	8000578 <__aeabi_dmul>
 8015138:	ec41 0b10 	vmov	d0, r0, r1
 801513c:	f000 fcbc 	bl	8015ab8 <floor>
 8015140:	4b7a      	ldr	r3, [pc, #488]	; (801532c <__kernel_rem_pio2+0x324>)
 8015142:	ec51 0b10 	vmov	r0, r1, d0
 8015146:	2200      	movs	r2, #0
 8015148:	f7eb fa16 	bl	8000578 <__aeabi_dmul>
 801514c:	4602      	mov	r2, r0
 801514e:	460b      	mov	r3, r1
 8015150:	4630      	mov	r0, r6
 8015152:	4639      	mov	r1, r7
 8015154:	f7eb f858 	bl	8000208 <__aeabi_dsub>
 8015158:	460f      	mov	r7, r1
 801515a:	4606      	mov	r6, r0
 801515c:	f7eb fca6 	bl	8000aac <__aeabi_d2iz>
 8015160:	9002      	str	r0, [sp, #8]
 8015162:	f7eb f99f 	bl	80004a4 <__aeabi_i2d>
 8015166:	4602      	mov	r2, r0
 8015168:	460b      	mov	r3, r1
 801516a:	4630      	mov	r0, r6
 801516c:	4639      	mov	r1, r7
 801516e:	f7eb f84b 	bl	8000208 <__aeabi_dsub>
 8015172:	f1ba 0f00 	cmp.w	sl, #0
 8015176:	4606      	mov	r6, r0
 8015178:	460f      	mov	r7, r1
 801517a:	dd6d      	ble.n	8015258 <__kernel_rem_pio2+0x250>
 801517c:	1e61      	subs	r1, r4, #1
 801517e:	ab0c      	add	r3, sp, #48	; 0x30
 8015180:	9d02      	ldr	r5, [sp, #8]
 8015182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015186:	f1ca 0018 	rsb	r0, sl, #24
 801518a:	fa43 f200 	asr.w	r2, r3, r0
 801518e:	4415      	add	r5, r2
 8015190:	4082      	lsls	r2, r0
 8015192:	1a9b      	subs	r3, r3, r2
 8015194:	aa0c      	add	r2, sp, #48	; 0x30
 8015196:	9502      	str	r5, [sp, #8]
 8015198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801519c:	f1ca 0217 	rsb	r2, sl, #23
 80151a0:	fa43 fb02 	asr.w	fp, r3, r2
 80151a4:	f1bb 0f00 	cmp.w	fp, #0
 80151a8:	dd65      	ble.n	8015276 <__kernel_rem_pio2+0x26e>
 80151aa:	9b02      	ldr	r3, [sp, #8]
 80151ac:	2200      	movs	r2, #0
 80151ae:	3301      	adds	r3, #1
 80151b0:	9302      	str	r3, [sp, #8]
 80151b2:	4615      	mov	r5, r2
 80151b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80151b8:	4294      	cmp	r4, r2
 80151ba:	f300 809f 	bgt.w	80152fc <__kernel_rem_pio2+0x2f4>
 80151be:	f1ba 0f00 	cmp.w	sl, #0
 80151c2:	dd07      	ble.n	80151d4 <__kernel_rem_pio2+0x1cc>
 80151c4:	f1ba 0f01 	cmp.w	sl, #1
 80151c8:	f000 80c1 	beq.w	801534e <__kernel_rem_pio2+0x346>
 80151cc:	f1ba 0f02 	cmp.w	sl, #2
 80151d0:	f000 80c7 	beq.w	8015362 <__kernel_rem_pio2+0x35a>
 80151d4:	f1bb 0f02 	cmp.w	fp, #2
 80151d8:	d14d      	bne.n	8015276 <__kernel_rem_pio2+0x26e>
 80151da:	4632      	mov	r2, r6
 80151dc:	463b      	mov	r3, r7
 80151de:	4954      	ldr	r1, [pc, #336]	; (8015330 <__kernel_rem_pio2+0x328>)
 80151e0:	2000      	movs	r0, #0
 80151e2:	f7eb f811 	bl	8000208 <__aeabi_dsub>
 80151e6:	4606      	mov	r6, r0
 80151e8:	460f      	mov	r7, r1
 80151ea:	2d00      	cmp	r5, #0
 80151ec:	d043      	beq.n	8015276 <__kernel_rem_pio2+0x26e>
 80151ee:	4650      	mov	r0, sl
 80151f0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8015320 <__kernel_rem_pio2+0x318>
 80151f4:	f000 fbe0 	bl	80159b8 <scalbn>
 80151f8:	4630      	mov	r0, r6
 80151fa:	4639      	mov	r1, r7
 80151fc:	ec53 2b10 	vmov	r2, r3, d0
 8015200:	f7eb f802 	bl	8000208 <__aeabi_dsub>
 8015204:	4606      	mov	r6, r0
 8015206:	460f      	mov	r7, r1
 8015208:	e035      	b.n	8015276 <__kernel_rem_pio2+0x26e>
 801520a:	4b4a      	ldr	r3, [pc, #296]	; (8015334 <__kernel_rem_pio2+0x32c>)
 801520c:	2200      	movs	r2, #0
 801520e:	4630      	mov	r0, r6
 8015210:	4639      	mov	r1, r7
 8015212:	f7eb f9b1 	bl	8000578 <__aeabi_dmul>
 8015216:	f7eb fc49 	bl	8000aac <__aeabi_d2iz>
 801521a:	f7eb f943 	bl	80004a4 <__aeabi_i2d>
 801521e:	4602      	mov	r2, r0
 8015220:	460b      	mov	r3, r1
 8015222:	ec43 2b18 	vmov	d8, r2, r3
 8015226:	4b44      	ldr	r3, [pc, #272]	; (8015338 <__kernel_rem_pio2+0x330>)
 8015228:	2200      	movs	r2, #0
 801522a:	f7eb f9a5 	bl	8000578 <__aeabi_dmul>
 801522e:	4602      	mov	r2, r0
 8015230:	460b      	mov	r3, r1
 8015232:	4630      	mov	r0, r6
 8015234:	4639      	mov	r1, r7
 8015236:	f7ea ffe7 	bl	8000208 <__aeabi_dsub>
 801523a:	f7eb fc37 	bl	8000aac <__aeabi_d2iz>
 801523e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015242:	f84b 0b04 	str.w	r0, [fp], #4
 8015246:	ec51 0b18 	vmov	r0, r1, d8
 801524a:	f7ea ffdf 	bl	800020c <__adddf3>
 801524e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8015252:	4606      	mov	r6, r0
 8015254:	460f      	mov	r7, r1
 8015256:	e75b      	b.n	8015110 <__kernel_rem_pio2+0x108>
 8015258:	d106      	bne.n	8015268 <__kernel_rem_pio2+0x260>
 801525a:	1e63      	subs	r3, r4, #1
 801525c:	aa0c      	add	r2, sp, #48	; 0x30
 801525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015262:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8015266:	e79d      	b.n	80151a4 <__kernel_rem_pio2+0x19c>
 8015268:	4b34      	ldr	r3, [pc, #208]	; (801533c <__kernel_rem_pio2+0x334>)
 801526a:	2200      	movs	r2, #0
 801526c:	f7eb fc0a 	bl	8000a84 <__aeabi_dcmpge>
 8015270:	2800      	cmp	r0, #0
 8015272:	d140      	bne.n	80152f6 <__kernel_rem_pio2+0x2ee>
 8015274:	4683      	mov	fp, r0
 8015276:	2200      	movs	r2, #0
 8015278:	2300      	movs	r3, #0
 801527a:	4630      	mov	r0, r6
 801527c:	4639      	mov	r1, r7
 801527e:	f7eb fbe3 	bl	8000a48 <__aeabi_dcmpeq>
 8015282:	2800      	cmp	r0, #0
 8015284:	f000 80c1 	beq.w	801540a <__kernel_rem_pio2+0x402>
 8015288:	1e65      	subs	r5, r4, #1
 801528a:	462b      	mov	r3, r5
 801528c:	2200      	movs	r2, #0
 801528e:	9900      	ldr	r1, [sp, #0]
 8015290:	428b      	cmp	r3, r1
 8015292:	da6d      	bge.n	8015370 <__kernel_rem_pio2+0x368>
 8015294:	2a00      	cmp	r2, #0
 8015296:	f000 808a 	beq.w	80153ae <__kernel_rem_pio2+0x3a6>
 801529a:	ab0c      	add	r3, sp, #48	; 0x30
 801529c:	f1aa 0a18 	sub.w	sl, sl, #24
 80152a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f000 80ae 	beq.w	8015406 <__kernel_rem_pio2+0x3fe>
 80152aa:	4650      	mov	r0, sl
 80152ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8015320 <__kernel_rem_pio2+0x318>
 80152b0:	f000 fb82 	bl	80159b8 <scalbn>
 80152b4:	1c6b      	adds	r3, r5, #1
 80152b6:	00da      	lsls	r2, r3, #3
 80152b8:	9205      	str	r2, [sp, #20]
 80152ba:	ec57 6b10 	vmov	r6, r7, d0
 80152be:	aa70      	add	r2, sp, #448	; 0x1c0
 80152c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8015334 <__kernel_rem_pio2+0x32c>
 80152c4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80152c8:	462c      	mov	r4, r5
 80152ca:	f04f 0800 	mov.w	r8, #0
 80152ce:	2c00      	cmp	r4, #0
 80152d0:	f280 80d4 	bge.w	801547c <__kernel_rem_pio2+0x474>
 80152d4:	462c      	mov	r4, r5
 80152d6:	2c00      	cmp	r4, #0
 80152d8:	f2c0 8102 	blt.w	80154e0 <__kernel_rem_pio2+0x4d8>
 80152dc:	4b18      	ldr	r3, [pc, #96]	; (8015340 <__kernel_rem_pio2+0x338>)
 80152de:	461e      	mov	r6, r3
 80152e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80152e2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80152e6:	1b2b      	subs	r3, r5, r4
 80152e8:	f04f 0900 	mov.w	r9, #0
 80152ec:	f04f 0a00 	mov.w	sl, #0
 80152f0:	2700      	movs	r7, #0
 80152f2:	9306      	str	r3, [sp, #24]
 80152f4:	e0e6      	b.n	80154c4 <__kernel_rem_pio2+0x4bc>
 80152f6:	f04f 0b02 	mov.w	fp, #2
 80152fa:	e756      	b.n	80151aa <__kernel_rem_pio2+0x1a2>
 80152fc:	f8d8 3000 	ldr.w	r3, [r8]
 8015300:	bb05      	cbnz	r5, 8015344 <__kernel_rem_pio2+0x33c>
 8015302:	b123      	cbz	r3, 801530e <__kernel_rem_pio2+0x306>
 8015304:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015308:	f8c8 3000 	str.w	r3, [r8]
 801530c:	2301      	movs	r3, #1
 801530e:	3201      	adds	r2, #1
 8015310:	f108 0804 	add.w	r8, r8, #4
 8015314:	461d      	mov	r5, r3
 8015316:	e74f      	b.n	80151b8 <__kernel_rem_pio2+0x1b0>
	...
 8015324:	3ff00000 	.word	0x3ff00000
 8015328:	08016850 	.word	0x08016850
 801532c:	40200000 	.word	0x40200000
 8015330:	3ff00000 	.word	0x3ff00000
 8015334:	3e700000 	.word	0x3e700000
 8015338:	41700000 	.word	0x41700000
 801533c:	3fe00000 	.word	0x3fe00000
 8015340:	08016810 	.word	0x08016810
 8015344:	1acb      	subs	r3, r1, r3
 8015346:	f8c8 3000 	str.w	r3, [r8]
 801534a:	462b      	mov	r3, r5
 801534c:	e7df      	b.n	801530e <__kernel_rem_pio2+0x306>
 801534e:	1e62      	subs	r2, r4, #1
 8015350:	ab0c      	add	r3, sp, #48	; 0x30
 8015352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015356:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801535a:	a90c      	add	r1, sp, #48	; 0x30
 801535c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015360:	e738      	b.n	80151d4 <__kernel_rem_pio2+0x1cc>
 8015362:	1e62      	subs	r2, r4, #1
 8015364:	ab0c      	add	r3, sp, #48	; 0x30
 8015366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801536a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801536e:	e7f4      	b.n	801535a <__kernel_rem_pio2+0x352>
 8015370:	a90c      	add	r1, sp, #48	; 0x30
 8015372:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015376:	3b01      	subs	r3, #1
 8015378:	430a      	orrs	r2, r1
 801537a:	e788      	b.n	801528e <__kernel_rem_pio2+0x286>
 801537c:	3301      	adds	r3, #1
 801537e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015382:	2900      	cmp	r1, #0
 8015384:	d0fa      	beq.n	801537c <__kernel_rem_pio2+0x374>
 8015386:	9a08      	ldr	r2, [sp, #32]
 8015388:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801538c:	446a      	add	r2, sp
 801538e:	3a98      	subs	r2, #152	; 0x98
 8015390:	9208      	str	r2, [sp, #32]
 8015392:	9a06      	ldr	r2, [sp, #24]
 8015394:	a920      	add	r1, sp, #128	; 0x80
 8015396:	18a2      	adds	r2, r4, r2
 8015398:	18e3      	adds	r3, r4, r3
 801539a:	f104 0801 	add.w	r8, r4, #1
 801539e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80153a2:	9302      	str	r3, [sp, #8]
 80153a4:	9b02      	ldr	r3, [sp, #8]
 80153a6:	4543      	cmp	r3, r8
 80153a8:	da04      	bge.n	80153b4 <__kernel_rem_pio2+0x3ac>
 80153aa:	461c      	mov	r4, r3
 80153ac:	e6a2      	b.n	80150f4 <__kernel_rem_pio2+0xec>
 80153ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153b0:	2301      	movs	r3, #1
 80153b2:	e7e4      	b.n	801537e <__kernel_rem_pio2+0x376>
 80153b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80153ba:	f7eb f873 	bl	80004a4 <__aeabi_i2d>
 80153be:	e8e5 0102 	strd	r0, r1, [r5], #8
 80153c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c4:	46ab      	mov	fp, r5
 80153c6:	461c      	mov	r4, r3
 80153c8:	f04f 0900 	mov.w	r9, #0
 80153cc:	2600      	movs	r6, #0
 80153ce:	2700      	movs	r7, #0
 80153d0:	9b05      	ldr	r3, [sp, #20]
 80153d2:	4599      	cmp	r9, r3
 80153d4:	dd06      	ble.n	80153e4 <__kernel_rem_pio2+0x3dc>
 80153d6:	9b08      	ldr	r3, [sp, #32]
 80153d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80153dc:	f108 0801 	add.w	r8, r8, #1
 80153e0:	9308      	str	r3, [sp, #32]
 80153e2:	e7df      	b.n	80153a4 <__kernel_rem_pio2+0x39c>
 80153e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80153e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80153ec:	f7eb f8c4 	bl	8000578 <__aeabi_dmul>
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	4630      	mov	r0, r6
 80153f6:	4639      	mov	r1, r7
 80153f8:	f7ea ff08 	bl	800020c <__adddf3>
 80153fc:	f109 0901 	add.w	r9, r9, #1
 8015400:	4606      	mov	r6, r0
 8015402:	460f      	mov	r7, r1
 8015404:	e7e4      	b.n	80153d0 <__kernel_rem_pio2+0x3c8>
 8015406:	3d01      	subs	r5, #1
 8015408:	e747      	b.n	801529a <__kernel_rem_pio2+0x292>
 801540a:	ec47 6b10 	vmov	d0, r6, r7
 801540e:	f1ca 0000 	rsb	r0, sl, #0
 8015412:	f000 fad1 	bl	80159b8 <scalbn>
 8015416:	ec57 6b10 	vmov	r6, r7, d0
 801541a:	4ba0      	ldr	r3, [pc, #640]	; (801569c <__kernel_rem_pio2+0x694>)
 801541c:	ee10 0a10 	vmov	r0, s0
 8015420:	2200      	movs	r2, #0
 8015422:	4639      	mov	r1, r7
 8015424:	f7eb fb2e 	bl	8000a84 <__aeabi_dcmpge>
 8015428:	b1f8      	cbz	r0, 801546a <__kernel_rem_pio2+0x462>
 801542a:	4b9d      	ldr	r3, [pc, #628]	; (80156a0 <__kernel_rem_pio2+0x698>)
 801542c:	2200      	movs	r2, #0
 801542e:	4630      	mov	r0, r6
 8015430:	4639      	mov	r1, r7
 8015432:	f7eb f8a1 	bl	8000578 <__aeabi_dmul>
 8015436:	f7eb fb39 	bl	8000aac <__aeabi_d2iz>
 801543a:	4680      	mov	r8, r0
 801543c:	f7eb f832 	bl	80004a4 <__aeabi_i2d>
 8015440:	4b96      	ldr	r3, [pc, #600]	; (801569c <__kernel_rem_pio2+0x694>)
 8015442:	2200      	movs	r2, #0
 8015444:	f7eb f898 	bl	8000578 <__aeabi_dmul>
 8015448:	460b      	mov	r3, r1
 801544a:	4602      	mov	r2, r0
 801544c:	4639      	mov	r1, r7
 801544e:	4630      	mov	r0, r6
 8015450:	f7ea feda 	bl	8000208 <__aeabi_dsub>
 8015454:	f7eb fb2a 	bl	8000aac <__aeabi_d2iz>
 8015458:	1c65      	adds	r5, r4, #1
 801545a:	ab0c      	add	r3, sp, #48	; 0x30
 801545c:	f10a 0a18 	add.w	sl, sl, #24
 8015460:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015464:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8015468:	e71f      	b.n	80152aa <__kernel_rem_pio2+0x2a2>
 801546a:	4630      	mov	r0, r6
 801546c:	4639      	mov	r1, r7
 801546e:	f7eb fb1d 	bl	8000aac <__aeabi_d2iz>
 8015472:	ab0c      	add	r3, sp, #48	; 0x30
 8015474:	4625      	mov	r5, r4
 8015476:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801547a:	e716      	b.n	80152aa <__kernel_rem_pio2+0x2a2>
 801547c:	ab0c      	add	r3, sp, #48	; 0x30
 801547e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015482:	f7eb f80f 	bl	80004a4 <__aeabi_i2d>
 8015486:	4632      	mov	r2, r6
 8015488:	463b      	mov	r3, r7
 801548a:	f7eb f875 	bl	8000578 <__aeabi_dmul>
 801548e:	4642      	mov	r2, r8
 8015490:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015494:	464b      	mov	r3, r9
 8015496:	4630      	mov	r0, r6
 8015498:	4639      	mov	r1, r7
 801549a:	f7eb f86d 	bl	8000578 <__aeabi_dmul>
 801549e:	3c01      	subs	r4, #1
 80154a0:	4606      	mov	r6, r0
 80154a2:	460f      	mov	r7, r1
 80154a4:	e713      	b.n	80152ce <__kernel_rem_pio2+0x2c6>
 80154a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80154aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80154ae:	f7eb f863 	bl	8000578 <__aeabi_dmul>
 80154b2:	4602      	mov	r2, r0
 80154b4:	460b      	mov	r3, r1
 80154b6:	4648      	mov	r0, r9
 80154b8:	4651      	mov	r1, sl
 80154ba:	f7ea fea7 	bl	800020c <__adddf3>
 80154be:	3701      	adds	r7, #1
 80154c0:	4681      	mov	r9, r0
 80154c2:	468a      	mov	sl, r1
 80154c4:	9b00      	ldr	r3, [sp, #0]
 80154c6:	429f      	cmp	r7, r3
 80154c8:	dc02      	bgt.n	80154d0 <__kernel_rem_pio2+0x4c8>
 80154ca:	9b06      	ldr	r3, [sp, #24]
 80154cc:	429f      	cmp	r7, r3
 80154ce:	ddea      	ble.n	80154a6 <__kernel_rem_pio2+0x49e>
 80154d0:	9a06      	ldr	r2, [sp, #24]
 80154d2:	ab48      	add	r3, sp, #288	; 0x120
 80154d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80154d8:	e9c6 9a00 	strd	r9, sl, [r6]
 80154dc:	3c01      	subs	r4, #1
 80154de:	e6fa      	b.n	80152d6 <__kernel_rem_pio2+0x2ce>
 80154e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80154e2:	2b02      	cmp	r3, #2
 80154e4:	dc0b      	bgt.n	80154fe <__kernel_rem_pio2+0x4f6>
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	dc39      	bgt.n	801555e <__kernel_rem_pio2+0x556>
 80154ea:	d05d      	beq.n	80155a8 <__kernel_rem_pio2+0x5a0>
 80154ec:	9b02      	ldr	r3, [sp, #8]
 80154ee:	f003 0007 	and.w	r0, r3, #7
 80154f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80154f6:	ecbd 8b02 	vpop	{d8}
 80154fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015500:	2b03      	cmp	r3, #3
 8015502:	d1f3      	bne.n	80154ec <__kernel_rem_pio2+0x4e4>
 8015504:	9b05      	ldr	r3, [sp, #20]
 8015506:	9500      	str	r5, [sp, #0]
 8015508:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801550c:	eb0d 0403 	add.w	r4, sp, r3
 8015510:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8015514:	46a2      	mov	sl, r4
 8015516:	9b00      	ldr	r3, [sp, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f1aa 0a08 	sub.w	sl, sl, #8
 801551e:	dc69      	bgt.n	80155f4 <__kernel_rem_pio2+0x5ec>
 8015520:	46aa      	mov	sl, r5
 8015522:	f1ba 0f01 	cmp.w	sl, #1
 8015526:	f1a4 0408 	sub.w	r4, r4, #8
 801552a:	f300 8083 	bgt.w	8015634 <__kernel_rem_pio2+0x62c>
 801552e:	9c05      	ldr	r4, [sp, #20]
 8015530:	ab48      	add	r3, sp, #288	; 0x120
 8015532:	441c      	add	r4, r3
 8015534:	2000      	movs	r0, #0
 8015536:	2100      	movs	r1, #0
 8015538:	2d01      	cmp	r5, #1
 801553a:	f300 809a 	bgt.w	8015672 <__kernel_rem_pio2+0x66a>
 801553e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8015542:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8015546:	f1bb 0f00 	cmp.w	fp, #0
 801554a:	f040 8098 	bne.w	801567e <__kernel_rem_pio2+0x676>
 801554e:	9b04      	ldr	r3, [sp, #16]
 8015550:	e9c3 7800 	strd	r7, r8, [r3]
 8015554:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015558:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801555c:	e7c6      	b.n	80154ec <__kernel_rem_pio2+0x4e4>
 801555e:	9e05      	ldr	r6, [sp, #20]
 8015560:	ab48      	add	r3, sp, #288	; 0x120
 8015562:	441e      	add	r6, r3
 8015564:	462c      	mov	r4, r5
 8015566:	2000      	movs	r0, #0
 8015568:	2100      	movs	r1, #0
 801556a:	2c00      	cmp	r4, #0
 801556c:	da33      	bge.n	80155d6 <__kernel_rem_pio2+0x5ce>
 801556e:	f1bb 0f00 	cmp.w	fp, #0
 8015572:	d036      	beq.n	80155e2 <__kernel_rem_pio2+0x5da>
 8015574:	4602      	mov	r2, r0
 8015576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801557a:	9c04      	ldr	r4, [sp, #16]
 801557c:	e9c4 2300 	strd	r2, r3, [r4]
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8015588:	f7ea fe3e 	bl	8000208 <__aeabi_dsub>
 801558c:	ae4a      	add	r6, sp, #296	; 0x128
 801558e:	2401      	movs	r4, #1
 8015590:	42a5      	cmp	r5, r4
 8015592:	da29      	bge.n	80155e8 <__kernel_rem_pio2+0x5e0>
 8015594:	f1bb 0f00 	cmp.w	fp, #0
 8015598:	d002      	beq.n	80155a0 <__kernel_rem_pio2+0x598>
 801559a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801559e:	4619      	mov	r1, r3
 80155a0:	9b04      	ldr	r3, [sp, #16]
 80155a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80155a6:	e7a1      	b.n	80154ec <__kernel_rem_pio2+0x4e4>
 80155a8:	9c05      	ldr	r4, [sp, #20]
 80155aa:	ab48      	add	r3, sp, #288	; 0x120
 80155ac:	441c      	add	r4, r3
 80155ae:	2000      	movs	r0, #0
 80155b0:	2100      	movs	r1, #0
 80155b2:	2d00      	cmp	r5, #0
 80155b4:	da09      	bge.n	80155ca <__kernel_rem_pio2+0x5c2>
 80155b6:	f1bb 0f00 	cmp.w	fp, #0
 80155ba:	d002      	beq.n	80155c2 <__kernel_rem_pio2+0x5ba>
 80155bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155c0:	4619      	mov	r1, r3
 80155c2:	9b04      	ldr	r3, [sp, #16]
 80155c4:	e9c3 0100 	strd	r0, r1, [r3]
 80155c8:	e790      	b.n	80154ec <__kernel_rem_pio2+0x4e4>
 80155ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155ce:	f7ea fe1d 	bl	800020c <__adddf3>
 80155d2:	3d01      	subs	r5, #1
 80155d4:	e7ed      	b.n	80155b2 <__kernel_rem_pio2+0x5aa>
 80155d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80155da:	f7ea fe17 	bl	800020c <__adddf3>
 80155de:	3c01      	subs	r4, #1
 80155e0:	e7c3      	b.n	801556a <__kernel_rem_pio2+0x562>
 80155e2:	4602      	mov	r2, r0
 80155e4:	460b      	mov	r3, r1
 80155e6:	e7c8      	b.n	801557a <__kernel_rem_pio2+0x572>
 80155e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80155ec:	f7ea fe0e 	bl	800020c <__adddf3>
 80155f0:	3401      	adds	r4, #1
 80155f2:	e7cd      	b.n	8015590 <__kernel_rem_pio2+0x588>
 80155f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80155f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80155fc:	9b00      	ldr	r3, [sp, #0]
 80155fe:	3b01      	subs	r3, #1
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	4632      	mov	r2, r6
 8015604:	463b      	mov	r3, r7
 8015606:	4640      	mov	r0, r8
 8015608:	4649      	mov	r1, r9
 801560a:	f7ea fdff 	bl	800020c <__adddf3>
 801560e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015612:	4602      	mov	r2, r0
 8015614:	460b      	mov	r3, r1
 8015616:	4640      	mov	r0, r8
 8015618:	4649      	mov	r1, r9
 801561a:	f7ea fdf5 	bl	8000208 <__aeabi_dsub>
 801561e:	4632      	mov	r2, r6
 8015620:	463b      	mov	r3, r7
 8015622:	f7ea fdf3 	bl	800020c <__adddf3>
 8015626:	ed9d 7b06 	vldr	d7, [sp, #24]
 801562a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801562e:	ed8a 7b00 	vstr	d7, [sl]
 8015632:	e770      	b.n	8015516 <__kernel_rem_pio2+0x50e>
 8015634:	e9d4 8900 	ldrd	r8, r9, [r4]
 8015638:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801563c:	4640      	mov	r0, r8
 801563e:	4632      	mov	r2, r6
 8015640:	463b      	mov	r3, r7
 8015642:	4649      	mov	r1, r9
 8015644:	f7ea fde2 	bl	800020c <__adddf3>
 8015648:	e9cd 0100 	strd	r0, r1, [sp]
 801564c:	4602      	mov	r2, r0
 801564e:	460b      	mov	r3, r1
 8015650:	4640      	mov	r0, r8
 8015652:	4649      	mov	r1, r9
 8015654:	f7ea fdd8 	bl	8000208 <__aeabi_dsub>
 8015658:	4632      	mov	r2, r6
 801565a:	463b      	mov	r3, r7
 801565c:	f7ea fdd6 	bl	800020c <__adddf3>
 8015660:	ed9d 7b00 	vldr	d7, [sp]
 8015664:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015668:	ed84 7b00 	vstr	d7, [r4]
 801566c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015670:	e757      	b.n	8015522 <__kernel_rem_pio2+0x51a>
 8015672:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015676:	f7ea fdc9 	bl	800020c <__adddf3>
 801567a:	3d01      	subs	r5, #1
 801567c:	e75c      	b.n	8015538 <__kernel_rem_pio2+0x530>
 801567e:	9b04      	ldr	r3, [sp, #16]
 8015680:	9a04      	ldr	r2, [sp, #16]
 8015682:	601f      	str	r7, [r3, #0]
 8015684:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015688:	605c      	str	r4, [r3, #4]
 801568a:	609d      	str	r5, [r3, #8]
 801568c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015690:	60d3      	str	r3, [r2, #12]
 8015692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015696:	6110      	str	r0, [r2, #16]
 8015698:	6153      	str	r3, [r2, #20]
 801569a:	e727      	b.n	80154ec <__kernel_rem_pio2+0x4e4>
 801569c:	41700000 	.word	0x41700000
 80156a0:	3e700000 	.word	0x3e700000
 80156a4:	00000000 	.word	0x00000000

080156a8 <__kernel_cos>:
 80156a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	ec57 6b10 	vmov	r6, r7, d0
 80156b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80156b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80156b8:	ed8d 1b00 	vstr	d1, [sp]
 80156bc:	da07      	bge.n	80156ce <__kernel_cos+0x26>
 80156be:	ee10 0a10 	vmov	r0, s0
 80156c2:	4639      	mov	r1, r7
 80156c4:	f7eb f9f2 	bl	8000aac <__aeabi_d2iz>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f000 8088 	beq.w	80157de <__kernel_cos+0x136>
 80156ce:	4632      	mov	r2, r6
 80156d0:	463b      	mov	r3, r7
 80156d2:	4630      	mov	r0, r6
 80156d4:	4639      	mov	r1, r7
 80156d6:	f7ea ff4f 	bl	8000578 <__aeabi_dmul>
 80156da:	4b51      	ldr	r3, [pc, #324]	; (8015820 <__kernel_cos+0x178>)
 80156dc:	2200      	movs	r2, #0
 80156de:	4604      	mov	r4, r0
 80156e0:	460d      	mov	r5, r1
 80156e2:	f7ea ff49 	bl	8000578 <__aeabi_dmul>
 80156e6:	a340      	add	r3, pc, #256	; (adr r3, 80157e8 <__kernel_cos+0x140>)
 80156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ec:	4682      	mov	sl, r0
 80156ee:	468b      	mov	fp, r1
 80156f0:	4620      	mov	r0, r4
 80156f2:	4629      	mov	r1, r5
 80156f4:	f7ea ff40 	bl	8000578 <__aeabi_dmul>
 80156f8:	a33d      	add	r3, pc, #244	; (adr r3, 80157f0 <__kernel_cos+0x148>)
 80156fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fe:	f7ea fd85 	bl	800020c <__adddf3>
 8015702:	4622      	mov	r2, r4
 8015704:	462b      	mov	r3, r5
 8015706:	f7ea ff37 	bl	8000578 <__aeabi_dmul>
 801570a:	a33b      	add	r3, pc, #236	; (adr r3, 80157f8 <__kernel_cos+0x150>)
 801570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015710:	f7ea fd7a 	bl	8000208 <__aeabi_dsub>
 8015714:	4622      	mov	r2, r4
 8015716:	462b      	mov	r3, r5
 8015718:	f7ea ff2e 	bl	8000578 <__aeabi_dmul>
 801571c:	a338      	add	r3, pc, #224	; (adr r3, 8015800 <__kernel_cos+0x158>)
 801571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015722:	f7ea fd73 	bl	800020c <__adddf3>
 8015726:	4622      	mov	r2, r4
 8015728:	462b      	mov	r3, r5
 801572a:	f7ea ff25 	bl	8000578 <__aeabi_dmul>
 801572e:	a336      	add	r3, pc, #216	; (adr r3, 8015808 <__kernel_cos+0x160>)
 8015730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015734:	f7ea fd68 	bl	8000208 <__aeabi_dsub>
 8015738:	4622      	mov	r2, r4
 801573a:	462b      	mov	r3, r5
 801573c:	f7ea ff1c 	bl	8000578 <__aeabi_dmul>
 8015740:	a333      	add	r3, pc, #204	; (adr r3, 8015810 <__kernel_cos+0x168>)
 8015742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015746:	f7ea fd61 	bl	800020c <__adddf3>
 801574a:	4622      	mov	r2, r4
 801574c:	462b      	mov	r3, r5
 801574e:	f7ea ff13 	bl	8000578 <__aeabi_dmul>
 8015752:	4622      	mov	r2, r4
 8015754:	462b      	mov	r3, r5
 8015756:	f7ea ff0f 	bl	8000578 <__aeabi_dmul>
 801575a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801575e:	4604      	mov	r4, r0
 8015760:	460d      	mov	r5, r1
 8015762:	4630      	mov	r0, r6
 8015764:	4639      	mov	r1, r7
 8015766:	f7ea ff07 	bl	8000578 <__aeabi_dmul>
 801576a:	460b      	mov	r3, r1
 801576c:	4602      	mov	r2, r0
 801576e:	4629      	mov	r1, r5
 8015770:	4620      	mov	r0, r4
 8015772:	f7ea fd49 	bl	8000208 <__aeabi_dsub>
 8015776:	4b2b      	ldr	r3, [pc, #172]	; (8015824 <__kernel_cos+0x17c>)
 8015778:	4598      	cmp	r8, r3
 801577a:	4606      	mov	r6, r0
 801577c:	460f      	mov	r7, r1
 801577e:	dc10      	bgt.n	80157a2 <__kernel_cos+0xfa>
 8015780:	4602      	mov	r2, r0
 8015782:	460b      	mov	r3, r1
 8015784:	4650      	mov	r0, sl
 8015786:	4659      	mov	r1, fp
 8015788:	f7ea fd3e 	bl	8000208 <__aeabi_dsub>
 801578c:	460b      	mov	r3, r1
 801578e:	4926      	ldr	r1, [pc, #152]	; (8015828 <__kernel_cos+0x180>)
 8015790:	4602      	mov	r2, r0
 8015792:	2000      	movs	r0, #0
 8015794:	f7ea fd38 	bl	8000208 <__aeabi_dsub>
 8015798:	ec41 0b10 	vmov	d0, r0, r1
 801579c:	b003      	add	sp, #12
 801579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a2:	4b22      	ldr	r3, [pc, #136]	; (801582c <__kernel_cos+0x184>)
 80157a4:	4920      	ldr	r1, [pc, #128]	; (8015828 <__kernel_cos+0x180>)
 80157a6:	4598      	cmp	r8, r3
 80157a8:	bfcc      	ite	gt
 80157aa:	4d21      	ldrgt	r5, [pc, #132]	; (8015830 <__kernel_cos+0x188>)
 80157ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80157b0:	2400      	movs	r4, #0
 80157b2:	4622      	mov	r2, r4
 80157b4:	462b      	mov	r3, r5
 80157b6:	2000      	movs	r0, #0
 80157b8:	f7ea fd26 	bl	8000208 <__aeabi_dsub>
 80157bc:	4622      	mov	r2, r4
 80157be:	4680      	mov	r8, r0
 80157c0:	4689      	mov	r9, r1
 80157c2:	462b      	mov	r3, r5
 80157c4:	4650      	mov	r0, sl
 80157c6:	4659      	mov	r1, fp
 80157c8:	f7ea fd1e 	bl	8000208 <__aeabi_dsub>
 80157cc:	4632      	mov	r2, r6
 80157ce:	463b      	mov	r3, r7
 80157d0:	f7ea fd1a 	bl	8000208 <__aeabi_dsub>
 80157d4:	4602      	mov	r2, r0
 80157d6:	460b      	mov	r3, r1
 80157d8:	4640      	mov	r0, r8
 80157da:	4649      	mov	r1, r9
 80157dc:	e7da      	b.n	8015794 <__kernel_cos+0xec>
 80157de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015818 <__kernel_cos+0x170>
 80157e2:	e7db      	b.n	801579c <__kernel_cos+0xf4>
 80157e4:	f3af 8000 	nop.w
 80157e8:	be8838d4 	.word	0xbe8838d4
 80157ec:	bda8fae9 	.word	0xbda8fae9
 80157f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80157f4:	3e21ee9e 	.word	0x3e21ee9e
 80157f8:	809c52ad 	.word	0x809c52ad
 80157fc:	3e927e4f 	.word	0x3e927e4f
 8015800:	19cb1590 	.word	0x19cb1590
 8015804:	3efa01a0 	.word	0x3efa01a0
 8015808:	16c15177 	.word	0x16c15177
 801580c:	3f56c16c 	.word	0x3f56c16c
 8015810:	5555554c 	.word	0x5555554c
 8015814:	3fa55555 	.word	0x3fa55555
 8015818:	00000000 	.word	0x00000000
 801581c:	3ff00000 	.word	0x3ff00000
 8015820:	3fe00000 	.word	0x3fe00000
 8015824:	3fd33332 	.word	0x3fd33332
 8015828:	3ff00000 	.word	0x3ff00000
 801582c:	3fe90000 	.word	0x3fe90000
 8015830:	3fd20000 	.word	0x3fd20000
 8015834:	00000000 	.word	0x00000000

08015838 <__kernel_sin>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	ed2d 8b04 	vpush	{d8-d9}
 8015840:	eeb0 8a41 	vmov.f32	s16, s2
 8015844:	eef0 8a61 	vmov.f32	s17, s3
 8015848:	ec55 4b10 	vmov	r4, r5, d0
 801584c:	b083      	sub	sp, #12
 801584e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015852:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015856:	9001      	str	r0, [sp, #4]
 8015858:	da06      	bge.n	8015868 <__kernel_sin+0x30>
 801585a:	ee10 0a10 	vmov	r0, s0
 801585e:	4629      	mov	r1, r5
 8015860:	f7eb f924 	bl	8000aac <__aeabi_d2iz>
 8015864:	2800      	cmp	r0, #0
 8015866:	d051      	beq.n	801590c <__kernel_sin+0xd4>
 8015868:	4622      	mov	r2, r4
 801586a:	462b      	mov	r3, r5
 801586c:	4620      	mov	r0, r4
 801586e:	4629      	mov	r1, r5
 8015870:	f7ea fe82 	bl	8000578 <__aeabi_dmul>
 8015874:	4682      	mov	sl, r0
 8015876:	468b      	mov	fp, r1
 8015878:	4602      	mov	r2, r0
 801587a:	460b      	mov	r3, r1
 801587c:	4620      	mov	r0, r4
 801587e:	4629      	mov	r1, r5
 8015880:	f7ea fe7a 	bl	8000578 <__aeabi_dmul>
 8015884:	a341      	add	r3, pc, #260	; (adr r3, 801598c <__kernel_sin+0x154>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	4680      	mov	r8, r0
 801588c:	4689      	mov	r9, r1
 801588e:	4650      	mov	r0, sl
 8015890:	4659      	mov	r1, fp
 8015892:	f7ea fe71 	bl	8000578 <__aeabi_dmul>
 8015896:	a33f      	add	r3, pc, #252	; (adr r3, 8015994 <__kernel_sin+0x15c>)
 8015898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589c:	f7ea fcb4 	bl	8000208 <__aeabi_dsub>
 80158a0:	4652      	mov	r2, sl
 80158a2:	465b      	mov	r3, fp
 80158a4:	f7ea fe68 	bl	8000578 <__aeabi_dmul>
 80158a8:	a33c      	add	r3, pc, #240	; (adr r3, 801599c <__kernel_sin+0x164>)
 80158aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ae:	f7ea fcad 	bl	800020c <__adddf3>
 80158b2:	4652      	mov	r2, sl
 80158b4:	465b      	mov	r3, fp
 80158b6:	f7ea fe5f 	bl	8000578 <__aeabi_dmul>
 80158ba:	a33a      	add	r3, pc, #232	; (adr r3, 80159a4 <__kernel_sin+0x16c>)
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	f7ea fca2 	bl	8000208 <__aeabi_dsub>
 80158c4:	4652      	mov	r2, sl
 80158c6:	465b      	mov	r3, fp
 80158c8:	f7ea fe56 	bl	8000578 <__aeabi_dmul>
 80158cc:	a337      	add	r3, pc, #220	; (adr r3, 80159ac <__kernel_sin+0x174>)
 80158ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d2:	f7ea fc9b 	bl	800020c <__adddf3>
 80158d6:	9b01      	ldr	r3, [sp, #4]
 80158d8:	4606      	mov	r6, r0
 80158da:	460f      	mov	r7, r1
 80158dc:	b9eb      	cbnz	r3, 801591a <__kernel_sin+0xe2>
 80158de:	4602      	mov	r2, r0
 80158e0:	460b      	mov	r3, r1
 80158e2:	4650      	mov	r0, sl
 80158e4:	4659      	mov	r1, fp
 80158e6:	f7ea fe47 	bl	8000578 <__aeabi_dmul>
 80158ea:	a325      	add	r3, pc, #148	; (adr r3, 8015980 <__kernel_sin+0x148>)
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	f7ea fc8a 	bl	8000208 <__aeabi_dsub>
 80158f4:	4642      	mov	r2, r8
 80158f6:	464b      	mov	r3, r9
 80158f8:	f7ea fe3e 	bl	8000578 <__aeabi_dmul>
 80158fc:	4602      	mov	r2, r0
 80158fe:	460b      	mov	r3, r1
 8015900:	4620      	mov	r0, r4
 8015902:	4629      	mov	r1, r5
 8015904:	f7ea fc82 	bl	800020c <__adddf3>
 8015908:	4604      	mov	r4, r0
 801590a:	460d      	mov	r5, r1
 801590c:	ec45 4b10 	vmov	d0, r4, r5
 8015910:	b003      	add	sp, #12
 8015912:	ecbd 8b04 	vpop	{d8-d9}
 8015916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801591a:	4b1b      	ldr	r3, [pc, #108]	; (8015988 <__kernel_sin+0x150>)
 801591c:	ec51 0b18 	vmov	r0, r1, d8
 8015920:	2200      	movs	r2, #0
 8015922:	f7ea fe29 	bl	8000578 <__aeabi_dmul>
 8015926:	4632      	mov	r2, r6
 8015928:	ec41 0b19 	vmov	d9, r0, r1
 801592c:	463b      	mov	r3, r7
 801592e:	4640      	mov	r0, r8
 8015930:	4649      	mov	r1, r9
 8015932:	f7ea fe21 	bl	8000578 <__aeabi_dmul>
 8015936:	4602      	mov	r2, r0
 8015938:	460b      	mov	r3, r1
 801593a:	ec51 0b19 	vmov	r0, r1, d9
 801593e:	f7ea fc63 	bl	8000208 <__aeabi_dsub>
 8015942:	4652      	mov	r2, sl
 8015944:	465b      	mov	r3, fp
 8015946:	f7ea fe17 	bl	8000578 <__aeabi_dmul>
 801594a:	ec53 2b18 	vmov	r2, r3, d8
 801594e:	f7ea fc5b 	bl	8000208 <__aeabi_dsub>
 8015952:	a30b      	add	r3, pc, #44	; (adr r3, 8015980 <__kernel_sin+0x148>)
 8015954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015958:	4606      	mov	r6, r0
 801595a:	460f      	mov	r7, r1
 801595c:	4640      	mov	r0, r8
 801595e:	4649      	mov	r1, r9
 8015960:	f7ea fe0a 	bl	8000578 <__aeabi_dmul>
 8015964:	4602      	mov	r2, r0
 8015966:	460b      	mov	r3, r1
 8015968:	4630      	mov	r0, r6
 801596a:	4639      	mov	r1, r7
 801596c:	f7ea fc4e 	bl	800020c <__adddf3>
 8015970:	4602      	mov	r2, r0
 8015972:	460b      	mov	r3, r1
 8015974:	4620      	mov	r0, r4
 8015976:	4629      	mov	r1, r5
 8015978:	f7ea fc46 	bl	8000208 <__aeabi_dsub>
 801597c:	e7c4      	b.n	8015908 <__kernel_sin+0xd0>
 801597e:	bf00      	nop
 8015980:	55555549 	.word	0x55555549
 8015984:	3fc55555 	.word	0x3fc55555
 8015988:	3fe00000 	.word	0x3fe00000
 801598c:	5acfd57c 	.word	0x5acfd57c
 8015990:	3de5d93a 	.word	0x3de5d93a
 8015994:	8a2b9ceb 	.word	0x8a2b9ceb
 8015998:	3e5ae5e6 	.word	0x3e5ae5e6
 801599c:	57b1fe7d 	.word	0x57b1fe7d
 80159a0:	3ec71de3 	.word	0x3ec71de3
 80159a4:	19c161d5 	.word	0x19c161d5
 80159a8:	3f2a01a0 	.word	0x3f2a01a0
 80159ac:	1110f8a6 	.word	0x1110f8a6
 80159b0:	3f811111 	.word	0x3f811111
 80159b4:	00000000 	.word	0x00000000

080159b8 <scalbn>:
 80159b8:	b570      	push	{r4, r5, r6, lr}
 80159ba:	ec55 4b10 	vmov	r4, r5, d0
 80159be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80159c2:	4606      	mov	r6, r0
 80159c4:	462b      	mov	r3, r5
 80159c6:	b999      	cbnz	r1, 80159f0 <scalbn+0x38>
 80159c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80159cc:	4323      	orrs	r3, r4
 80159ce:	d03f      	beq.n	8015a50 <scalbn+0x98>
 80159d0:	4b35      	ldr	r3, [pc, #212]	; (8015aa8 <scalbn+0xf0>)
 80159d2:	4629      	mov	r1, r5
 80159d4:	ee10 0a10 	vmov	r0, s0
 80159d8:	2200      	movs	r2, #0
 80159da:	f7ea fdcd 	bl	8000578 <__aeabi_dmul>
 80159de:	4b33      	ldr	r3, [pc, #204]	; (8015aac <scalbn+0xf4>)
 80159e0:	429e      	cmp	r6, r3
 80159e2:	4604      	mov	r4, r0
 80159e4:	460d      	mov	r5, r1
 80159e6:	da10      	bge.n	8015a0a <scalbn+0x52>
 80159e8:	a327      	add	r3, pc, #156	; (adr r3, 8015a88 <scalbn+0xd0>)
 80159ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ee:	e01f      	b.n	8015a30 <scalbn+0x78>
 80159f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80159f4:	4291      	cmp	r1, r2
 80159f6:	d10c      	bne.n	8015a12 <scalbn+0x5a>
 80159f8:	ee10 2a10 	vmov	r2, s0
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fc04 	bl	800020c <__adddf3>
 8015a04:	4604      	mov	r4, r0
 8015a06:	460d      	mov	r5, r1
 8015a08:	e022      	b.n	8015a50 <scalbn+0x98>
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015a10:	3936      	subs	r1, #54	; 0x36
 8015a12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8015a16:	4296      	cmp	r6, r2
 8015a18:	dd0d      	ble.n	8015a36 <scalbn+0x7e>
 8015a1a:	2d00      	cmp	r5, #0
 8015a1c:	a11c      	add	r1, pc, #112	; (adr r1, 8015a90 <scalbn+0xd8>)
 8015a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a22:	da02      	bge.n	8015a2a <scalbn+0x72>
 8015a24:	a11c      	add	r1, pc, #112	; (adr r1, 8015a98 <scalbn+0xe0>)
 8015a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a2a:	a319      	add	r3, pc, #100	; (adr r3, 8015a90 <scalbn+0xd8>)
 8015a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a30:	f7ea fda2 	bl	8000578 <__aeabi_dmul>
 8015a34:	e7e6      	b.n	8015a04 <scalbn+0x4c>
 8015a36:	1872      	adds	r2, r6, r1
 8015a38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015a3c:	428a      	cmp	r2, r1
 8015a3e:	dcec      	bgt.n	8015a1a <scalbn+0x62>
 8015a40:	2a00      	cmp	r2, #0
 8015a42:	dd08      	ble.n	8015a56 <scalbn+0x9e>
 8015a44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a50:	ec45 4b10 	vmov	d0, r4, r5
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015a5a:	da08      	bge.n	8015a6e <scalbn+0xb6>
 8015a5c:	2d00      	cmp	r5, #0
 8015a5e:	a10a      	add	r1, pc, #40	; (adr r1, 8015a88 <scalbn+0xd0>)
 8015a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a64:	dac0      	bge.n	80159e8 <scalbn+0x30>
 8015a66:	a10e      	add	r1, pc, #56	; (adr r1, 8015aa0 <scalbn+0xe8>)
 8015a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a6c:	e7bc      	b.n	80159e8 <scalbn+0x30>
 8015a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a72:	3236      	adds	r2, #54	; 0x36
 8015a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	4b0c      	ldr	r3, [pc, #48]	; (8015ab0 <scalbn+0xf8>)
 8015a80:	2200      	movs	r2, #0
 8015a82:	e7d5      	b.n	8015a30 <scalbn+0x78>
 8015a84:	f3af 8000 	nop.w
 8015a88:	c2f8f359 	.word	0xc2f8f359
 8015a8c:	01a56e1f 	.word	0x01a56e1f
 8015a90:	8800759c 	.word	0x8800759c
 8015a94:	7e37e43c 	.word	0x7e37e43c
 8015a98:	8800759c 	.word	0x8800759c
 8015a9c:	fe37e43c 	.word	0xfe37e43c
 8015aa0:	c2f8f359 	.word	0xc2f8f359
 8015aa4:	81a56e1f 	.word	0x81a56e1f
 8015aa8:	43500000 	.word	0x43500000
 8015aac:	ffff3cb0 	.word	0xffff3cb0
 8015ab0:	3c900000 	.word	0x3c900000
 8015ab4:	00000000 	.word	0x00000000

08015ab8 <floor>:
 8015ab8:	ec51 0b10 	vmov	r0, r1, d0
 8015abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015ac8:	2e13      	cmp	r6, #19
 8015aca:	ee10 5a10 	vmov	r5, s0
 8015ace:	ee10 8a10 	vmov	r8, s0
 8015ad2:	460c      	mov	r4, r1
 8015ad4:	dc31      	bgt.n	8015b3a <floor+0x82>
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	da14      	bge.n	8015b04 <floor+0x4c>
 8015ada:	a333      	add	r3, pc, #204	; (adr r3, 8015ba8 <floor+0xf0>)
 8015adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae0:	f7ea fb94 	bl	800020c <__adddf3>
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f7ea ffd6 	bl	8000a98 <__aeabi_dcmpgt>
 8015aec:	b138      	cbz	r0, 8015afe <floor+0x46>
 8015aee:	2c00      	cmp	r4, #0
 8015af0:	da53      	bge.n	8015b9a <floor+0xe2>
 8015af2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015af6:	4325      	orrs	r5, r4
 8015af8:	d052      	beq.n	8015ba0 <floor+0xe8>
 8015afa:	4c2d      	ldr	r4, [pc, #180]	; (8015bb0 <floor+0xf8>)
 8015afc:	2500      	movs	r5, #0
 8015afe:	4621      	mov	r1, r4
 8015b00:	4628      	mov	r0, r5
 8015b02:	e024      	b.n	8015b4e <floor+0x96>
 8015b04:	4f2b      	ldr	r7, [pc, #172]	; (8015bb4 <floor+0xfc>)
 8015b06:	4137      	asrs	r7, r6
 8015b08:	ea01 0307 	and.w	r3, r1, r7
 8015b0c:	4303      	orrs	r3, r0
 8015b0e:	d01e      	beq.n	8015b4e <floor+0x96>
 8015b10:	a325      	add	r3, pc, #148	; (adr r3, 8015ba8 <floor+0xf0>)
 8015b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b16:	f7ea fb79 	bl	800020c <__adddf3>
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	f7ea ffbb 	bl	8000a98 <__aeabi_dcmpgt>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d0eb      	beq.n	8015afe <floor+0x46>
 8015b26:	2c00      	cmp	r4, #0
 8015b28:	bfbe      	ittt	lt
 8015b2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015b2e:	4133      	asrlt	r3, r6
 8015b30:	18e4      	addlt	r4, r4, r3
 8015b32:	ea24 0407 	bic.w	r4, r4, r7
 8015b36:	2500      	movs	r5, #0
 8015b38:	e7e1      	b.n	8015afe <floor+0x46>
 8015b3a:	2e33      	cmp	r6, #51	; 0x33
 8015b3c:	dd0b      	ble.n	8015b56 <floor+0x9e>
 8015b3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b42:	d104      	bne.n	8015b4e <floor+0x96>
 8015b44:	ee10 2a10 	vmov	r2, s0
 8015b48:	460b      	mov	r3, r1
 8015b4a:	f7ea fb5f 	bl	800020c <__adddf3>
 8015b4e:	ec41 0b10 	vmov	d0, r0, r1
 8015b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8015b5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015b5e:	40df      	lsrs	r7, r3
 8015b60:	4238      	tst	r0, r7
 8015b62:	d0f4      	beq.n	8015b4e <floor+0x96>
 8015b64:	a310      	add	r3, pc, #64	; (adr r3, 8015ba8 <floor+0xf0>)
 8015b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6a:	f7ea fb4f 	bl	800020c <__adddf3>
 8015b6e:	2200      	movs	r2, #0
 8015b70:	2300      	movs	r3, #0
 8015b72:	f7ea ff91 	bl	8000a98 <__aeabi_dcmpgt>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d0c1      	beq.n	8015afe <floor+0x46>
 8015b7a:	2c00      	cmp	r4, #0
 8015b7c:	da0a      	bge.n	8015b94 <floor+0xdc>
 8015b7e:	2e14      	cmp	r6, #20
 8015b80:	d101      	bne.n	8015b86 <floor+0xce>
 8015b82:	3401      	adds	r4, #1
 8015b84:	e006      	b.n	8015b94 <floor+0xdc>
 8015b86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	40b3      	lsls	r3, r6
 8015b8e:	441d      	add	r5, r3
 8015b90:	45a8      	cmp	r8, r5
 8015b92:	d8f6      	bhi.n	8015b82 <floor+0xca>
 8015b94:	ea25 0507 	bic.w	r5, r5, r7
 8015b98:	e7b1      	b.n	8015afe <floor+0x46>
 8015b9a:	2500      	movs	r5, #0
 8015b9c:	462c      	mov	r4, r5
 8015b9e:	e7ae      	b.n	8015afe <floor+0x46>
 8015ba0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015ba4:	e7ab      	b.n	8015afe <floor+0x46>
 8015ba6:	bf00      	nop
 8015ba8:	8800759c 	.word	0x8800759c
 8015bac:	7e37e43c 	.word	0x7e37e43c
 8015bb0:	bff00000 	.word	0xbff00000
 8015bb4:	000fffff 	.word	0x000fffff

08015bb8 <_init>:
 8015bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bba:	bf00      	nop
 8015bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bbe:	bc08      	pop	{r3}
 8015bc0:	469e      	mov	lr, r3
 8015bc2:	4770      	bx	lr

08015bc4 <_fini>:
 8015bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bc6:	bf00      	nop
 8015bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bca:	bc08      	pop	{r3}
 8015bcc:	469e      	mov	lr, r3
 8015bce:	4770      	bx	lr
