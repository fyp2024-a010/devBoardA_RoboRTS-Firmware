
ROBOT_CMSIS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001230c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  080124bc  080124bc  000224bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ee8  08012ee8  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08012ee8  08012ee8  00022ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ef0  08012ef0  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ef0  08012ef0  00022ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ef4  08012ef4  00022ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08012ef8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          000171c0  2000019c  2000019c  0003019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001735c  2001735c  0003019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f61d  00000000  00000000  0003020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008da8  00000000  00000000  0005f82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025a8  00000000  00000000  000685d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c92  00000000  00000000  0006ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000e6ec  00000000  00000000  0006c812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003920f  00000000  00000000  0007aefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f00e4  00000000  00000000  000b410d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009b0c  00000000  00000000  001a41f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  001add00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080124a4 	.word	0x080124a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a0 	.word	0x200001a0
 80001ec:	080124a4 	.word	0x080124a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <usb_rcv_callback>:
static int32_t usb_interface_send(uint8_t *p_data, uint32_t len);

extern osThreadId communicate_task_t;

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  protocol_uart_rcv_data(PROTOCOL_USB_PORT, buf, len);
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fde8 	bl	80010e0 <protocol_uart_rcv_data>
  osSignalSet(communicate_task_t, RECV_PROTOCOL_SIGNAL);
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <usb_rcv_callback+0x34>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f00d fc54 	bl	800ddc4 <osSignalSet>
  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin); /* TESTING */
 800051c:	2104      	movs	r1, #4
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <usb_rcv_callback+0x38>)
 8000520:	f005 fd43 	bl	8005faa <HAL_GPIO_TogglePin>
  return len;
 8000524:	683b      	ldr	r3, [r7, #0]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200005f8 	.word	0x200005f8
 8000534:	40021800 	.word	0x40021800

08000538 <manifold2_heart_package>:

int32_t manifold2_heart_package(uint8_t *buff, uint16_t len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <manifold2_heart_package+0x20>)
 800054a:	f005 fd2e 	bl	8005faa <HAL_GPIO_TogglePin>
  return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <report_firmware_version>:

int32_t report_firmware_version(uint8_t *buff, uint16_t len)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	807b      	strh	r3, [r7, #2]
  return FIRMWARE_VERSION;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <report_firmware_version+0x1c>)
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	01000106 	.word	0x01000106

0800057c <toggle_led_C>:

/* TESTING */
void toggle_led_C(void* argc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <toggle_led_C+0x18>)
 8000588:	f005 fd0f 	bl	8005faa <HAL_GPIO_TogglePin>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021800 	.word	0x40021800

08000598 <ros_callback>:

int32_t ros_callback(uint8_t *buff, uint16_t len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80005a4:	2104      	movs	r1, #4
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <ros_callback+0x20>)
 80005a8:	f005 fcff 	bl	8005faa <HAL_GPIO_TogglePin>
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021800 	.word	0x40021800

080005bc <communicate_task>:
/* TESTING */

void communicate_task(void const *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
  protocol_local_init(CHASSIS_ADDRESS);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fa71 	bl	8000aac <protocol_local_init>
  protocol_uart_interface_register("manifold2", 2048, 1, PROTOCOL_USB_PORT, usb_interface_send);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <communicate_task+0xc4>)
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d6:	482b      	ldr	r0, [pc, #172]	; (8000684 <communicate_task+0xc8>)
 80005d8:	f000 fcfe 	bl	8000fd8 <protocol_uart_interface_register>
  protocol_set_route(MANIFOLD2_ADDRESS, "manifold2");
 80005dc:	4929      	ldr	r1, [pc, #164]	; (8000684 <communicate_task+0xc8>)
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fdbc 	bl	800115c <protocol_set_route>

  protocol_rcv_cmd_register(CMD_MANIFOLD2_HEART, manifold2_heart_package);
 80005e4:	4928      	ldr	r1, [pc, #160]	; (8000688 <communicate_task+0xcc>)
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fa24 	bl	8000a34 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_REPORT_VERSION, report_firmware_version);
 80005ec:	4927      	ldr	r1, [pc, #156]	; (800068c <communicate_task+0xd0>)
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 fa20 	bl	8000a34 <protocol_rcv_cmd_register>

  usb_vcp_rx_callback_register(usb_rcv_callback);
 80005f4:	4826      	ldr	r0, [pc, #152]	; (8000690 <communicate_task+0xd4>)
 80005f6:	f00f fa29 	bl	800fa4c <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush, NULL, 1); // Sends data from the buffer
 80005fa:	2201      	movs	r2, #1
 80005fc:	2100      	movs	r1, #0
 80005fe:	4825      	ldr	r0, [pc, #148]	; (8000694 <communicate_task+0xd8>)
 8000600:	f000 f936 	bl	8000870 <soft_timer_register>
	protocol_send_list_add_callback_reg(protocol_send_success_callback);
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <communicate_task+0xdc>)
 8000606:	f000 fc13 	bl	8000e30 <protocol_send_list_add_callback_reg>

  soft_timer_register(toggle_led_C, NULL, 1000); /* TESTING */
 800060a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060e:	2100      	movs	r1, #0
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <communicate_task+0xe0>)
 8000612:	f000 f92d 	bl	8000870 <soft_timer_register>

  protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPEED, ros_callback); /* TESTING */
 8000616:	4922      	ldr	r1, [pc, #136]	; (80006a0 <communicate_task+0xe4>)
 8000618:	f240 2003 	movw	r0, #515	; 0x203
 800061c:	f000 fa0a 	bl	8000a34 <protocol_rcv_cmd_register>
/* TESTING */
  chassis_t pchassis = NULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  pchassis = chassis_find("chassis");
 8000624:	481f      	ldr	r0, [pc, #124]	; (80006a4 <communicate_task+0xe8>)
 8000626:	f010 fd11 	bl	801104c <chassis_find>
 800062a:	6178      	str	r0, [r7, #20]

  soft_timer_register(chassis_push_info, (void *)pchassis, 100);
 800062c:	2264      	movs	r2, #100	; 0x64
 800062e:	6979      	ldr	r1, [r7, #20]
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <communicate_task+0xec>)
 8000632:	f000 f91d 	bl	8000870 <soft_timer_register>
/* TESTING */
  while (1)
  {
    osEvent event; 
    event = osSignalWait(SEND_PROTOCOL_SIGNAL | RECV_PROTOCOL_SIGNAL, osWaitForever);
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f00d fbff 	bl	800de44 <osSignalWait>
    if (event.status == osEventSignal)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b08      	cmp	r3, #8
 800064a:	d115      	bne.n	8000678 <communicate_task+0xbc>
    {
      if (event.value.signals & SEND_PROTOCOL_SIGNAL)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <communicate_task+0xa8>
      {
       protocol_send_flush();
 8000656:	f000 fb21 	bl	8000c9c <protocol_send_flush>
       HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2120      	movs	r1, #32
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <communicate_task+0xf0>)
 8000660:	f005 fc8a 	bl	8005f78 <HAL_GPIO_WritePin>
      }

      if (event.value.signals == RECV_PROTOCOL_SIGNAL)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d106      	bne.n	8000678 <communicate_task+0xbc>
      {
        protocol_unpack_flush();
 800066a:	f000 fb6b 	bl	8000d44 <protocol_unpack_flush>
        HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <communicate_task+0xf0>)
 8000674:	f005 fc80 	bl	8005f78 <HAL_GPIO_WritePin>
      }
    }
	  osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f00d fb8f 	bl	800dd9c <osDelay>
  {
 800067e:	e7da      	b.n	8000636 <communicate_task+0x7a>
 8000680:	080006b1 	.word	0x080006b1
 8000684:	080124bc 	.word	0x080124bc
 8000688:	08000539 	.word	0x08000539
 800068c:	0800055d 	.word	0x0800055d
 8000690:	080004fd 	.word	0x080004fd
 8000694:	0800f9b1 	.word	0x0800f9b1
 8000698:	080006d1 	.word	0x080006d1
 800069c:	0800057d 	.word	0x0800057d
 80006a0:	08000599 	.word	0x08000599
 80006a4:	080124c8 	.word	0x080124c8
 80006a8:	080006e9 	.word	0x080006e9
 80006ac:	40021800 	.word	0x40021800

080006b0 <usb_interface_send>:
  }
}

static int32_t usb_interface_send(uint8_t *p_data, uint32_t len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  CDC_Transmit_FS(p_data, len);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f00f f95f 	bl	800f984 <CDC_Transmit_FS>
  return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <protocol_send_success_callback>:

static void protocol_send_success_callback(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <protocol_send_success_callback+0x14>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f00d fb72 	bl	800ddc4 <osSignalSet>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200005f8 	.word	0x200005f8

080006e8 <chassis_push_info>:
  }
  return 0;
}

int32_t chassis_push_info(void *argc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  struct chassis_info info;
  chassis_t pchassis = (chassis_t)argc;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  chassis_get_info(pchassis, &info);
 80006f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f8:	4619      	mov	r1, r3
 80006fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80006fc:	f010 fbe4 	bl	8010ec8 <chassis_get_info>

  // protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &cmd_chassis_info, sizeof(cmd_chassis_info));

/* TESTING */
  struct chassis_info test_info;
  test_info.angle_deg = 1.0;
 8000700:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000704:	623b      	str	r3, [r7, #32]
  test_info.yaw_gyro_angle = 1.0;
 8000706:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  test_info.yaw_gyro_rate = 1.0;
 800070c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  test_info.position_x_mm = 1.0;
 8000712:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000716:	61bb      	str	r3, [r7, #24]
  test_info.position_y_mm = 1.0;
 8000718:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800071c:	61fb      	str	r3, [r7, #28]
  test_info.v_x_mm = 1.0;
 800071e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000722:	60fb      	str	r3, [r7, #12]
  test_info.v_y_mm = 1.0;
 8000724:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000728:	613b      	str	r3, [r7, #16]
  protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &test_info, sizeof(test_info));
 800072a:	f107 020c 	add.w	r2, r7, #12
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	f240 2101 	movw	r1, #513	; 0x201
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fa2d 	bl	8000b94 <protocol_send>
/* TESTING */
  return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3770      	adds	r7, #112	; 0x70
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <hw_init>:
// {
//   return glb_sys_cfg;
// }

void hw_init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  // cali_param_init();
  board_config();
 8000748:	f001 fe54 	bl	80023f4 <board_config>
  // test_init();
  // system_config();
  // ulog_init();
  // ulog_console_backend_init();

  chassis_pid_register(&chassis, "chassis", DEVICE_CAN1);
 800074c:	2200      	movs	r2, #0
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <hw_init+0x1c>)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <hw_init+0x20>)
 8000752:	f010 fa49 	bl	8010be8 <chassis_pid_register>
  chassis_disable(&chassis);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <hw_init+0x20>)
 8000758:	f010 fc86 	bl	8011068 <chassis_disable>

  // offline_init();
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	080124d0 	.word	0x080124d0
 8000764:	200001b8 	.word	0x200001b8

08000768 <task_init>:
// osThreadId cmd_task_t;
// osThreadId chassis_task_t;
// osThreadId blinky_task_t;

void task_init(void)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  osThreadDef(TIMER_1MS, timer_task, osPriorityHigh, 0, 512);
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <task_init+0x50>)
 8000770:	f107 0414 	add.w	r4, r7, #20
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	682b      	ldr	r3, [r5, #0]
 800077c:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00d fae2 	bl	800dd4e <osThreadCreate>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <task_init+0x54>)
 800078e:	6013      	str	r3, [r2, #0]

  osThreadDef(COMMUNICATE_TASK, communicate_task, osPriorityHigh, 0, 2048);
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <task_init+0x58>)
 8000792:	463c      	mov	r4, r7
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	682b      	ldr	r3, [r5, #0]
 800079c:	6023      	str	r3, [r4, #0]
  communicate_task_t = osThreadCreate(osThread(COMMUNICATE_TASK), NULL);
 800079e:	463b      	mov	r3, r7
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d fad3 	bl	800dd4e <osThreadCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <task_init+0x5c>)
 80007ac:	6013      	str	r3, [r2, #0]
  // osThreadDef(CHASSIS_TASK, chassis_task, osPriorityRealtime, 0, 64);
  // chassis_task_t = osThreadCreate(osThread(CHASSIS_TASK), NULL);

  // osThreadDef(BLINKY_TASK, blinky_task, osPriorityRealtime, 0, 64); // TESTING
  // blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL); // TESTING
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	080124e4 	.word	0x080124e4
 80007bc:	200005f4 	.word	0x200005f4
 80007c0:	0801250c 	.word	0x0801250c
 80007c4:	200005f8 	.word	0x200005f8

080007c8 <timer_task>:
#include "timer_task.h"

struct soft_timer soft_timer[TIMER_ELEMENT_NUM_MAX - 1];

void timer_task(void const *argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 80007d0:	f00d faad 	bl	800dd2e <osKernelSysTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 80007d8:	f011 fc68 	bl	80120ac <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e03a      	b.n	8000858 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <timer_task+0xa4>)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d030      	beq.n	8000852 <timer_task+0x8a>
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <timer_task+0xa4>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	4413      	add	r3, r2
 80007f8:	330c      	adds	r3, #12
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d028      	beq.n	8000852 <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <timer_task+0xa4>)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f011 fd09 	bl	8012224 <soft_timer_check>
 8000812:	4603      	mov	r3, r0
 8000814:	2b02      	cmp	r3, #2
 8000816:	d11c      	bne.n	8000852 <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <timer_task+0xa4>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	4413      	add	r3, r2
 8000820:	330c      	adds	r3, #12
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <timer_task+0xa4>)
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	440a      	add	r2, r1
 800082c:	3208      	adds	r2, #8
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	4610      	mov	r0, r2
 8000832:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <timer_task+0xa4>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <timer_task+0xa4>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	4413      	add	r3, r2
 8000848:	3304      	adds	r3, #4
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f011 fcb5 	bl	80121bc <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b12      	cmp	r3, #18
 800085c:	ddc1      	ble.n	80007e2 <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f00d fb39 	bl	800dedc <osDelayUntil>
    TimerISR_Hook();
 800086a:	e7b5      	b.n	80007d8 <timer_task+0x10>
 800086c:	200005fc 	.word	0x200005fc

08000870 <soft_timer_register>:
  }
}

int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e02b      	b.n	80008da <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 8000882:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <soft_timer_register+0x7c>)
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d121      	bne.n	80008d4 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f011 fc59 	bl	8012148 <soft_timer_req>
 8000896:	4603      	mov	r3, r0
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <soft_timer_register+0x7c>)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4413      	add	r3, r2
 80008a2:	460a      	mov	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <soft_timer_register+0x7c>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <soft_timer_register+0x7c>)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	4413      	add	r3, r2
 80008bc:	3308      	adds	r3, #8
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <soft_timer_register+0x7c>)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	4413      	add	r3, r2
 80008ca:	330c      	adds	r3, #12
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	601a      	str	r2, [r3, #0]
      return i;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	e007      	b.n	80008e4 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b12      	cmp	r3, #18
 80008de:	ddd0      	ble.n	8000882 <soft_timer_register+0x12>
    }
  }
  return -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200005fc 	.word	0x200005fc

080008f0 <INIT_LIST_HEAD>:

#define LIST_HEAD(name) \
  list_t name = LIST_HEAD_INIT(name)

static __inline void INIT_LIST_HEAD(list_t *list)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  list->next = list;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
  list->prev = list;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <protocol_get_send_cmd_info>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

struct send_cmd_info *protocol_get_send_cmd_info(uint16_t cmd)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e01c      	b.n	800095a <protocol_get_send_cmd_info+0x4a>
  {
    if ((protocol_local_info.send_cmd_info[i].cmd == cmd) && (protocol_local_info.send_cmd_info[i].used == 1))
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <protocol_get_send_cmd_info+0x60>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	4413      	add	r3, r2
 8000928:	f203 239a 	addw	r3, r3, #666	; 0x29a
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	429a      	cmp	r2, r3
 8000932:	d10f      	bne.n	8000954 <protocol_get_send_cmd_info+0x44>
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <protocol_get_send_cmd_info+0x60>)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	4413      	add	r3, r2
 800093c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d106      	bne.n	8000954 <protocol_get_send_cmd_info+0x44>
    {
      return &protocol_local_info.send_cmd_info[i];
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <protocol_get_send_cmd_info+0x60>)
 8000950:	4413      	add	r3, r2
 8000952:	e006      	b.n	8000962 <protocol_get_send_cmd_info+0x52>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b31      	cmp	r3, #49	; 0x31
 800095e:	dddf      	ble.n	8000920 <protocol_get_send_cmd_info+0x10>
    }
  }
  return NULL;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000073c 	.word	0x2000073c

08000974 <protocol_rcv_pack_handle>:

static void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd, uint8_t session, uint8_t source_add)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af02      	add	r7, sp, #8
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	4608      	mov	r0, r1
 800097e:	4611      	mov	r1, r2
 8000980:	461a      	mov	r2, r3
 8000982:	4603      	mov	r3, r0
 8000984:	807b      	strh	r3, [r7, #2]
 8000986:	460b      	mov	r3, r1
 8000988:	707b      	strb	r3, [r7, #1]
 800098a:	4613      	mov	r3, r2
 800098c:	703b      	strb	r3, [r7, #0]
  protocol_pack_desc_t *pack;
  uint16_t rcv_seq;
  int32_t err;
  rcv_seq = pack->seq_num;
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	7a1a      	ldrb	r2, [r3, #8]
 8000992:	7a5b      	ldrb	r3, [r3, #9]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	4313      	orrs	r3, r2
 8000998:	81fb      	strh	r3, [r7, #14]
  pack = (protocol_pack_desc_t *)(pack_data);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e03d      	b.n	8000a20 <protocol_rcv_pack_handle+0xac>
  {
    if ((protocol_local_info.rcv_cmd_info[i].cmd == cmd) && (protocol_local_info.rcv_cmd_info[i].rcv_callback != NULL) && (protocol_local_info.rcv_cmd_info[i].used == 1))
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <protocol_rcv_pack_handle+0xbc>)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3321      	adds	r3, #33	; 0x21
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	885b      	ldrh	r3, [r3, #2]
 80009b0:	887a      	ldrh	r2, [r7, #2]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d131      	bne.n	8000a1a <protocol_rcv_pack_handle+0xa6>
 80009b6:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <protocol_rcv_pack_handle+0xbc>)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3321      	adds	r3, #33	; 0x21
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4413      	add	r3, r2
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d029      	beq.n	8000a1a <protocol_rcv_pack_handle+0xa6>
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <protocol_rcv_pack_handle+0xbc>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3321      	adds	r3, #33	; 0x21
 80009cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d122      	bne.n	8000a1a <protocol_rcv_pack_handle+0xa6>
    {
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(pack->pdata + 2, pack->data_len - PACK_HEADER_TAIL_LEN);
 80009d4:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <protocol_rcv_pack_handle+0xbc>)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3321      	adds	r3, #33	; 0x21
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	4413      	add	r3, r2
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	330c      	adds	r3, #12
 80009e4:	1c98      	adds	r0, r3, #2
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	7859      	ldrb	r1, [r3, #1]
 80009ea:	789b      	ldrb	r3, [r3, #2]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	430b      	orrs	r3, r1
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3b12      	subs	r3, #18
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	4790      	blx	r2
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
      if (session != 0)
 8000a02:	787b      	ldrb	r3, [r7, #1]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <protocol_rcv_pack_handle+0xa6>
      {
        protocol_ack(source_add, session, &err, sizeof(err), rcv_seq);
 8000a08:	f107 0208 	add.w	r2, r7, #8
 8000a0c:	7879      	ldrb	r1, [r7, #1]
 8000a0e:	7838      	ldrb	r0, [r7, #0]
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2304      	movs	r3, #4
 8000a16:	f000 f917 	bl	8000c48 <protocol_ack>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2b31      	cmp	r3, #49	; 0x31
 8000a24:	ddbe      	ble.n	80009a4 <protocol_rcv_pack_handle+0x30>
      }
    }
  }

  return;
 8000a26:	bf00      	nop
}
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000073c 	.word	0x2000073c

08000a34 <protocol_rcv_cmd_register>:

int32_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e01f      	b.n	8000a86 <protocol_rcv_cmd_register+0x52>
  {
    if (protocol_local_info.rcv_cmd_info[i].used == 0)
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <protocol_rcv_cmd_register+0x70>)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3321      	adds	r3, #33	; 0x21
 8000a4c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d115      	bne.n	8000a80 <protocol_rcv_cmd_register+0x4c>
    {
      protocol_local_info.rcv_cmd_info[i].used = 1;
 8000a54:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <protocol_rcv_cmd_register+0x70>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3321      	adds	r3, #33	; 0x21
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      protocol_local_info.rcv_cmd_info[i].cmd = cmd;
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <protocol_rcv_cmd_register+0x70>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3321      	adds	r3, #33	; 0x21
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	4413      	add	r3, r2
 8000a6a:	88fa      	ldrh	r2, [r7, #6]
 8000a6c:	805a      	strh	r2, [r3, #2]
      protocol_local_info.rcv_cmd_info[i].rcv_callback = rcv_callback;
 8000a6e:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <protocol_rcv_cmd_register+0x70>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3321      	adds	r3, #33	; 0x21
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	4413      	add	r3, r2
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
      return 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e00c      	b.n	8000a9a <protocol_rcv_cmd_register+0x66>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b31      	cmp	r3, #49	; 0x31
 8000a8a:	dddc      	ble.n	8000a46 <protocol_rcv_cmd_register+0x12>
    }
  }
  PROTOCOL_ERR_INFO_PRINTF(PROTOCOL_ERR_REGISTER_FAILED, __FILE__, __LINE__);
 8000a8c:	2254      	movs	r2, #84	; 0x54
 8000a8e:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <protocol_rcv_cmd_register+0x74>)
 8000a90:	2012      	movs	r0, #18
 8000a92:	f001 fbc7 	bl	8002224 <protocol_s_error_info_printf>
  return -1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000073c 	.word	0x2000073c
 8000aa8:	08012520 	.word	0x08012520

08000aac <protocol_local_init>:
    * @brief  Protocol local initialization function
    * @param  address  Protocol local address, which cannot be changed after initialization. Each device in the same network occupies a unique address.
    * @retval Protocol return status
  */
uint32_t protocol_local_init(uint8_t address)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]

  uint32_t status;

  status = PROTOCOL_SUCCESS;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]

  // Check if it is a little-endian machine
  const uint16_t endian_test = 0xAABB;
 8000aba:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 8000abe:	81fb      	strh	r3, [r7, #14]
  if (*((uint8_t *)(&endian_test)) == 0xAA)
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2baa      	cmp	r3, #170	; 0xaa
 8000ac8:	d107      	bne.n	8000ada <protocol_local_init+0x2e>
  {
    // It is big-endian mode
    status = PROTOCOL_ERR_UNSUPPORT_CPU;
 8000aca:	230d      	movs	r3, #13
 8000acc:	613b      	str	r3, [r7, #16]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8000ace:	229d      	movs	r2, #157	; 0x9d
 8000ad0:	492b      	ldr	r1, [pc, #172]	; (8000b80 <protocol_local_init+0xd4>)
 8000ad2:	6938      	ldr	r0, [r7, #16]
 8000ad4:	f001 fba6 	bl	8002224 <protocol_s_error_info_printf>

    while (1){
 8000ad8:	e7fe      	b.n	8000ad8 <protocol_local_init+0x2c>
    }
  }

  MUTEX_INIT(protocol_local_info.mutex_lock);
  
  memset(protocol_local_info.route_table, 0xFF, PROTOCOL_ROUTE_TABLE_MAX_NUM);
 8000ada:	22fe      	movs	r2, #254	; 0xfe
 8000adc:	21ff      	movs	r1, #255	; 0xff
 8000ade:	4829      	ldr	r0, [pc, #164]	; (8000b84 <protocol_local_init+0xd8>)
 8000ae0:	f011 fc01 	bl	80122e6 <memset>
	
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	75fb      	strb	r3, [r7, #23]
 8000ae8:	e00f      	b.n	8000b0a <protocol_local_init+0x5e>
	{
		/* initalization user data is 0xFF */
		// PROBLEM: Triggers HardFault_interupt from memory overflow. THe loop doesnt stop at 5
		// FIXED: i = 0
		memset(&protocol_local_info.interface[i].user_data, 0xFF, sizeof(union interface_user_data));
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2294      	movs	r2, #148	; 0x94
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <protocol_local_init+0xdc>)
 8000af8:	4413      	add	r3, r2
 8000afa:	220c      	movs	r2, #12
 8000afc:	21ff      	movs	r1, #255	; 0xff
 8000afe:	4618      	mov	r0, r3
 8000b00:	f011 fbf1 	bl	80122e6 <memset>
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000b04:	7dfb      	ldrb	r3, [r7, #23]
 8000b06:	3301      	adds	r3, #1
 8000b08:	75fb      	strb	r3, [r7, #23]
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d9ec      	bls.n	8000aea <protocol_local_init+0x3e>
	}

  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	75bb      	strb	r3, [r7, #22]
 8000b14:	e01b      	b.n	8000b4e <protocol_local_init+0xa2>
	{
    // PROBLEM: Triggers HardFault_interupt
    // FIXED: i = 0
	  /* initalization cmd is 0xFF */
	   memset(&protocol_local_info.send_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 8000b16:	7dbb      	ldrb	r3, [r7, #22]
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <protocol_local_init+0xdc>)
 8000b20:	4413      	add	r3, r2
 8000b22:	3302      	adds	r3, #2
 8000b24:	2202      	movs	r2, #2
 8000b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f011 fbdb 	bl	80122e6 <memset>
	   memset(&protocol_local_info.rcv_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 8000b30:	7dbb      	ldrb	r3, [r7, #22]
 8000b32:	3321      	adds	r3, #33	; 0x21
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <protocol_local_init+0xdc>)
 8000b38:	4413      	add	r3, r2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b42:	4618      	mov	r0, r3
 8000b44:	f011 fbcf 	bl	80122e6 <memset>
  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	75bb      	strb	r3, [r7, #22]
 8000b4e:	7dbb      	ldrb	r3, [r7, #22]
 8000b50:	2b31      	cmp	r3, #49	; 0x31
 8000b52:	d9e0      	bls.n	8000b16 <protocol_local_init+0x6a>
	}

  protocol_local_info.address = address;
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <protocol_local_init+0xdc>)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	7013      	strb	r3, [r2, #0]
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <protocol_local_init+0xdc>)
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <protocol_local_init+0xe0>)
 8000b5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  MUTEX_INIT(boardcast_object.mutex_lock);
  INIT_LIST_HEAD(&boardcast_object.send_list_header);
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <protocol_local_init+0xe4>)
 8000b64:	f7ff fec4 	bl	80008f0 <INIT_LIST_HEAD>
  boardcast_object.is_valid = 1;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <protocol_local_init+0xe4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	725a      	strb	r2, [r3, #9]
  protocol_local_info.is_valid = 1; // Set the protocol to be valid after initialization
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <protocol_local_init+0xdc>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  PROTOCOL_OTHER_INFO_PRINTF("Local info has been initialized.");

  return status;
 8000b76:	693b      	ldr	r3, [r7, #16]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08012520 	.word	0x08012520
 8000b84:	2000073d 	.word	0x2000073d
 8000b88:	2000073c 	.word	0x2000073c
 8000b8c:	08000975 	.word	0x08000975
 8000b90:	2000072c 	.word	0x2000072c

08000b94 <protocol_send>:
    * @param  p_data Pointer to the data to be sent
    * @param  data_len Length of the data to be sent
    * @retval Protocol return status
  */
uint32_t protocol_send(uint8_t reciver, uint16_t cmd, void *p_data, uint32_t data_len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	81bb      	strh	r3, [r7, #12]
  uint32_t status;
  uint8_t session = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	76fb      	strb	r3, [r7, #27]
  uint8_t ack = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	76bb      	strb	r3, [r7, #26]

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fead 	bl	8000910 <protocol_get_send_cmd_info>
 8000bb6:	6178      	str	r0, [r7, #20]
  
  struct perph_interface *int_obj;
  int_obj = protocol_s_get_route(reciver);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f80c 	bl	8001bd8 <protocol_s_get_route>
 8000bc0:	6138      	str	r0, [r7, #16]
  
  if (cmd_info != NULL)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <protocol_send+0x3a>
  {
    ack = cmd_info->ack_enable;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	76bb      	strb	r3, [r7, #26]
  }

  if (reciver == PROTOCOL_BROADCAST_ADDR)
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d107      	bne.n	8000be4 <protocol_send+0x50>
  {
    status = protocol_s_broadcast_add_node(p_data, data_len, cmd);
 8000bd4:	89bb      	ldrh	r3, [r7, #12]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	68b8      	ldr	r0, [r7, #8]
 8000bdc:	f000 fd20 	bl	8001620 <protocol_s_broadcast_add_node>
 8000be0:	61f8      	str	r0, [r7, #28]
 8000be2:	e014      	b.n	8000c0e <protocol_send+0x7a>
  }
  else
  {
    if (ack == 1)
 8000be4:	7ebb      	ldrb	r3, [r7, #26]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <protocol_send+0x60>
    {
      session = protocol_get_session(int_obj);
 8000bea:	6938      	ldr	r0, [r7, #16]
 8000bec:	f000 fb81 	bl	80012f2 <protocol_get_session>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	76fb      	strb	r3, [r7, #27]
    }
    status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_NOR, p_data,
 8000bf4:	7ef9      	ldrb	r1, [r7, #27]
 8000bf6:	7bf8      	ldrb	r0, [r7, #15]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	89bb      	ldrh	r3, [r7, #12]
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f000 fbb6 	bl	8001378 <protocol_s_add_sendnode>
 8000c0c:	61f8      	str	r0, [r7, #28]
                                     data_len, cmd, 0);
  }
  if (status == PROTOCOL_SUCCESS)
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <protocol_send+0x94>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <protocol_send+0xb0>)
 8000c16:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00c      	beq.n	8000c38 <protocol_send+0xa4>
    {
      protocol_local_info.send_list_add_callBack();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <protocol_send+0xb0>)
 8000c20:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c24:	4798      	blx	r3
 8000c26:	e007      	b.n	8000c38 <protocol_send+0xa4>
    }
  }
  else
  {
    if (ack == 1)
 8000c28:	7ebb      	ldrb	r3, [r7, #26]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d104      	bne.n	8000c38 <protocol_send+0xa4>
    {
      protocol_release_session(int_obj, session);
 8000c2e:	7efb      	ldrb	r3, [r7, #27]
 8000c30:	4619      	mov	r1, r3
 8000c32:	6938      	ldr	r0, [r7, #16]
 8000c34:	f000 fb83 	bl	800133e <protocol_release_session>
    }
  }
  return status;
 8000c38:	69fb      	ldr	r3, [r7, #28]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000073c 	.word	0x2000073c

08000c48 <protocol_ack>:
    * @param  data_len Length of the data to be sent
    * @param  ack_seq Sequence number of the Ack packet to be sent
    * @retval Protocol return status
  */
uint32_t protocol_ack(uint8_t reciver, uint8_t session, void *p_data, uint32_t data_len, uint16_t ack_seq)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	460b      	mov	r3, r1
 8000c58:	73bb      	strb	r3, [r7, #14]
  uint32_t status;
  status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_ACK, p_data,
 8000c5a:	7bb9      	ldrb	r1, [r7, #14]
 8000c5c:	7bf8      	ldrb	r0, [r7, #15]
 8000c5e:	8c3b      	ldrh	r3, [r7, #32]
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2300      	movs	r3, #0
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f000 fb83 	bl	8001378 <protocol_s_add_sendnode>
 8000c72:	6178      	str	r0, [r7, #20]
                                   data_len, 0, ack_seq);
  if (status == PROTOCOL_SUCCESS)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d108      	bne.n	8000c8c <protocol_ack+0x44>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <protocol_ack+0x50>)
 8000c7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <protocol_ack+0x44>
    {
      protocol_local_info.send_list_add_callBack();
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <protocol_ack+0x50>)
 8000c86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000c8a:	4798      	blx	r3
    }
  }
  return status;
 8000c8c:	697b      	ldr	r3, [r7, #20]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000073c 	.word	0x2000073c

08000c9c <protocol_send_flush>:
  * @brief Flushes the send list, calling this function will send the data in the send list. Call after calling protocol_send or protocol_ack, or call periodically.
  * @param void
  * @retval Protocol return status
  */
uint32_t protocol_send_flush(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e035      	b.n	8000d14 <protocol_send_flush+0x78>
  {
    if (protocol_local_info.interface[i].is_valid)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <protocol_send_flush+0x9c>)
 8000cac:	2194      	movs	r1, #148	; 0x94
 8000cae:	fb01 f303 	mul.w	r3, r1, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d027      	beq.n	8000d0e <protocol_send_flush+0x72>
    {
      if (protocol_local_info.interface[i].send.normal_node_num > 0)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <protocol_send_flush+0x9c>)
 8000cc2:	2194      	movs	r1, #148	; 0x94
 8000cc4:	fb01 f303 	mul.w	r3, r1, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	f203 6312 	addw	r3, r3, #1554	; 0x612
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d008      	beq.n	8000ce6 <protocol_send_flush+0x4a>
      {
        protocol_s_interface_normal_send_flush(protocol_local_info.interface + i);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2294      	movs	r2, #148	; 0x94
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <protocol_send_flush+0xa0>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fdfd 	bl	80018e0 <protocol_s_interface_normal_send_flush>
      }
      if (protocol_local_info.interface[i].send.ack_node_num > 0)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <protocol_send_flush+0x9c>)
 8000cea:	2194      	movs	r1, #148	; 0x94
 8000cec:	fb01 f303 	mul.w	r3, r1, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	f203 6313 	addw	r3, r3, #1555	; 0x613
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d008      	beq.n	8000d0e <protocol_send_flush+0x72>
      {
        protocol_s_interface_ack_send_flush(protocol_local_info.interface + i);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2294      	movs	r2, #148	; 0x94
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <protocol_send_flush+0xa0>)
 8000d06:	4413      	add	r3, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 feb4 	bl	8001a76 <protocol_s_interface_ack_send_flush>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	3301      	adds	r3, #1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d9c6      	bls.n	8000ca8 <protocol_send_flush+0xc>
      }
    }
  }

  if (boardcast_object.is_valid)
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <protocol_send_flush+0xa4>)
 8000d1c:	7a5b      	ldrb	r3, [r3, #9]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <protocol_send_flush+0x92>
  {
    if (boardcast_object.send_node_num > 0)
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <protocol_send_flush+0xa4>)
 8000d24:	7a1b      	ldrb	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <protocol_send_flush+0x92>
    {
      protocol_s_broadcast_send_flush();
 8000d2a:	f000 fee3 	bl	8001af4 <protocol_s_broadcast_send_flush>
    }
  }
  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000073c 	.word	0x2000073c
 8000d3c:	20000cf4 	.word	0x20000cf4
 8000d40:	2000072c 	.word	0x2000072c

08000d44 <protocol_unpack_flush>:
    * @brief  Protocol flushes the receive buffer, calling this function will unpack the data in the receive buffer. Call after receiving data or periodically.
    * @param  void
    * @retval Protocol return status
  */
uint32_t protocol_unpack_flush(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	e018      	b.n	8000d82 <protocol_unpack_flush+0x3e>
  {
    if (protocol_local_info.interface[i].is_valid)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <protocol_unpack_flush+0x50>)
 8000d54:	2194      	movs	r1, #148	; 0x94
 8000d56:	fb01 f303 	mul.w	r3, r1, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <protocol_unpack_flush+0x38>
    {
      protocol_s_extract(&(protocol_local_info.interface[i]));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2294      	movs	r2, #148	; 0x94
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <protocol_unpack_flush+0x50>)
 8000d74:	4413      	add	r3, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f8cc 	bl	8001f14 <protocol_s_extract>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d9e3      	bls.n	8000d50 <protocol_unpack_flush+0xc>
    }
  }
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000073c 	.word	0x2000073c

08000d98 <protocol_rcv_data>:
    * @param  data_len Length of the data
    * @param  perph Interface index, specify the index of the interface where the data is received
    * @retval Protocol return status
  */
uint32_t protocol_rcv_data(void *p_data, uint32_t data_len, struct perph_interface *perph)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000da4:	f3ef 8310 	mrs	r3, PRIMASK
 8000da8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000daa:	69bb      	ldr	r3, [r7, #24]
  struct perph_interface *obj;
  uint32_t rcv_length;
  uint32_t status;

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8000dac:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8000dae:	b672      	cpsid	i
}
 8000db0:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  
  status = PROTOCOL_SUCCESS;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24

  if (protocol_local_info.is_valid == 0)
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <protocol_rcv_data+0x90>)
 8000db8:	f893 389c 	ldrb.w	r3, [r3, #2204]	; 0x89c
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d108      	bne.n	8000dd2 <protocol_rcv_data+0x3a>
  {
    status = PROTOCOL_ERR_PROTOCOL_NOT_INIT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc4:	617c      	str	r4, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f383 8810 	msr	PRIMASK, r3
}
 8000dcc:	bf00      	nop
    //Interrupt On
    FIFO_RESTORE_CPU_SR(cpu_sr);
    return status;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	e026      	b.n	8000e20 <protocol_rcv_data+0x88>
  }

  obj = &(protocol_local_info.interface[perph->idx]);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2394      	movs	r3, #148	; 0x94
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <protocol_rcv_data+0x90>)
 8000de6:	4413      	add	r3, r2
 8000de8:	623b      	str	r3, [r7, #32]

  //TODO: Removed the protection here because considering that this function is not reentrant for the same protocol interface, careful consideration is needed.
  //Adding protection, high-speed transmission may still have nested reentry.
  rcv_length = fifo_s_puts_noprotect(&(obj->rcvd.fifo), p_data, data_len);
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	3320      	adds	r3, #32
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f010 fb30 	bl	8011458 <fifo_s_puts_noprotect>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (rcv_length < data_len)
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <protocol_rcv_data+0x7c>
  {
    status = PROTOCOL_ERR_FIFO_FULL;
 8000e04:	230b      	movs	r3, #11
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8000e08:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <protocol_rcv_data+0x94>)
 8000e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e10:	f001 fa08 	bl	8002224 <protocol_s_error_info_printf>
 8000e14:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	f383 8810 	msr	PRIMASK, r3
}
 8000e1c:	bf00      	nop
  }
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return status;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	372c      	adds	r7, #44	; 0x2c
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	2000073c 	.word	0x2000073c
 8000e2c:	08012520 	.word	0x08012520

08000e30 <protocol_send_list_add_callback_reg>:
    * @brief  Protocol registers the callback function for adding the send packet to the send list. This function is called after the protocol data packet is packed and added to the send list.
    * @param  fn Callback function pointer, format refers to pack_handle_fn_t
    * @retval 0
  */
  uint32_t protocol_send_list_add_callback_reg(void_fn_t fn)
  {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    protocol_local_info.send_list_add_callBack = fn;
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <protocol_send_list_add_callback_reg+0x20>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return 0;
 8000e40:	2300      	movs	r3, #0
  }
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000073c 	.word	0x2000073c

08000e54 <protocol_p_malloc>:
    * @brief  Protocol memory allocation interface function, users can modify this function according to actual needs
    * @param  size Size of memory to allocate in bytes
    * @retval If allocation is successful, returns the pointer to the allocated memory, otherwise returns NULL
    */
void *protocol_p_malloc(uint32_t size)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return heap_malloc(size);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f010 fe3d 	bl	8011adc <heap_malloc>
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <protocol_p_free>:
    * @brief  Protocol memory deallocation interface function, users can modify this function according to actual needs
    * @param  ptr Pointer to the starting address of the memory to be freed
    * @retval void
    */
  void protocol_p_free(void *ptr)
  {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    heap_free(ptr);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f010 fedb 	bl	8011c30 <heap_free>
  }
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <protocol_p_get_time>:
    * @brief  Protocol function to get system time in milliseconds, users can modify this function according to actual needs
    * @param  void
    * @retval Current system time in milliseconds
  */
uint32_t protocol_p_get_time(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  return osKernelSysTick() / portTICK_PERIOD_MS;
 8000e86:	f00c ff52 	bl	800dd2e <osKernelSysTick>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <INIT_LIST_HEAD>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  list->next = list;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	605a      	str	r2, [r3, #4]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <protocol_interface_init>:
  */
int32_t protocol_interface_init(struct perph_interface *perph,
                                char *interface_name,
                                uint8_t boardcast_output_enable,
                                uint16_t rcv_buf_size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	80bb      	strh	r3, [r7, #4]
  struct perph_interface *interface;

  uint32_t status;
  int32_t idx = PROTOCOL_INTERFACE_MAX;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24

  status = PROTOCOL_SUCCESS;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	e010      	b.n	8000ef6 <protocol_interface_init+0x46>
  {
    if (protocol_local_info.interface[i].is_valid == 0)
 8000ed4:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <protocol_interface_init+0x11c>)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2194      	movs	r1, #148	; 0x94
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <protocol_interface_init+0x40>
    {
      idx = i;
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000eee:	e005      	b.n	8000efc <protocol_interface_init+0x4c>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	ddeb      	ble.n	8000ed4 <protocol_interface_init+0x24>
    }
  }

  if (idx == PROTOCOL_INTERFACE_MAX)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d108      	bne.n	8000f14 <protocol_interface_init+0x64>
  {
    //TODO: Index length exceeded
    status = PROTOCOL_ERR_OBJECT_NOT_FOUND;
 8000f02:	230c      	movs	r3, #12
 8000f04:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8000f06:	223d      	movs	r2, #61	; 0x3d
 8000f08:	4931      	ldr	r1, [pc, #196]	; (8000fd0 <protocol_interface_init+0x120>)
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f001 f98a 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	e056      	b.n	8000fc2 <protocol_interface_init+0x112>
  }

  interface = &protocol_local_info.interface[idx];
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	2294      	movs	r2, #148	; 0x94
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8000f20:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <protocol_interface_init+0x11c>)
 8000f22:	4413      	add	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
  
  memcpy(interface, perph, sizeof(struct perph_interface));
 8000f26:	2294      	movs	r2, #148	; 0x94
 8000f28:	68f9      	ldr	r1, [r7, #12]
 8000f2a:	69b8      	ldr	r0, [r7, #24]
 8000f2c:	f011 fa60 	bl	80123f0 <memcpy>

  // initialization name
  if ((interface_name != NULL) && (strlen(interface_name) < PROTOCOL_OBJ_NAME_MAX_LEN))
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00f      	beq.n	8000f56 <protocol_interface_init+0xa6>
 8000f36:	68b8      	ldr	r0, [r7, #8]
 8000f38:	f7ff f95a 	bl	80001f0 <strlen>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b1f      	cmp	r3, #31
 8000f40:	d809      	bhi.n	8000f56 <protocol_interface_init+0xa6>
  {
    strncpy(interface->object_name, (const char *)interface_name, sizeof(interface->object_name));
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2220      	movs	r2, #32
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f011 f9b9 	bl	80122c0 <strncpy>
    interface->object_name[PROTOCOL_OBJ_NAME_MAX_LEN - 1] = '\0';
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2200      	movs	r2, #0
 8000f52:	77da      	strb	r2, [r3, #31]
 8000f54:	e005      	b.n	8000f62 <protocol_interface_init+0xb2>
  }
  else
  {
    strcpy(interface->object_name, "NULL");
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <protocol_interface_init+0x124>)
 8000f5a:	6810      	ldr	r0, [r2, #0]
 8000f5c:	6018      	str	r0, [r3, #0]
 8000f5e:	7912      	ldrb	r2, [r2, #4]
 8000f60:	711a      	strb	r2, [r3, #4]
  }

  // Initialize the receive buffer area
  uint8_t *rcv_buf = protocol_p_malloc(rcv_buf_size);
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff75 	bl	8000e54 <protocol_p_malloc>
 8000f6a:	6178      	str	r0, [r7, #20]
  if (rcv_buf == NULL)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <protocol_interface_init+0xd4>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8000f76:	2255      	movs	r2, #85	; 0x55
 8000f78:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <protocol_interface_init+0x120>)
 8000f7a:	69f8      	ldr	r0, [r7, #28]
 8000f7c:	f001 f952 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	e01e      	b.n	8000fc2 <protocol_interface_init+0x112>
  }
  fifo_s_init(&interface->rcvd.fifo, rcv_buf, rcv_buf_size);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	3320      	adds	r3, #32
 8000f88:	88ba      	ldrh	r2, [r7, #4]
 8000f8a:	6979      	ldr	r1, [r7, #20]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f010 f9c4 	bl	801131a <fifo_s_init>

  // Initialize the sending structure
  INIT_LIST_HEAD(&interface->send.normal_list_header);
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	3348      	adds	r3, #72	; 0x48
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff7a 	bl	8000e90 <INIT_LIST_HEAD>
  INIT_LIST_HEAD(&interface->send.ack_list_header);
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3350      	adds	r3, #80	; 0x50
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff75 	bl	8000e90 <INIT_LIST_HEAD>
  MUTEX_INIT(interface->send.mutex_lock);

  interface->broadcast_output_enable = boardcast_output_enable;
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  interface->idx = idx;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  interface->is_valid = 1;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  PROTOCOL_OTHER_INFO_PRINTF("Interface %s[%d] has been initialized.",
                             interface->object_name, interface->idx);

  return status;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000073c 	.word	0x2000073c
 8000fd0:	08012544 	.word	0x08012544
 8000fd4:	08012574 	.word	0x08012574

08000fd8 <protocol_uart_interface_register>:
int32_t protocol_uart_interface_register(char *interface_name,
                                        uint16_t rcv_buf_size,
                                        uint8_t boardcast_output_enable,
                                        uint8_t com_port,
                                        int (*com_send_fn)(uint8_t *p_data, uint32_t len))
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0a8      	sub	sp, #160	; 0xa0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	807b      	strh	r3, [r7, #2]
 8000fea:	460b      	mov	r3, r1
 8000fec:	707b      	strb	r3, [r7, #1]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	703b      	strb	r3, [r7, #0]
  struct perph_interface interface = {0};
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2294      	movs	r2, #148	; 0x94
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f011 f973 	bl	80122e6 <memset>
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  interface.type = COM_PORT;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  interface.send_callback.com_send_fn = com_send_fn;
 800100c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  interface.user_data.com.port = com_port;
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  status = protocol_interface_init(&interface, interface_name, boardcast_output_enable, rcv_buf_size);
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	787a      	ldrb	r2, [r7, #1]
 800101e:	f107 0008 	add.w	r0, r7, #8
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f7ff ff44 	bl	8000eb0 <protocol_interface_init>
 8001028:	4603      	mov	r3, r0
 800102a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return status;
 800102e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8001032:	4618      	mov	r0, r3
 8001034:	37a0      	adds	r7, #160	; 0xa0
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <protocol_interface_send_data>:

int32_t protocol_interface_send_data(struct perph_interface *perph, uint8_t *buff, uint16_t len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	80fb      	strh	r3, [r7, #6]
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

  if (perph == NULL)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d108      	bne.n	8001066 <protocol_interface_send_data+0x2a>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001054:	230f      	movs	r3, #15
 8001056:	617b      	str	r3, [r7, #20]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001058:	2299      	movs	r2, #153	; 0x99
 800105a:	4920      	ldr	r1, [pc, #128]	; (80010dc <protocol_interface_send_data+0xa0>)
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f001 f8e1 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	e035      	b.n	80010d2 <protocol_interface_send_data+0x96>
  }

  if (perph->type == CAN_PORT)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800106c:	2b01      	cmp	r3, #1
 800106e:	d116      	bne.n	800109e <protocol_interface_send_data+0x62>
  {
    if (perph->send_callback.can_send_fn != NULL)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <protocol_interface_send_data+0x52>
    {
      perph->send_callback.can_send_fn(perph->user_data.can.send_id, buff, len);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001086:	88fa      	ldrh	r2, [r7, #6]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	4798      	blx	r3
 800108c:	e020      	b.n	80010d0 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800108e:	230f      	movs	r3, #15
 8001090:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001092:	22a6      	movs	r2, #166	; 0xa6
 8001094:	4911      	ldr	r1, [pc, #68]	; (80010dc <protocol_interface_send_data+0xa0>)
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f001 f8c4 	bl	8002224 <protocol_s_error_info_printf>
 800109c:	e018      	b.n	80010d0 <protocol_interface_send_data+0x94>
    }
  }
  else if (perph->type == COM_PORT)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d113      	bne.n	80010d0 <protocol_interface_send_data+0x94>
  {
    if (perph->send_callback.com_send_fn != NULL)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <protocol_interface_send_data+0x86>
    {
      perph->send_callback.com_send_fn(buff, len);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	4611      	mov	r1, r2
 80010bc:	68b8      	ldr	r0, [r7, #8]
 80010be:	4798      	blx	r3
 80010c0:	e006      	b.n	80010d0 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 80010c2:	230f      	movs	r3, #15
 80010c4:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80010c6:	22b2      	movs	r2, #178	; 0xb2
 80010c8:	4904      	ldr	r1, [pc, #16]	; (80010dc <protocol_interface_send_data+0xa0>)
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f001 f8aa 	bl	8002224 <protocol_s_error_info_printf>
    }
  }
  return status;
 80010d0:	697b      	ldr	r3, [r7, #20]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	08012544 	.word	0x08012544

080010e0 <protocol_uart_rcv_data>:
  } 
  return status;
}

uint32_t protocol_uart_rcv_data(uint8_t com_port, void *p_data, uint32_t data_len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t status =PROTOCOL_SUCCESS;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]

  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e026      	b.n	8001146 <protocol_uart_rcv_data+0x66>
  {
    if((protocol_local_info.interface[i].type == COM_PORT)
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <protocol_uart_rcv_data+0x78>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2194      	movs	r1, #148	; 0x94
 80010fe:	fb01 f303 	mul.w	r3, r1, r3
 8001102:	4413      	add	r3, r2
 8001104:	f203 633a 	addw	r3, r3, #1594	; 0x63a
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <protocol_uart_rcv_data+0x60>
     &&(protocol_local_info.interface[i].user_data.com.port == com_port))
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <protocol_uart_rcv_data+0x78>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2194      	movs	r1, #148	; 0x94
 8001114:	fb01 f303 	mul.w	r3, r1, r3
 8001118:	4413      	add	r3, r2
 800111a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	429a      	cmp	r2, r3
 8001124:	d10c      	bne.n	8001140 <protocol_uart_rcv_data+0x60>
    {
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2294      	movs	r2, #148	; 0x94
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <protocol_uart_rcv_data+0x78>)
 8001134:	4413      	add	r3, r2
 8001136:	461a      	mov	r2, r3
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f7ff fe2c 	bl	8000d98 <protocol_rcv_data>
  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b04      	cmp	r3, #4
 800114a:	ddd5      	ble.n	80010f8 <protocol_uart_rcv_data+0x18>
    }
  }
  return status;
 800114c:	693b      	ldr	r3, [r7, #16]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000073c 	.word	0x2000073c

0800115c <protocol_set_route>:
    * @param  tar_add Target address
    *         interface Next hop interface serial number corresponding to the target address
    * @retval Protocol return status
    */
int32_t protocol_set_route(uint8_t tar_add, const char *name)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  struct perph_interface *perph;
  perph = protocol_get_interface(name);
 8001168:	6838      	ldr	r0, [r7, #0]
 800116a:	f000 f83b 	bl	80011e4 <protocol_get_interface>
 800116e:	60f8      	str	r0, [r7, #12]

  status = PROTOCOL_SUCCESS;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  if (perph == NULL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <protocol_set_route+0x30>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800117a:	230f      	movs	r3, #15
 800117c:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800117e:	22e7      	movs	r2, #231	; 0xe7
 8001180:	4916      	ldr	r1, [pc, #88]	; (80011dc <protocol_set_route+0x80>)
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f001 f84e 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	e022      	b.n	80011d2 <protocol_set_route+0x76>
  }
  if (tar_add >= PROTOCOL_ROUTE_TABLE_MAX_NUM)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2bfd      	cmp	r3, #253	; 0xfd
 8001190:	d908      	bls.n	80011a4 <protocol_set_route+0x48>
  {
    status = PROTOCOL_ERR_ROUTEU_SET_BEYOND;
 8001192:	230e      	movs	r3, #14
 8001194:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001196:	22ed      	movs	r2, #237	; 0xed
 8001198:	4910      	ldr	r1, [pc, #64]	; (80011dc <protocol_set_route+0x80>)
 800119a:	68b8      	ldr	r0, [r7, #8]
 800119c:	f001 f842 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	e016      	b.n	80011d2 <protocol_set_route+0x76>
  }

  if (perph->is_valid == 0)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <protocol_set_route+0x64>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 80011ae:	230f      	movs	r3, #15
 80011b0:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80011b2:	22f4      	movs	r2, #244	; 0xf4
 80011b4:	4909      	ldr	r1, [pc, #36]	; (80011dc <protocol_set_route+0x80>)
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f001 f834 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	e008      	b.n	80011d2 <protocol_set_route+0x76>
  }

  protocol_local_info.route_table[tar_add] = perph->idx;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <protocol_set_route+0x84>)
 80011ca:	4413      	add	r3, r2
 80011cc:	460a      	mov	r2, r1
 80011ce:	705a      	strb	r2, [r3, #1]

  PROTOCOL_OTHER_INFO_PRINTF("Route has been set, Address 0x%02X next jump is %s[%d].",
                             tar_add, perph->object_name, perph->idx);

  return status;
 80011d0:	68bb      	ldr	r3, [r7, #8]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08012544 	.word	0x08012544
 80011e0:	2000073c 	.word	0x2000073c

080011e4 <protocol_get_interface>:

struct perph_interface *protocol_get_interface(const char *name)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80011ec:	f3ef 8310 	mrs	r3, PRIMASK
 80011f0:	613b      	str	r3, [r7, #16]
  return(result);
 80011f2:	693b      	ldr	r3, [r7, #16]
  var_cpu_sr();
  enter_critical();
 80011f4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80011f6:	b672      	cpsid	i
}
 80011f8:	bf00      	nop
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e020      	b.n	8001242 <protocol_get_interface+0x5e>
  {
    if (strncmp(protocol_local_info.interface[i].object_name, name, PROTOCOL_OBJ_NAME_MAX_LEN) == 0)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2294      	movs	r2, #148	; 0x94
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <protocol_get_interface+0x78>)
 800120e:	4413      	add	r3, r2
 8001210:	2220      	movs	r2, #32
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	f011 f841 	bl	801229c <strncmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10d      	bne.n	800123c <protocol_get_interface+0x58>
 8001220:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f383 8810 	msr	PRIMASK, r3
}
 8001228:	bf00      	nop
    {
      exit_critical();
      return &protocol_local_info.interface[i];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2294      	movs	r2, #148	; 0x94
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <protocol_get_interface+0x78>)
 8001238:	4413      	add	r3, r2
 800123a:	e00b      	b.n	8001254 <protocol_get_interface+0x70>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b04      	cmp	r3, #4
 8001246:	dddb      	ble.n	8001200 <protocol_get_interface+0x1c>
 8001248:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f383 8810 	msr	PRIMASK, r3
}
 8001250:	bf00      	nop
    }
  }
  exit_critical();
  return NULL;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	2000073c 	.word	0x2000073c

08001260 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  next->prev = new;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	605a      	str	r2, [r3, #4]
  new->next = next;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	605a      	str	r2, [r3, #4]
  prev->next = new;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffdc 	bl	8001260 <__list_add>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	605a      	str	r2, [r3, #4]
  prev->next = next;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff ffe3 	bl	80012b0 <__list_del>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <protocol_get_session>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

uint8_t protocol_get_session(struct perph_interface * interface)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 31; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e014      	b.n	800132a <protocol_get_session+0x38>
  {
    if (interface->session[i] == 0)
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	3363      	adds	r3, #99	; 0x63
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10a      	bne.n	8001324 <protocol_get_session+0x32>
    {
      interface->session[i] = 1;
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	3363      	adds	r3, #99	; 0x63
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
      return i + 1;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	e006      	b.n	8001332 <protocol_get_session+0x40>
  for (int i = 0; i < 31; i++)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b1e      	cmp	r3, #30
 800132e:	dde7      	ble.n	8001300 <protocol_get_session+0xe>
    }
  }
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <protocol_release_session>:

int32_t protocol_release_session(struct perph_interface * interface, uint8_t id)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
  if ((id > 0) && (id < 32))
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <protocol_release_session+0x2a>
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b1f      	cmp	r3, #31
 8001354:	d808      	bhi.n	8001368 <protocol_release_session+0x2a>
  {
    interface->session[id - 1] = 0;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	3b01      	subs	r3, #1
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e001      	b.n	800136c <protocol_release_session+0x2e>
  }
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <protocol_s_add_sendnode>:

// Add protocol frame
uint32_t protocol_s_add_sendnode(uint8_t reciver, uint8_t session, uint8_t pack_type,
                                 void *p_data, uint32_t data_len, uint16_t cmd, uint16_t ack_seq)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af02      	add	r7, sp, #8
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	460b      	mov	r3, r1
 8001386:	71bb      	strb	r3, [r7, #6]
 8001388:	4613      	mov	r3, r2
 800138a:	717b      	strb	r3, [r7, #5]
  send_ctx_t ctx = {0};
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
  uint16_t seq;

  status = PROTOCOL_SUCCESS;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 8001394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	d908      	bls.n	80013ae <protocol_s_add_sendnode+0x36>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 800139c:	2301      	movs	r3, #1
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80013a0:	224d      	movs	r2, #77	; 0x4d
 80013a2:	499e      	ldr	r1, [pc, #632]	; (800161c <protocol_s_add_sendnode+0x2a4>)
 80013a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013a6:	f000 ff3d 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 80013aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ac:	e132      	b.n	8001614 <protocol_s_add_sendnode+0x29c>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = pack_type;
 80013ae:	797b      	ldrb	r3, [r7, #5]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	f362 1345 	bfi	r3, r2, #5, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.session = session;
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f362 0304 	bfi	r3, r2, #0, #5
 80013cc:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.res = 0;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	f36f 1387 	bfc	r3, #6, #2
 80013d4:	73fb      	strb	r3, [r7, #15]
  ctx.reciver = reciver;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	73bb      	strb	r3, [r7, #14]
  ctx.version = PROTOCOL_VERSION;
 80013da:	2300      	movs	r3, #0
 80013dc:	81bb      	strh	r3, [r7, #12]

  // Get routing interface
  int_obj = protocol_s_get_route(reciver);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fbf9 	bl	8001bd8 <protocol_s_get_route>
 80013e6:	63b8      	str	r0, [r7, #56]	; 0x38

  if (int_obj == NULL)
 80013e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d108      	bne.n	8001400 <protocol_s_add_sendnode+0x88>
  {
    status = PROTOCOL_ERR_ROUTE_NOT_FOUND;
 80013ee:	2306      	movs	r3, #6
 80013f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80013f2:	225e      	movs	r2, #94	; 0x5e
 80013f4:	4989      	ldr	r1, [pc, #548]	; (800161c <protocol_s_add_sendnode+0x2a4>)
 80013f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f8:	f000 ff14 	bl	8002224 <protocol_s_error_info_printf>

    return status;
 80013fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013fe:	e109      	b.n	8001614 <protocol_s_add_sendnode+0x29c>
  }

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d114      	bne.n	8001430 <protocol_s_add_sendnode+0xb8>
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d011      	beq.n	8001430 <protocol_s_add_sendnode+0xb8>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4619      	mov	r1, r3
 8001412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001414:	f000 fc0c 	bl	8001c30 <protocol_s_session_get_node>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <protocol_s_add_sendnode+0xb8>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 800141e:	2305      	movs	r3, #5
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001422:	2268      	movs	r2, #104	; 0x68
 8001424:	497d      	ldr	r1, [pc, #500]	; (800161c <protocol_s_add_sendnode+0x2a4>)
 8001426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001428:	f000 fefc 	bl	8002224 <protocol_s_error_info_printf>
      return status;
 800142c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142e:	e0f1      	b.n	8001614 <protocol_s_add_sendnode+0x29c>
    }
  }

  // Allocate memory required for data frame
  if (pack_type == PROTOCOL_PACK_ACK)
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d103      	bne.n	800143e <protocol_s_add_sendnode+0xc6>
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 8001436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001438:	3340      	adds	r3, #64	; 0x40
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
 800143c:	e002      	b.n	8001444 <protocol_s_add_sendnode+0xcc>
                  data_len;
  }
  else
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 800143e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001440:	3342      	adds	r3, #66	; 0x42
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
                  data_len + PROTOCOL_PACK_CMD_SIZE;
  }
  malloc_zone = protocol_p_malloc(malloc_size);
 8001444:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001446:	f7ff fd05 	bl	8000e54 <protocol_p_malloc>
 800144a:	6378      	str	r0, [r7, #52]	; 0x34
  if (malloc_zone == NULL)
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <protocol_s_add_sendnode+0xec>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001452:	2302      	movs	r3, #2
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001456:	227c      	movs	r2, #124	; 0x7c
 8001458:	4970      	ldr	r1, [pc, #448]	; (800161c <protocol_s_add_sendnode+0x2a4>)
 800145a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800145c:	f000 fee2 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8001460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001462:	e0d7      	b.n	8001614 <protocol_s_add_sendnode+0x29c>
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d118      	bne.n	800149c <protocol_s_add_sendnode+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800146a:	f3ef 8310 	mrs	r3, PRIMASK
 800146e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001470:	69fa      	ldr	r2, [r7, #28]
  {
    MUTEX_LOCK(int_obj->send.mutex_lock);
 8001472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001474:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8001476:	b672      	cpsid	i
}
 8001478:	bf00      	nop
    seq = int_obj->send.send_seq++;
 800147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	b291      	uxth	r1, r2
 8001484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001486:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
 800148a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    MUTEX_UNLOCK(int_obj->send.mutex_lock);
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	f383 8810 	msr	PRIMASK, r3
}
 800149a:	e003      	b.n	80014a4 <protocol_s_add_sendnode+0x12c>
  }
  else
  {
    seq = ack_seq;
 800149c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80014a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 80014a4:	2330      	movs	r3, #48	; 0x30
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 80014a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ac:	4413      	add	r3, r2
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_node = (send_list_node_t *)&malloc_zone[0];
 80014b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), seq, cmd);
 80014b4:	f107 000c 	add.w	r0, r7, #12
 80014b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	f000 f945 	bl	8001758 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = ctx.s_a_r.session;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 80014dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	441a      	add	r2, r3
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 80014e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b30      	subs	r3, #48	; 0x30
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	819a      	strh	r2, [r3, #12]
  send_node->pre_timestamp = 0;
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  send_node->is_got_ack = 0;
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = reciver;
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	79fa      	ldrb	r2, [r7, #7]
 800150a:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = pack_type;
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	797a      	ldrb	r2, [r7, #5]
 8001510:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	2200      	movs	r2, #0
 8001516:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800151e:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 8001526:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f9f0 	bl	8000910 <protocol_get_send_cmd_info>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24
  if (cmd_info != NULL)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <protocol_s_add_sendnode+0x1e2>
  {
    send_node->rest_cnt = cmd_info->resend_times;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	795a      	ldrb	r2, [r3, #5]
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	75da      	strb	r2, [r3, #23]
    send_node->timeout = cmd_info->resend_timeout;
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	88da      	ldrh	r2, [r3, #6]
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = cmd_info->ack_callback;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = cmd_info->no_ack_callback;
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
 8001558:	e00b      	b.n	8001572 <protocol_s_add_sendnode+0x1fa>
  }
  else
  {
    send_node->rest_cnt = 1;
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	2201      	movs	r2, #1
 800155e:	75da      	strb	r2, [r3, #23]
    send_node->timeout = 0;
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = NULL;
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = NULL;
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001572:	f3ef 8310 	mrs	r3, PRIMASK
 8001576:	61bb      	str	r3, [r7, #24]
  return(result);
 8001578:	69ba      	ldr	r2, [r7, #24]
  }

  //Add to sending list
  MUTEX_LOCK(int_obj->send.mutex_lock);
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800157e:	b672      	cpsid	i
}
 8001580:	bf00      	nop

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11b      	bne.n	80015c0 <protocol_s_add_sendnode+0x248>
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d018      	beq.n	80015c0 <protocol_s_add_sendnode+0x248>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4619      	mov	r1, r3
 8001594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001596:	f000 fb4b 	bl	8001c30 <protocol_s_session_get_node>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00f      	beq.n	80015c0 <protocol_s_add_sendnode+0x248>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 80015a0:	2305      	movs	r3, #5
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      MUTEX_UNLOCK(int_obj->send.mutex_lock);
 80015a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f383 8810 	msr	PRIMASK, r3
}
 80015b0:	bf00      	nop
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80015b2:	22b9      	movs	r2, #185	; 0xb9
 80015b4:	4919      	ldr	r1, [pc, #100]	; (800161c <protocol_s_add_sendnode+0x2a4>)
 80015b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015b8:	f000 fe34 	bl	8002224 <protocol_s_error_info_printf>
      return status;
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015be:	e029      	b.n	8001614 <protocol_s_add_sendnode+0x29c>
    }
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <protocol_s_add_sendnode+0x26e>
  {
    list_add(&(send_node->send_list), &(int_obj->send.normal_list_header));
 80015c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ca:	3348      	adds	r3, #72	; 0x48
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fe5e 	bl	8001290 <list_add>
    int_obj->send.normal_node_num++;
 80015d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80015e4:	e00e      	b.n	8001604 <protocol_s_add_sendnode+0x28c>
  }
  else
  {
    list_add(&(send_node->send_list), &(int_obj->send.ack_list_header));
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ea:	3350      	adds	r3, #80	; 0x50
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff fe4e 	bl	8001290 <list_add>
    int_obj->send.ack_node_num++;
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80015fa:	3301      	adds	r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  }

  MUTEX_UNLOCK(int_obj->send.mutex_lock);
 8001604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f383 8810 	msr	PRIMASK, r3
}
 8001610:	bf00      	nop
  {
    PROTOCOL_SEND_DBG_PRINTF("Send pack, Address:0x%02X, Session: %d Ack pack.",
                              reciver, session);
  }

  return status;
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001614:	4618      	mov	r0, r3
 8001616:	3748      	adds	r7, #72	; 0x48
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0801257c 	.word	0x0801257c

08001620 <protocol_s_broadcast_add_node>:

// Add processing function to broadcast package
uint32_t protocol_s_broadcast_add_node(void *p_data, uint32_t data_len, uint16_t cmd)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b090      	sub	sp, #64	; 0x40
 8001624:	af02      	add	r7, sp, #8
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	80fb      	strh	r3, [r7, #6]
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	; 0x34

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001638:	d908      	bls.n	800164c <protocol_s_broadcast_add_node+0x2c>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 800163a:	2301      	movs	r3, #1
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800163e:	22e9      	movs	r2, #233	; 0xe9
 8001640:	4943      	ldr	r1, [pc, #268]	; (8001750 <protocol_s_broadcast_add_node+0x130>)
 8001642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001644:	f000 fdee 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8001648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164a:	e07d      	b.n	8001748 <protocol_s_broadcast_add_node+0x128>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = PROTOCOL_PACK_NOR;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	f36f 1345 	bfc	r3, #5, #1
 8001652:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.session = 0;
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	f36f 0304 	bfc	r3, #0, #5
 800165a:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.res = 0;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	f36f 1387 	bfc	r3, #6, #2
 8001662:	75fb      	strb	r3, [r7, #23]
  ctx.reciver = PROTOCOL_BROADCAST_ADDR;
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	75bb      	strb	r3, [r7, #22]
  ctx.version = PROTOCOL_VERSION;
 8001668:	2300      	movs	r3, #0
 800166a:	82bb      	strh	r3, [r7, #20]

  malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3342      	adds	r3, #66	; 0x42
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
                data_len + PROTOCOL_PACK_CMD_SIZE;

  malloc_zone = protocol_p_malloc(malloc_size);
 8001672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001674:	f7ff fbee 	bl	8000e54 <protocol_p_malloc>
 8001678:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (malloc_zone == NULL)
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <protocol_s_broadcast_add_node+0x72>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001680:	2302      	movs	r3, #2
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001684:	22fb      	movs	r2, #251	; 0xfb
 8001686:	4932      	ldr	r1, [pc, #200]	; (8001750 <protocol_s_broadcast_add_node+0x130>)
 8001688:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800168a:	f000 fdcb 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	e05a      	b.n	8001748 <protocol_s_broadcast_add_node+0x128>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 8001692:	2330      	movs	r3, #48	; 0x30
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 8001696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	4413      	add	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  send_node = (send_list_node_t *)&malloc_zone[0];
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	623b      	str	r3, [r7, #32]

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), 0, cmd);
 80016a2:	f107 0014 	add.w	r0, r7, #20
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	f000 f850 	bl	8001758 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = 0;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2200      	movs	r2, #0
 80016bc:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	441a      	add	r2, r3
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 80016c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b30      	subs	r3, #48	; 0x30
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2201      	movs	r2, #1
 80016d8:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	2200      	movs	r2, #0
 80016e4:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2200      	movs	r2, #0
 80016ea:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = PROTOCOL_BROADCAST_ADDR;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_NOR;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	2200      	movs	r2, #0
 80016fe:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	2200      	movs	r2, #0
 8001704:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001712:	f3ef 8310 	mrs	r3, PRIMASK
 8001716:	61bb      	str	r3, [r7, #24]
  return(result);
 8001718:	69bb      	ldr	r3, [r7, #24]

  // Add to sending list
  MUTEX_LOCK(boardcast_object.mutex_lock);
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <protocol_s_broadcast_add_node+0x134>)
 800171c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800171e:	b672      	cpsid	i
}
 8001720:	bf00      	nop

  list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	490b      	ldr	r1, [pc, #44]	; (8001754 <protocol_s_broadcast_add_node+0x134>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fdb2 	bl	8001290 <list_add>
  boardcast_object.send_node_num++;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <protocol_s_broadcast_add_node+0x134>)
 800172e:	7a1b      	ldrb	r3, [r3, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <protocol_s_broadcast_add_node+0x134>)
 8001736:	721a      	strb	r2, [r3, #8]

  MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <protocol_s_broadcast_add_node+0x134>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f383 8810 	msr	PRIMASK, r3
}
 8001744:	bf00      	nop

  PROTOCOL_SEND_DBG_PRINTF("Send broadcast pack, Cmd:0x%04X, Normal pack.", cmd);

  return status;
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001748:	4618      	mov	r0, r3
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0801257c 	.word	0x0801257c
 8001754:	2000072c 	.word	0x2000072c

08001758 <protocol_s_fill_pack>:

// frame padding
uint32_t protocol_s_fill_pack(send_ctx_t *ctx, uint8_t *p_data,
                              uint32_t data_len, uint8_t *pack_zone, uint16_t seq, uint16_t cmd)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  uint32_t status = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  protocol_pack_desc_t *p_pack_head;

  p_pack_head = (protocol_pack_desc_t *)pack_zone;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	613b      	str	r3, [r7, #16]

  /* get local module */

  p_pack_head->sof = PROTOCOL_HEADER;
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	22aa      	movs	r2, #170	; 0xaa
 8001772:	701a      	strb	r2, [r3, #0]
  p_pack_head->version = ctx->version;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	7893      	ldrb	r3, [r2, #2]
 8001782:	f361 0387 	bfi	r3, r1, #2, #6
 8001786:	7093      	strb	r3, [r2, #2]
  p_pack_head->sender = protocol_local_info.address;
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <protocol_s_fill_pack+0x138>)
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	711a      	strb	r2, [r3, #4]
  p_pack_head->reciver = ctx->reciver;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	789a      	ldrb	r2, [r3, #2]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	715a      	strb	r2, [r3, #5]
  p_pack_head->S_A_R_c = ctx->S_A_R_c;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	78da      	ldrb	r2, [r3, #3]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	70da      	strb	r2, [r3, #3]
  p_pack_head->seq_num = seq;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	8c3a      	ldrh	r2, [r7, #32]
 80017a4:	811a      	strh	r2, [r3, #8]
  p_pack_head->ver_data_len = p_pack_head->ver_data_len;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_pack_head->res1 = 0;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2200      	movs	r2, #0
 80017b8:	719a      	strb	r2, [r3, #6]
 80017ba:	2200      	movs	r2, #0
 80017bc:	71da      	strb	r2, [r3, #7]

  /* cpy data */
  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <protocol_s_fill_pack+0xb6>
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	3310      	adds	r3, #16
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d8:	b29a      	uxth	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	b2d1      	uxtb	r1, r2
 80017de:	2000      	movs	r0, #0
 80017e0:	4301      	orrs	r1, r0
 80017e2:	7059      	strb	r1, [r3, #1]
 80017e4:	0a12      	lsrs	r2, r2, #8
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	f002 0003 	and.w	r0, r2, #3
 80017f0:	789a      	ldrb	r2, [r3, #2]
 80017f2:	f022 0203 	bic.w	r2, r2, #3
 80017f6:	4611      	mov	r1, r2
 80017f8:	4602      	mov	r2, r0
 80017fa:	430a      	orrs	r2, r1
 80017fc:	709a      	strb	r2, [r3, #2]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE, p_data, data_len);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	330c      	adds	r3, #12
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f010 fdf2 	bl	80123f0 <memcpy>
 800180c:	e023      	b.n	8001856 <protocol_s_fill_pack+0xfe>
  }
  else
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b29b      	uxth	r3, r3
 8001812:	3312      	adds	r3, #18
 8001814:	b29b      	uxth	r3, r3
 8001816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181a:	b29a      	uxth	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	b2d1      	uxtb	r1, r2
 8001820:	2000      	movs	r0, #0
 8001822:	4301      	orrs	r1, r0
 8001824:	7059      	strb	r1, [r3, #1]
 8001826:	0a12      	lsrs	r2, r2, #8
 8001828:	b292      	uxth	r2, r2
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	f002 0003 	and.w	r0, r2, #3
 8001832:	789a      	ldrb	r2, [r3, #2]
 8001834:	f022 0203 	bic.w	r2, r2, #3
 8001838:	4611      	mov	r1, r2
 800183a:	4602      	mov	r2, r0
 800183c:	430a      	orrs	r2, r1
 800183e:	709a      	strb	r2, [r3, #2]
    *((uint16_t *)(pack_zone + PROTOCOL_PACK_HEAD_SIZE)) = cmd;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	330c      	adds	r3, #12
 8001844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001846:	801a      	strh	r2, [r3, #0]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE + PROTOCOL_PACK_CMD_SIZE, p_data, data_len);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	330e      	adds	r3, #14
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f010 fdcd 	bl	80123f0 <memcpy>
  }

  /* crc */
  append_crc16(pack_zone, 12);
 8001856:	210c      	movs	r1, #12
 8001858:	6838      	ldr	r0, [r7, #0]
 800185a:	f010 fb4b 	bl	8011ef4 <append_crc16>

  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <protocol_s_fill_pack+0x122>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3310      	adds	r3, #16
 8001870:	4619      	mov	r1, r3
 8001872:	6838      	ldr	r0, [r7, #0]
 8001874:	f010 fbe0 	bl	8012038 <append_crc32>
 8001878:	e005      	b.n	8001886 <protocol_s_fill_pack+0x12e>
  }
  else
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3312      	adds	r3, #18
 800187e:	4619      	mov	r1, r3
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f010 fbd9 	bl	8012038 <append_crc32>
  }

  return status;
 8001886:	697b      	ldr	r3, [r7, #20]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000073c 	.word	0x2000073c

08001894 <protocol_s_interface_send_data>:

// Send data through interface
uint32_t protocol_s_interface_send_data(send_list_node_t *cur_send_node, struct perph_interface *obj)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]

#if (PROTOCOL_AUTO_LOOKBACK == PROTOCOL_ENABLE)

  if (cur_send_node->address != protocol_local_info.address)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7c9a      	ldrb	r2, [r3, #18]
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <protocol_s_interface_send_data+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d008      	beq.n	80018bc <protocol_s_interface_send_data+0x28>
  {
    // The sending address is different from the local address. Outgoing
    protocol_interface_send_data(obj, cur_send_node->p_data, cur_send_node->len);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	899b      	ldrh	r3, [r3, #12]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f7ff fbc1 	bl	800103c <protocol_interface_send_data>
 80018ba:	e007      	b.n	80018cc <protocol_s_interface_send_data+0x38>
  }
  else
  {
    // The sending address is the same as the local address and loops back directly internally.

    protocol_rcv_data(cur_send_node->p_data, cur_send_node->len, &protocol_local_info.interface[0]);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	899b      	ldrh	r3, [r3, #12]
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <protocol_s_interface_send_data+0x48>)
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff fa66 	bl	8000d98 <protocol_rcv_data>
                           cur_send_node->len,
                           obj->interface);
  }
#endif

  return PROTOCOL_SUCCESS;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000073c 	.word	0x2000073c
 80018dc:	20000cf4 	.word	0x20000cf4

080018e0 <protocol_s_interface_normal_send_flush>:

// Clear sending list
uint32_t protocol_s_interface_normal_send_flush(struct perph_interface *obj)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
  uint32_t timeout;

  head_node = &(obj->send.normal_list_header);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3348      	adds	r3, #72	; 0x48
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
 80018fa:	e0b2      	b.n	8001a62 <protocol_s_interface_normal_send_flush+0x182>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001900:	f3ef 8310 	mrs	r3, PRIMASK
 8001904:	623b      	str	r3, [r7, #32]
  return(result);
 8001906:	6a3a      	ldr	r2, [r7, #32]

    MUTEX_LOCK(obj->send.mutex_lock);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
    // Get ACK, delete
    if (cur_send_node->is_got_ack)
 8001910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001912:	7bdb      	ldrb	r3, [r3, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01b      	beq.n	8001950 <protocol_s_interface_normal_send_flush+0x70>
    {
      list_del(cur_node);
 8001918:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800191a:	f7ff fcda 	bl	80012d2 <list_del>
      protocol_p_free(cur_send_node);
 800191e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001920:	f7ff faa4 	bl	8000e6c <protocol_p_free>
      obj->send.normal_node_num--;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800192a:	3b01      	subs	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      protocol_release_session(obj, cur_send_node->session);
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	7c5b      	ldrb	r3, [r3, #17]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fcff 	bl	800133e <protocol_release_session>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f383 8810 	msr	PRIMASK, r3
}
 800194c:	bf00      	nop
      continue;
 800194e:	e083      	b.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
    }

    // Released after exceeding the number of retransmissions
    if (cur_send_node->is_ready_realse)
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	7c1b      	ldrb	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d025      	beq.n	80019a4 <protocol_s_interface_normal_send_flush+0xc4>
    {
      list_del(cur_node);
 8001958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800195a:	f7ff fcba 	bl	80012d2 <list_del>
      obj->send.normal_node_num--;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001964:	3b01      	subs	r3, #1
 8001966:	b2da      	uxtb	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      if (cur_send_node->no_ack_callback != NULL)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <protocol_s_interface_normal_send_flush+0xa2>
      {
        cur_send_node->no_ack_callback(cur_send_node->cmd);
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800197c:	8a92      	ldrh	r2, [r2, #20]
 800197e:	4610      	mov	r0, r2
 8001980:	4798      	blx	r3
      }

      protocol_release_session(obj, cur_send_node->session);
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	7c5b      	ldrb	r3, [r3, #17]
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fcd8 	bl	800133e <protocol_release_session>

      protocol_p_free(cur_send_node);
 800198e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001990:	f7ff fa6c 	bl	8000e6c <protocol_p_free>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f383 8810 	msr	PRIMASK, r3
}
 80019a0:	bf00      	nop
      continue;
 80019a2:	e059      	b.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
    }
    else
    {
      MUTEX_UNLOCK(obj->send.mutex_lock);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f383 8810 	msr	PRIMASK, r3
}
 80019b0:	bf00      	nop
    }

    timeout = protocol_p_get_time() - cur_send_node->pre_timestamp;
 80019b2:	f7ff fa66 	bl	8000e82 <protocol_p_get_time>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	627b      	str	r3, [r7, #36]	; 0x24

    // Retransmit after timeout or send for the first time
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	8b1b      	ldrh	r3, [r3, #24]
 80019c4:	461a      	mov	r2, r3
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d804      	bhi.n	80019d6 <protocol_s_interface_normal_send_flush+0xf6>
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d040      	beq.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
        cur_send_node->rest_cnt >= 1)
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	7ddb      	ldrb	r3, [r3, #23]
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d03c      	beq.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
    {
      cur_send_node->is_first_send = 0;
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

      cur_send_node->rest_cnt--;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	7ddb      	ldrb	r3, [r3, #23]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	75da      	strb	r2, [r3, #23]

      // send data
      protocol_s_interface_send_data(cur_send_node, obj);
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019f6:	f7ff ff4d 	bl	8001894 <protocol_s_interface_send_data>

      if (cur_send_node->session == 0)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	7c5b      	ldrb	r3, [r3, #17]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11d      	bne.n	8001a3e <protocol_s_interface_normal_send_flush+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a02:	f3ef 8310 	mrs	r3, PRIMASK
 8001a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a08:	68fa      	ldr	r2, [r7, #12]
      {
        // session is 0, no retransmission or ACK reply is required
        MUTEX_LOCK(obj->send.mutex_lock);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0e:	b672      	cpsid	i
}
 8001a10:	bf00      	nop
        list_del(cur_node);
 8001a12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a14:	f7ff fc5d 	bl	80012d2 <list_del>
        obj->send.normal_node_num--;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        protocol_p_free(cur_send_node);
 8001a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a2a:	f7ff fa1f 	bl	8000e6c <protocol_p_free>
        MUTEX_UNLOCK(obj->send.mutex_lock);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f383 8810 	msr	PRIMASK, r3
}
 8001a3a:	bf00      	nop
        continue;
 8001a3c:	e00c      	b.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
      }
      else
      {
        // The session is not 0 and requires retransmission and ACK confirmation.
        if (cur_send_node->rest_cnt == 0)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	7ddb      	ldrb	r3, [r3, #23]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <protocol_s_interface_normal_send_flush+0x16e>
        {
          // The number of sending times has been exhausted
          cur_send_node->is_ready_realse = 1;
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	2201      	movs	r2, #1
 8001a4a:	741a      	strb	r2, [r3, #16]
 8001a4c:	e004      	b.n	8001a58 <protocol_s_interface_normal_send_flush+0x178>
        }
        else
        {
          cur_send_node->pre_timestamp = protocol_p_get_time();
 8001a4e:	f7ff fa18 	bl	8000e82 <protocol_p_get_time>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	61da      	str	r2, [r3, #28]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
 8001a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	429a      	cmp	r2, r3
 8001a68:	f47f af48 	bne.w	80018fc <protocol_s_interface_normal_send_flush+0x1c>
        }
      }
    }
  }

  return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3738      	adds	r7, #56	; 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <protocol_s_interface_ack_send_flush>:

// Clear the ACK frame sending list
uint32_t protocol_s_interface_ack_send_flush(struct perph_interface *obj)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.ack_list_header);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3350      	adds	r3, #80	; 0x50
 8001a82:	617b      	str	r3, [r7, #20]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	e027      	b.n	8001ae2 <protocol_s_interface_ack_send_flush+0x6c>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	613b      	str	r3, [r7, #16]

    protocol_s_interface_send_data(cur_send_node, obj);
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	6938      	ldr	r0, [r7, #16]
 8001a9a:	f7ff fefb 	bl	8001894 <protocol_s_interface_send_data>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aa4:	68ba      	ldr	r2, [r7, #8]

    //The packet is of ACK type and does not require retransmission or confirmation.
    MUTEX_LOCK(obj->send.mutex_lock);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8001aaa:	b672      	cpsid	i
}
 8001aac:	bf00      	nop
    list_del(cur_node);
 8001aae:	69f8      	ldr	r0, [r7, #28]
 8001ab0:	f7ff fc0f 	bl	80012d2 <list_del>
    obj->send.ack_node_num--;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    protocol_p_free(cur_send_node);
 8001ac4:	6938      	ldr	r0, [r7, #16]
 8001ac6:	f7ff f9d1 	bl	8000e6c <protocol_p_free>
    MUTEX_UNLOCK(obj->send.mutex_lock);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f383 8810 	msr	PRIMASK, r3
}
 8001ad6:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d1d3      	bne.n	8001a92 <protocol_s_interface_ack_send_flush+0x1c>
  }

  return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <protocol_s_broadcast_send_flush>:

//Clear the broadcast packet sending list
uint32_t protocol_s_broadcast_send_flush(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(boardcast_object.send_list_header);
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <protocol_s_broadcast_send_flush+0xd8>)
 8001afc:	613b      	str	r3, [r7, #16]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e055      	b.n	8001bb8 <protocol_s_broadcast_send_flush+0xc4>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
 8001b14:	e02d      	b.n	8001b72 <protocol_s_broadcast_send_flush+0x7e>
    {
      if (cur_send_node->forward_src_obj == protocol_local_info.interface + i)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2194      	movs	r1, #148	; 0x94
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	492b      	ldr	r1, [pc, #172]	; (8001bd0 <protocol_s_broadcast_send_flush+0xdc>)
 8001b24:	440b      	add	r3, r1
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d01b      	beq.n	8001b62 <protocol_s_broadcast_send_flush+0x6e>
        continue;
      if (!cur_send_node->forward_src_obj->is_valid)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d017      	beq.n	8001b66 <protocol_s_broadcast_send_flush+0x72>
        continue;
      if (!protocol_local_info.interface[i].broadcast_output_enable)
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <protocol_s_broadcast_send_flush+0xe0>)
 8001b3a:	2194      	movs	r1, #148	; 0x94
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <protocol_s_broadcast_send_flush+0x76>
        continue;

      protocol_s_interface_send_data(cur_send_node, protocol_local_info.interface + i);
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2294      	movs	r2, #148	; 0x94
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <protocol_s_broadcast_send_flush+0xdc>)
 8001b56:	4413      	add	r3, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fe9a 	bl	8001894 <protocol_s_interface_send_data>
 8001b60:	e004      	b.n	8001b6c <protocol_s_broadcast_send_flush+0x78>
        continue;
 8001b62:	bf00      	nop
 8001b64:	e002      	b.n	8001b6c <protocol_s_broadcast_send_flush+0x78>
        continue;
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <protocol_s_broadcast_send_flush+0x78>
        continue;
 8001b6a:	bf00      	nop
    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d9ce      	bls.n	8001b16 <protocol_s_broadcast_send_flush+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b78:	f3ef 8310 	mrs	r3, PRIMASK
 8001b7c:	607b      	str	r3, [r7, #4]
  return(result);
 8001b7e:	687b      	ldr	r3, [r7, #4]
    }

    MUTEX_LOCK(boardcast_object.mutex_lock);
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <protocol_s_broadcast_send_flush+0xd8>)
 8001b82:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
    list_del(cur_node);
 8001b88:	69f8      	ldr	r0, [r7, #28]
 8001b8a:	f7ff fba2 	bl	80012d2 <list_del>
    boardcast_object.send_node_num--;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <protocol_s_broadcast_send_flush+0xd8>)
 8001b90:	7a1b      	ldrb	r3, [r3, #8]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <protocol_s_broadcast_send_flush+0xd8>)
 8001b98:	721a      	strb	r2, [r3, #8]
    protocol_p_free(cur_send_node);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff f966 	bl	8000e6c <protocol_p_free>
    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <protocol_s_broadcast_send_flush+0xd8>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f383 8810 	msr	PRIMASK, r3
}
 8001bac:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1a5      	bne.n	8001b0c <protocol_s_broadcast_send_flush+0x18>
  }

  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000072c 	.word	0x2000072c
 8001bd0:	20000cf4 	.word	0x20000cf4
 8001bd4:	2000073c 	.word	0x2000073c

08001bd8 <protocol_s_get_route>:

//Get route
struct perph_interface *protocol_s_get_route(uint8_t tar_add)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  uint8_t int_obj_idx;

  int_obj_idx = protocol_local_info.route_table[tar_add]; 
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <protocol_s_get_route+0x54>)
 8001be6:	4413      	add	r3, r2
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	73fb      	strb	r3, [r7, #15]
  if (int_obj_idx > PROTOCOL_INTERFACE_MAX)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d901      	bls.n	8001bf6 <protocol_s_get_route+0x1e>
  {
    return NULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e014      	b.n	8001c20 <protocol_s_get_route+0x48>
  }

  if (protocol_local_info.interface[int_obj_idx].is_valid) 
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <protocol_s_get_route+0x54>)
 8001bfa:	2194      	movs	r1, #148	; 0x94
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <protocol_s_get_route+0x46>
  {
    return &(protocol_local_info.interface[int_obj_idx]);
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2294      	movs	r2, #148	; 0x94
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <protocol_s_get_route+0x54>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	e000      	b.n	8001c20 <protocol_s_get_route+0x48>
  }
  else
  {
    return NULL;
 8001c1e:	2300      	movs	r3, #0
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	2000073c 	.word	0x2000073c

08001c30 <protocol_s_session_get_node>:

//Get the node with the specified address and session
send_list_node_t *protocol_s_session_get_node(struct perph_interface *obj,
                                              uint8_t address, uint8_t session)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b08b      	sub	sp, #44	; 0x2c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	70bb      	strb	r3, [r7, #2]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.normal_list_header);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3348      	adds	r3, #72	; 0x48
 8001c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c46:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4a:	617b      	str	r3, [r7, #20]
  return(result);
 8001c4c:	697b      	ldr	r3, [r7, #20]

  MUTEX_LOCK(protocol_local_info.mutex_lock);
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <protocol_s_session_get_node+0x94>)
 8001c50:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	623b      	str	r3, [r7, #32]
 8001c64:	e01a      	b.n	8001c9c <protocol_s_session_get_node+0x6c>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	61bb      	str	r3, [r7, #24]

    if ((cur_send_node->session == session) &&
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	7c5b      	ldrb	r3, [r3, #17]
 8001c6e:	78ba      	ldrb	r2, [r7, #2]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d10e      	bne.n	8001c92 <protocol_s_session_get_node+0x62>
        (cur_send_node->address == address))
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	7c9b      	ldrb	r3, [r3, #18]
    if ((cur_send_node->session == session) &&
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d109      	bne.n	8001c92 <protocol_s_session_get_node+0x62>
    {
      MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <protocol_s_session_get_node+0x94>)
 8001c80:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8001c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f383 8810 	msr	PRIMASK, r3
}
 8001c8c:	bf00      	nop
      return cur_send_node;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	e011      	b.n	8001cb6 <protocol_s_session_get_node+0x86>
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1e0      	bne.n	8001c66 <protocol_s_session_get_node+0x36>
    }
  }
  MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <protocol_s_session_get_node+0x94>)
 8001ca6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8001caa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f383 8810 	msr	PRIMASK, r3
}
 8001cb2:	bf00      	nop
  return NULL;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	372c      	adds	r7, #44	; 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000073c 	.word	0x2000073c

08001cc8 <protocol_s_pack_forward>:

//Packet forwarding function
uint32_t protocol_s_pack_forward(protocol_pack_desc_t *p_pack, struct perph_interface *src_obj)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint8_t *malloc_zone;
  uint32_t status;
  uint32_t pack_head_offset;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  //Find the destination of the package
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	795b      	ldrb	r3, [r3, #5]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d00a      	beq.n	8001cf4 <protocol_s_pack_forward+0x2c>
  {
    tar_inter = protocol_s_get_route(p_pack->reciver);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	795b      	ldrb	r3, [r3, #5]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff78 	bl	8001bd8 <protocol_s_get_route>
 8001ce8:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (tar_inter == NULL)
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <protocol_s_pack_forward+0x2c>
    {
      PROTOCOL_RCV_ERR_PRINTF("Pack forward error, Route to address 0x%02x does not exist.", p_pack->reciver);

      return PROTOCOL_ERR_ROUTE_NOT_FOUND;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	e09b      	b.n	8001e2c <protocol_s_pack_forward+0x164>
    }
  }

  // Allocate memory required to forward packets
  malloc_zone = protocol_p_malloc(p_pack->data_len + PROTOCOL_SEND_NODE_SIZE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	785a      	ldrb	r2, [r3, #1]
 8001cf8:	789b      	ldrb	r3, [r3, #2]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3330      	adds	r3, #48	; 0x30
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f8a4 	bl	8000e54 <protocol_p_malloc>
 8001d0c:	6278      	str	r0, [r7, #36]	; 0x24
  if (malloc_zone == NULL)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <protocol_s_pack_forward+0x60>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001d18:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8001d1c:	4945      	ldr	r1, [pc, #276]	; (8001e34 <protocol_s_pack_forward+0x16c>)
 8001d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d20:	f000 fa80 	bl	8002224 <protocol_s_error_info_printf>
    return status;
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	e081      	b.n	8001e2c <protocol_s_pack_forward+0x164>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 8001d28:	2330      	movs	r3, #48	; 0x30
 8001d2a:	623b      	str	r3, [r7, #32]
  send_node = (send_list_node_t *)&malloc_zone[0];
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	61fb      	str	r3, [r7, #28]

  send_node->session = 0;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2200      	movs	r2, #0
 8001d34:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	609a      	str	r2, [r3, #8]
  send_node->len = p_pack->data_len;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	785a      	ldrb	r2, [r3, #1]
 8001d44:	789b      	ldrb	r3, [r3, #2]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2200      	movs	r2, #0
 8001d66:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = p_pack->reciver;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	795a      	ldrb	r2, [r3, #5]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_ACK; //It is faster to send forwarded packets as ACK packets
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2201      	movs	r2, #1
 8001d82:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2200      	movs	r2, #0
 8001d88:	741a      	strb	r2, [r3, #16]
  send_node->cmd = 0;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = src_obj;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

  memcpy(send_node->p_data, p_pack, p_pack->data_len);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	6898      	ldr	r0, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	785a      	ldrb	r2, [r3, #1]
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	f010 fb1f 	bl	80123f0 <memcpy>
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	795b      	ldrb	r3, [r3, #5]
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d01d      	beq.n	8001df6 <protocol_s_pack_forward+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001dba:	f3ef 8310 	mrs	r3, PRIMASK
 8001dbe:	617b      	str	r3, [r7, #20]
  return(result);
 8001dc0:	697a      	ldr	r2, [r7, #20]
  {
    // Non-broadcast packet handling
    MUTEX_LOCK(tar_inter->send.mutex_lock);
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc6:	b672      	cpsid	i
}
 8001dc8:	bf00      	nop
    list_add(&(send_node->send_list), &(tar_inter->send.ack_list_header)); //It is faster to send forwarded packets as ACK packets
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	3350      	adds	r3, #80	; 0x50
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7ff fa5c 	bl	8001290 <list_add>
    tar_inter->send.ack_node_num++;
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    MUTEX_UNLOCK(tar_inter->send.mutex_lock);
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f383 8810 	msr	PRIMASK, r3
}
 8001df4:	e019      	b.n	8001e2a <protocol_s_pack_forward+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001df6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
                             p_pack->reciver, tar_inter->object_name);
  }
  else
  {
    //Broadcast packet processing
    MUTEX_LOCK(boardcast_object.mutex_lock);
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <protocol_s_pack_forward+0x170>)
 8001e00:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e02:	b672      	cpsid	i
}
 8001e04:	bf00      	nop

    list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	490b      	ldr	r1, [pc, #44]	; (8001e38 <protocol_s_pack_forward+0x170>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fa40 	bl	8001290 <list_add>
    boardcast_object.send_node_num++;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <protocol_s_pack_forward+0x170>)
 8001e12:	7a1b      	ldrb	r3, [r3, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <protocol_s_pack_forward+0x170>)
 8001e1a:	721a      	strb	r2, [r3, #8]

    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <protocol_s_pack_forward+0x170>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f383 8810 	msr	PRIMASK, r3
}
 8001e28:	bf00      	nop

    PROTOCOL_RCV_DBG_PRINTF("Broadcast pack forward.");
  }

  return status;
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3730      	adds	r7, #48	; 0x30
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0801257c 	.word	0x0801257c
 8001e38:	2000072c 	.word	0x2000072c

08001e3c <protocol_s_unpack_data_handle>:

//Unpack processing function
uint32_t protocol_s_unpack_data_handle(struct perph_interface *obj)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint16_t cmd;
  protocol_pack_desc_t *p_pack;
  send_list_node_t *session_node;

  status = PROTOCOL_SUCCESS;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  p_pack = (protocol_pack_desc_t *)(obj->rcvd.p_data);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	613b      	str	r3, [r7, #16]

#if PROTOCOL_ROUTE_FOWARD == PROTOCOL_ENABLE

  //If the receiving address does not match the local address, forward it
  if (p_pack->reciver != protocol_local_info.address)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	795a      	ldrb	r2, [r3, #5]
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <protocol_s_unpack_data_handle+0xd0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d00a      	beq.n	8001e70 <protocol_s_unpack_data_handle+0x34>
  {
    status = protocol_s_pack_forward(p_pack, obj);
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f7ff ff33 	bl	8001cc8 <protocol_s_pack_forward>
 8001e62:	6178      	str	r0, [r7, #20]
    if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	795b      	ldrb	r3, [r3, #5]
 8001e68:	2bff      	cmp	r3, #255	; 0xff
 8001e6a:	d001      	beq.n	8001e70 <protocol_s_unpack_data_handle+0x34>
    {
      return status;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	e049      	b.n	8001f04 <protocol_s_unpack_data_handle+0xc8>
    }
  }

#endif

  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02a      	beq.n	8001ed4 <protocol_s_unpack_data_handle+0x98>
  {
    session_node = protocol_s_session_get_node(obj,
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	7919      	ldrb	r1, [r3, #4]
                                               p_pack->sender,
                                               p_pack->session);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e8a:	b2db      	uxtb	r3, r3
    session_node = protocol_s_session_get_node(obj,
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fece 	bl	8001c30 <protocol_s_session_get_node>
 8001e94:	60b8      	str	r0, [r7, #8]

    if (session_node == NULL)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <protocol_s_unpack_data_handle+0x74>
    {
      status = PROTOCOL_ERR_SESSION_NOT_FOUND;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001ea0:	f240 22af 	movw	r2, #687	; 0x2af
 8001ea4:	491a      	ldr	r1, [pc, #104]	; (8001f10 <protocol_s_unpack_data_handle+0xd4>)
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f000 f9bc 	bl	8002224 <protocol_s_error_info_printf>

      return status;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	e029      	b.n	8001f04 <protocol_s_unpack_data_handle+0xc8>
    }
    session_node->is_got_ack = 1;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	73da      	strb	r2, [r3, #15]

    cmd = session_node->cmd;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	8a9b      	ldrh	r3, [r3, #20]
 8001eba:	81fb      	strh	r3, [r7, #14]

    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Session:%d Ack pack.",
                             p_pack->sender, cmd, p_pack->session);

    if (session_node->ack_callback != NULL)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01e      	beq.n	8001f02 <protocol_s_unpack_data_handle+0xc6>
    {
      session_node->ack_callback(*(int32_t *)(p_pack->pdata));
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	320c      	adds	r2, #12
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4798      	blx	r3
 8001ed2:	e016      	b.n	8001f02 <protocol_s_unpack_data_handle+0xc6>
    }
  }
  else
  {
    cmd = *((uint16_t *)(p_pack->pdata));
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	81fb      	strh	r3, [r7, #14]
    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Normal pack.",
                             p_pack->sender, cmd);
    if (protocol_local_info.rcv_nor_callBack != NULL)
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <protocol_s_unpack_data_handle+0xd0>)
 8001ede:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <protocol_s_unpack_data_handle+0xc6>
    {
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <protocol_s_unpack_data_handle+0xd0>)
 8001ee8:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
                                           cmd,
                                           p_pack->session,
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	78db      	ldrb	r3, [r3, #3]
 8001ef0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ef4:	b2db      	uxtb	r3, r3
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	89f9      	ldrh	r1, [r7, #14]
 8001efe:	6938      	ldr	r0, [r7, #16]
 8001f00:	47a0      	blx	r4
                                           p_pack->sender);
    }
  }

  return status;
 8001f02:	697b      	ldr	r3, [r7, #20]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	2000073c 	.word	0x2000073c
 8001f10:	0801257c 	.word	0x0801257c

08001f14 <protocol_s_extract>:

//Unpack
uint32_t protocol_s_extract(struct perph_interface *obj)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  rcvd_desc_t *rcvd;

  rcvd = &obj->rcvd;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3320      	adds	r3, #32
 8001f24:	60bb      	str	r3, [r7, #8]
  if (fifo_s_isempty(&rcvd->fifo))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00f fcb9 	bl	80118a0 <fifo_s_isempty>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <protocol_s_extract+0x28>
  {
    status = PROTOCOL_ERR_FIFO_EMPTY;
 8001f34:	2307      	movs	r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]
    return status;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	e0af      	b.n	800209c <protocol_s_extract+0x188>
  }

  while (1)
  {
    switch (rcvd->state)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	f200 8098 	bhi.w	8002078 <protocol_s_extract+0x164>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <protocol_s_extract+0x3c>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f65 	.word	0x08001f65
 8001f54:	08001f7f 	.word	0x08001f7f
 8001f58:	08001feb 	.word	0x08001feb
 8001f5c:	0800201d 	.word	0x0800201d
 8001f60:	0800205d 	.word	0x0800205d
    {
    case UNPACK_PACK_STAGE_FIND_SOF:

      status = protocol_s_find_pack_header(rcvd);
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f000 f89f 	bl	80020a8 <protocol_s_find_pack_header>
 8001f6a:	60f8      	str	r0, [r7, #12]
      if (status == PROTOCOL_SUCCESS)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8084 	bne.w	800207c <protocol_s_extract+0x168>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]
      }
      break;
 8001f7c:	e07e      	b.n	800207c <protocol_s_extract+0x168>

    case UNPACK_PACK_STAGE_AUTH_HEADER:

      status = protocol_s_auth_pack_header(rcvd);
 8001f7e:	68b8      	ldr	r0, [r7, #8]
 8001f80:	f000 f8b4 	bl	80020ec <protocol_s_auth_pack_header>
 8001f84:	60f8      	str	r0, [r7, #12]

      if (status == PROTOCOL_SUCCESS)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d122      	bne.n	8001fd2 <protocol_s_extract+0xbe>
      { /* malloc memory size equal to header size adding data size */
        rcvd->state = UNPACK_PACK_STAGE_RECV_DATA;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2020 	strb.w	r2, [r3, #32]
        rcvd->p_data = protocol_p_malloc(rcvd->total_num);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	8bdb      	ldrh	r3, [r3, #30]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ff5b 	bl	8000e54 <protocol_p_malloc>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	619a      	str	r2, [r3, #24]
        if (rcvd->p_data == NULL)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <protocol_s_extract+0xac>
        {
          status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001fac:	2302      	movs	r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
          PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001fb0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8001fb4:	493b      	ldr	r1, [pc, #236]	; (80020a4 <protocol_s_extract+0x190>)
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f934 	bl	8002224 <protocol_s_error_info_printf>
          return status;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	e06d      	b.n	800209c <protocol_s_extract+0x188>
        }
        memset(rcvd->p_data, 0, rcvd->rcvd_num);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6998      	ldr	r0, [r3, #24]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	8b9b      	ldrh	r3, [r3, #28]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f010 f98b 	bl	80122e6 <memset>
        /* this is a pseudo header, remove this from fifo */
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
      }
      break;
 8001fd0:	e056      	b.n	8002080 <protocol_s_extract+0x16c>
      else if (status == PROTOCOL_ERR_AUTH_FAILURE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d153      	bne.n	8002080 <protocol_s_extract+0x16c>
        fifo_s_get(&rcvd->fifo);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00f faa7 	bl	801152e <fifo_s_get>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001fe8:	e04a      	b.n	8002080 <protocol_s_extract+0x16c>

    case UNPACK_PACK_STAGE_RECV_DATA:

      if (rcvd->p_data)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <protocol_s_extract+0xe8>
      {
        status = protocol_s_fetch_pack_data(rcvd);
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f000 f8c0 	bl	8002178 <protocol_s_fetch_pack_data>
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	e007      	b.n	800200c <protocol_s_extract+0xf8>
      }
      else
      {
        status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
        PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002000:	f240 320e 	movw	r2, #782	; 0x30e
 8002004:	4927      	ldr	r1, [pc, #156]	; (80020a4 <protocol_s_extract+0x190>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f90c 	bl	8002224 <protocol_s_error_info_printf>
      }

      if (status == PROTOCOL_SUCCESS)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d138      	bne.n	8002084 <protocol_s_extract+0x170>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_PACK;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2203      	movs	r2, #3
 8002016:	f883 2020 	strb.w	r2, [r3, #32]
      }

      break;
 800201a:	e033      	b.n	8002084 <protocol_s_extract+0x170>

    case UNPACK_PACK_STAGE_AUTH_PACK:

      if (verify_crc32(rcvd->p_data, rcvd->total_num))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	8bdb      	ldrh	r3, [r3, #30]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f00f ffba 	bl	8011fa0 <verify_crc32>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <protocol_s_extract+0x128>
      {
        rcvd->state = UNPACK_PACK_STAGE_DATA_HANDLE;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2204      	movs	r2, #4
 8002036:	f883 2020 	strb.w	r2, [r3, #32]
        protocol_p_free(rcvd->p_data);
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
      }
      break;
 800203a:	e024      	b.n	8002086 <protocol_s_extract+0x172>
        rcvd->rcvd_num = 0;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	839a      	strh	r2, [r3, #28]
        rcvd->total_num = 0;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2200      	movs	r2, #0
 8002046:	83da      	strh	r2, [r3, #30]
        protocol_p_free(rcvd->p_data);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ff0d 	bl	8000e6c <protocol_p_free>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 800205a:	e014      	b.n	8002086 <protocol_s_extract+0x172>

    case UNPACK_PACK_STAGE_DATA_HANDLE:

      status = protocol_s_unpack_data_handle(obj);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff feed 	bl	8001e3c <protocol_s_unpack_data_handle>
 8002062:	60f8      	str	r0, [r7, #12]

      protocol_p_free(rcvd->p_data);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe feff 	bl	8000e6c <protocol_p_free>
      rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002076:	e006      	b.n	8002086 <protocol_s_extract+0x172>

    default:
      break;
 8002078:	bf00      	nop
 800207a:	e004      	b.n	8002086 <protocol_s_extract+0x172>
      break;
 800207c:	bf00      	nop
 800207e:	e002      	b.n	8002086 <protocol_s_extract+0x172>
      break;
 8002080:	bf00      	nop
 8002082:	e000      	b.n	8002086 <protocol_s_extract+0x172>
      break;
 8002084:	bf00      	nop
    }

    if (status == PROTOCOL_ERR_DATA_NOT_ENOUGH ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b0a      	cmp	r3, #10
 800208a:	d006      	beq.n	800209a <protocol_s_extract+0x186>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <protocol_s_extract+0x186>
        status == PROTOCOL_ERR_NOT_ENOUGH_MEM ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b09      	cmp	r3, #9
 8002096:	d000      	beq.n	800209a <protocol_s_extract+0x186>
    switch (rcvd->state)
 8002098:	e750      	b.n	8001f3c <protocol_s_extract+0x28>
    {
      break; /* break from while */
    }
  }

  return status;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0801257c 	.word	0x0801257c

080020a8 <protocol_s_find_pack_header>:

//Find frame header
uint32_t protocol_s_find_pack_header(rcvd_desc_t *rcvd)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t status;

  while (fifo_s_isempty(&rcvd->fifo) == 0)
 80020b0:	e00e      	b.n	80020d0 <protocol_s_find_pack_header+0x28>
  { // if fifo not empty, loop
    if ((uint8_t)(fifo_s_preread(&rcvd->fifo, 0)) == PROTOCOL_HEADER)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f00f fb56 	bl	8011768 <fifo_s_preread>
 80020bc:	4603      	mov	r3, r0
 80020be:	2baa      	cmp	r3, #170	; 0xaa
 80020c0:	d102      	bne.n	80020c8 <protocol_s_find_pack_header+0x20>
    {
      status = PROTOCOL_SUCCESS;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
      goto END;
 80020c6:	e00c      	b.n	80020e2 <protocol_s_find_pack_header+0x3a>
    }
    else
    {
      fifo_s_get(&rcvd->fifo); //remove one byte from fifo
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00f fa2f 	bl	801152e <fifo_s_get>
  while (fifo_s_isempty(&rcvd->fifo) == 0)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00f fbe4 	bl	80118a0 <fifo_s_isempty>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0e9      	beq.n	80020b2 <protocol_s_find_pack_header+0xa>
    }
  }
  //if fifo not empty, loop

  status = PROTOCOL_ERR_NOT_FIND_HEADER;
 80020de:	2309      	movs	r3, #9
 80020e0:	60fb      	str	r3, [r7, #12]

END:
  return status;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <protocol_s_auth_pack_header>:

//Verification header
uint32_t protocol_s_auth_pack_header(rcvd_desc_t *rcvd)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint8_t auth_array[12];
  ver_data_len_t ver_len;

  if (fifo_s_prereads(&rcvd->fifo, (char *)auth_array, 0, 12) == 12)
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f107 0110 	add.w	r1, r7, #16
 80020fa:	230c      	movs	r3, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	f00f fb5a 	bl	80117b6 <fifo_s_prereads>
 8002102:	4603      	mov	r3, r0
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d130      	bne.n	800216a <protocol_s_auth_pack_header+0x7e>
  {
    ver_len = protocol_s_get_ver_datalen(auth_array);
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f862 	bl	80021d6 <protocol_s_get_ver_datalen>
 8002112:	4603      	mov	r3, r0
 8002114:	81bb      	strh	r3, [r7, #12]
    if (ver_len.data_len - PROTOCOL_PACK_HEAD_TAIL_SIZE > PROTOCOL_MAX_DATA_LEN)
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b10      	subs	r3, #16
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d902      	bls.n	800212c <protocol_s_auth_pack_header+0x40>
    {
      status = PROTOCOL_ERR_AUTH_FAILURE;
 8002126:	2308      	movs	r3, #8
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e020      	b.n	800216e <protocol_s_auth_pack_header+0x82>
    }
    else
    {
      if ((ver_len.version == 0) && (verify_crc16(auth_array, 12) == 1))
 800212c:	7b7b      	ldrb	r3, [r7, #13]
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d115      	bne.n	8002164 <protocol_s_auth_pack_header+0x78>
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	210c      	movs	r1, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f00f fea4 	bl	8011e8c <verify_crc16>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10c      	bne.n	8002164 <protocol_s_auth_pack_header+0x78>
      {
        status = PROTOCOL_SUCCESS;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
        rcvd->total_num = ver_len.data_len;
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	83da      	strh	r2, [r3, #30]
        rcvd->rcvd_num = 0;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	839a      	strh	r2, [r3, #28]
 8002162:	e004      	b.n	800216e <protocol_s_auth_pack_header+0x82>
      }
      else
      {
        status = PROTOCOL_ERR_AUTH_FAILURE;
 8002164:	2308      	movs	r3, #8
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	e001      	b.n	800216e <protocol_s_auth_pack_header+0x82>
      }
    }
  }
  else
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 800216a:	230a      	movs	r3, #10
 800216c:	61fb      	str	r3, [r7, #28]
  }

  return status;
 800216e:	69fb      	ldr	r3, [r7, #28]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <protocol_s_fetch_pack_data>:

//Get package data
uint32_t protocol_s_fetch_pack_data(rcvd_desc_t *rcvd)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t length;
  uint32_t want_len;

  want_len = rcvd->total_num - rcvd->rcvd_num;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8bdb      	ldrh	r3, [r3, #30]
 8002184:	461a      	mov	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8b9b      	ldrh	r3, [r3, #28]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	613b      	str	r3, [r7, #16]
  length = fifo_s_gets(&rcvd->fifo,
 800218e:	6878      	ldr	r0, [r7, #4]
                       (char *)rcvd->p_data + rcvd->rcvd_num,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	8b92      	ldrh	r2, [r2, #28]
  length = fifo_s_gets(&rcvd->fifo,
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4619      	mov	r1, r3
 800219e:	f00f f9fb 	bl	8011598 <fifo_s_gets>
 80021a2:	4603      	mov	r3, r0
 80021a4:	60fb      	str	r3, [r7, #12]
                       want_len);
  rcvd->rcvd_num += length;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8b9a      	ldrh	r2, [r3, #28]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	839a      	strh	r2, [r3, #28]

  if (rcvd->rcvd_num < rcvd->total_num)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8b9a      	ldrh	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8bdb      	ldrh	r3, [r3, #30]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d202      	bcs.n	80021c8 <protocol_s_fetch_pack_data+0x50>
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 80021c2:	230a      	movs	r3, #10
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e001      	b.n	80021cc <protocol_s_fetch_pack_data+0x54>
  }
  else
  {
    status = PROTOCOL_SUCCESS;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  }
  return status;
 80021cc:	697b      	ldr	r3, [r7, #20]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <protocol_s_get_ver_datalen>:

//Get version number and data length
ver_data_len_t protocol_s_get_ver_datalen(void *pack)

{
 80021d6:	b480      	push	{r7}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  ver_data_len_t ver_len;
  uint16_t *tmp = (uint16_t *)&ver_len;
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	617b      	str	r3, [r7, #20]
  uint8_t *ptr = (uint8_t *)pack;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	613b      	str	r3, [r7, #16]

  *tmp = ptr[2] << 8 | ptr[1];
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3302      	adds	r3, #2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	3301      	adds	r3, #1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]

  return ver_len;
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	81bb      	strh	r3, [r7, #12]
 8002208:	2300      	movs	r3, #0
 800220a:	7b3a      	ldrb	r2, [r7, #12]
 800220c:	f362 0307 	bfi	r3, r2, #0, #8
 8002210:	7b7a      	ldrb	r2, [r7, #13]
 8002212:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002216:	4618      	mov	r0, r3
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <protocol_s_error_info_printf>:

//Accept error message
void protocol_s_error_info_printf(uint32_t status, char *file, int line)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  char *err_info;
  switch (status)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b12      	cmp	r3, #18
 8002234:	d861      	bhi.n	80022fa <protocol_s_error_info_printf+0xd6>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <protocol_s_error_info_printf+0x18>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	08002289 	.word	0x08002289
 8002240:	0800228f 	.word	0x0800228f
 8002244:	08002295 	.word	0x08002295
 8002248:	0800229b 	.word	0x0800229b
 800224c:	080022a1 	.word	0x080022a1
 8002250:	080022a7 	.word	0x080022a7
 8002254:	080022ad 	.word	0x080022ad
 8002258:	080022b3 	.word	0x080022b3
 800225c:	080022b9 	.word	0x080022b9
 8002260:	080022bf 	.word	0x080022bf
 8002264:	080022c5 	.word	0x080022c5
 8002268:	080022cb 	.word	0x080022cb
 800226c:	080022d1 	.word	0x080022d1
 8002270:	080022d7 	.word	0x080022d7
 8002274:	080022dd 	.word	0x080022dd
 8002278:	080022e3 	.word	0x080022e3
 800227c:	080022e9 	.word	0x080022e9
 8002280:	080022ef 	.word	0x080022ef
 8002284:	080022f5 	.word	0x080022f5
  {
  case PROTOCOL_SUCCESS:
    err_info = "PROTOCOL_SUCCESS";
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <protocol_s_error_info_printf+0xe8>)
 800228a:	617b      	str	r3, [r7, #20]
    break;
 800228c:	e037      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_TOO_LONG:
    err_info = "PROTOCOL_ERR_DATA_TOO_LONG";
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <protocol_s_error_info_printf+0xec>)
 8002290:	617b      	str	r3, [r7, #20]
    break;
 8002292:	e034      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_ENOUGH_MEM:
    err_info = "PROTOCOL_ERR_NOT_ENOUGH_MEM";
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <protocol_s_error_info_printf+0xf0>)
 8002296:	617b      	str	r3, [r7, #20]
    break;
 8002298:	e031      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_NOT_FOUND:
    err_info = "PROTOCOL_ERR_SESSION_NOT_FOUND";
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <protocol_s_error_info_printf+0xf4>)
 800229c:	617b      	str	r3, [r7, #20]
    break;
 800229e:	e02e      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_FULL:
    err_info = "PROTOCOL_ERR_SESSION_FULL";
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <protocol_s_error_info_printf+0xf8>)
 80022a2:	617b      	str	r3, [r7, #20]
    break;
 80022a4:	e02b      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_IS_USE:
    err_info = "PROTOCOL_ERR_SESSION_IS_USE";
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <protocol_s_error_info_printf+0xfc>)
 80022a8:	617b      	str	r3, [r7, #20]
    break;
 80022aa:	e028      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTE_NOT_FOUND:
    err_info = "PROTOCOL_ERR_ROUTE_NOT_FOUND";
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <protocol_s_error_info_printf+0x100>)
 80022ae:	617b      	str	r3, [r7, #20]
    break;
 80022b0:	e025      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_EMPTY:
    err_info = "PROTOCOL_ERR_FIFO_EMPTY";
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <protocol_s_error_info_printf+0x104>)
 80022b4:	617b      	str	r3, [r7, #20]
    break;
 80022b6:	e022      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_AUTH_FAILURE:
    err_info = "PROTOCOL_ERR_AUTH_FAILURE";
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <protocol_s_error_info_printf+0x108>)
 80022ba:	617b      	str	r3, [r7, #20]
    break;
 80022bc:	e01f      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_FIND_HEADER:
    err_info = "PROTOCOL_ERR_NOT_FIND_HEADER";
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <protocol_s_error_info_printf+0x10c>)
 80022c0:	617b      	str	r3, [r7, #20]
    break;
 80022c2:	e01c      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_NOT_ENOUGH:
    err_info = "PROTOCOL_ERR_DATA_NOT_ENOUGH";
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <protocol_s_error_info_printf+0x110>)
 80022c6:	617b      	str	r3, [r7, #20]
    break;
 80022c8:	e019      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_FULL:
    err_info = "PROTOCOL_ERR_FIFO_FULL";
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <protocol_s_error_info_printf+0x114>)
 80022cc:	617b      	str	r3, [r7, #20]
    break;
 80022ce:	e016      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_OBJECT_NOT_FOUND:
    err_info = "PROTOCOL_ERR_OBJECT_NOT_FOUND";
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <protocol_s_error_info_printf+0x118>)
 80022d2:	617b      	str	r3, [r7, #20]
    break;
 80022d4:	e013      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_UNSUPPORT_CPU:
    err_info = "PROTOCOL_ERR_UNSUPPORT_CPU";
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <protocol_s_error_info_printf+0x11c>)
 80022d8:	617b      	str	r3, [r7, #20]
    break;
 80022da:	e010      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTEU_SET_BEYOND:
    err_info = "PROTOCOL_ERR_ROUTEU_SET_BEYOND";
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <protocol_s_error_info_printf+0x120>)
 80022de:	617b      	str	r3, [r7, #20]
    break;
 80022e0:	e00d      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_INTER_NOT_FOUND:
    err_info = "PROTOCOL_ERR_INTER_NOT_FOUND";
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <protocol_s_error_info_printf+0x124>)
 80022e4:	617b      	str	r3, [r7, #20]
    break;
 80022e6:	e00a      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_PROTOCOL_NOT_INIT:
    err_info = "PROTOCOL_ERR_PROTOCOL_NOT_INIT";
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <protocol_s_error_info_printf+0x128>)
 80022ea:	617b      	str	r3, [r7, #20]
    break;
 80022ec:	e007      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_ERROR:
    err_info = "PROTOCOL_ERR_SESSION_ERROR(Boardcast session can only be 0)";
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <protocol_s_error_info_printf+0x12c>)
 80022f0:	617b      	str	r3, [r7, #20]
    break;
 80022f2:	e004      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_REGISTER_FAILED:
    err_info = "PROTOCOL_ERR_REGISTER_FAILED";
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <protocol_s_error_info_printf+0x130>)
 80022f6:	617b      	str	r3, [r7, #20]
    break;
 80022f8:	e001      	b.n	80022fe <protocol_s_error_info_printf+0xda>
  default:
    err_info = "PROTOCOL_ERR_NOT_FOUND";
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <protocol_s_error_info_printf+0x134>)
 80022fc:	617b      	str	r3, [r7, #20]
  }
  protocol_log_e("%s[%u].(File:%s,Line:%d)",
                 err_info, status, file, line);

  return;
 80022fe:	bf00      	nop
}
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	080125a8 	.word	0x080125a8
 8002310:	080125bc 	.word	0x080125bc
 8002314:	080125d8 	.word	0x080125d8
 8002318:	080125f4 	.word	0x080125f4
 800231c:	08012614 	.word	0x08012614
 8002320:	08012630 	.word	0x08012630
 8002324:	0801264c 	.word	0x0801264c
 8002328:	0801266c 	.word	0x0801266c
 800232c:	08012684 	.word	0x08012684
 8002330:	080126a0 	.word	0x080126a0
 8002334:	080126c0 	.word	0x080126c0
 8002338:	080126e0 	.word	0x080126e0
 800233c:	080126f8 	.word	0x080126f8
 8002340:	08012718 	.word	0x08012718
 8002344:	08012734 	.word	0x08012734
 8002348:	08012754 	.word	0x08012754
 800234c:	08012774 	.word	0x08012774
 8002350:	08012794 	.word	0x08012794
 8002354:	080127d0 	.word	0x080127d0
 8002358:	080127f0 	.word	0x080127f0

0800235c <can1_motor_msg_rec>:
#include "communicate.h"
#include "timer_task.h"
#include "offline_check.h"

int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	2000      	movs	r0, #0
 8002372:	f00e fb59 	bl	8010a28 <motor_device_data_update>
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <motor_canstd_send>:

int32_t motor_canstd_send(enum device_can can, struct can_msg msg)
{
 8002380:	b084      	sub	sp, #16
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	4604      	mov	r4, r0
 800238a:	f107 001c 	add.w	r0, r7, #28
 800238e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002392:	4623      	mov	r3, r4
 8002394:	71fb      	strb	r3, [r7, #7]
  if (can == DEVICE_CAN1)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <motor_canstd_send+0x36>
    can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	f103 0108 	add.w	r1, r3, #8
 80023ac:	4613      	mov	r3, r2
 80023ae:	2208      	movs	r2, #8
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <motor_canstd_send+0x48>)
 80023b2:	f000 f8b5 	bl	8002520 <can_msg_bytes_send>
  return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023c2:	b004      	add	sp, #16
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20001cb8 	.word	0x20001cb8

080023cc <get_time_ms>:
{
  return TIM5->CNT;
}

uint32_t get_time_ms(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80023d0:	f002 f87a 	bl	80044c8 <HAL_GetTick>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}

080023da <motor_can1_output_1ms>:
{
  return get_time_ms() + get_time_us() / 1000.0f;
}

int32_t motor_can1_output_1ms(void *argc)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f00e fa2a 	bl	801083c <motor_device_can_output>
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <board_config>:

void board_config(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  soft_timer_init();
 80023f8:	f00f fe84 	bl	8012104 <soft_timer_init>

  usart6_manage_init();
 80023fc:	f000 fefc 	bl	80031f8 <usart6_manage_init>
  can_manage_init();
 8002400:	f000 f828 	bl	8002454 <can_manage_init>
  pwm_device_init();
 8002404:	f000 fe3c 	bl	8003080 <pwm_device_init>
  mpu_device_init();
 8002408:	f000 fc1a 	bl	8002c40 <mpu_device_init>

  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 800240c:	2201      	movs	r2, #1
 800240e:	2100      	movs	r1, #0
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <board_config+0x48>)
 8002412:	f7fe fa2d 	bl	8000870 <soft_timer_register>
  soft_timer_register(beep_ctrl_times, NULL, 1);  
 8002416:	2201      	movs	r2, #1
 8002418:	2100      	movs	r1, #0
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <board_config+0x4c>)
 800241c:	f7fe fa28 	bl	8000870 <soft_timer_register>
  soft_timer_register(led_toggle_300ms, NULL, 1); 
 8002420:	2201      	movs	r2, #1
 8002422:	2100      	movs	r1, #0
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <board_config+0x50>)
 8002426:	f7fe fa23 	bl	8000870 <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send);
 800242a:	4807      	ldr	r0, [pc, #28]	; (8002448 <board_config+0x54>)
 800242c:	f00e f9aa 	bl	8010784 <motor_device_can_send_register>

  can_fifo0_rx_callback_register(&can1_manage, can1_motor_msg_rec);
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <board_config+0x58>)
 8002432:	4807      	ldr	r0, [pc, #28]	; (8002450 <board_config+0x5c>)
 8002434:	f000 f920 	bl	8002678 <can_fifo0_rx_callback_register>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	080023db 	.word	0x080023db
 8002440:	080030e1 	.word	0x080030e1
 8002444:	0800318d 	.word	0x0800318d
 8002448:	08002381 	.word	0x08002381
 800244c:	0800235d 	.word	0x0800235d
 8002450:	20000fe0 	.word	0x20000fe0

08002454 <can_manage_init>:
struct can_manage_obj can1_manage;

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];

void can_manage_init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <can_manage_init+0xbc>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <can_manage_init+0xbc>)
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <can_manage_init+0xc0>)
 8002466:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246c:	e008      	b.n	8002480 <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800246e:	4a28      	ldr	r2, [pc, #160]	; (8002510 <can_manage_init+0xbc>)
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	330a      	adds	r3, #10
 8002474:	2100      	movs	r1, #0
 8002476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	3301      	adds	r3, #1
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	2b04      	cmp	r3, #4
 8002484:	ddf3      	ble.n	800246e <can_manage_init+0x1a>
  }

  fifo_init(&(can1_manage.tx_fifo),
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	2210      	movs	r2, #16
 800248a:	4923      	ldr	r1, [pc, #140]	; (8002518 <can_manage_init+0xc4>)
 800248c:	4823      	ldr	r0, [pc, #140]	; (800251c <can_manage_init+0xc8>)
 800248e:	f00f fa18 	bl	80118c2 <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 8002492:	2301      	movs	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800249a:	2301      	movs	r3, #1
 800249c:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterMaskIdLow = 0x0000;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  can_filter_st.FilterBank = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4816      	ldr	r0, [pc, #88]	; (8002514 <can_manage_init+0xc0>)
 80024bc:	f002 f930 	bl	8004720 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80024c0:	4814      	ldr	r0, [pc, #80]	; (8002514 <can_manage_init+0xc0>)
 80024c2:	f002 fa0d 	bl	80048e0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80024c6:	2102      	movs	r1, #2
 80024c8:	4812      	ldr	r0, [pc, #72]	; (8002514 <can_manage_init+0xc0>)
 80024ca:	f002 fc74 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80024ce:	2101      	movs	r1, #1
 80024d0:	4810      	ldr	r0, [pc, #64]	; (8002514 <can_manage_init+0xc0>)
 80024d2:	f002 fc70 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 80024d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <can_manage_init+0xc0>)
 80024dc:	f002 fc6b 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 80024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <can_manage_init+0xc0>)
 80024e6:	f002 fc66 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 80024ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <can_manage_init+0xc0>)
 80024f0:	f002 fc61 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 80024f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <can_manage_init+0xc0>)
 80024fa:	f002 fc5c 	bl	8004db6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 80024fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002502:	4804      	ldr	r0, [pc, #16]	; (8002514 <can_manage_init+0xc0>)
 8002504:	f002 fc57 	bl	8004db6 <HAL_CAN_ActivateNotification>

  return;
 8002508:	bf00      	nop
}
 800250a:	3730      	adds	r7, #48	; 0x30
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000fe0 	.word	0x20000fe0
 8002514:	20001cb8 	.word	0x20001cb8
 8002518:	2000101c 	.word	0x2000101c
 800251c:	20000fe4 	.word	0x20000fe4

08002520 <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b093      	sub	sp, #76	; 0x4c
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	80fb      	strh	r3, [r7, #6]
 8002532:	4613      	mov	r3, r2
 8002534:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <can_msg_bytes_send+0x150>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 800254c:	4b49      	ldr	r3, [pc, #292]	; (8002674 <can_msg_bytes_send+0x154>)
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 8002550:	e044      	b.n	80025dc <can_msg_bytes_send+0xbc>
    return 0;
 8002552:	2300      	movs	r3, #0
 8002554:	e088      	b.n	8002668 <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 8002556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002558:	3304      	adds	r3, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f00f faac 	bl	8011ab8 <fifo_is_full>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 8002566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800256e:	e03a      	b.n	80025e6 <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b07      	cmp	r3, #7
 800257a:	dd03      	ble.n	8002584 <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 800257c:	2308      	movs	r3, #8
 800257e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002582:	e008      	b.n	8002596 <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800258c:	b2db      	uxtb	r3, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	3305      	adds	r3, #5
 800259c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 80025a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a6:	3305      	adds	r3, #5
 80025a8:	3304      	adds	r3, #4
 80025aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ac:	6852      	ldr	r2, [r2, #4]
 80025ae:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 80025b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025b4:	461a      	mov	r2, r3
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	4413      	add	r3, r2
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 80025bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025c6:	4413      	add	r3, r2
 80025c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	3304      	adds	r3, #4
 80025d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00f f99d 	bl	8011916 <fifo_put>
  while (send_num < len)
 80025dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3b7      	bcc.n	8002556 <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d139      	bne.n	8002664 <can_msg_bytes_send+0x144>
 80025f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f2:	3304      	adds	r3, #4
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00f fa4e 	bl	8011a96 <fifo_is_empty>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d131      	bne.n	8002664 <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 8002600:	88bb      	ldrh	r3, [r7, #4]
 8002602:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800260c:	e01a      	b.n	8002644 <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 800260e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002610:	3304      	adds	r3, #4
 8002612:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f00f f9c2 	bl	80119a2 <fifo_get>
      header.DLC = msg.dlc;
 800261e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f107 0410 	add.w	r4, r7, #16
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	1d5a      	adds	r2, r3, #5
 8002632:	f107 0114 	add.w	r1, r7, #20
 8002636:	4623      	mov	r3, r4
 8002638:	f002 f996 	bl	8004968 <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fa5d 	bl	8004b08 <HAL_CAN_GetTxMailboxesFreeLevel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <can_msg_bytes_send+0x144>
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	3304      	adds	r3, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f00f fa1c 	bl	8011a96 <fifo_is_empty>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0d4      	beq.n	800260e <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 8002664:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 8002668:	4618      	mov	r0, r3
 800266a:	374c      	adds	r7, #76	; 0x4c
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	20001cb8 	.word	0x20001cb8
 8002674:	20000fe0 	.word	0x20000fe0

08002678 <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e011      	b.n	80026ac <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	320a      	adds	r2, #10
 800268e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	320a      	adds	r2, #10
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	e007      	b.n	80026b6 <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	ddea      	ble.n	8002688 <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 80026c2:	b5b0      	push	{r4, r5, r7, lr}
 80026c4:	b090      	sub	sp, #64	; 0x40
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026ca:	f3ef 8310 	mrs	r3, PRIMASK
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80026d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 80026d2:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	4618      	mov	r0, r3
 80026de:	f00f f9da 	bl	8011a96 <fifo_is_empty>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d133      	bne.n	8002750 <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 80026e8:	e029      	b.n	800273e <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fa0a 	bl	8004b08 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01d      	beq.n	8002736 <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f00f f992 	bl	8011a2e <fifo_get_noprotect>

        header.StdId = msg.std_id;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 800270e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002712:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f107 040c 	add.w	r4, r7, #12
 8002724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002728:	1d5a      	adds	r2, r3, #5
 800272a:	f107 0110 	add.w	r1, r7, #16
 800272e:	4623      	mov	r3, r4
 8002730:	f002 f91a 	bl	8004968 <HAL_CAN_AddTxMessage>
 8002734:	e003      	b.n	800273e <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	4618      	mov	r0, r3
 8002744:	f00f f9a7 	bl	8011a96 <fifo_is_empty>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0cd      	beq.n	80026ea <can_tx_mailbox_complete_hanle+0x28>
 800274e:	e003      	b.n	8002758 <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002758:	63bd      	str	r5, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	f383 8810 	msr	PRIMASK, r3
}
 8002760:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 8002762:	bf00      	nop
}
 8002764:	3740      	adds	r7, #64	; 0x40
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800276c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d102      	bne.n	8002782 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800277e:	f7ff ffa0 	bl	80026c2 <can_tx_mailbox_complete_hanle>
  }
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20001cb8 	.word	0x20001cb8
 8002790:	20000fe0 	.word	0x20000fe0

08002794 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d102      	bne.n	80027aa <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 80027a6:	f7ff ff8c 	bl	80026c2 <can_tx_mailbox_complete_hanle>
  }
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001cb8 	.word	0x20001cb8
 80027b8:	20000fe0 	.word	0x20000fe0

080027bc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d102      	bne.n	80027d2 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 80027cc:	4804      	ldr	r0, [pc, #16]	; (80027e0 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 80027ce:	f7ff ff78 	bl	80026c2 <can_tx_mailbox_complete_hanle>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20001cb8 	.word	0x20001cb8
 80027e0:	20000fe0 	.word	0x20000fe0

080027e4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_CAN_ErrorCallback+0x24>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_CAN_ErrorCallback+0x28>)
 80027f6:	f7ff ff64 	bl	80026c2 <can_tx_mailbox_complete_hanle>
  }
 HAL_CAN_ResetError(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f002 fd08 	bl	8005210 <HAL_CAN_ResetError>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20001cb8 	.word	0x20001cb8
 800280c:	20000fe0 	.word	0x20000fe0

08002810 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	f107 0210 	add.w	r2, r7, #16
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f002 f9a5 	bl	8004b72 <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d11a      	bne.n	8002866 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002834:	e014      	b.n	8002860 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	330a      	adds	r3, #10
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	330a      	adds	r3, #10
 800284a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284e:	f107 0108 	add.w	r1, r7, #8
 8002852:	f107 0210 	add.w	r2, r7, #16
 8002856:	4610      	mov	r0, r2
 8002858:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	3301      	adds	r3, #1
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	2b04      	cmp	r3, #4
 8002864:	dde7      	ble.n	8002836 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 8002866:	bf00      	nop
 8002868:	3730      	adds	r7, #48	; 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20001cb8 	.word	0x20001cb8
 8002874:	20000fe0 	.word	0x20000fe0

08002878 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af02      	add	r7, sp, #8
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	4812      	ldr	r0, [pc, #72]	; (80028d8 <mpu_write_reg+0x60>)
 800288e:	f003 fb73 	bl	8005f78 <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <mpu_write_reg+0x64>)
 800289c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800289e:	2337      	movs	r3, #55	; 0x37
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <mpu_write_reg+0x68>)
 80028a6:	490d      	ldr	r1, [pc, #52]	; (80028dc <mpu_write_reg+0x64>)
 80028a8:	480e      	ldr	r0, [pc, #56]	; (80028e4 <mpu_write_reg+0x6c>)
 80028aa:	f005 fafc 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  tx = data;
 80028ae:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <mpu_write_reg+0x64>)
 80028b0:	79bb      	ldrb	r3, [r7, #6]
 80028b2:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80028b4:	2337      	movs	r3, #55	; 0x37
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <mpu_write_reg+0x68>)
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <mpu_write_reg+0x64>)
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <mpu_write_reg+0x6c>)
 80028c0:	f005 faf1 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 80028c4:	2201      	movs	r2, #1
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <mpu_write_reg+0x60>)
 80028ca:	f003 fb55 	bl	8005f78 <HAL_GPIO_WritePin>
  return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021400 	.word	0x40021400
 80028dc:	2000141c 	.word	0x2000141c
 80028e0:	2000141d 	.word	0x2000141d
 80028e4:	20001ce4 	.word	0x20001ce4

080028e8 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 80028f2:	2200      	movs	r2, #0
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <mpu_read_reg+0x58>)
 80028f8:	f003 fb3e 	bl	8005f78 <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <mpu_read_reg+0x5c>)
 8002906:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002908:	2337      	movs	r3, #55	; 0x37
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <mpu_read_reg+0x60>)
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <mpu_read_reg+0x5c>)
 8002912:	480e      	ldr	r0, [pc, #56]	; (800294c <mpu_read_reg+0x64>)
 8002914:	f005 fac7 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002918:	2337      	movs	r3, #55	; 0x37
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <mpu_read_reg+0x60>)
 8002920:	4908      	ldr	r1, [pc, #32]	; (8002944 <mpu_read_reg+0x5c>)
 8002922:	480a      	ldr	r0, [pc, #40]	; (800294c <mpu_read_reg+0x64>)
 8002924:	f005 fabf 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8002928:	2201      	movs	r2, #1
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <mpu_read_reg+0x58>)
 800292e:	f003 fb23 	bl	8005f78 <HAL_GPIO_WritePin>
  return rx;
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <mpu_read_reg+0x60>)
 8002934:	781b      	ldrb	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021400 	.word	0x40021400
 8002944:	2000141c 	.word	0x2000141c
 8002948:	2000141d 	.word	0x2000141d
 800294c:	20001ce4 	.word	0x20001ce4

08002950 <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af02      	add	r7, sp, #8
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	4613      	mov	r3, r2
 800295e:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8002960:	2200      	movs	r2, #0
 8002962:	2140      	movs	r1, #64	; 0x40
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <mpu_read_regs+0x64>)
 8002966:	f003 fb07 	bl	8005f78 <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <mpu_read_regs+0x68>)
 8002974:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <mpu_read_regs+0x68>)
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <mpu_read_regs+0x6c>)
 800297c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800297e:	2337      	movs	r3, #55	; 0x37
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <mpu_read_regs+0x70>)
 8002986:	490c      	ldr	r1, [pc, #48]	; (80029b8 <mpu_read_regs+0x68>)
 8002988:	480e      	ldr	r0, [pc, #56]	; (80029c4 <mpu_read_regs+0x74>)
 800298a:	f005 fa8c 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	b29b      	uxth	r3, r3
 8002992:	2237      	movs	r2, #55	; 0x37
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4908      	ldr	r1, [pc, #32]	; (80029bc <mpu_read_regs+0x6c>)
 800299a:	480a      	ldr	r0, [pc, #40]	; (80029c4 <mpu_read_regs+0x74>)
 800299c:	f005 fa83 	bl	8007ea6 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 80029a0:	2201      	movs	r2, #1
 80029a2:	2140      	movs	r1, #64	; 0x40
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <mpu_read_regs+0x64>)
 80029a6:	f003 fae7 	bl	8005f78 <HAL_GPIO_WritePin>
  return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021400 	.word	0x40021400
 80029b8:	2000141c 	.word	0x2000141c
 80029bc:	20001420 	.word	0x20001420
 80029c0:	2000141d 	.word	0x2000141d
 80029c4:	20001ce4 	.word	0x20001ce4

080029c8 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 80029d8:	2100      	movs	r1, #0
 80029da:	202a      	movs	r0, #42	; 0x2a
 80029dc:	f7ff ff4c 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 80029e0:	2002      	movs	r0, #2
 80029e2:	f001 fd7d 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4619      	mov	r1, r3
 80029ea:	2029      	movs	r0, #41	; 0x29
 80029ec:	f7ff ff44 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 80029f0:	2002      	movs	r0, #2
 80029f2:	f001 fd75 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 80029f6:	79bb      	ldrb	r3, [r7, #6]
 80029f8:	4619      	mov	r1, r3
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f7ff ff3c 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002a00:	2002      	movs	r0, #2
 8002a02:	f001 fd6d 	bl	80044e0 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8002a06:	2181      	movs	r1, #129	; 0x81
 8002a08:	202a      	movs	r0, #42	; 0x2a
 8002a0a:	f7ff ff35 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002a0e:	200a      	movs	r0, #10
 8002a10:	f001 fd66 	bl	80044e0 <HAL_Delay>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2032      	movs	r0, #50	; 0x32
 8002a2c:	f7ff ff24 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002a30:	200a      	movs	r0, #10
 8002a32:	f001 fd55 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	2034      	movs	r0, #52	; 0x34
 8002a3a:	f7ff ff1d 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f001 fd4e 	bl	80044e0 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 8002a44:	2035      	movs	r0, #53	; 0x35
 8002a46:	f7ff ff4f 	bl	80028e8 <mpu_read_reg>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2034      	movs	r0, #52	; 0x34
 8002a52:	f7ff ff11 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002a56:	200a      	movs	r0, #10
 8002a58:	f001 fd42 	bl	80044e0 <HAL_Delay>
  return retval;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
 8002a70:	460b      	mov	r3, r1
 8002a72:	71bb      	strb	r3, [r7, #6]
 8002a74:	4613      	mov	r3, r2
 8002a76:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	2028      	movs	r0, #40	; 0x28
 8002a7e:	f7ff fefb 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002a82:	2002      	movs	r0, #2
 8002a84:	f001 fd2c 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8002a88:	210a      	movs	r1, #10
 8002a8a:	2029      	movs	r0, #41	; 0x29
 8002a8c:	f7ff fef4 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002a90:	2002      	movs	r0, #2
 8002a92:	f001 fd25 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	f7ff feed 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f001 fd1e 	bl	80044e0 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4619      	mov	r1, r3
 8002aae:	2025      	movs	r0, #37	; 0x25
 8002ab0:	f7ff fee2 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	f001 fd13 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2026      	movs	r0, #38	; 0x26
 8002ac0:	f7ff feda 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f001 fd0b 	bl	80044e0 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 8002aca:	2103      	movs	r1, #3
 8002acc:	2034      	movs	r0, #52	; 0x34
 8002ace:	f7ff fed3 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f001 fd04 	bl	80044e0 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 8002ad8:	2103      	movs	r1, #3
 8002ada:	2067      	movs	r0, #103	; 0x67
 8002adc:	f7ff fecc 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f001 fcfd 	bl	80044e0 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8002ae6:	2181      	movs	r1, #129	; 0x81
 8002ae8:	202a      	movs	r0, #42	; 0x2a
 8002aea:	f7ff fec5 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 8002aee:	2006      	movs	r0, #6
 8002af0:	f001 fcf6 	bl	80044e0 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 8002af4:	797b      	ldrb	r3, [r7, #5]
 8002af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	2027      	movs	r0, #39	; 0x27
 8002b00:	f7ff feba 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(2);
 8002b04:	2002      	movs	r0, #2
 8002b06:	f001 fceb 	bl	80044e0 <HAL_Delay>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <ist8310_init>:

uint8_t ist8310_init(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 8002b16:	2130      	movs	r1, #48	; 0x30
 8002b18:	206a      	movs	r0, #106	; 0x6a
 8002b1a:	f7ff fead 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002b1e:	200a      	movs	r0, #10
 8002b20:	f001 fcde 	bl	80044e0 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 8002b24:	210d      	movs	r1, #13
 8002b26:	2024      	movs	r0, #36	; 0x24
 8002b28:	f7ff fea6 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f001 fcd7 	bl	80044e0 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 8002b32:	210e      	movs	r1, #14
 8002b34:	2028      	movs	r0, #40	; 0x28
 8002b36:	f7ff fe9f 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002b3a:	200a      	movs	r0, #10
 8002b3c:	f001 fcd0 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 8002b40:	218e      	movs	r1, #142	; 0x8e
 8002b42:	2031      	movs	r0, #49	; 0x31
 8002b44:	f7ff fe98 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f001 fcc9 	bl	80044e0 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	200b      	movs	r0, #11
 8002b52:	f7ff ff39 	bl	80029c8 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 8002b56:	200a      	movs	r0, #10
 8002b58:	f001 fcc2 	bl	80044e0 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7ff ff5d 	bl	8002a1c <ist_reg_read_by_mpu>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d001      	beq.n	8002b6c <ist8310_init+0x5a>
    return 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e059      	b.n	8002c20 <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	200b      	movs	r0, #11
 8002b70:	f7ff ff2a 	bl	80029c8 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 8002b74:	200a      	movs	r0, #10
 8002b76:	f001 fcb3 	bl	80044e0 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	f7ff ff23 	bl	80029c8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8002b82:	200a      	movs	r0, #10
 8002b84:	f7ff ff4a 	bl	8002a1c <ist_reg_read_by_mpu>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <ist8310_init+0x80>
    return 2;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e046      	b.n	8002c20 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8002b92:	200a      	movs	r0, #10
 8002b94:	f001 fca4 	bl	80044e0 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f7ff ff14 	bl	80029c8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8002ba0:	200b      	movs	r0, #11
 8002ba2:	f7ff ff3b 	bl	8002a1c <ist_reg_read_by_mpu>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <ist8310_init+0x9e>
    return 3;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e037      	b.n	8002c20 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f001 fc95 	bl	80044e0 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8002bb6:	2124      	movs	r1, #36	; 0x24
 8002bb8:	2041      	movs	r0, #65	; 0x41
 8002bba:	f7ff ff05 	bl	80029c8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 8002bbe:	2041      	movs	r0, #65	; 0x41
 8002bc0:	f7ff ff2c 	bl	8002a1c <ist_reg_read_by_mpu>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b24      	cmp	r3, #36	; 0x24
 8002bc8:	d001      	beq.n	8002bce <ist8310_init+0xbc>
    return 4;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e028      	b.n	8002c20 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f001 fc86 	bl	80044e0 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8002bd4:	21c0      	movs	r1, #192	; 0xc0
 8002bd6:	2042      	movs	r0, #66	; 0x42
 8002bd8:	f7ff fef6 	bl	80029c8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 8002bdc:	2042      	movs	r0, #66	; 0x42
 8002bde:	f7ff ff1d 	bl	8002a1c <ist_reg_read_by_mpu>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2bc0      	cmp	r3, #192	; 0xc0
 8002be6:	d001      	beq.n	8002bec <ist8310_init+0xda>
    return 5;
 8002be8:	2305      	movs	r3, #5
 8002bea:	e019      	b.n	8002c20 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8002bec:	200a      	movs	r0, #10
 8002bee:	f001 fc77 	bl	80044e0 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	202a      	movs	r0, #42	; 0x2a
 8002bf6:	f7ff fe3f 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002bfa:	200a      	movs	r0, #10
 8002bfc:	f001 fc70 	bl	80044e0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 8002c00:	2100      	movs	r1, #0
 8002c02:	2034      	movs	r0, #52	; 0x34
 8002c04:	f7ff fe38 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(10);
 8002c08:	200a      	movs	r0, #10
 8002c0a:	f001 fc69 	bl	80044e0 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 8002c0e:	2206      	movs	r2, #6
 8002c10:	2103      	movs	r1, #3
 8002c12:	200e      	movs	r0, #14
 8002c14:	f7ff ff27 	bl	8002a66 <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	f001 fc61 	bl	80044e0 <HAL_Delay>
  return 0;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 8002c2c:	2206      	movs	r2, #6
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	2049      	movs	r0, #73	; 0x49
 8002c32:	f7ff fe8d 	bl	8002950 <mpu_read_regs>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 8002c46:	2201      	movs	r2, #1
 8002c48:	2104      	movs	r1, #4
 8002c4a:	4829      	ldr	r0, [pc, #164]	; (8002cf0 <mpu_device_init+0xb0>)
 8002c4c:	f003 f994 	bl	8005f78 <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	206b      	movs	r0, #107	; 0x6b
 8002c54:	f7ff fe10 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(100);
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f001 fc41 	bl	80044e0 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 8002c5e:	2107      	movs	r1, #7
 8002c60:	2068      	movs	r0, #104	; 0x68
 8002c62:	f7ff fe09 	bl	8002878 <mpu_write_reg>
  MPU_DELAY(100);
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f001 fc3a 	bl	80044e0 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 8002c6c:	2075      	movs	r0, #117	; 0x75
 8002c6e:	f7ff fe3b 	bl	80028e8 <mpu_read_reg>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d001      	beq.n	8002c7c <mpu_device_init+0x3c>
    return 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e035      	b.n	8002ce8 <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <mpu_device_init+0xb4>)
 8002c7e:	1d3c      	adds	r4, r7, #4
 8002c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c82:	c407      	stmia	r4!, {r0, r1, r2}
 8002c84:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e015      	b.n	8002cb8 <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	3318      	adds	r3, #24
 8002c92:	443b      	add	r3, r7
 8002c94:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	3318      	adds	r3, #24
 8002c9e:	443b      	add	r3, r7
 8002ca0:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff fde6 	bl	8002878 <mpu_write_reg>
    MPU_DELAY(1);
 8002cac:	2001      	movs	r0, #1
 8002cae:	f001 fc17 	bl	80044e0 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	dde6      	ble.n	8002c8c <mpu_device_init+0x4c>
  }

  ist8310_init();
 8002cbe:	f7ff ff28 	bl	8002b12 <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <mpu_device_init+0xb8>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 8002cca:	f000 f817 	bl	8002cfc <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <mpu_device_init+0xb8>)
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 8002cd6:	f000 f893 	bl	8002e00 <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <mpu_device_init+0xb8>)
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 8002ce2:	f000 f913 	bl	8002f0c <get_ist_mag_offset>
  }

  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08012808 	.word	0x08012808
 8002cf8:	20000000 	.word	0x20000000

08002cfc <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e043      	b.n	8002d90 <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8002d08:	220e      	movs	r2, #14
 8002d0a:	4939      	ldr	r1, [pc, #228]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d0c:	203b      	movs	r0, #59	; 0x3b
 8002d0e:	f7ff fe1f 	bl	8002950 <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d14:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d1c:	7a1b      	ldrb	r3, [r3, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	b219      	sxth	r1, r3
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d24:	7a5b      	ldrb	r3, [r3, #9]
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b21a      	sxth	r2, r3
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d36:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d42:	7a9b      	ldrb	r3, [r3, #10]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	b219      	sxth	r1, r3
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d4a:	7adb      	ldrb	r3, [r3, #11]
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d5c:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d60:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d68:	7b1b      	ldrb	r3, [r3, #12]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b219      	sxth	r1, r3
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <get_mpu_gyro_offset+0xf4>)
 8002d70:	7b5b      	ldrb	r3, [r3, #13]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	430b      	orrs	r3, r1
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d82:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 8002d84:	2002      	movs	r0, #2
 8002d86:	f001 fbab 	bl	80044e0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d96:	dbb7      	blt.n	8002d08 <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002d9a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <get_mpu_gyro_offset+0xfc>)
 8002da0:	fb82 1203 	smull	r1, r2, r2, r3
 8002da4:	1152      	asrs	r2, r2, #5
 8002da6:	17db      	asrs	r3, r3, #31
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002dae:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002db2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <get_mpu_gyro_offset+0xfc>)
 8002db8:	fb82 1203 	smull	r1, r2, r2, r3
 8002dbc:	1152      	asrs	r2, r2, #5
 8002dbe:	17db      	asrs	r3, r3, #31
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002dc6:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002dca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <get_mpu_gyro_offset+0xfc>)
 8002dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002dd4:	1152      	asrs	r2, r2, #5
 8002dd6:	17db      	asrs	r3, r3, #31
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <get_mpu_gyro_offset+0xf8>)
 8002dde:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <get_mpu_gyro_offset+0x100>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001430 	.word	0x20001430
 8002df4:	20001440 	.word	0x20001440
 8002df8:	1b4e81b5 	.word	0x1b4e81b5
 8002dfc:	20000000 	.word	0x20000000

08002e00 <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e047      	b.n	8002e9c <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8002e0c:	220e      	movs	r2, #14
 8002e0e:	493b      	ldr	r1, [pc, #236]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e10:	203b      	movs	r0, #59	; 0x3b
 8002e12:	f7ff fd9d 	bl	8002950 <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b219      	sxth	r1, r3
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e3a:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e46:	789b      	ldrb	r3, [r3, #2]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	b219      	sxth	r1, r3
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	430b      	orrs	r3, r1
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b21a      	sxth	r2, r3
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e60:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e64:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e6c:	791b      	ldrb	r3, [r3, #4]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b219      	sxth	r1, r3
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <get_mpu_acc_offset+0xfc>)
 8002e74:	795b      	ldrb	r3, [r3, #5]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	430b      	orrs	r3, r1
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b21a      	sxth	r2, r3
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002e8e:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 8002e90:	2002      	movs	r0, #2
 8002e92:	f001 fb25 	bl	80044e0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ea2:	dbb3      	blt.n	8002e0c <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002ea6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <get_mpu_acc_offset+0x104>)
 8002eac:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb0:	1152      	asrs	r2, r2, #5
 8002eb2:	17db      	asrs	r3, r3, #31
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002eba:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002ebe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <get_mpu_acc_offset+0x104>)
 8002ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec8:	1152      	asrs	r2, r2, #5
 8002eca:	17db      	asrs	r3, r3, #31
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002ed2:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002ed6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <get_mpu_acc_offset+0x104>)
 8002edc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee0:	1152      	asrs	r2, r2, #5
 8002ee2:	17db      	asrs	r3, r3, #31
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <get_mpu_acc_offset+0x100>)
 8002eea:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <get_mpu_acc_offset+0x108>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	705a      	strb	r2, [r3, #1]
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20001430 	.word	0x20001430
 8002f00:	20001440 	.word	0x20001440
 8002f04:	1b4e81b5 	.word	0x1b4e81b5
 8002f08:	20000000 	.word	0x20000000

08002f0c <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e062      	b.n	8002fde <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 8002f18:	4856      	ldr	r0, [pc, #344]	; (8003074 <get_ist_mag_offset+0x168>)
 8002f1a:	f7ff fe83 	bl	8002c24 <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bfb8      	it	lt
 8002f28:	425b      	neglt	r3, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f30:	d24f      	bcs.n	8002fd2 <get_ist_mag_offset+0xc6>
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfb8      	it	lt
 8002f3c:	425b      	neglt	r3, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f44:	d245      	bcs.n	8002fd2 <get_ist_mag_offset+0xc6>
 8002f46:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bfb8      	it	lt
 8002f50:	425b      	neglt	r3, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f58:	d23b      	bcs.n	8002fd2 <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002f60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bfb8      	it	lt
 8002f68:	4613      	movlt	r3, r2
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 8002f6e:	4b42      	ldr	r3, [pc, #264]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f70:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002f74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bfa8      	it	ge
 8002f7c:	4613      	movge	r3, r2
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f84:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bfb8      	it	lt
 8002f90:	4613      	movlt	r3, r2
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002f98:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bfa8      	it	ge
 8002fa4:	4613      	movge	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002fac:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002fb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bfb8      	it	lt
 8002fb8:	4613      	movlt	r3, r2
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <get_ist_mag_offset+0x16c>)
 8002fc0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002fc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bfa8      	it	ge
 8002fcc:	4613      	movge	r3, r2
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	f001 fa84 	bl	80044e0 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f241 3287 	movw	r2, #4999	; 0x1387
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	dd97      	ble.n	8002f18 <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 8002fe8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003008:	ee17 3a90 	vmov	r3, s15
 800300c:	b21a      	sxth	r2, r3
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <get_ist_mag_offset+0x16c>)
 8003010:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 8003012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003016:	461a      	mov	r2, r3
 8003018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301c:	4413      	add	r3, r2
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003026:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003032:	ee17 3a90 	vmov	r3, s15
 8003036:	b21a      	sxth	r2, r3
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <get_ist_mag_offset+0x16c>)
 800303a:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 800303c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003040:	461a      	mov	r2, r3
 8003042:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003046:	4413      	add	r3, r2
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003050:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305c:	ee17 3a90 	vmov	r3, s15
 8003060:	b21a      	sxth	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <get_ist_mag_offset+0x16c>)
 8003064:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <get_ist_mag_offset+0x170>)
 8003068:	2200      	movs	r2, #0
 800306a:	709a      	strb	r2, [r3, #2]
}
 800306c:	bf00      	nop
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000144c 	.word	0x2000144c
 8003078:	20001440 	.word	0x20001440
 800307c:	20000000 	.word	0x20000000

08003080 <pwm_device_init>:
#include "tim.h"
#include "sys.h"
#include "drv_io.h"

void pwm_device_init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3,  TIM_CHANNEL_2); // ctrl imu temperature
 8003084:	2104      	movs	r1, #4
 8003086:	4808      	ldr	r0, [pc, #32]	; (80030a8 <pwm_device_init+0x28>)
 8003088:	f005 faaa 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // beep
 800308c:	2100      	movs	r1, #0
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <pwm_device_init+0x2c>)
 8003090:	f005 faa6 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1); // friction wheel
 8003094:	2100      	movs	r1, #0
 8003096:	4806      	ldr	r0, [pc, #24]	; (80030b0 <pwm_device_init+0x30>)
 8003098:	f005 faa2 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 800309c:	210c      	movs	r1, #12
 800309e:	4804      	ldr	r0, [pc, #16]	; (80030b0 <pwm_device_init+0x30>)
 80030a0:	f005 fa9e 	bl	80085e0 <HAL_TIM_PWM_Start>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20001e14 	.word	0x20001e14
 80030ac:	20001e5c 	.word	0x20001e5c
 80030b0:	20001d84 	.word	0x20001d84

080030b4 <beep_set_tune>:
  *fric_spd1 = LEFT_FRICTION;
  *fric_spd2 = RIGHT_FRICTION;
}

void beep_set_tune(uint16_t tune, uint16_t ctrl)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	80fb      	strh	r3, [r7, #6]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80bb      	strh	r3, [r7, #4]
  BEEP_TUNE = tune;
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <beep_set_tune+0x28>)
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  BEEP_CTRL = ctrl;
 80030ca:	4a04      	ldr	r2, [pc, #16]	; (80030dc <beep_set_tune+0x28>)
 80030cc:	88bb      	ldrh	r3, [r7, #4]
 80030ce:	6353      	str	r3, [r2, #52]	; 0x34
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40001800 	.word	0x40001800

080030e0 <beep_ctrl_times>:
  beep_times = times;
  return 0;
}

int32_t beep_ctrl_times(void *argc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  static uint32_t beep_tick;
  static uint32_t times_tick;
  static uint8_t times;

  if(get_time_ms() - beep_tick > 3500)
 80030e8:	f7ff f970 	bl	80023cc <get_time_ms>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <beep_ctrl_times+0x9c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d90e      	bls.n	800311a <beep_ctrl_times+0x3a>
  {
    times = beep_times;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <beep_ctrl_times+0xa0>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b20      	ldr	r3, [pc, #128]	; (8003184 <beep_ctrl_times+0xa4>)
 8003102:	701a      	strb	r2, [r3, #0]
    beep_tick = get_time_ms();
 8003104:	f7ff f962 	bl	80023cc <get_time_ms>
 8003108:	4603      	mov	r3, r0
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <beep_ctrl_times+0x9c>)
 800310c:	6013      	str	r3, [r2, #0]
    times_tick = get_time_ms();
 800310e:	f7ff f95d 	bl	80023cc <get_time_ms>
 8003112:	4603      	mov	r3, r0
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <beep_ctrl_times+0xa8>)
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	e02a      	b.n	8003170 <beep_ctrl_times+0x90>
  }
  else if(times != 0)
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <beep_ctrl_times+0xa4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d026      	beq.n	8003170 <beep_ctrl_times+0x90>
  {
    if(get_time_ms() - times_tick < 100)
 8003122:	f7ff f953 	bl	80023cc <get_time_ms>
 8003126:	4602      	mov	r2, r0
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <beep_ctrl_times+0xa8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b63      	cmp	r3, #99	; 0x63
 8003130:	d805      	bhi.n	800313e <beep_ctrl_times+0x5e>
    {
      beep_set_tune(500, 150);
 8003132:	2196      	movs	r1, #150	; 0x96
 8003134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003138:	f7ff ffbc 	bl	80030b4 <beep_set_tune>
 800313c:	e018      	b.n	8003170 <beep_ctrl_times+0x90>
    }
    else if(get_time_ms() - times_tick < 300)
 800313e:	f7ff f945 	bl	80023cc <get_time_ms>
 8003142:	4602      	mov	r2, r0
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <beep_ctrl_times+0xa8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800314e:	d204      	bcs.n	800315a <beep_ctrl_times+0x7a>
    {
      beep_set_tune(0, 0);
 8003150:	2100      	movs	r1, #0
 8003152:	2000      	movs	r0, #0
 8003154:	f7ff ffae 	bl	80030b4 <beep_set_tune>
 8003158:	e00a      	b.n	8003170 <beep_ctrl_times+0x90>
    }
    else
    {
      times--;
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <beep_ctrl_times+0xa4>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	3b01      	subs	r3, #1
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <beep_ctrl_times+0xa4>)
 8003164:	701a      	strb	r2, [r3, #0]
      times_tick = get_time_ms();
 8003166:	f7ff f931 	bl	80023cc <get_time_ms>
 800316a:	4603      	mov	r3, r0
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <beep_ctrl_times+0xa8>)
 800316e:	6013      	str	r3, [r2, #0]
    }
  }

  return 0;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20001468 	.word	0x20001468
 8003180:	20001466 	.word	0x20001466
 8003184:	2000146c 	.word	0x2000146c
 8003188:	20001470 	.word	0x20001470

0800318c <led_toggle_300ms>:

int32_t led_toggle_300ms(void *argc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  static uint32_t led_tick;

  if (get_time_ms() - led_tick > 300)
 8003194:	f7ff f91a 	bl	80023cc <get_time_ms>
 8003198:	4602      	mov	r2, r0
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <led_toggle_300ms+0x38>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031a4:	d909      	bls.n	80031ba <led_toggle_300ms+0x2e>
  {
    LED_GREEN_TOGGLE();
 80031a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031aa:	4807      	ldr	r0, [pc, #28]	; (80031c8 <led_toggle_300ms+0x3c>)
 80031ac:	f002 fefd 	bl	8005faa <HAL_GPIO_TogglePin>
    led_tick = get_time_ms();
 80031b0:	f7ff f90c 	bl	80023cc <get_time_ms>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <led_toggle_300ms+0x38>)
 80031b8:	6013      	str	r3, [r2, #0]
  }

  return 0;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20001474 	.word	0x20001474
 80031c8:	40021400 	.word	0x40021400

080031cc <HAL_UART_RxHalfCpltCallback>:
  m_obj->call_back_f = fun;
  return;
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if (huart == &huart6)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <HAL_UART_RxHalfCpltCallback+0x24>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d104      	bne.n	80031e6 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_HALF);
 80031dc:	2101      	movs	r1, #1
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <HAL_UART_RxHalfCpltCallback+0x28>)
 80031e0:	f000 f850 	bl	8003284 <usart_rec_to_buff>
  }

  return;
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
}
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20001ea4 	.word	0x20001ea4
 80031f4:	20001c78 	.word	0x20001c78

080031f8 <usart6_manage_init>:
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_UART);
  }
}

void usart6_manage_init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  usart6_manage_obj.rx_buffer = usart6_rx_buff;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <usart6_manage_init+0x70>)
 80031fe:	4a1b      	ldr	r2, [pc, #108]	; (800326c <usart6_manage_init+0x74>)
 8003200:	60da      	str	r2, [r3, #12]
  usart6_manage_obj.rx_buffer_size = USART6_RX_BUFFER_SIZE;
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <usart6_manage_init+0x70>)
 8003204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003208:	811a      	strh	r2, [r3, #8]
  usart6_manage_obj.dma_h = &hdma_usart6_rx;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <usart6_manage_init+0x70>)
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <usart6_manage_init+0x78>)
 800320e:	605a      	str	r2, [r3, #4]
  usart6_manage_obj.uart_h = &huart6;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <usart6_manage_init+0x70>)
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <usart6_manage_init+0x7c>)
 8003214:	601a      	str	r2, [r3, #0]
  usart6_manage_obj.tx_fifo_buffer = usart6_tx_fifo_buff;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <usart6_manage_init+0x70>)
 8003218:	4a17      	ldr	r2, [pc, #92]	; (8003278 <usart6_manage_init+0x80>)
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
  usart6_manage_obj.tx_fifo_size = USART6_TX_FIFO_SIZE;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <usart6_manage_init+0x70>)
 800321e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003222:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart6_manage_obj.tx_buffer_size = USART6_TX_BUFFER_SIZE;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <usart6_manage_init+0x70>)
 8003226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322a:	839a      	strh	r2, [r3, #28]
  usart6_manage_obj.tx_buffer = usart6_tx_buff;
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <usart6_manage_init+0x70>)
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <usart6_manage_init+0x84>)
 8003230:	619a      	str	r2, [r3, #24]
  usart6_manage_obj.is_sending = 0;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <usart6_manage_init+0x70>)
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart6_manage_obj.tx_fifo), usart6_tx_fifo_buff, USART6_TX_FIFO_SIZE);
 800323a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <usart6_manage_init+0x80>)
 8003240:	480f      	ldr	r0, [pc, #60]	; (8003280 <usart6_manage_init+0x88>)
 8003242:	f00e f86a 	bl	801131a <fifo_s_init>

  HAL_UART_Receive_DMA(&huart6, usart6_rx_buff, USART6_RX_BUFFER_SIZE);
 8003246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <usart6_manage_init+0x74>)
 800324c:	4809      	ldr	r0, [pc, #36]	; (8003274 <usart6_manage_init+0x7c>)
 800324e:	f006 f97f 	bl	8009550 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <usart6_manage_init+0x7c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <usart6_manage_init+0x7c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0210 	orr.w	r2, r2, #16
 8003260:	60da      	str	r2, [r3, #12]
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20001c78 	.word	0x20001c78
 800326c:	20001478 	.word	0x20001478
 8003270:	20001eec 	.word	0x20001eec
 8003274:	20001ea4 	.word	0x20001ea4
 8003278:	20001878 	.word	0x20001878
 800327c:	20001678 	.word	0x20001678
 8003280:	20001c98 	.word	0x20001c98

08003284 <usart_rec_to_buff>:
  }
  return;
}

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8a1b      	ldrh	r3, [r3, #16]
 80032a0:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->NDTR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	891a      	ldrh	r2, [r3, #8]
 80032bc:	8a7b      	ldrh	r3, [r7, #18]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_HALF)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d103      	bne.n	80032d0 <usart_rec_to_buff+0x4c>
  {
    read_end_ptr = m_obj->rx_buffer_size / 2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	891b      	ldrh	r3, [r3, #8]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d102      	bne.n	80032dc <usart_rec_to_buff+0x58>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	891b      	ldrh	r3, [r3, #8]
 80032da:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8a1b      	ldrh	r3, [r3, #16]
 80032e0:	8bfa      	ldrh	r2, [r7, #30]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <usart_rec_to_buff+0x82>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 80032ee:	8b3b      	ldrh	r3, [r7, #24]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	8bba      	ldrh	r2, [r7, #28]
 80032fc:	4611      	mov	r1, r2
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	4798      	blx	r3
 8003302:	4603      	mov	r3, r0
 8003304:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8a1b      	ldrh	r3, [r3, #16]
 800330a:	461a      	mov	r2, r3
 800330c:	8bbb      	ldrh	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	8912      	ldrh	r2, [r2, #8]
 8003314:	fb93 f1f2 	sdiv	r1, r3, r2
 8003318:	fb01 f202 	mul.w	r2, r1, r2
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	821a      	strh	r2, [r3, #16]

  return;
 8003324:	bf00      	nop
}
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <MX_CAN1_Init+0x64>)
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <MX_CAN1_Init+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <MX_CAN1_Init+0x64>)
 8003338:	2207      	movs	r2, #7
 800333a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_CAN1_Init+0x64>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <MX_CAN1_Init+0x64>)
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_CAN1_Init+0x64>)
 800334a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800334e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_CAN1_Init+0x64>)
 8003352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003356:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <MX_CAN1_Init+0x64>)
 800335a:	2200      	movs	r2, #0
 800335c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_CAN1_Init+0x64>)
 8003360:	2200      	movs	r2, #0
 8003362:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <MX_CAN1_Init+0x64>)
 8003366:	2200      	movs	r2, #0
 8003368:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <MX_CAN1_Init+0x64>)
 800336c:	2200      	movs	r2, #0
 800336e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <MX_CAN1_Init+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_CAN1_Init+0x64>)
 8003378:	2201      	movs	r2, #1
 800337a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800337c:	4804      	ldr	r0, [pc, #16]	; (8003390 <MX_CAN1_Init+0x64>)
 800337e:	f001 f8d3 	bl	8004528 <HAL_CAN_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003388:	f000 fb1e 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20001cb8 	.word	0x20001cb8
 8003394:	40006400 	.word	0x40006400

08003398 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a21      	ldr	r2, [pc, #132]	; (800343c <HAL_CAN_MspInit+0xa4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d13b      	bne.n	8003432 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <HAL_CAN_MspInit+0xa8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033f2:	2303      	movs	r3, #3
 80033f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003402:	2309      	movs	r3, #9
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	480d      	ldr	r0, [pc, #52]	; (8003444 <HAL_CAN_MspInit+0xac>)
 800340e:	f002 fc07 	bl	8005c20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2105      	movs	r1, #5
 8003416:	2013      	movs	r0, #19
 8003418:	f001 ffd6 	bl	80053c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800341c:	2013      	movs	r0, #19
 800341e:	f001 ffef 	bl	8005400 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2105      	movs	r1, #5
 8003426:	2014      	movs	r0, #20
 8003428:	f001 ffce 	bl	80053c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800342c:	2014      	movs	r0, #20
 800342e:	f001 ffe7 	bl	8005400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003432:	bf00      	nop
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40006400 	.word	0x40006400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020c00 	.word	0x40020c00

08003448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <MX_DMA_Init+0x4c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <MX_DMA_Init+0x4c>)
 8003458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <MX_DMA_Init+0x4c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2105      	movs	r1, #5
 800346e:	2039      	movs	r0, #57	; 0x39
 8003470:	f001 ffaa 	bl	80053c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003474:	2039      	movs	r0, #57	; 0x39
 8003476:	f001 ffc3 	bl	8005400 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2105      	movs	r1, #5
 800347e:	2045      	movs	r0, #69	; 0x45
 8003480:	f001 ffa2 	bl	80053c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003484:	2045      	movs	r0, #69	; 0x45
 8003486:	f001 ffbb 	bl	8005400 <HAL_NVIC_EnableIRQ>

}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80034bc:	b5b0      	push	{r4, r5, r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <MX_FREERTOS_Init+0x2c>)
 80034c4:	1d3c      	adds	r4, r7, #4
 80034c6:	461d      	mov	r5, r3
 80034c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f00a fc3a 	bl	800dd4e <osThreadCreate>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <MX_FREERTOS_Init+0x30>)
 80034de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bdb0      	pop	{r4, r5, r7, pc}
 80034e8:	08012824 	.word	0x08012824
 80034ec:	20001ce0 	.word	0x20001ce0

080034f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80034f8:	f00c f97c 	bl	800f7f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f00a fc4d 	bl	800dd9c <osDelay>
 8003502:	e7fb      	b.n	80034fc <StartDefaultTask+0xc>

08003504 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	4bb3      	ldr	r3, [pc, #716]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4ab2      	ldr	r2, [pc, #712]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4bb0      	ldr	r3, [pc, #704]	; (80037ec <MX_GPIO_Init+0x2e8>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	4bac      	ldr	r3, [pc, #688]	; (80037ec <MX_GPIO_Init+0x2e8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4aab      	ldr	r2, [pc, #684]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4ba9      	ldr	r3, [pc, #676]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	4ba5      	ldr	r3, [pc, #660]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4aa4      	ldr	r2, [pc, #656]	; (80037ec <MX_GPIO_Init+0x2e8>)
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4ba2      	ldr	r3, [pc, #648]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	4b9e      	ldr	r3, [pc, #632]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a9d      	ldr	r2, [pc, #628]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b9b      	ldr	r3, [pc, #620]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	4b97      	ldr	r3, [pc, #604]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a96      	ldr	r2, [pc, #600]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b94      	ldr	r3, [pc, #592]	; (80037ec <MX_GPIO_Init+0x2e8>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b90      	ldr	r3, [pc, #576]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a8f      	ldr	r2, [pc, #572]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b8d      	ldr	r3, [pc, #564]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a88      	ldr	r2, [pc, #544]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b86      	ldr	r3, [pc, #536]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	4b82      	ldr	r3, [pc, #520]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a81      	ldr	r2, [pc, #516]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b7f      	ldr	r3, [pc, #508]	; (80037ec <MX_GPIO_Init+0x2e8>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <MX_GPIO_Init+0x2e8>)
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <MX_GPIO_Init+0x2e8>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8003616:	2200      	movs	r2, #0
 8003618:	f640 0104 	movw	r1, #2052	; 0x804
 800361c:	4874      	ldr	r0, [pc, #464]	; (80037f0 <MX_GPIO_Init+0x2ec>)
 800361e:	f002 fcab 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
 8003624:	213c      	movs	r1, #60	; 0x3c
 8003626:	4873      	ldr	r0, [pc, #460]	; (80037f4 <MX_GPIO_Init+0x2f0>)
 8003628:	f002 fca6 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003632:	4871      	ldr	r0, [pc, #452]	; (80037f8 <MX_GPIO_Init+0x2f4>)
 8003634:	f002 fca0 	bl	8005f78 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003638:	2200      	movs	r2, #0
 800363a:	f244 0140 	movw	r1, #16448	; 0x4040
 800363e:	486f      	ldr	r0, [pc, #444]	; (80037fc <MX_GPIO_Init+0x2f8>)
 8003640:	f002 fc9a 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364a:	486d      	ldr	r0, [pc, #436]	; (8003800 <MX_GPIO_Init+0x2fc>)
 800364c:	f002 fc94 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8003650:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003656:	2303      	movs	r3, #3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	4619      	mov	r1, r3
 8003664:	4862      	ldr	r0, [pc, #392]	; (80037f0 <MX_GPIO_Init+0x2ec>)
 8003666:	f002 fadb 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 800366a:	f640 0304 	movw	r3, #2052	; 0x804
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003670:	2301      	movs	r3, #1
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800367c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003680:	4619      	mov	r1, r3
 8003682:	485b      	ldr	r0, [pc, #364]	; (80037f0 <MX_GPIO_Init+0x2ec>)
 8003684:	f002 facc 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB13
                           PB1 PB0 PB10 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8003688:	f64f 73db 	movw	r3, #65499	; 0xffdb
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368e:	2303      	movs	r3, #3
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	4619      	mov	r1, r3
 800369c:	4859      	ldr	r0, [pc, #356]	; (8003804 <MX_GPIO_Init+0x300>)
 800369e:	f002 fabf 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 80036a2:	f64b 4301 	movw	r3, #48129	; 0xbc01
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a8:	2303      	movs	r3, #3
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b4:	4619      	mov	r1, r3
 80036b6:	4850      	ldr	r0, [pc, #320]	; (80037f8 <MX_GPIO_Init+0x2f4>)
 80036b8:	f002 fab2 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80036bc:	f64e 73bc 	movw	r3, #61372	; 0xefbc
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c2:	2303      	movs	r3, #3
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ce:	4619      	mov	r1, r3
 80036d0:	484b      	ldr	r0, [pc, #300]	; (8003800 <MX_GPIO_Init+0x2fc>)
 80036d2:	f002 faa5 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80036d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036dc:	2303      	movs	r3, #3
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e8:	4619      	mov	r1, r3
 80036ea:	4847      	ldr	r0, [pc, #284]	; (8003808 <MX_GPIO_Init+0x304>)
 80036ec:	f002 fa98 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80036f0:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	4619      	mov	r1, r3
 8003704:	4841      	ldr	r0, [pc, #260]	; (800380c <MX_GPIO_Init+0x308>)
 8003706:	f002 fa8b 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370e:	2300      	movs	r3, #0
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	4619      	mov	r1, r3
 800371c:	4838      	ldr	r0, [pc, #224]	; (8003800 <MX_GPIO_Init+0x2fc>)
 800371e:	f002 fa7f 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8003722:	23e4      	movs	r3, #228	; 0xe4
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	4619      	mov	r1, r3
 8003734:	4836      	ldr	r0, [pc, #216]	; (8003810 <MX_GPIO_Init+0x30c>)
 8003736:	f002 fa73 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 800373a:	f640 731b 	movw	r3, #3867	; 0xf1b
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003740:	2303      	movs	r3, #3
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	4830      	ldr	r0, [pc, #192]	; (8003810 <MX_GPIO_Init+0x30c>)
 8003750:	f002 fa66 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8003754:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375a:	2303      	movs	r3, #3
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003766:	4619      	mov	r1, r3
 8003768:	4822      	ldr	r0, [pc, #136]	; (80037f4 <MX_GPIO_Init+0x2f0>)
 800376a:	f002 fa59 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 800376e:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003774:	2303      	movs	r3, #3
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800377c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003780:	4619      	mov	r1, r3
 8003782:	481e      	ldr	r0, [pc, #120]	; (80037fc <MX_GPIO_Init+0x2f8>)
 8003784:	f002 fa4c 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8003788:	233c      	movs	r3, #60	; 0x3c
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378c:	2301      	movs	r3, #1
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	2300      	movs	r3, #0
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379c:	4619      	mov	r1, r3
 800379e:	4815      	ldr	r0, [pc, #84]	; (80037f4 <MX_GPIO_Init+0x2f0>)
 80037a0:	f002 fa3e 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80037a4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037aa:	2301      	movs	r3, #1
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	4619      	mov	r1, r3
 80037bc:	480e      	ldr	r0, [pc, #56]	; (80037f8 <MX_GPIO_Init+0x2f4>)
 80037be:	f002 fa2f 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 80037c2:	f244 0340 	movw	r3, #16448	; 0x4040
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d8:	4619      	mov	r1, r3
 80037da:	4808      	ldr	r0, [pc, #32]	; (80037fc <MX_GPIO_Init+0x2f8>)
 80037dc:	f002 fa20 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80037e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037ea:	e013      	b.n	8003814 <MX_GPIO_Init+0x310>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40021c00 	.word	0x40021c00
 80037f8:	40021800 	.word	0x40021800
 80037fc:	40021400 	.word	0x40021400
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800
 800380c:	40020000 	.word	0x40020000
 8003810:	40022000 	.word	0x40022000
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003816:	2301      	movs	r3, #1
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800381a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381e:	4619      	mov	r1, r3
 8003820:	4816      	ldr	r0, [pc, #88]	; (800387c <MX_GPIO_Init+0x378>)
 8003822:	f002 f9fd 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8003826:	2304      	movs	r3, #4
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8003832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003836:	4619      	mov	r1, r3
 8003838:	4811      	ldr	r0, [pc, #68]	; (8003880 <MX_GPIO_Init+0x37c>)
 800383a:	f002 f9f1 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 800383e:	230f      	movs	r3, #15
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003842:	2300      	movs	r3, #0
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	480c      	ldr	r0, [pc, #48]	; (8003884 <MX_GPIO_Init+0x380>)
 8003852:	f002 f9e5 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 8003856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385c:	2301      	movs	r3, #1
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003864:	2300      	movs	r3, #0
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	4619      	mov	r1, r3
 800386e:	4806      	ldr	r0, [pc, #24]	; (8003888 <MX_GPIO_Init+0x384>)
 8003870:	f002 f9d6 	bl	8005c20 <HAL_GPIO_Init>

}
 8003874:	bf00      	nop
 8003876:	3738      	adds	r7, #56	; 0x38
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021400 	.word	0x40021400
 8003880:	40020400 	.word	0x40020400
 8003884:	40020000 	.word	0x40020000
 8003888:	40020c00 	.word	0x40020c00

0800388c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003890:	f000 fde4 	bl	800445c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003894:	f000 f81c 	bl	80038d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003898:	f7ff fe34 	bl	8003504 <MX_GPIO_Init>
  MX_DMA_Init();
 800389c:	f7ff fdd4 	bl	8003448 <MX_DMA_Init>
  MX_SPI5_Init();
 80038a0:	f000 f898 	bl	80039d4 <MX_SPI5_Init>
  MX_CAN1_Init();
 80038a4:	f7ff fd42 	bl	800332c <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80038a8:	f000 fcce 	bl	8004248 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80038ac:	f000 fa30 	bl	8003d10 <MX_TIM1_Init>
  MX_TIM2_Init();
 80038b0:	f000 fabe 	bl	8003e30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80038b4:	f000 fb08 	bl	8003ec8 <MX_TIM3_Init>
  MX_TIM12_Init();
 80038b8:	f000 fb60 	bl	8003f7c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 80038bc:	f7fc ff42 	bl	8000744 <hw_init>
  task_init();
 80038c0:	f7fc ff52 	bl	8000768 <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80038c4:	f7ff fdfa 	bl	80034bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80038c8:	f00a fa2a 	bl	800dd20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <main+0x40>
	...

080038d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b094      	sub	sp, #80	; 0x50
 80038d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038d6:	f107 0320 	add.w	r3, r7, #32
 80038da:	2230      	movs	r2, #48	; 0x30
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f00e fd01 	bl	80122e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <SystemClock_Config+0xcc>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <SystemClock_Config+0xcc>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <SystemClock_Config+0xcc>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003910:	2300      	movs	r3, #0
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <SystemClock_Config+0xd0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <SystemClock_Config+0xd0>)
 800391a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <SystemClock_Config+0xd0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800392c:	2301      	movs	r3, #1
 800392e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800393a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003940:	2306      	movs	r3, #6
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003944:	23a8      	movs	r3, #168	; 0xa8
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003948:	2302      	movs	r3, #2
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800394c:	2307      	movs	r3, #7
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003950:	f107 0320 	add.w	r3, r7, #32
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fd93 	bl	8007480 <HAL_RCC_OscConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003960:	f000 f832 	bl	80039c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003964:	230f      	movs	r3, #15
 8003966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003968:	2302      	movs	r3, #2
 800396a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	2105      	movs	r1, #5
 8003982:	4618      	mov	r0, r3
 8003984:	f003 fff4 	bl	8007970 <HAL_RCC_ClockConfig>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800398e:	f000 f81b 	bl	80039c8 <Error_Handler>
  }
}
 8003992:	bf00      	nop
 8003994:	3750      	adds	r7, #80	; 0x50
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000

080039a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039b6:	f000 fd73 	bl	80044a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40000c00 	.word	0x40000c00

080039c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80039cc:	b672      	cpsid	i
}
 80039ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <Error_Handler+0x8>
	...

080039d4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <MX_SPI5_Init+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <MX_SPI5_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a08:	2230      	movs	r2, #48	; 0x30
 8003a0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a20:	220a      	movs	r2, #10
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003a24:	4804      	ldr	r0, [pc, #16]	; (8003a38 <MX_SPI5_Init+0x64>)
 8003a26:	f004 f9b5 	bl	8007d94 <HAL_SPI_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003a30:	f7ff ffca 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20001ce4 	.word	0x20001ce4
 8003a3c:	40015000 	.word	0x40015000

08003a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_SPI_MspInit+0x84>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d12c      	bne.n	8003abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a88:	f043 0320 	orr.w	r3, r3, #32
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_SPI_MspInit+0x88>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8003a9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003aac:	2305      	movs	r3, #5
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4805      	ldr	r0, [pc, #20]	; (8003acc <HAL_SPI_MspInit+0x8c>)
 8003ab8:	f002 f8b2 	bl	8005c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40015000 	.word	0x40015000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40021400 	.word	0x40021400

08003ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_MspInit+0x54>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <HAL_MspInit+0x54>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_MspInit+0x54>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_MspInit+0x54>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_MspInit+0x54>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_MspInit+0x54>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	210f      	movs	r1, #15
 8003b12:	f06f 0001 	mvn.w	r0, #1
 8003b16:	f001 fc57 	bl	80053c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <HAL_InitTick+0xe4>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <HAL_InitTick+0xe4>)
 8003b42:	f043 0308 	orr.w	r3, r3, #8
 8003b46:	6413      	str	r3, [r2, #64]	; 0x40
 8003b48:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_InitTick+0xe4>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b54:	f107 0210 	add.w	r2, r7, #16
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 f8e6 	bl	8007d30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b6e:	f004 f8b7 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 8003b72:	6378      	str	r0, [r7, #52]	; 0x34
 8003b74:	e004      	b.n	8003b80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b76:	f004 f8b3 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_InitTick+0xe8>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	0c9b      	lsrs	r3, r3, #18
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_InitTick+0xec>)
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_InitTick+0xf0>)
 8003b92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003b94:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_InitTick+0xec>)
 8003b96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b9a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_InitTick+0xec>)
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_InitTick+0xec>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_InitTick+0xec>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_InitTick+0xec>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003bb4:	4817      	ldr	r0, [pc, #92]	; (8003c14 <HAL_InitTick+0xec>)
 8003bb6:	f004 fc03 	bl	80083c0 <HAL_TIM_Base_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11b      	bne.n	8003c00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003bc8:	4812      	ldr	r0, [pc, #72]	; (8003c14 <HAL_InitTick+0xec>)
 8003bca:	f004 fc49 	bl	8008460 <HAL_TIM_Base_Start_IT>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d111      	bne.n	8003c00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003bdc:	2032      	movs	r0, #50	; 0x32
 8003bde:	f001 fc0f 	bl	8005400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d808      	bhi.n	8003bfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	2032      	movs	r0, #50	; 0x32
 8003bee:	f001 fbeb 	bl	80053c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <HAL_InitTick+0xf4>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e002      	b.n	8003c00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3738      	adds	r7, #56	; 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	431bde83 	.word	0x431bde83
 8003c14:	20001d3c 	.word	0x20001d3c
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	20000008 	.word	0x20000008

08003c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c24:	e7fe      	b.n	8003c24 <NMI_Handler+0x4>

08003c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <HardFault_Handler+0x4>

08003c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <MemManage_Handler+0x4>

08003c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <BusFault_Handler+0x4>

08003c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <UsageFault_Handler+0x4>

08003c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <CAN1_TX_IRQHandler+0x10>)
 8003c52:	f001 f8d6 	bl	8004e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20001cb8 	.word	0x20001cb8

08003c60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <CAN1_RX0_IRQHandler+0x10>)
 8003c66:	f001 f8cc 	bl	8004e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20001cb8 	.word	0x20001cb8

08003c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <TIM2_IRQHandler+0x10>)
 8003c7a:	f004 fd79 	bl	8008770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20001dcc 	.word	0x20001dcc

08003c88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <TIM5_IRQHandler+0x10>)
 8003c8e:	f004 fd6f 	bl	8008770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20001d3c 	.word	0x20001d3c

08003c9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <DMA2_Stream1_IRQHandler+0x10>)
 8003ca2:	f001 fd53 	bl	800574c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20001eec 	.word	0x20001eec

08003cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <OTG_FS_IRQHandler+0x10>)
 8003cb6:	f002 fad6 	bl	8006266 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20007a10 	.word	0x20007a10

08003cc4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <DMA2_Stream6_IRQHandler+0x10>)
 8003cca:	f001 fd3f 	bl	800574c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20001f4c 	.word	0x20001f4c

08003cd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <USART6_IRQHandler+0x10>)
 8003cde:	f005 fc5d 	bl	800959c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20001ea4 	.word	0x20001ea4

08003cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <SystemInit+0x20>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <SystemInit+0x20>)
 8003cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b092      	sub	sp, #72	; 0x48
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
 8003d30:	615a      	str	r2, [r3, #20]
 8003d32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2220      	movs	r2, #32
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00e fad3 	bl	80122e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d42:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <MX_TIM1_Init+0x11c>)
 8003d44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d48:	2210      	movs	r2, #16
 8003d4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d54:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d60:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d6c:	482e      	ldr	r0, [pc, #184]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d6e:	f004 fbe7 	bl	8008540 <HAL_TIM_PWM_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003d78:	f7ff fe26 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4827      	ldr	r0, [pc, #156]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003d8c:	f005 faae 	bl	80092ec <HAL_TIMEx_MasterConfigSynchronization>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003d96:	f7ff fe17 	bl	80039c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d9a:	2360      	movs	r3, #96	; 0x60
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8003d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da4:	2300      	movs	r3, #0
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003da8:	2300      	movs	r3, #0
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4819      	ldr	r0, [pc, #100]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003dc2:	f004 fdc5 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003dcc:	f7ff fdfc 	bl	80039c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4813      	ldr	r0, [pc, #76]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003dda:	f004 fdb9 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003de4:	f7ff fdf0 	bl	80039c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003e0c:	f005 faea 	bl	80093e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003e16:	f7ff fdd7 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e1a:	4803      	ldr	r0, [pc, #12]	; (8003e28 <MX_TIM1_Init+0x118>)
 8003e1c:	f000 f968 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003e20:	bf00      	nop
 8003e22:	3748      	adds	r7, #72	; 0x48
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20001d84 	.word	0x20001d84
 8003e2c:	40010000 	.word	0x40010000

08003e30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e44:	463b      	mov	r3, r7
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e56:	2253      	movs	r2, #83	; 0x53
 8003e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e68:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e74:	4813      	ldr	r0, [pc, #76]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e76:	f004 faa3 	bl	80083c0 <HAL_TIM_Base_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003e80:	f7ff fda2 	bl	80039c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003e92:	f004 fe1f 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003e9c:	f7ff fd94 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <MX_TIM2_Init+0x94>)
 8003eae:	f005 fa1d 	bl	80092ec <HAL_TIMEx_MasterConfigSynchronization>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003eb8:	f7ff fd86 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20001dcc 	.word	0x20001dcc

08003ec8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	605a      	str	r2, [r3, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	615a      	str	r2, [r3, #20]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <MX_TIM3_Init+0xb0>)
 8003eee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003ef2:	2253      	movs	r2, #83	; 0x53
 8003ef4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003efe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003f02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f10:	4818      	ldr	r0, [pc, #96]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f12:	f004 fb15 	bl	8008540 <HAL_TIM_PWM_Init>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003f1c:	f7ff fd54 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f28:	f107 0320 	add.w	r3, r7, #32
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4811      	ldr	r0, [pc, #68]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f30:	f005 f9dc 	bl	80092ec <HAL_TIMEx_MasterConfigSynchronization>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003f3a:	f7ff fd45 	bl	80039c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f3e:	2360      	movs	r3, #96	; 0x60
 8003f40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	2204      	movs	r2, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4807      	ldr	r0, [pc, #28]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f56:	f004 fcfb 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003f60:	f7ff fd32 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f64:	4803      	ldr	r0, [pc, #12]	; (8003f74 <MX_TIM3_Init+0xac>)
 8003f66:	f000 f8c3 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003f6a:	bf00      	nop
 8003f6c:	3728      	adds	r7, #40	; 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20001e14 	.word	0x20001e14
 8003f78:	40000400 	.word	0x40000400

08003f7c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
 8003f90:	615a      	str	r2, [r3, #20]
 8003f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <MX_TIM12_Init+0x84>)
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <MX_TIM12_Init+0x88>)
 8003f98:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <MX_TIM12_Init+0x84>)
 8003f9c:	2253      	movs	r2, #83	; 0x53
 8003f9e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fa8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003fac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003fba:	4811      	ldr	r0, [pc, #68]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fbc:	f004 fac0 	bl	8008540 <HAL_TIM_PWM_Init>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003fc6:	f7ff fcff 	bl	80039c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fca:	2360      	movs	r3, #96	; 0x60
 8003fcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4807      	ldr	r0, [pc, #28]	; (8004000 <MX_TIM12_Init+0x84>)
 8003fe2:	f004 fcb5 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003fec:	f7ff fcec 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <MX_TIM12_Init+0x84>)
 8003ff2:	f000 f87d 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003ff6:	bf00      	nop
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20001e5c 	.word	0x20001e5c
 8004004:	40001800 	.word	0x40001800

08004008 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_TIM_PWM_MspInit+0x8c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6453      	str	r3, [r2, #68]	; 0x44
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004036:	e026      	b.n	8004086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <HAL_TIM_PWM_MspInit+0x94>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
}
 800405e:	e012      	b.n	8004086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_TIM_PWM_MspInit+0x98>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 8004074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_TIM_PWM_MspInit+0x90>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40023800 	.word	0x40023800
 800409c:	40000400 	.word	0x40000400
 80040a0:	40001800 	.word	0x40001800

080040a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d115      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_TIM_Base_MspInit+0x48>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_TIM_Base_MspInit+0x48>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_TIM_Base_MspInit+0x48>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2105      	movs	r1, #5
 80040d6:	201c      	movs	r0, #28
 80040d8:	f001 f976 	bl	80053c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040dc:	201c      	movs	r0, #28
 80040de:	f001 f98f 	bl	8005400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a46      	ldr	r2, [pc, #280]	; (8004228 <HAL_TIM_MspPostInit+0x138>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d13e      	bne.n	8004190 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	4b45      	ldr	r3, [pc, #276]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a44      	ldr	r2, [pc, #272]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4b3e      	ldr	r3, [pc, #248]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a3d      	ldr	r2, [pc, #244]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800414a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800414e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	2300      	movs	r3, #0
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800415c:	2301      	movs	r3, #1
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	4619      	mov	r1, r3
 8004166:	4832      	ldr	r0, [pc, #200]	; (8004230 <HAL_TIM_MspPostInit+0x140>)
 8004168:	f001 fd5a 	bl	8005c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800416c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2302      	movs	r3, #2
 8004174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	2300      	movs	r3, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800417e:	2301      	movs	r3, #1
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004182:	f107 031c 	add.w	r3, r7, #28
 8004186:	4619      	mov	r1, r3
 8004188:	482a      	ldr	r0, [pc, #168]	; (8004234 <HAL_TIM_MspPostInit+0x144>)
 800418a:	f001 fd49 	bl	8005c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800418e:	e046      	b.n	800421e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_TIM_MspPostInit+0x148>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d11e      	bne.n	80041d8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041b6:	2320      	movs	r3, #32
 80041b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	2300      	movs	r3, #0
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041c6:	2302      	movs	r3, #2
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f107 031c 	add.w	r3, r7, #28
 80041ce:	4619      	mov	r1, r3
 80041d0:	481a      	ldr	r0, [pc, #104]	; (800423c <HAL_TIM_MspPostInit+0x14c>)
 80041d2:	f001 fd25 	bl	8005c20 <HAL_GPIO_Init>
}
 80041d6:	e022      	b.n	800421e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_MspPostInit+0x150>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d11d      	bne.n	800421e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_TIM_MspPostInit+0x13c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800420e:	2309      	movs	r3, #9
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004212:	f107 031c 	add.w	r3, r7, #28
 8004216:	4619      	mov	r1, r3
 8004218:	480a      	ldr	r0, [pc, #40]	; (8004244 <HAL_TIM_MspPostInit+0x154>)
 800421a:	f001 fd01 	bl	8005c20 <HAL_GPIO_Init>
}
 800421e:	bf00      	nop
 8004220:	3730      	adds	r7, #48	; 0x30
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40023800 	.word	0x40023800
 8004230:	40020000 	.word	0x40020000
 8004234:	40021000 	.word	0x40021000
 8004238:	40000400 	.word	0x40000400
 800423c:	40020400 	.word	0x40020400
 8004240:	40001800 	.word	0x40001800
 8004244:	40021c00 	.word	0x40021c00

08004248 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <MX_USART6_UART_Init+0x50>)
 8004250:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 8004254:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004258:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 800426e:	220c      	movs	r2, #12
 8004270:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800427e:	4805      	ldr	r0, [pc, #20]	; (8004294 <MX_USART6_UART_Init+0x4c>)
 8004280:	f005 f916 	bl	80094b0 <HAL_UART_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800428a:	f7ff fb9d 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20001ea4 	.word	0x20001ea4
 8004298:	40011400 	.word	0x40011400

0800429c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a4c      	ldr	r2, [pc, #304]	; (80043ec <HAL_UART_MspInit+0x150>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f040 8092 	bne.w	80043e4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042ca:	f043 0320 	orr.w	r3, r3, #32
 80042ce:	6453      	str	r3, [r2, #68]	; 0x44
 80042d0:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	4a42      	ldr	r2, [pc, #264]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ea:	6313      	str	r3, [r2, #48]	; 0x30
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_UART_MspInit+0x154>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80042f8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80042fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004306:	2303      	movs	r3, #3
 8004308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800430a:	2308      	movs	r3, #8
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800430e:	f107 0314 	add.w	r3, r7, #20
 8004312:	4619      	mov	r1, r3
 8004314:	4837      	ldr	r0, [pc, #220]	; (80043f4 <HAL_UART_MspInit+0x158>)
 8004316:	f001 fc83 	bl	8005c20 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800431a:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 800431c:	4a37      	ldr	r2, [pc, #220]	; (80043fc <HAL_UART_MspInit+0x160>)
 800431e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004322:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004326:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800432e:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004330:	2200      	movs	r2, #0
 8004332:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 800433e:	2200      	movs	r2, #0
 8004340:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 800434a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800434e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004352:	2200      	movs	r2, #0
 8004354:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004356:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004358:	2200      	movs	r2, #0
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800435c:	4826      	ldr	r0, [pc, #152]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 800435e:	f001 f85d 	bl	800541c <HAL_DMA_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004368:	f7ff fb2e 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <HAL_UART_MspInit+0x15c>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_UART_MspInit+0x164>)
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <HAL_UART_MspInit+0x168>)
 800437c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_UART_MspInit+0x164>)
 8004380:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004384:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_UART_MspInit+0x164>)
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800438c:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <HAL_UART_MspInit+0x164>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_UART_MspInit+0x164>)
 8004394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004398:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800439a:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_UART_MspInit+0x164>)
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80043a6:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80043b8:	4811      	ldr	r0, [pc, #68]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043ba:	f001 f82f 	bl	800541c <HAL_DMA_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80043c4:	f7ff fb00 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
 80043ce:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <HAL_UART_MspInit+0x164>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2105      	movs	r1, #5
 80043d8:	2047      	movs	r0, #71	; 0x47
 80043da:	f000 fff5 	bl	80053c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80043de:	2047      	movs	r0, #71	; 0x47
 80043e0:	f001 f80e 	bl	8005400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40011400 	.word	0x40011400
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40021800 	.word	0x40021800
 80043f8:	20001eec 	.word	0x20001eec
 80043fc:	40026428 	.word	0x40026428
 8004400:	20001f4c 	.word	0x20001f4c
 8004404:	400264a0 	.word	0x400264a0

08004408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800440c:	f7ff fc6e 	bl	8003cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004410:	480c      	ldr	r0, [pc, #48]	; (8004444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004412:	490d      	ldr	r1, [pc, #52]	; (8004448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004418:	e002      	b.n	8004420 <LoopCopyDataInit>

0800441a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800441a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800441c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800441e:	3304      	adds	r3, #4

08004420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004424:	d3f9      	bcc.n	800441a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004428:	4c0a      	ldr	r4, [pc, #40]	; (8004454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800442a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800442c:	e001      	b.n	8004432 <LoopFillZerobss>

0800442e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800442e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004430:	3204      	adds	r2, #4

08004432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004434:	d3fb      	bcc.n	800442e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004436:	f00d ffb5 	bl	80123a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800443a:	f7ff fa27 	bl	800388c <main>
  bx  lr    
 800443e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004440:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004448:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800444c:	08012ef8 	.word	0x08012ef8
  ldr r2, =_sbss
 8004450:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8004454:	2001735c 	.word	0x2001735c

08004458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004458:	e7fe      	b.n	8004458 <ADC_IRQHandler>
	...

0800445c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <HAL_Init+0x40>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_Init+0x40>)
 8004466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800446a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_Init+0x40>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_Init+0x40>)
 8004472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_Init+0x40>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <HAL_Init+0x40>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004484:	2003      	movs	r0, #3
 8004486:	f000 ff94 	bl	80053b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800448a:	200f      	movs	r0, #15
 800448c:	f7ff fb4c 	bl	8003b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004490:	f7ff fb1e 	bl	8003ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023c00 	.word	0x40023c00

080044a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_IncTick+0x20>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_IncTick+0x24>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <HAL_IncTick+0x24>)
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	20001fac 	.word	0x20001fac

080044c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return uwTick;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_GetTick+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20001fac 	.word	0x20001fac

080044e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7ff ffee 	bl	80044c8 <HAL_GetTick>
 80044ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d005      	beq.n	8004506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_Delay+0x44>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004506:	bf00      	nop
 8004508:	f7ff ffde 	bl	80044c8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d8f7      	bhi.n	8004508 <HAL_Delay+0x28>
  {
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2000000c 	.word	0x2000000c

08004528 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0ed      	b.n	8004716 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fe ff26 	bl	8003398 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800455c:	f7ff ffb4 	bl	80044c8 <HAL_GetTick>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004562:	e012      	b.n	800458a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004564:	f7ff ffb0 	bl	80044c8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b0a      	cmp	r3, #10
 8004570:	d90b      	bls.n	800458a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2205      	movs	r2, #5
 8004582:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e0c5      	b.n	8004716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0e5      	beq.n	8004564 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0202 	bic.w	r2, r2, #2
 80045a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045a8:	f7ff ff8e 	bl	80044c8 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045ae:	e012      	b.n	80045d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045b0:	f7ff ff8a 	bl	80044c8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b0a      	cmp	r3, #10
 80045bc:	d90b      	bls.n	80045d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2205      	movs	r2, #5
 80045ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e09f      	b.n	8004716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7e1b      	ldrb	r3, [r3, #24]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7e5b      	ldrb	r3, [r3, #25]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e007      	b.n	8004638 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7e9b      	ldrb	r3, [r3, #26]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d108      	bne.n	8004652 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e007      	b.n	8004662 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0220 	bic.w	r2, r2, #32
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7edb      	ldrb	r3, [r3, #27]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d108      	bne.n	800467c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0210 	bic.w	r2, r2, #16
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e007      	b.n	800468c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0210 	orr.w	r2, r2, #16
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	7f1b      	ldrb	r3, [r3, #28]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d108      	bne.n	80046a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e007      	b.n	80046b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0208 	bic.w	r2, r2, #8
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7f5b      	ldrb	r3, [r3, #29]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d108      	bne.n	80046d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0204 	orr.w	r2, r2, #4
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e007      	b.n	80046e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	1e5a      	subs	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004736:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d003      	beq.n	8004746 <HAL_CAN_ConfigFilter+0x26>
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b02      	cmp	r3, #2
 8004742:	f040 80be 	bne.w	80048c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_CAN_ConfigFilter+0x1bc>)
 8004748:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004760:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	431a      	orrs	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	401a      	ands	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d123      	bne.n	80047f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	401a      	ands	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3248      	adds	r2, #72	; 0x48
 80047d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	3348      	adds	r3, #72	; 0x48
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d122      	bne.n	800483e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	431a      	orrs	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3248      	adds	r2, #72	; 0x48
 800481e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	3348      	adds	r3, #72	; 0x48
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	440b      	add	r3, r1
 800483c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43db      	mvns	r3, r3
 8004850:	401a      	ands	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004858:	e007      	b.n	800486a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	431a      	orrs	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	401a      	ands	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004884:	e007      	b.n	8004896 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	431a      	orrs	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048b4:	f023 0201 	bic.w	r2, r3, #1
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e006      	b.n	80048d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40006400 	.word	0x40006400

080048e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d12e      	bne.n	8004952 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800490c:	f7ff fddc 	bl	80044c8 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004912:	e012      	b.n	800493a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004914:	f7ff fdd8 	bl	80044c8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b0a      	cmp	r3, #10
 8004920:	d90b      	bls.n	800493a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2205      	movs	r2, #5
 8004932:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e012      	b.n	8004960 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e006      	b.n	8004960 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004968:	b480      	push	{r7}
 800496a:	b089      	sub	sp, #36	; 0x24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800497c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d003      	beq.n	8004994 <HAL_CAN_AddTxMessage+0x2c>
 800498c:	7ffb      	ldrb	r3, [r7, #31]
 800498e:	2b02      	cmp	r3, #2
 8004990:	f040 80ad 	bne.w	8004aee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8095 	beq.w	8004ade <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	0e1b      	lsrs	r3, r3, #24
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80049be:	2201      	movs	r2, #1
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	409a      	lsls	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6809      	ldr	r1, [r1, #0]
 80049de:	431a      	orrs	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	3318      	adds	r3, #24
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	440b      	add	r3, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e00f      	b.n	8004a0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3318      	adds	r3, #24
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	440b      	add	r3, r1
 8004a0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3318      	adds	r3, #24
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	7d1b      	ldrb	r3, [r3, #20]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d111      	bne.n	8004a4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3318      	adds	r3, #24
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	6811      	ldr	r1, [r2, #0]
 8004a3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3318      	adds	r3, #24
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	440b      	add	r3, r1
 8004a48:	3304      	adds	r3, #4
 8004a4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3307      	adds	r3, #7
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	061a      	lsls	r2, r3, #24
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3306      	adds	r3, #6
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3305      	adds	r3, #5
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	3204      	adds	r2, #4
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	4610      	mov	r0, r2
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	6811      	ldr	r1, [r2, #0]
 8004a74:	ea43 0200 	orr.w	r2, r3, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004a82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3303      	adds	r3, #3
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	061a      	lsls	r2, r3, #24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3302      	adds	r3, #2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	6811      	ldr	r1, [r2, #0]
 8004aaa:	ea43 0200 	orr.w	r2, r3, r0
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004ab8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	6811      	ldr	r1, [r2, #0]
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3318      	adds	r3, #24
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	440b      	add	r3, r1
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e00e      	b.n	8004afc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e006      	b.n	8004afc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3724      	adds	r7, #36	; 0x24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d002      	beq.n	8004b28 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d11d      	bne.n	8004b64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004b72:	b480      	push	{r7}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d003      	beq.n	8004b96 <HAL_CAN_GetRxMessage+0x24>
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f040 8103 	bne.w	8004d9c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10e      	bne.n	8004bba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0f7      	b.n	8004daa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0e8      	b.n	8004daa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	331b      	adds	r3, #27
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	4413      	add	r3, r2
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0204 	and.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	331b      	adds	r3, #27
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4413      	add	r3, r2
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0d5b      	lsrs	r3, r3, #21
 8004c06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e00b      	b.n	8004c28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	331b      	adds	r3, #27
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4413      	add	r3, r2
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	331b      	adds	r3, #27
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	4413      	add	r3, r2
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0202 	and.w	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	331b      	adds	r3, #27
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	611a      	str	r2, [r3, #16]
 8004c5c:	e00b      	b.n	8004c76 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	331b      	adds	r3, #27
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	4413      	add	r3, r2
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 020f 	and.w	r2, r3, #15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	331b      	adds	r3, #27
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	4413      	add	r3, r2
 8004c82:	3304      	adds	r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	331b      	adds	r3, #27
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0a1a      	lsrs	r2, r3, #8
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0c1a      	lsrs	r2, r3, #16
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	3302      	adds	r3, #2
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e1a      	lsrs	r2, r3, #24
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	3303      	adds	r3, #3
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	0a1a      	lsrs	r2, r3, #8
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	3305      	adds	r3, #5
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0c1a      	lsrs	r2, r3, #16
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3306      	adds	r3, #6
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0e1a      	lsrs	r2, r3, #24
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0220 	orr.w	r2, r2, #32
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e007      	b.n	8004d98 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0220 	orr.w	r2, r2, #32
 8004d96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e006      	b.n	8004daa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d002      	beq.n	8004dd4 <HAL_CAN_ActivateNotification+0x1e>
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d109      	bne.n	8004de8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6959      	ldr	r1, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e006      	b.n	8004df6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b08a      	sub	sp, #40	; 0x28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d07c      	beq.n	8004f42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d023      	beq.n	8004e9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd fc81 	bl	800276c <HAL_CAN_TxMailbox0CompleteCallback>
 8004e6a:	e016      	b.n	8004e9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	e00c      	b.n	8004e9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	e002      	b.n	8004e9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f96b 	bl	8005170 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d024      	beq.n	8004eee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fd fc6b 	bl	8002794 <HAL_CAN_TxMailbox1CompleteCallback>
 8004ebe:	e016      	b.n	8004eee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	e00c      	b.n	8004eee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e002      	b.n	8004eee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f94b 	bl	8005184 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d024      	beq.n	8004f42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fd fc55 	bl	80027bc <HAL_CAN_TxMailbox2CompleteCallback>
 8004f12:	e016      	b.n	8004f42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
 8004f26:	e00c      	b.n	8004f42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d004      	beq.n	8004f3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	e002      	b.n	8004f42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f92b 	bl	8005198 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2210      	movs	r2, #16
 8004f64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2208      	movs	r2, #8
 8004f80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f912 	bl	80051ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fc35 	bl	8002810 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8f4 	bl	80051d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8db 	bl	80051c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	d006      	beq.n	800502c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2210      	movs	r2, #16
 8005024:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8de 	bl	80051e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2208      	movs	r2, #8
 8005046:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f8d7 	bl	80051fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d07b      	beq.n	8005150 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d072      	beq.n	8005148 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	f043 0302 	orr.w	r3, r3, #2
 8005098:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d043      	beq.n	8005148 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d03e      	beq.n	8005148 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050d0:	2b60      	cmp	r3, #96	; 0x60
 80050d2:	d02b      	beq.n	800512c <HAL_CAN_IRQHandler+0x32a>
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d82e      	bhi.n	8005136 <HAL_CAN_IRQHandler+0x334>
 80050d8:	2b50      	cmp	r3, #80	; 0x50
 80050da:	d022      	beq.n	8005122 <HAL_CAN_IRQHandler+0x320>
 80050dc:	2b50      	cmp	r3, #80	; 0x50
 80050de:	d82a      	bhi.n	8005136 <HAL_CAN_IRQHandler+0x334>
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d019      	beq.n	8005118 <HAL_CAN_IRQHandler+0x316>
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d826      	bhi.n	8005136 <HAL_CAN_IRQHandler+0x334>
 80050e8:	2b30      	cmp	r3, #48	; 0x30
 80050ea:	d010      	beq.n	800510e <HAL_CAN_IRQHandler+0x30c>
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d822      	bhi.n	8005136 <HAL_CAN_IRQHandler+0x334>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d002      	beq.n	80050fa <HAL_CAN_IRQHandler+0x2f8>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d005      	beq.n	8005104 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80050f8:	e01d      	b.n	8005136 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	f043 0308 	orr.w	r3, r3, #8
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005102:	e019      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	f043 0310 	orr.w	r3, r3, #16
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800510c:	e014      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005116:	e00f      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005120:	e00a      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800512a:	e005      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005134:	e000      	b.n	8005138 <HAL_CAN_IRQHandler+0x336>
            break;
 8005136:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005146:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2204      	movs	r2, #4
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fd fb3e 	bl	80027e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005168:	bf00      	nop
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005222:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d002      	beq.n	8005230 <HAL_CAN_ResetError+0x20>
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d103      	bne.n	8005238 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
 8005236:	e007      	b.n	8005248 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <__NVIC_SetPriorityGrouping+0x44>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800528a:	4a04      	ldr	r2, [pc, #16]	; (800529c <__NVIC_SetPriorityGrouping+0x44>)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	60d3      	str	r3, [r2, #12]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <__NVIC_GetPriorityGrouping+0x18>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 0307 	and.w	r3, r3, #7
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db0b      	blt.n	80052e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4907      	ldr	r1, [pc, #28]	; (80052f4 <__NVIC_EnableIRQ+0x38>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2001      	movs	r0, #1
 80052de:	fa00 f202 	lsl.w	r2, r0, r2
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000e100 	.word	0xe000e100

080052f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	2b00      	cmp	r3, #0
 800530a:	db0a      	blt.n	8005322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	490c      	ldr	r1, [pc, #48]	; (8005344 <__NVIC_SetPriority+0x4c>)
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	0112      	lsls	r2, r2, #4
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	440b      	add	r3, r1
 800531c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005320:	e00a      	b.n	8005338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4908      	ldr	r1, [pc, #32]	; (8005348 <__NVIC_SetPriority+0x50>)
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3b04      	subs	r3, #4
 8005330:	0112      	lsls	r2, r2, #4
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	440b      	add	r3, r1
 8005336:	761a      	strb	r2, [r3, #24]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000e100 	.word	0xe000e100
 8005348:	e000ed00 	.word	0xe000ed00

0800534c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f1c3 0307 	rsb	r3, r3, #7
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf28      	it	cs
 800536a:	2304      	movcs	r3, #4
 800536c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3304      	adds	r3, #4
 8005372:	2b06      	cmp	r3, #6
 8005374:	d902      	bls.n	800537c <NVIC_EncodePriority+0x30>
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3b03      	subs	r3, #3
 800537a:	e000      	b.n	800537e <NVIC_EncodePriority+0x32>
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	401a      	ands	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	43d9      	mvns	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a4:	4313      	orrs	r3, r2
         );
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ff4c 	bl	8005258 <__NVIC_SetPriorityGrouping>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053da:	f7ff ff61 	bl	80052a0 <__NVIC_GetPriorityGrouping>
 80053de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7ff ffb1 	bl	800534c <NVIC_EncodePriority>
 80053ea:	4602      	mov	r2, r0
 80053ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff80 	bl	80052f8 <__NVIC_SetPriority>
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ff54 	bl	80052bc <__NVIC_EnableIRQ>
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7ff f84e 	bl	80044c8 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e099      	b.n	800556c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005458:	e00f      	b.n	800547a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800545a:	f7ff f835 	bl	80044c8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b05      	cmp	r3, #5
 8005466:	d908      	bls.n	800547a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e078      	b.n	800556c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e8      	bne.n	800545a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_DMA_Init+0x158>)
 8005494:	4013      	ands	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d107      	bne.n	80054e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	4313      	orrs	r3, r2
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b04      	cmp	r3, #4
 800550c:	d117      	bne.n	800553e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb01 	bl	8005b28 <DMA_CheckFifoParam>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800553a:	2301      	movs	r3, #1
 800553c:	e016      	b.n	800556c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fab8 	bl	8005abc <DMA_CalcBaseAndBitshift>
 800554c:	4603      	mov	r3, r0
 800554e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	223f      	movs	r2, #63	; 0x3f
 8005556:	409a      	lsls	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	f010803f 	.word	0xf010803f

08005578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_DMA_Start_IT+0x26>
 800559a:	2302      	movs	r3, #2
 800559c:	e040      	b.n	8005620 <HAL_DMA_Start_IT+0xa8>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d12f      	bne.n	8005612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa4a 	bl	8005a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	223f      	movs	r2, #63	; 0x3f
 80055d2:	409a      	lsls	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0216 	orr.w	r2, r2, #22
 80055e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e005      	b.n	800561e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800561a:	2302      	movs	r3, #2
 800561c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005636:	f7fe ff47 	bl	80044c8 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d008      	beq.n	800565a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e052      	b.n	8005700 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0216 	bic.w	r2, r2, #22
 8005668:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005678:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <HAL_DMA_Abort+0x62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0208 	bic.w	r2, r2, #8
 8005698:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056aa:	e013      	b.n	80056d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ac:	f7fe ff0c 	bl	80044c8 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d90c      	bls.n	80056d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2203      	movs	r2, #3
 80056c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e015      	b.n	8005700 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e4      	bne.n	80056ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e6:	223f      	movs	r2, #63	; 0x3f
 80056e8:	409a      	lsls	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d004      	beq.n	8005726 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e00c      	b.n	8005740 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2205      	movs	r2, #5
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005758:	4b8e      	ldr	r3, [pc, #568]	; (8005994 <HAL_DMA_IRQHandler+0x248>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a8e      	ldr	r2, [pc, #568]	; (8005998 <HAL_DMA_IRQHandler+0x24c>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0a9b      	lsrs	r3, r3, #10
 8005764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	2208      	movs	r2, #8
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	2208      	movs	r2, #8
 80057a6:	409a      	lsls	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	2201      	movs	r2, #1
 80057dc:	409a      	lsls	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f043 0202 	orr.w	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	2204      	movs	r2, #4
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005810:	2204      	movs	r2, #4
 8005812:	409a      	lsls	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	2210      	movs	r2, #16
 800582a:	409a      	lsls	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d043      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d03c      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005846:	2210      	movs	r2, #16
 8005848:	409a      	lsls	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d108      	bne.n	800587c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d024      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e01f      	b.n	80058bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01b      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
 800588c:	e016      	b.n	80058bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0208 	bic.w	r2, r2, #8
 80058aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	2220      	movs	r2, #32
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 808f 	beq.w	80059ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8087 	beq.w	80059ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	2220      	movs	r2, #32
 80058e4:	409a      	lsls	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d136      	bne.n	8005964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0216 	bic.w	r2, r2, #22
 8005904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_DMA_IRQHandler+0x1da>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	223f      	movs	r2, #63	; 0x3f
 800593c:	409a      	lsls	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d07e      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
        }
        return;
 8005962:	e079      	b.n	8005a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01d      	beq.n	80059ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005984:	2b00      	cmp	r3, #0
 8005986:	d031      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
 8005990:	e02c      	b.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
 8005992:	bf00      	nop
 8005994:	20000004 	.word	0x20000004
 8005998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d023      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
 80059ac:	e01e      	b.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10f      	bne.n	80059dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0210 	bic.w	r2, r2, #16
 80059ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d032      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2205      	movs	r2, #5
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d307      	bcc.n	8005a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f2      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x2cc>
 8005a32:	e000      	b.n	8005a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a58:	bf00      	nop
    }
  }
}
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d108      	bne.n	8005aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a9e:	e007      	b.n	8005ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3b10      	subs	r3, #16
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <DMA_CalcBaseAndBitshift+0x64>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <DMA_CalcBaseAndBitshift+0x68>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d909      	bls.n	8005afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	659a      	str	r2, [r3, #88]	; 0x58
 8005afc:	e007      	b.n	8005b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	aaaaaaab 	.word	0xaaaaaaab
 8005b24:	080128e0 	.word	0x080128e0

08005b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11f      	bne.n	8005b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d856      	bhi.n	8005bf6 <DMA_CheckFifoParam+0xce>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <DMA_CheckFifoParam+0x28>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b73 	.word	0x08005b73
 8005b58:	08005b61 	.word	0x08005b61
 8005b5c:	08005bf7 	.word	0x08005bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d046      	beq.n	8005bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b70:	e043      	b.n	8005bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b7a:	d140      	bne.n	8005bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b80:	e03d      	b.n	8005bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	d121      	bne.n	8005bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d837      	bhi.n	8005c02 <DMA_CheckFifoParam+0xda>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <DMA_CheckFifoParam+0x70>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005baf 	.word	0x08005baf
 8005ba0:	08005ba9 	.word	0x08005ba9
 8005ba4:	08005bc1 	.word	0x08005bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bac:	e030      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d025      	beq.n	8005c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bbe:	e022      	b.n	8005c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bc8:	d11f      	bne.n	8005c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bce:	e01c      	b.n	8005c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d903      	bls.n	8005bde <DMA_CheckFifoParam+0xb6>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bdc:	e018      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
      break;
 8005be2:	e015      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	e00b      	b.n	8005c0e <DMA_CheckFifoParam+0xe6>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e00a      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e008      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e006      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e004      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e177      	b.n	8005f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	f040 8166 	bne.w	8005f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d005      	beq.n	8005c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d130      	bne.n	8005cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ca8:	2201      	movs	r2, #1
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 0201 	and.w	r2, r3, #1
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d017      	beq.n	8005d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	2203      	movs	r2, #3
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d123      	bne.n	8005d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	08da      	lsrs	r2, r3, #3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3208      	adds	r2, #8
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	220f      	movs	r2, #15
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	08da      	lsrs	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3208      	adds	r2, #8
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2203      	movs	r2, #3
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0203 	and.w	r2, r3, #3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80c0 	beq.w	8005f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	4b66      	ldr	r3, [pc, #408]	; (8005f44 <HAL_GPIO_Init+0x324>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dae:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <HAL_GPIO_Init+0x324>)
 8005db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005db4:	6453      	str	r3, [r2, #68]	; 0x44
 8005db6:	4b63      	ldr	r3, [pc, #396]	; (8005f44 <HAL_GPIO_Init+0x324>)
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc2:	4a61      	ldr	r2, [pc, #388]	; (8005f48 <HAL_GPIO_Init+0x328>)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	3302      	adds	r3, #2
 8005dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	220f      	movs	r2, #15
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_GPIO_Init+0x32c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d037      	beq.n	8005e5e <HAL_GPIO_Init+0x23e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a57      	ldr	r2, [pc, #348]	; (8005f50 <HAL_GPIO_Init+0x330>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d031      	beq.n	8005e5a <HAL_GPIO_Init+0x23a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a56      	ldr	r2, [pc, #344]	; (8005f54 <HAL_GPIO_Init+0x334>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02b      	beq.n	8005e56 <HAL_GPIO_Init+0x236>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a55      	ldr	r2, [pc, #340]	; (8005f58 <HAL_GPIO_Init+0x338>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d025      	beq.n	8005e52 <HAL_GPIO_Init+0x232>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a54      	ldr	r2, [pc, #336]	; (8005f5c <HAL_GPIO_Init+0x33c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01f      	beq.n	8005e4e <HAL_GPIO_Init+0x22e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a53      	ldr	r2, [pc, #332]	; (8005f60 <HAL_GPIO_Init+0x340>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d019      	beq.n	8005e4a <HAL_GPIO_Init+0x22a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_GPIO_Init+0x344>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_GPIO_Init+0x226>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a51      	ldr	r2, [pc, #324]	; (8005f68 <HAL_GPIO_Init+0x348>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00d      	beq.n	8005e42 <HAL_GPIO_Init+0x222>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a50      	ldr	r2, [pc, #320]	; (8005f6c <HAL_GPIO_Init+0x34c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <HAL_GPIO_Init+0x21e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a4f      	ldr	r2, [pc, #316]	; (8005f70 <HAL_GPIO_Init+0x350>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_GPIO_Init+0x21a>
 8005e36:	2309      	movs	r3, #9
 8005e38:	e012      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	e010      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	e00e      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e42:	2307      	movs	r3, #7
 8005e44:	e00c      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e46:	2306      	movs	r3, #6
 8005e48:	e00a      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e4a:	2305      	movs	r3, #5
 8005e4c:	e008      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	e006      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e52:	2303      	movs	r3, #3
 8005e54:	e004      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e002      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <HAL_GPIO_Init+0x240>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	f002 0203 	and.w	r2, r2, #3
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	4093      	lsls	r3, r2
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e70:	4935      	ldr	r1, [pc, #212]	; (8005f48 <HAL_GPIO_Init+0x328>)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	3302      	adds	r3, #2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e7e:	4b3d      	ldr	r3, [pc, #244]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ea2:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea8:	4b32      	ldr	r3, [pc, #200]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ecc:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ed2:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005efc:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <HAL_GPIO_Init+0x354>)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	f67f ae84 	bls.w	8005c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	3724      	adds	r7, #36	; 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800
 8005f48:	40013800 	.word	0x40013800
 8005f4c:	40020000 	.word	0x40020000
 8005f50:	40020400 	.word	0x40020400
 8005f54:	40020800 	.word	0x40020800
 8005f58:	40020c00 	.word	0x40020c00
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40021400 	.word	0x40021400
 8005f64:	40021800 	.word	0x40021800
 8005f68:	40021c00 	.word	0x40021c00
 8005f6c:	40022000 	.word	0x40022000
 8005f70:	40022400 	.word	0x40022400
 8005f74:	40013c00 	.word	0x40013c00

08005f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	807b      	strh	r3, [r7, #2]
 8005f84:	4613      	mov	r3, r2
 8005f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f88:	787b      	ldrb	r3, [r7, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f94:	e003      	b.n	8005f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	619a      	str	r2, [r3, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fbc:	887a      	ldrh	r2, [r7, #2]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	041a      	lsls	r2, r3, #16
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43d9      	mvns	r1, r3
 8005fc8:	887b      	ldrh	r3, [r7, #2]
 8005fca:	400b      	ands	r3, r1
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	619a      	str	r2, [r3, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e101      	b.n	80061f4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f009 fe52 	bl	800fcb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800601e:	d102      	bne.n	8006026 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f004 fc5b 	bl	800a8e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7c1a      	ldrb	r2, [r3, #16]
 8006038:	f88d 2000 	strb.w	r2, [sp]
 800603c:	3304      	adds	r3, #4
 800603e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006040:	f004 fb3a 	bl	800a6b8 <USB_CoreInit>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e0ce      	b.n	80061f4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f004 fc53 	bl	800a908 <USB_SetCurrentMode>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0bf      	b.n	80061f4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e04a      	b.n	8006110 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800607a:	7bfa      	ldrb	r2, [r7, #15]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3315      	adds	r3, #21
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800608e:	7bfa      	ldrb	r2, [r7, #15]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	3314      	adds	r3, #20
 800609e:	7bfa      	ldrb	r2, [r7, #15]
 80060a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	b298      	uxth	r0, r3
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	332e      	adds	r3, #46	; 0x2e
 80060b6:	4602      	mov	r2, r0
 80060b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	3318      	adds	r3, #24
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060ce:	7bfa      	ldrb	r2, [r7, #15]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	331c      	adds	r3, #28
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	3320      	adds	r3, #32
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3301      	adds	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	791b      	ldrb	r3, [r3, #4]
 8006114:	7bfa      	ldrb	r2, [r7, #15]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3af      	bcc.n	800607a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
 800611e:	e044      	b.n	80061aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006120:	7bfa      	ldrb	r2, [r7, #15]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006136:	7bfa      	ldrb	r2, [r7, #15]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006178:	7bfa      	ldrb	r2, [r7, #15]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	3301      	adds	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	791b      	ldrb	r3, [r3, #4]
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d3b5      	bcc.n	8006120 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7c1a      	ldrb	r2, [r3, #16]
 80061bc:	f88d 2000 	strb.w	r2, [sp]
 80061c0:	3304      	adds	r3, #4
 80061c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c4:	f004 fbec 	bl	800a9a0 <USB_DevInit>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e00c      	b.n	80061f4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f005 fc30 	bl	800ba52 <USB_DevDisconnect>

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_PCD_Start+0x1c>
 8006214:	2302      	movs	r3, #2
 8006216:	e022      	b.n	800625e <HAL_PCD_Start+0x62>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f004 fb3d 	bl	800a8c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f005 fbde 	bl	800ba10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006266:	b590      	push	{r4, r7, lr}
 8006268:	b08d      	sub	sp, #52	; 0x34
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f005 fc9c 	bl	800bbba <USB_GetMode>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 848c 	bne.w	8006ba2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f005 fc00 	bl	800ba94 <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8482 	beq.w	8006ba0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f005 fbed 	bl	800ba94 <USB_ReadInterrupts>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d107      	bne.n	80062d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f002 0202 	and.w	r2, r2, #2
 80062d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f005 fbdb 	bl	800ba94 <USB_ReadInterrupts>
 80062de:	4603      	mov	r3, r0
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d161      	bne.n	80063ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0210 	bic.w	r2, r2, #16
 80062f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	0c5b      	lsrs	r3, r3, #17
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	2b02      	cmp	r3, #2
 8006322:	d124      	bne.n	800636e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d035      	beq.n	800639c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	091b      	lsrs	r3, r3, #4
 8006338:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800633a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6a38      	ldr	r0, [r7, #32]
 8006344:	f005 fa12 	bl	800b76c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	091b      	lsrs	r3, r3, #4
 8006350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006354:	441a      	add	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006366:	441a      	add	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	615a      	str	r2, [r3, #20]
 800636c:	e016      	b.n	800639c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	0c5b      	lsrs	r3, r3, #17
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	2b06      	cmp	r3, #6
 8006378:	d110      	bne.n	800639c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006380:	2208      	movs	r2, #8
 8006382:	4619      	mov	r1, r3
 8006384:	6a38      	ldr	r0, [r7, #32]
 8006386:	f005 f9f1 	bl	800b76c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006396:	441a      	add	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0210 	orr.w	r2, r2, #16
 80063aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f005 fb6f 	bl	800ba94 <USB_ReadInterrupts>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063c0:	f040 80a7 	bne.w	8006512 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f005 fb74 	bl	800baba <USB_ReadDevAllOutEpInterrupt>
 80063d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80063d4:	e099      	b.n	800650a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 808e 	beq.w	80064fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f005 fb98 	bl	800bb22 <USB_ReadDevOutEPInterrupt>
 80063f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2301      	movs	r3, #1
 800640e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fea2 	bl	800715c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642e:	461a      	mov	r2, r3
 8006430:	2308      	movs	r3, #8
 8006432:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 ff78 	bl	800732c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	461a      	mov	r2, r3
 8006454:	2310      	movs	r3, #16
 8006456:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d030      	beq.n	80064c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b80      	cmp	r3, #128	; 0x80
 800646c:	d109      	bne.n	8006482 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006480:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	4613      	mov	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	3304      	adds	r3, #4
 8006496:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	78db      	ldrb	r3, [r3, #3]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d108      	bne.n	80064b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f009 fd07 	bl	800fec0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	2302      	movs	r3, #2
 80064c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	461a      	mov	r2, r3
 80064dc:	2320      	movs	r3, #32
 80064de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	461a      	mov	r2, r3
 80064f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	3301      	adds	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	f47f af62 	bne.w	80063d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f005 fabc 	bl	800ba94 <USB_ReadInterrupts>
 800651c:	4603      	mov	r3, r0
 800651e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006526:	f040 80db 	bne.w	80066e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f005 fadd 	bl	800baee <USB_ReadDevAllInEpInterrupt>
 8006534:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800653a:	e0cd      	b.n	80066d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80c2 	beq.w	80066cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f005 fb03 	bl	800bb5e <USB_ReadDevInEPInterrupt>
 8006558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d057      	beq.n	8006614 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	2201      	movs	r2, #1
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	43db      	mvns	r3, r3
 800657e:	69f9      	ldr	r1, [r7, #28]
 8006580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006584:	4013      	ands	r3, r2
 8006586:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	2301      	movs	r3, #1
 8006598:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	799b      	ldrb	r3, [r3, #6]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d132      	bne.n	8006608 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	4613      	mov	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3320      	adds	r3, #32
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4403      	add	r3, r0
 80065c2:	331c      	adds	r3, #28
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4419      	add	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4403      	add	r3, r0
 80065d6:	3320      	adds	r3, #32
 80065d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d113      	bne.n	8006608 <HAL_PCD_IRQHandler+0x3a2>
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e4:	4613      	mov	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006600:	461a      	mov	r2, r3
 8006602:	2101      	movs	r1, #1
 8006604:	f005 fb0a 	bl	800bc1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f009 fbd1 	bl	800fdb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	461a      	mov	r2, r3
 800662c:	2308      	movs	r3, #8
 800662e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006646:	461a      	mov	r2, r3
 8006648:	2310      	movs	r3, #16
 800664a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	461a      	mov	r2, r3
 8006664:	2340      	movs	r3, #64	; 0x40
 8006666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d023      	beq.n	80066ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	f004 faf7 	bl	800ac68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	4613      	mov	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	3310      	adds	r3, #16
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	3304      	adds	r3, #4
 800668c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d108      	bne.n	80066a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2200      	movs	r2, #0
 800669a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f009 fc1e 	bl	800fee4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	461a      	mov	r2, r3
 80066b6:	2302      	movs	r3, #2
 80066b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80066c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fcbb 	bl	8007042 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	3301      	adds	r3, #1
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f af2e 	bne.w	800653c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f005 f9d5 	bl	800ba94 <USB_ReadInterrupts>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f4:	d122      	bne.n	800673c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006710:	2b01      	cmp	r3, #1
 8006712:	d108      	bne.n	8006726 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800671c:	2100      	movs	r1, #0
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fea2 	bl	8007468 <HAL_PCDEx_LPM_Callback>
 8006724:	e002      	b.n	800672c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f009 fbbc 	bl	800fea4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800673a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f005 f9a7 	bl	800ba94 <USB_ReadInterrupts>
 8006746:	4603      	mov	r3, r0
 8006748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006750:	d112      	bne.n	8006778 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d102      	bne.n	8006768 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f009 fb78 	bl	800fe58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006776:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f005 f989 	bl	800ba94 <USB_ReadInterrupts>
 8006782:	4603      	mov	r3, r0
 8006784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678c:	f040 80b7 	bne.w	80068fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2110      	movs	r1, #16
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 fa5c 	bl	800ac68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b4:	e046      	b.n	8006844 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c2:	461a      	mov	r2, r3
 80067c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	461a      	mov	r2, r3
 80067f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800681c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800683c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	3301      	adds	r3, #1
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	791b      	ldrb	r3, [r3, #4]
 8006848:	461a      	mov	r2, r3
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	4293      	cmp	r3, r2
 800684e:	d3b2      	bcc.n	80067b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006862:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7bdb      	ldrb	r3, [r3, #15]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d016      	beq.n	800689a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687c:	f043 030b 	orr.w	r3, r3, #11
 8006880:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006892:	f043 030b 	orr.w	r3, r3, #11
 8006896:	6453      	str	r3, [r2, #68]	; 0x44
 8006898:	e015      	b.n	80068c6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80068b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c0:	f043 030b 	orr.w	r3, r3, #11
 80068c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068e8:	461a      	mov	r2, r3
 80068ea:	f005 f997 	bl	800bc1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f005 f8c6 	bl	800ba94 <USB_ReadInterrupts>
 8006908:	4603      	mov	r3, r0
 800690a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006912:	d123      	bne.n	800695c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f005 f95c 	bl	800bbd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f004 fa19 	bl	800ad5a <USB_GetDevSpeed>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681c      	ldr	r4, [r3, #0]
 8006934:	f001 f9c8 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8006938:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800693e:	461a      	mov	r2, r3
 8006940:	4620      	mov	r0, r4
 8006942:	f003 ff1d 	bl	800a780 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f009 fa5d 	bl	800fe06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800695a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f005 f897 	bl	800ba94 <USB_ReadInterrupts>
 8006966:	4603      	mov	r3, r0
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b08      	cmp	r3, #8
 800696e:	d10a      	bne.n	8006986 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f009 fa3a 	bl	800fdea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f002 0208 	and.w	r2, r2, #8
 8006984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f005 f882 	bl	800ba94 <USB_ReadInterrupts>
 8006990:	4603      	mov	r3, r0
 8006992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006996:	2b80      	cmp	r3, #128	; 0x80
 8006998:	d123      	bne.n	80069e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069a6:	2301      	movs	r3, #1
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
 80069aa:	e014      	b.n	80069d6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	f203 2357 	addw	r3, r3, #599	; 0x257
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fb08 	bl	8006fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	3301      	adds	r3, #1
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	791b      	ldrb	r3, [r3, #4]
 80069da:	461a      	mov	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	4293      	cmp	r3, r2
 80069e0:	d3e4      	bcc.n	80069ac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f005 f854 	bl	800ba94 <USB_ReadInterrupts>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f6:	d13c      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069f8:	2301      	movs	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	e02b      	b.n	8006a56 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a12:	4613      	mov	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	3318      	adds	r3, #24
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d115      	bne.n	8006a50 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006a24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da12      	bge.n	8006a50 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	3317      	adds	r3, #23
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fac8 	bl	8006fe0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	791b      	ldrb	r3, [r3, #4]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d3cd      	bcc.n	80069fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f005 f80c 	bl	800ba94 <USB_ReadInterrupts>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a86:	d156      	bne.n	8006b36 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a88:	2301      	movs	r3, #1
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8c:	e045      	b.n	8006b1a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12e      	bne.n	8006b14 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ab6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	da2b      	bge.n	8006b14 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006ac8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d121      	bne.n	8006b14 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b10:	6053      	str	r3, [r2, #4]
            break;
 8006b12:	e008      	b.n	8006b26 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	791b      	ldrb	r3, [r3, #4]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d3b3      	bcc.n	8006a8e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f004 ffaa 	bl	800ba94 <USB_ReadInterrupts>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4a:	d10a      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f009 f9db 	bl	800ff08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f004 ff94 	bl	800ba94 <USB_ReadInterrupts>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d115      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f009 f9cb 	bl	800ff24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e000      	b.n	8006ba2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006ba0:	bf00      	nop
    }
  }
}
 8006ba2:	3734      	adds	r7, #52	; 0x34
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}

08006ba8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_PCD_SetAddress+0x1a>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e012      	b.n	8006be8 <HAL_PCD_SetAddress+0x40>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f004 fef3 	bl	800b9c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	70fb      	strb	r3, [r7, #3]
 8006c02:	460b      	mov	r3, r1
 8006c04:	803b      	strh	r3, [r7, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da0f      	bge.n	8006c36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	3310      	adds	r3, #16
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4413      	add	r3, r2
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	705a      	strb	r2, [r3, #1]
 8006c34:	e00f      	b.n	8006c56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c62:	883a      	ldrh	r2, [r7, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	78ba      	ldrb	r2, [r7, #2]
 8006c6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c80:	78bb      	ldrb	r3, [r7, #2]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d102      	bne.n	8006c8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_PCD_EP_Open+0xaa>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e00e      	b.n	8006cb8 <HAL_PCD_EP_Open+0xc8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f004 f87b 	bl	800ada4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da0f      	bge.n	8006cf4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	f003 020f 	and.w	r2, r3, #15
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	3310      	adds	r3, #16
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3304      	adds	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	705a      	strb	r2, [r3, #1]
 8006cf2:	e00f      	b.n	8006d14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_PCD_EP_Close+0x6e>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e00e      	b.n	8006d4c <HAL_PCD_EP_Close+0x8c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f004 f8b9 	bl	800aeb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	460b      	mov	r3, r1
 8006d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	f003 020f 	and.w	r2, r3, #15
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2200      	movs	r2, #0
 8006d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	799b      	ldrb	r3, [r3, #6]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d102      	bne.n	8006db0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	799b      	ldrb	r3, [r3, #6]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	f004 f956 	bl	800b06c <USB_EPStartXfer>

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8006dec:	681b      	ldr	r3, [r3, #0]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	460b      	mov	r3, r1
 8006e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	3310      	adds	r3, #16
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2201      	movs	r2, #1
 8006e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	799b      	ldrb	r3, [r3, #6]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d102      	bne.n	8006e54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	799b      	ldrb	r3, [r3, #6]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6979      	ldr	r1, [r7, #20]
 8006e60:	f004 f904 	bl	800b06c <USB_EPStartXfer>

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7912      	ldrb	r2, [r2, #4]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e04f      	b.n	8006f2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da0f      	bge.n	8006eb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	3310      	adds	r3, #16
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	705a      	strb	r2, [r3, #1]
 8006eb2:	e00d      	b.n	8006ed0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_PCD_EP_SetStall+0x82>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e01d      	b.n	8006f2c <HAL_PCD_EP_SetStall+0xbe>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68f9      	ldr	r1, [r7, #12]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f004 fc8c 	bl	800b81c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7999      	ldrb	r1, [r3, #6]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f004 fe7d 	bl	800bc1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	7912      	ldrb	r2, [r2, #4]
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e042      	b.n	8006fd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da0f      	bge.n	8006f7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	3310      	adds	r3, #16
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3304      	adds	r3, #4
 8006f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	705a      	strb	r2, [r3, #1]
 8006f78:	e00f      	b.n	8006f9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_PCD_EP_ClrStall+0x86>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e00e      	b.n	8006fd8 <HAL_PCD_EP_ClrStall+0xa4>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 fc95 	bl	800b8f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da0c      	bge.n	800700e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	3310      	adds	r3, #16
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e00c      	b.n	8007028 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	3304      	adds	r3, #4
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68f9      	ldr	r1, [r7, #12]
 800702e:	4618      	mov	r0, r3
 8007030:	f004 fab4 	bl	800b59c <USB_EPStopXfer>
 8007034:	4603      	mov	r3, r0
 8007036:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007038:	7afb      	ldrb	r3, [r7, #11]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b08a      	sub	sp, #40	; 0x28
 8007046:	af02      	add	r7, sp, #8
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	3310      	adds	r3, #16
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	3304      	adds	r3, #4
 8007068:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	695a      	ldr	r2, [r3, #20]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	429a      	cmp	r2, r3
 8007074:	d901      	bls.n	800707a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e06b      	b.n	8007152 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	429a      	cmp	r2, r3
 800708e:	d902      	bls.n	8007096 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3303      	adds	r3, #3
 800709a:	089b      	lsrs	r3, r3, #2
 800709c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800709e:	e02a      	b.n	80070f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d902      	bls.n	80070bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	3303      	adds	r3, #3
 80070c0:	089b      	lsrs	r3, r3, #2
 80070c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4603      	mov	r3, r0
 80070d8:	6978      	ldr	r0, [r7, #20]
 80070da:	f004 fb09 	bl	800b6f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	441a      	add	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	429a      	cmp	r2, r3
 800710a:	d809      	bhi.n	8007120 <PCD_WriteEmptyTxFifo+0xde>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007114:	429a      	cmp	r2, r3
 8007116:	d203      	bcs.n	8007120 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1bf      	bne.n	80070a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	429a      	cmp	r2, r3
 800712a:	d811      	bhi.n	8007150 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	43db      	mvns	r3, r3
 8007146:	6939      	ldr	r1, [r7, #16]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	333c      	adds	r3, #60	; 0x3c
 8007174:	3304      	adds	r3, #4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	799b      	ldrb	r3, [r3, #6]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d17b      	bne.n	800728a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d015      	beq.n	80071c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4a61      	ldr	r2, [pc, #388]	; (8007324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	f240 80b9 	bls.w	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80b3 	beq.w	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	461a      	mov	r2, r3
 80071c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c4:	6093      	str	r3, [r2, #8]
 80071c6:	e0a7      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	461a      	mov	r2, r3
 80071e0:	2320      	movs	r3, #32
 80071e2:	6093      	str	r3, [r2, #8]
 80071e4:	e098      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8093 	bne.w	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4a4b      	ldr	r2, [pc, #300]	; (8007324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d90f      	bls.n	800721a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	461a      	mov	r2, r3
 8007212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007216:	6093      	str	r3, [r2, #8]
 8007218:	e07e      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1a      	ldr	r2, [r3, #32]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	0159      	lsls	r1, r3, #5
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	440b      	add	r3, r1
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d114      	bne.n	800727c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007264:	461a      	mov	r2, r3
 8007266:	2101      	movs	r1, #1
 8007268:	f004 fcd8 	bl	800bc1c <USB_EP0_OutStart>
 800726c:	e006      	b.n	800727c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	441a      	add	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f008 fd7c 	bl	800fd80 <HAL_PCD_DataOutStageCallback>
 8007288:	e046      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4a26      	ldr	r2, [pc, #152]	; (8007328 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d124      	bne.n	80072dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	461a      	mov	r2, r3
 80072aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	e032      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2320      	movs	r3, #32
 80072cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f008 fd53 	bl	800fd80 <HAL_PCD_DataOutStageCallback>
 80072da:	e01d      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d114      	bne.n	800730c <PCD_EP_OutXfrComplete_int+0x1b0>
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007304:	461a      	mov	r2, r3
 8007306:	2100      	movs	r1, #0
 8007308:	f004 fc88 	bl	800bc1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f008 fd34 	bl	800fd80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	4f54300a 	.word	0x4f54300a
 8007328:	4f54310a 	.word	0x4f54310a

0800732c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	333c      	adds	r3, #60	; 0x3c
 8007344:	3304      	adds	r3, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d90e      	bls.n	8007380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007368:	2b00      	cmp	r3, #0
 800736a:	d009      	beq.n	8007380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	461a      	mov	r2, r3
 800737a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f008 fceb 	bl	800fd5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d90c      	bls.n	80073a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	799b      	ldrb	r3, [r3, #6]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d108      	bne.n	80073a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073a0:	461a      	mov	r2, r3
 80073a2:	2101      	movs	r1, #1
 80073a4:	f004 fc3a 	bl	800bc1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	4f54300a 	.word	0x4f54300a

080073b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
 80073c4:	4613      	mov	r3, r2
 80073c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80073d6:	883b      	ldrh	r3, [r7, #0]
 80073d8:	0419      	lsls	r1, r3, #16
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28
 80073e4:	e028      	b.n	8007438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e00d      	b.n	8007416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	3340      	adds	r3, #64	; 0x40
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	4413      	add	r3, r2
 800740e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	3301      	adds	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	3b01      	subs	r3, #1
 800741c:	429a      	cmp	r2, r3
 800741e:	d3ec      	bcc.n	80073fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007420:	883b      	ldrh	r3, [r7, #0]
 8007422:	0418      	lsls	r0, r3, #16
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	3b01      	subs	r3, #1
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4302      	orrs	r2, r0
 8007430:	3340      	adds	r3, #64	; 0x40
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	887a      	ldrh	r2, [r7, #2]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e267      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d075      	beq.n	800758a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749e:	4b88      	ldr	r3, [pc, #544]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 030c 	and.w	r3, r3, #12
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d00c      	beq.n	80074c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074aa:	4b85      	ldr	r3, [pc, #532]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d112      	bne.n	80074dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074b6:	4b82      	ldr	r3, [pc, #520]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c2:	d10b      	bne.n	80074dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c4:	4b7e      	ldr	r3, [pc, #504]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d05b      	beq.n	8007588 <HAL_RCC_OscConfig+0x108>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d157      	bne.n	8007588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e242      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e4:	d106      	bne.n	80074f4 <HAL_RCC_OscConfig+0x74>
 80074e6:	4b76      	ldr	r3, [pc, #472]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a75      	ldr	r2, [pc, #468]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e01d      	b.n	8007530 <HAL_RCC_OscConfig+0xb0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074fc:	d10c      	bne.n	8007518 <HAL_RCC_OscConfig+0x98>
 80074fe:	4b70      	ldr	r3, [pc, #448]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a6f      	ldr	r2, [pc, #444]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	4b6d      	ldr	r3, [pc, #436]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a6c      	ldr	r2, [pc, #432]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e00b      	b.n	8007530 <HAL_RCC_OscConfig+0xb0>
 8007518:	4b69      	ldr	r3, [pc, #420]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a68      	ldr	r2, [pc, #416]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800751e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4b66      	ldr	r3, [pc, #408]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a65      	ldr	r2, [pc, #404]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800752a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800752e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d013      	beq.n	8007560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fc ffc6 	bl	80044c8 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007540:	f7fc ffc2 	bl	80044c8 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	; 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e207      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007552:	4b5b      	ldr	r3, [pc, #364]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0f0      	beq.n	8007540 <HAL_RCC_OscConfig+0xc0>
 800755e:	e014      	b.n	800758a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007560:	f7fc ffb2 	bl	80044c8 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007568:	f7fc ffae 	bl	80044c8 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b64      	cmp	r3, #100	; 0x64
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e1f3      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800757a:	4b51      	ldr	r3, [pc, #324]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0xe8>
 8007586:	e000      	b.n	800758a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d063      	beq.n	800765e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007596:	4b4a      	ldr	r3, [pc, #296]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d11c      	bne.n	80075e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ae:	4b44      	ldr	r3, [pc, #272]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d116      	bne.n	80075e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_RCC_OscConfig+0x152>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e1c7      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d2:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4937      	ldr	r1, [pc, #220]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e6:	e03a      	b.n	800765e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d020      	beq.n	8007632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075f0:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <HAL_RCC_OscConfig+0x244>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f6:	f7fc ff67 	bl	80044c8 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075fe:	f7fc ff63 	bl	80044c8 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e1a8      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007610:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0f0      	beq.n	80075fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	4925      	ldr	r1, [pc, #148]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 800762c:	4313      	orrs	r3, r2
 800762e:	600b      	str	r3, [r1, #0]
 8007630:	e015      	b.n	800765e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <HAL_RCC_OscConfig+0x244>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fc ff46 	bl	80044c8 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007640:	f7fc ff42 	bl	80044c8 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e187      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d036      	beq.n	80076d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d016      	beq.n	80076a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <HAL_RCC_OscConfig+0x248>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007678:	f7fc ff26 	bl	80044c8 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007680:	f7fc ff22 	bl	80044c8 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e167      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0f0      	beq.n	8007680 <HAL_RCC_OscConfig+0x200>
 800769e:	e01b      	b.n	80076d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <HAL_RCC_OscConfig+0x248>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076a6:	f7fc ff0f 	bl	80044c8 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ac:	e00e      	b.n	80076cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ae:	f7fc ff0b 	bl	80044c8 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d907      	bls.n	80076cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e150      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
 80076c0:	40023800 	.word	0x40023800
 80076c4:	42470000 	.word	0x42470000
 80076c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076cc:	4b88      	ldr	r3, [pc, #544]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ea      	bne.n	80076ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8097 	beq.w	8007814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ea:	4b81      	ldr	r3, [pc, #516]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10f      	bne.n	8007716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	4b7d      	ldr	r3, [pc, #500]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	4a7c      	ldr	r2, [pc, #496]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007704:	6413      	str	r3, [r2, #64]	; 0x40
 8007706:	4b7a      	ldr	r3, [pc, #488]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007712:	2301      	movs	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007716:	4b77      	ldr	r3, [pc, #476]	; (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d118      	bne.n	8007754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007722:	4b74      	ldr	r3, [pc, #464]	; (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a73      	ldr	r2, [pc, #460]	; (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772e:	f7fc fecb 	bl	80044c8 <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007736:	f7fc fec7 	bl	80044c8 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e10c      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007748:	4b6a      	ldr	r3, [pc, #424]	; (80078f4 <HAL_RCC_OscConfig+0x474>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d106      	bne.n	800776a <HAL_RCC_OscConfig+0x2ea>
 800775c:	4b64      	ldr	r3, [pc, #400]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007760:	4a63      	ldr	r2, [pc, #396]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	6713      	str	r3, [r2, #112]	; 0x70
 8007768:	e01c      	b.n	80077a4 <HAL_RCC_OscConfig+0x324>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b05      	cmp	r3, #5
 8007770:	d10c      	bne.n	800778c <HAL_RCC_OscConfig+0x30c>
 8007772:	4b5f      	ldr	r3, [pc, #380]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	4a5e      	ldr	r2, [pc, #376]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	6713      	str	r3, [r2, #112]	; 0x70
 800777e:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	4a5b      	ldr	r2, [pc, #364]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	6713      	str	r3, [r2, #112]	; 0x70
 800778a:	e00b      	b.n	80077a4 <HAL_RCC_OscConfig+0x324>
 800778c:	4b58      	ldr	r3, [pc, #352]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007790:	4a57      	ldr	r2, [pc, #348]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	6713      	str	r3, [r2, #112]	; 0x70
 8007798:	4b55      	ldr	r3, [pc, #340]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779c:	4a54      	ldr	r2, [pc, #336]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800779e:	f023 0304 	bic.w	r3, r3, #4
 80077a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d015      	beq.n	80077d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fc fe8c 	bl	80044c8 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	e00a      	b.n	80077ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077b4:	f7fc fe88 	bl	80044c8 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e0cb      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ca:	4b49      	ldr	r3, [pc, #292]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0ee      	beq.n	80077b4 <HAL_RCC_OscConfig+0x334>
 80077d6:	e014      	b.n	8007802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077d8:	f7fc fe76 	bl	80044c8 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	e00a      	b.n	80077f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e0:	f7fc fe72 	bl	80044c8 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e0b5      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f6:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1ee      	bne.n	80077e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007808:	4b39      	ldr	r3, [pc, #228]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	4a38      	ldr	r2, [pc, #224]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 800780e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a1 	beq.w	8007960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800781e:	4b34      	ldr	r3, [pc, #208]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b08      	cmp	r3, #8
 8007828:	d05c      	beq.n	80078e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d141      	bne.n	80078b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007832:	4b31      	ldr	r3, [pc, #196]	; (80078f8 <HAL_RCC_OscConfig+0x478>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007838:	f7fc fe46 	bl	80044c8 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007840:	f7fc fe42 	bl	80044c8 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e087      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007852:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f0      	bne.n	8007840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	019b      	lsls	r3, r3, #6
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	3b01      	subs	r3, #1
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	491b      	ldr	r1, [pc, #108]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007884:	4313      	orrs	r3, r2
 8007886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <HAL_RCC_OscConfig+0x478>)
 800788a:	2201      	movs	r2, #1
 800788c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788e:	f7fc fe1b 	bl	80044c8 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007896:	f7fc fe17 	bl	80044c8 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e05c      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0f0      	beq.n	8007896 <HAL_RCC_OscConfig+0x416>
 80078b4:	e054      	b.n	8007960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b6:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <HAL_RCC_OscConfig+0x478>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078bc:	f7fc fe04 	bl	80044c8 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078c4:	f7fc fe00 	bl	80044c8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e045      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d6:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <HAL_RCC_OscConfig+0x470>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <HAL_RCC_OscConfig+0x444>
 80078e2:	e03d      	b.n	8007960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d107      	bne.n	80078fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e038      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
 80078f0:	40023800 	.word	0x40023800
 80078f4:	40007000 	.word	0x40007000
 80078f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078fc:	4b1b      	ldr	r3, [pc, #108]	; (800796c <HAL_RCC_OscConfig+0x4ec>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d028      	beq.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d121      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007922:	429a      	cmp	r2, r3
 8007924:	d11a      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007934:	4293      	cmp	r3, r2
 8007936:	d111      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	085b      	lsrs	r3, r3, #1
 8007944:	3b01      	subs	r3, #1
 8007946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d107      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007958:	429a      	cmp	r2, r3
 800795a:	d001      	beq.n	8007960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800

08007970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0cc      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007984:	4b68      	ldr	r3, [pc, #416]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d90c      	bls.n	80079ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007992:	4b65      	ldr	r3, [pc, #404]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800799a:	4b63      	ldr	r3, [pc, #396]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d001      	beq.n	80079ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0b8      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079c4:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a58      	ldr	r2, [pc, #352]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079dc:	4b53      	ldr	r3, [pc, #332]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	4a52      	ldr	r2, [pc, #328]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e8:	4b50      	ldr	r3, [pc, #320]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	494d      	ldr	r1, [pc, #308]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d044      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0e:	4b47      	ldr	r3, [pc, #284]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d119      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e07f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d003      	beq.n	8007a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a2e:	4b3f      	ldr	r3, [pc, #252]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e06f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a3e:	4b3b      	ldr	r3, [pc, #236]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e067      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a4e:	4b37      	ldr	r3, [pc, #220]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f023 0203 	bic.w	r2, r3, #3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	4934      	ldr	r1, [pc, #208]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a60:	f7fc fd32 	bl	80044c8 <HAL_GetTick>
 8007a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	e00a      	b.n	8007a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a68:	f7fc fd2e 	bl	80044c8 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e04f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a7e:	4b2b      	ldr	r3, [pc, #172]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 020c 	and.w	r2, r3, #12
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d1eb      	bne.n	8007a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20c      	bcs.n	8007ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9e:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d001      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e032      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ac4:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4916      	ldr	r1, [pc, #88]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	490e      	ldr	r1, [pc, #56]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007af6:	f000 f821 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	091b      	lsrs	r3, r3, #4
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	490a      	ldr	r1, [pc, #40]	; (8007b30 <HAL_RCC_ClockConfig+0x1c0>)
 8007b08:	5ccb      	ldrb	r3, [r1, r3]
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <HAL_RCC_ClockConfig+0x1c4>)
 8007b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fc f806 	bl	8003b28 <HAL_InitTick>

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40023c00 	.word	0x40023c00
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	080128c8 	.word	0x080128c8
 8007b34:	20000004 	.word	0x20000004
 8007b38:	20000008 	.word	0x20000008

08007b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b40:	b090      	sub	sp, #64	; 0x40
 8007b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d00d      	beq.n	8007b7c <HAL_RCC_GetSysClockFreq+0x40>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	f200 80a1 	bhi.w	8007ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x34>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d003      	beq.n	8007b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b6e:	e09b      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b70:	4b53      	ldr	r3, [pc, #332]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b74:	e09b      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b76:	4b53      	ldr	r3, [pc, #332]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b7a:	e098      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b7c:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b86:	4b4d      	ldr	r3, [pc, #308]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d028      	beq.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b92:	4b4a      	ldr	r3, [pc, #296]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	099b      	lsrs	r3, r3, #6
 8007b98:	2200      	movs	r2, #0
 8007b9a:	623b      	str	r3, [r7, #32]
 8007b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4b47      	ldr	r3, [pc, #284]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ba8:	fb03 f201 	mul.w	r2, r3, r1
 8007bac:	2300      	movs	r3, #0
 8007bae:	fb00 f303 	mul.w	r3, r0, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4a43      	ldr	r2, [pc, #268]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8007bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8007bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc2:	4413      	add	r3, r2
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	2200      	movs	r2, #0
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	61fa      	str	r2, [r7, #28]
 8007bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007bd6:	f7f8 fb13 	bl	8000200 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4613      	mov	r3, r2
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be2:	e053      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007be4:	4b35      	ldr	r3, [pc, #212]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	099b      	lsrs	r3, r3, #6
 8007bea:	2200      	movs	r2, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	617a      	str	r2, [r7, #20]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bf6:	f04f 0b00 	mov.w	fp, #0
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f04f 0000 	mov.w	r0, #0
 8007c02:	f04f 0100 	mov.w	r1, #0
 8007c06:	0159      	lsls	r1, r3, #5
 8007c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c0c:	0150      	lsls	r0, r2, #5
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	ebb2 080a 	subs.w	r8, r2, sl
 8007c16:	eb63 090b 	sbc.w	r9, r3, fp
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8007c32:	eb63 0509 	sbc.w	r5, r3, r9
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	00eb      	lsls	r3, r5, #3
 8007c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c44:	00e2      	lsls	r2, r4, #3
 8007c46:	4614      	mov	r4, r2
 8007c48:	461d      	mov	r5, r3
 8007c4a:	eb14 030a 	adds.w	r3, r4, sl
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	eb45 030b 	adc.w	r3, r5, fp
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c62:	4629      	mov	r1, r5
 8007c64:	028b      	lsls	r3, r1, #10
 8007c66:	4621      	mov	r1, r4
 8007c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	028a      	lsls	r2, r1, #10
 8007c70:	4610      	mov	r0, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	2200      	movs	r2, #0
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	60fa      	str	r2, [r7, #12]
 8007c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c80:	f7f8 fabe 	bl	8000200 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4613      	mov	r3, r2
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	3301      	adds	r3, #1
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007caa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3740      	adds	r7, #64	; 0x40
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	00f42400 	.word	0x00f42400
 8007cc4:	00b71b00 	.word	0x00b71b00

08007cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8007cce:	681b      	ldr	r3, [r3, #0]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000004 	.word	0x20000004

08007ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ce4:	f7ff fff0 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	0a9b      	lsrs	r3, r3, #10
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4903      	ldr	r1, [pc, #12]	; (8007d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40023800 	.word	0x40023800
 8007d04:	080128d8 	.word	0x080128d8

08007d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d0c:	f7ff ffdc 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	0b5b      	lsrs	r3, r3, #13
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	4903      	ldr	r1, [pc, #12]	; (8007d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d1e:	5ccb      	ldrb	r3, [r1, r3]
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	080128d8 	.word	0x080128d8

08007d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0203 	and.w	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	08db      	lsrs	r3, r3, #3
 8007d6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <HAL_RCC_GetClockConfig+0x60>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	40023c00 	.word	0x40023c00

08007d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e07b      	b.n	8007e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d108      	bne.n	8007dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db6:	d009      	beq.n	8007dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	61da      	str	r2, [r3, #28]
 8007dbe:	e005      	b.n	8007dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fb fe2a 	bl	8003a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e50:	ea42 0103 	orr.w	r1, r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	0c1b      	lsrs	r3, r3, #16
 8007e6a:	f003 0104 	and.w	r1, r3, #4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f003 0210 	and.w	r2, r3, #16
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b08c      	sub	sp, #48	; 0x30
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
 8007eb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_SPI_TransmitReceive+0x26>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e198      	b.n	80081fe <HAL_SPI_TransmitReceive+0x358>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed4:	f7fc faf8 	bl	80044c8 <HAL_GetTick>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00f      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x70>
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007efc:	d107      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x68>
 8007f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d003      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f14:	e16d      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x82>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x82>
 8007f22:	887b      	ldrh	r3, [r7, #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f2e:	e160      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d003      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2205      	movs	r2, #5
 8007f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	887a      	ldrh	r2, [r7, #2]
 8007f54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	887a      	ldrh	r2, [r7, #2]
 8007f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	887a      	ldrh	r2, [r7, #2]
 8007f66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	887a      	ldrh	r2, [r7, #2]
 8007f6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d007      	beq.n	8007f98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa0:	d17c      	bne.n	800809c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SPI_TransmitReceive+0x10a>
 8007faa:	8b7b      	ldrh	r3, [r7, #26]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d16a      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd4:	e057      	b.n	8008086 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d11b      	bne.n	800801c <HAL_SPI_TransmitReceive+0x176>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d016      	beq.n	800801c <HAL_SPI_TransmitReceive+0x176>
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d113      	bne.n	800801c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	881a      	ldrh	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	1c9a      	adds	r2, r3, #2
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d119      	bne.n	800805e <HAL_SPI_TransmitReceive+0x1b8>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d014      	beq.n	800805e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	b292      	uxth	r2, r2
 8008040:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	1c9a      	adds	r2, r3, #2
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800805a:	2301      	movs	r3, #1
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800805e:	f7fc fa33 	bl	80044c8 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806a:	429a      	cmp	r2, r3
 800806c:	d80b      	bhi.n	8008086 <HAL_SPI_TransmitReceive+0x1e0>
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008074:	d007      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008084:	e0b5      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1a2      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x130>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d19d      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x130>
 800809a:	e080      	b.n	800819e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_SPI_TransmitReceive+0x204>
 80080a4:	8b7b      	ldrh	r3, [r7, #26]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d16f      	bne.n	800818a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d0:	e05b      	b.n	800818a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d11c      	bne.n	800811a <HAL_SPI_TransmitReceive+0x274>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <HAL_SPI_TransmitReceive+0x274>
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d114      	bne.n	800811a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b01      	cmp	r3, #1
 8008126:	d119      	bne.n	800815c <HAL_SPI_TransmitReceive+0x2b6>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d014      	beq.n	800815c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008158:	2301      	movs	r3, #1
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800815c:	f7fc f9b4 	bl	80044c8 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008168:	429a      	cmp	r2, r3
 800816a:	d803      	bhi.n	8008174 <HAL_SPI_TransmitReceive+0x2ce>
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008172:	d102      	bne.n	800817a <HAL_SPI_TransmitReceive+0x2d4>
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008188:	e033      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d19e      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x22c>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d199      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f8b8 	bl	8008318 <SPI_EndRxTxTransaction>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d006      	beq.n	80081bc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081ba:	e01a      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e8:	e003      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3730      	adds	r7, #48	; 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	4613      	mov	r3, r2
 8008216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008218:	f7fc f956 	bl	80044c8 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4413      	add	r3, r2
 8008226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008228:	f7fc f94e 	bl	80044c8 <HAL_GetTick>
 800822c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800822e:	4b39      	ldr	r3, [pc, #228]	; (8008314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	015b      	lsls	r3, r3, #5
 8008234:	0d1b      	lsrs	r3, r3, #20
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800823e:	e054      	b.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008246:	d050      	beq.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008248:	f7fc f93e 	bl	80044c8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	429a      	cmp	r2, r3
 8008256:	d902      	bls.n	800825e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d13d      	bne.n	80082da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800826c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008276:	d111      	bne.n	800829c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008280:	d004      	beq.n	800828c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800828a:	d107      	bne.n	800829c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800829a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082a4:	d10f      	bne.n	80082c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e017      	b.n	800830a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4013      	ands	r3, r2
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	bf0c      	ite	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	2300      	movne	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	461a      	mov	r2, r3
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	429a      	cmp	r2, r3
 8008306:	d19b      	bne.n	8008240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000004 	.word	0x20000004

08008318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2201      	movs	r2, #1
 800832c:	2102      	movs	r1, #2
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff ff6a 	bl	8008208 <SPI_WaitFlagStateUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e032      	b.n	80083b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <SPI_EndRxTxTransaction+0xa0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <SPI_EndRxTxTransaction+0xa4>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	0d5b      	lsrs	r3, r3, #21
 8008356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008368:	d112      	bne.n	8008390 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2200      	movs	r2, #0
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff ff47 	bl	8008208 <SPI_WaitFlagStateUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d016      	beq.n	80083ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	f043 0220 	orr.w	r2, r3, #32
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e00f      	b.n	80083b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	3b01      	subs	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a6:	2b80      	cmp	r3, #128	; 0x80
 80083a8:	d0f2      	beq.n	8008390 <SPI_EndRxTxTransaction+0x78>
 80083aa:	e000      	b.n	80083ae <SPI_EndRxTxTransaction+0x96>
        break;
 80083ac:	bf00      	nop
  }

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000004 	.word	0x20000004
 80083bc:	165e9f81 	.word	0x165e9f81

080083c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e041      	b.n	8008456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fb fe5c 	bl	80040a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f000 fc58 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d001      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e04e      	b.n	8008516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a23      	ldr	r2, [pc, #140]	; (8008524 <HAL_TIM_Base_Start_IT+0xc4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d022      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a2:	d01d      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <HAL_TIM_Base_Start_IT+0xc8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <HAL_TIM_Base_Start_IT+0xcc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <HAL_TIM_Base_Start_IT+0xd0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_TIM_Base_Start_IT+0xd4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a19      	ldr	r2, [pc, #100]	; (8008538 <HAL_TIM_Base_Start_IT+0xd8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a18      	ldr	r2, [pc, #96]	; (800853c <HAL_TIM_Base_Start_IT+0xdc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d111      	bne.n	8008504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d010      	beq.n	8008514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0201 	orr.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008502:	e007      	b.n	8008514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40010000 	.word	0x40010000
 8008528:	40000400 	.word	0x40000400
 800852c:	40000800 	.word	0x40000800
 8008530:	40000c00 	.word	0x40000c00
 8008534:	40010400 	.word	0x40010400
 8008538:	40014000 	.word	0x40014000
 800853c:	40001800 	.word	0x40001800

08008540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e041      	b.n	80085d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fb fd4e 	bl	8004008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f000 fb98 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <HAL_TIM_PWM_Start+0x24>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	e022      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b04      	cmp	r3, #4
 8008608:	d109      	bne.n	800861e <HAL_TIM_PWM_Start+0x3e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	bf14      	ite	ne
 8008616:	2301      	movne	r3, #1
 8008618:	2300      	moveq	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	e015      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b08      	cmp	r3, #8
 8008622:	d109      	bne.n	8008638 <HAL_TIM_PWM_Start+0x58>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	bf14      	ite	ne
 8008630:	2301      	movne	r3, #1
 8008632:	2300      	moveq	r3, #0
 8008634:	b2db      	uxtb	r3, r3
 8008636:	e008      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	bf14      	ite	ne
 8008644:	2301      	movne	r3, #1
 8008646:	2300      	moveq	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e07c      	b.n	800874c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <HAL_TIM_PWM_Start+0x82>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008660:	e013      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d104      	bne.n	8008672 <HAL_TIM_PWM_Start+0x92>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008670:	e00b      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b08      	cmp	r3, #8
 8008676:	d104      	bne.n	8008682 <HAL_TIM_PWM_Start+0xa2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008680:	e003      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2201      	movs	r2, #1
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fe04 	bl	80092a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_TIM_PWM_Start+0x174>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d004      	beq.n	80086ac <HAL_TIM_PWM_Start+0xcc>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a2c      	ldr	r2, [pc, #176]	; (8008758 <HAL_TIM_PWM_Start+0x178>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d101      	bne.n	80086b0 <HAL_TIM_PWM_Start+0xd0>
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <HAL_TIM_PWM_Start+0xd2>
 80086b0:	2300      	movs	r3, #0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a22      	ldr	r2, [pc, #136]	; (8008754 <HAL_TIM_PWM_Start+0x174>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d022      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	d01d      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1f      	ldr	r2, [pc, #124]	; (800875c <HAL_TIM_PWM_Start+0x17c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d018      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <HAL_TIM_PWM_Start+0x180>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1c      	ldr	r2, [pc, #112]	; (8008764 <HAL_TIM_PWM_Start+0x184>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a16      	ldr	r2, [pc, #88]	; (8008758 <HAL_TIM_PWM_Start+0x178>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_TIM_PWM_Start+0x188>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a16      	ldr	r2, [pc, #88]	; (800876c <HAL_TIM_PWM_Start+0x18c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d111      	bne.n	800873a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b06      	cmp	r3, #6
 8008726:	d010      	beq.n	800874a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008738:	e007      	b.n	800874a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0201 	orr.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40010000 	.word	0x40010000
 8008758:	40010400 	.word	0x40010400
 800875c:	40000400 	.word	0x40000400
 8008760:	40000800 	.word	0x40000800
 8008764:	40000c00 	.word	0x40000c00
 8008768:	40014000 	.word	0x40014000
 800876c:	40001800 	.word	0x40001800

08008770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d020      	beq.n	80087d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01b      	beq.n	80087d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0202 	mvn.w	r2, #2
 80087a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa5b 	bl	8008c76 <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fa4d 	bl	8008c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa5e 	bl	8008c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d020      	beq.n	8008820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01b      	beq.n	8008820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f06f 0204 	mvn.w	r2, #4
 80087f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa35 	bl	8008c76 <HAL_TIM_IC_CaptureCallback>
 800880c:	e005      	b.n	800881a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa27 	bl	8008c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa38 	bl	8008c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d020      	beq.n	800886c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01b      	beq.n	800886c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f06f 0208 	mvn.w	r2, #8
 800883c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2204      	movs	r2, #4
 8008842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa0f 	bl	8008c76 <HAL_TIM_IC_CaptureCallback>
 8008858:	e005      	b.n	8008866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa01 	bl	8008c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fa12 	bl	8008c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b00      	cmp	r3, #0
 8008874:	d020      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01b      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f06f 0210 	mvn.w	r2, #16
 8008888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2208      	movs	r2, #8
 800888e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9e9 	bl	8008c76 <HAL_TIM_IC_CaptureCallback>
 80088a4:	e005      	b.n	80088b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f9db 	bl	8008c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9ec 	bl	8008c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00c      	beq.n	80088dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0201 	mvn.w	r2, #1
 80088d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fb f864 	bl	80039a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00c      	beq.n	8008900 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d007      	beq.n	8008900 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fdce 	bl	800949c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800891c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9bd 	bl	8008c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0220 	mvn.w	r2, #32
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fda0 	bl	8009488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800896a:	2302      	movs	r3, #2
 800896c:	e0ae      	b.n	8008acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b0c      	cmp	r3, #12
 800897a:	f200 809f 	bhi.w	8008abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089b9 	.word	0x080089b9
 8008988:	08008abd 	.word	0x08008abd
 800898c:	08008abd 	.word	0x08008abd
 8008990:	08008abd 	.word	0x08008abd
 8008994:	080089f9 	.word	0x080089f9
 8008998:	08008abd 	.word	0x08008abd
 800899c:	08008abd 	.word	0x08008abd
 80089a0:	08008abd 	.word	0x08008abd
 80089a4:	08008a3b 	.word	0x08008a3b
 80089a8:	08008abd 	.word	0x08008abd
 80089ac:	08008abd 	.word	0x08008abd
 80089b0:	08008abd 	.word	0x08008abd
 80089b4:	08008a7b 	.word	0x08008a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fa24 	bl	8008e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0208 	orr.w	r2, r2, #8
 80089d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0204 	bic.w	r2, r2, #4
 80089e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	619a      	str	r2, [r3, #24]
      break;
 80089f6:	e064      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fa74 	bl	8008eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6999      	ldr	r1, [r3, #24]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	021a      	lsls	r2, r3, #8
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	619a      	str	r2, [r3, #24]
      break;
 8008a38:	e043      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fac9 	bl	8008fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0208 	orr.w	r2, r2, #8
 8008a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0204 	bic.w	r2, r2, #4
 8008a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69d9      	ldr	r1, [r3, #28]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	691a      	ldr	r2, [r3, #16]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	61da      	str	r2, [r3, #28]
      break;
 8008a78:	e023      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fb1d 	bl	80090c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69da      	ldr	r2, [r3, #28]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69d9      	ldr	r1, [r3, #28]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	021a      	lsls	r2, r3, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	61da      	str	r2, [r3, #28]
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIM_ConfigClockSource+0x1c>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e0b4      	b.n	8008c5a <HAL_TIM_ConfigClockSource+0x186>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b28:	d03e      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2e:	f200 8087 	bhi.w	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	f000 8086 	beq.w	8008c46 <HAL_TIM_ConfigClockSource+0x172>
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3e:	d87f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b70      	cmp	r3, #112	; 0x70
 8008b42:	d01a      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0xa6>
 8008b44:	2b70      	cmp	r3, #112	; 0x70
 8008b46:	d87b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b60      	cmp	r3, #96	; 0x60
 8008b4a:	d050      	beq.n	8008bee <HAL_TIM_ConfigClockSource+0x11a>
 8008b4c:	2b60      	cmp	r3, #96	; 0x60
 8008b4e:	d877      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b50      	cmp	r3, #80	; 0x50
 8008b52:	d03c      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xfa>
 8008b54:	2b50      	cmp	r3, #80	; 0x50
 8008b56:	d873      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b40      	cmp	r3, #64	; 0x40
 8008b5a:	d058      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0x13a>
 8008b5c:	2b40      	cmp	r3, #64	; 0x40
 8008b5e:	d86f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b30      	cmp	r3, #48	; 0x30
 8008b62:	d064      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b64:	2b30      	cmp	r3, #48	; 0x30
 8008b66:	d86b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d060      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d867      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05c      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d05a      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b78:	e062      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b8a:	f000 fb69 	bl	8009260 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	609a      	str	r2, [r3, #8]
      break;
 8008ba6:	e04f      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	f000 fb52 	bl	8009260 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bca:	609a      	str	r2, [r3, #8]
      break;
 8008bcc:	e03c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f000 fac6 	bl	800916c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2150      	movs	r1, #80	; 0x50
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fb1f 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008bec:	e02c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f000 fae5 	bl	80091ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2160      	movs	r1, #96	; 0x60
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fb0f 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 faa6 	bl	800916c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2140      	movs	r1, #64	; 0x40
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 faff 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e00c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f000 faf6 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008c3e:	e003      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c6a:	bf00      	nop
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a46      	ldr	r2, [pc, #280]	; (8008de0 <TIM_Base_SetConfig+0x12c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d013      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a43      	ldr	r2, [pc, #268]	; (8008de4 <TIM_Base_SetConfig+0x130>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a42      	ldr	r2, [pc, #264]	; (8008de8 <TIM_Base_SetConfig+0x134>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a41      	ldr	r2, [pc, #260]	; (8008dec <TIM_Base_SetConfig+0x138>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a40      	ldr	r2, [pc, #256]	; (8008df0 <TIM_Base_SetConfig+0x13c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d108      	bne.n	8008d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <TIM_Base_SetConfig+0x12c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d02b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d14:	d027      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a32      	ldr	r2, [pc, #200]	; (8008de4 <TIM_Base_SetConfig+0x130>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d023      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a31      	ldr	r2, [pc, #196]	; (8008de8 <TIM_Base_SetConfig+0x134>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a30      	ldr	r2, [pc, #192]	; (8008dec <TIM_Base_SetConfig+0x138>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d01b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2f      	ldr	r2, [pc, #188]	; (8008df0 <TIM_Base_SetConfig+0x13c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d017      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2e      	ldr	r2, [pc, #184]	; (8008df4 <TIM_Base_SetConfig+0x140>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2d      	ldr	r2, [pc, #180]	; (8008df8 <TIM_Base_SetConfig+0x144>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a2c      	ldr	r2, [pc, #176]	; (8008dfc <TIM_Base_SetConfig+0x148>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a2b      	ldr	r2, [pc, #172]	; (8008e00 <TIM_Base_SetConfig+0x14c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <TIM_Base_SetConfig+0x150>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a29      	ldr	r2, [pc, #164]	; (8008e08 <TIM_Base_SetConfig+0x154>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <TIM_Base_SetConfig+0x12c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <TIM_Base_SetConfig+0x13c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d103      	bne.n	8008db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d105      	bne.n	8008dd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f023 0201 	bic.w	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	611a      	str	r2, [r3, #16]
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400
 8008dfc:	40014800 	.word	0x40014800
 8008e00:	40001800 	.word	0x40001800
 8008e04:	40001c00 	.word	0x40001c00
 8008e08:	40002000 	.word	0x40002000

08008e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	f023 0201 	bic.w	r2, r3, #1
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f023 0302 	bic.w	r3, r3, #2
 8008e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a20      	ldr	r2, [pc, #128]	; (8008ee4 <TIM_OC1_SetConfig+0xd8>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_OC1_SetConfig+0x64>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <TIM_OC1_SetConfig+0xdc>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10c      	bne.n	8008e8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f023 0308 	bic.w	r3, r3, #8
 8008e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f023 0304 	bic.w	r3, r3, #4
 8008e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a15      	ldr	r2, [pc, #84]	; (8008ee4 <TIM_OC1_SetConfig+0xd8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC1_SetConfig+0x8e>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <TIM_OC1_SetConfig+0xdc>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d111      	bne.n	8008ebe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	621a      	str	r2, [r3, #32]
}
 8008ed8:	bf00      	nop
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40010400 	.word	0x40010400

08008eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	f023 0210 	bic.w	r2, r3, #16
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 0320 	bic.w	r3, r3, #32
 8008f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a22      	ldr	r2, [pc, #136]	; (8008fd0 <TIM_OC2_SetConfig+0xe4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC2_SetConfig+0x68>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a21      	ldr	r2, [pc, #132]	; (8008fd4 <TIM_OC2_SetConfig+0xe8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d10d      	bne.n	8008f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a17      	ldr	r2, [pc, #92]	; (8008fd0 <TIM_OC2_SetConfig+0xe4>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC2_SetConfig+0x94>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <TIM_OC2_SetConfig+0xe8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d113      	bne.n	8008fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40010000 	.word	0x40010000
 8008fd4:	40010400 	.word	0x40010400

08008fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <TIM_OC3_SetConfig+0xe0>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC3_SetConfig+0x66>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a20      	ldr	r2, [pc, #128]	; (80090bc <TIM_OC3_SetConfig+0xe4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d10d      	bne.n	800905a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	021b      	lsls	r3, r3, #8
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <TIM_OC3_SetConfig+0xe0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_OC3_SetConfig+0x92>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a15      	ldr	r2, [pc, #84]	; (80090bc <TIM_OC3_SetConfig+0xe4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d113      	bne.n	8009092 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	621a      	str	r2, [r3, #32]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400

080090c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800910a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	031b      	lsls	r3, r3, #12
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a12      	ldr	r2, [pc, #72]	; (8009164 <TIM_OC4_SetConfig+0xa4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_OC4_SetConfig+0x68>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a11      	ldr	r2, [pc, #68]	; (8009168 <TIM_OC4_SetConfig+0xa8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d109      	bne.n	800913c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800912e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	019b      	lsls	r3, r3, #6
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40010000 	.word	0x40010000
 8009168:	40010400 	.word	0x40010400

0800916c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0201 	bic.w	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f023 030a 	bic.w	r3, r3, #10
 80091a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b087      	sub	sp, #28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	f023 0210 	bic.w	r2, r3, #16
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	031b      	lsls	r3, r3, #12
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4313      	orrs	r3, r2
 8009210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	621a      	str	r2, [r3, #32]
}
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	f043 0307 	orr.w	r3, r3, #7
 800924c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	609a      	str	r2, [r3, #8]
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800927a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	021a      	lsls	r2, r3, #8
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	431a      	orrs	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4313      	orrs	r3, r2
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	609a      	str	r2, [r3, #8]
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 031f 	and.w	r3, r3, #31
 80092b2:	2201      	movs	r2, #1
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	43db      	mvns	r3, r3
 80092c2:	401a      	ands	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a1a      	ldr	r2, [r3, #32]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	431a      	orrs	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	621a      	str	r2, [r3, #32]
}
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009300:	2302      	movs	r3, #2
 8009302:	e05a      	b.n	80093ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a21      	ldr	r2, [pc, #132]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d022      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009350:	d01d      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a1d      	ldr	r2, [pc, #116]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d018      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00e      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a17      	ldr	r2, [pc, #92]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a15      	ldr	r2, [pc, #84]	; (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10c      	bne.n	80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4313      	orrs	r3, r2
 800939e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40010400 	.word	0x40010400
 80093dc:	40014000 	.word	0x40014000
 80093e0:	40001800 	.word	0x40001800

080093e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093fc:	2302      	movs	r3, #2
 80093fe:	e03d      	b.n	800947c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e042      	b.n	8009548 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fa fee0 	bl	800429c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fe6b 	bl	800a1d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	695a      	ldr	r2, [r3, #20]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b20      	cmp	r3, #32
 8009568:	d112      	bne.n	8009590 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <HAL_UART_Receive_DMA+0x26>
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e00b      	b.n	8009592 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	461a      	mov	r2, r3
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fbc2 	bl	8009d10 <UART_Start_Receive_DMA>
 800958c:	4603      	mov	r3, r0
 800958e:	e000      	b.n	8009592 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b0ba      	sub	sp, #232	; 0xe8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10f      	bne.n	8009602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <HAL_UART_IRQHandler+0x66>
 80095ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fd29 	bl	800a052 <UART_Receive_IT>
      return;
 8009600:	e25b      	b.n	8009aba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 80de 	beq.w	80097c8 <HAL_UART_IRQHandler+0x22c>
 800960c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80d1 	beq.w	80097c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <HAL_UART_IRQHandler+0xae>
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	f043 0201 	orr.w	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800964a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <HAL_UART_IRQHandler+0xd2>
 8009656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009666:	f043 0202 	orr.w	r2, r3, #2
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800966e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00b      	beq.n	8009692 <HAL_UART_IRQHandler+0xf6>
 800967a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968a:	f043 0204 	orr.w	r2, r3, #4
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009696:	f003 0308 	and.w	r3, r3, #8
 800969a:	2b00      	cmp	r3, #0
 800969c:	d011      	beq.n	80096c2 <HAL_UART_IRQHandler+0x126>
 800969e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	f043 0208 	orr.w	r2, r3, #8
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 81f2 	beq.w	8009ab0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d008      	beq.n	80096ea <HAL_UART_IRQHandler+0x14e>
 80096d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fcb4 	bl	800a052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b40      	cmp	r3, #64	; 0x40
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b00      	cmp	r3, #0
 800970c:	d103      	bne.n	8009716 <HAL_UART_IRQHandler+0x17a>
 800970e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d04f      	beq.n	80097b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fbbc 	bl	8009e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009726:	2b40      	cmp	r3, #64	; 0x40
 8009728:	d141      	bne.n	80097ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3314      	adds	r3, #20
 8009730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800975a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800976e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1d9      	bne.n	800972a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d013      	beq.n	80097a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	4a7e      	ldr	r2, [pc, #504]	; (800997c <HAL_UART_IRQHandler+0x3e0>)
 8009784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	4618      	mov	r0, r3
 800978c:	f7fb ffbc 	bl	8005708 <HAL_DMA_Abort_IT>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d016      	beq.n	80097c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	e00e      	b.n	80097c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f99e 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	e00a      	b.n	80097c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f99a 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b4:	e006      	b.n	80097c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f996 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80097c2:	e175      	b.n	8009ab0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c4:	bf00      	nop
    return;
 80097c6:	e173      	b.n	8009ab0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	f040 814f 	bne.w	8009a70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8148 	beq.w	8009a70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8141 	beq.w	8009a70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097ee:	2300      	movs	r3, #0
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b40      	cmp	r3, #64	; 0x40
 8009810:	f040 80b6 	bne.w	8009980 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 8145 	beq.w	8009ab4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800982e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009832:	429a      	cmp	r2, r3
 8009834:	f080 813e 	bcs.w	8009ab4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800983e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800984a:	f000 8088 	beq.w	800995e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800986c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	330c      	adds	r3, #12
 8009876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800987a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800987e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1d9      	bne.n	800984e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3314      	adds	r3, #20
 80098a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098ac:	f023 0301 	bic.w	r3, r3, #1
 80098b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3314      	adds	r3, #20
 80098ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098ca:	e841 2300 	strex	r3, r2, [r1]
 80098ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e1      	bne.n	800989a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3314      	adds	r3, #20
 80098dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3314      	adds	r3, #20
 80098f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e3      	bne.n	80098d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	330c      	adds	r3, #12
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800992c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992e:	f023 0310 	bic.w	r3, r3, #16
 8009932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	330c      	adds	r3, #12
 800993c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009940:	65ba      	str	r2, [r7, #88]	; 0x58
 8009942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800994e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e3      	bne.n	800991c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009958:	4618      	mov	r0, r3
 800995a:	f7fb fe65 	bl	8005628 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800996c:	b29b      	uxth	r3, r3
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	b29b      	uxth	r3, r3
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f8c1 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800997a:	e09b      	b.n	8009ab4 <HAL_UART_IRQHandler+0x518>
 800997c:	08009f5b 	.word	0x08009f5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009988:	b29b      	uxth	r3, r3
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 808e 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800999c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 8089 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	330c      	adds	r3, #12
 80099ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	e853 3f00 	ldrex	r3, [r3]
 80099b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099ca:	647a      	str	r2, [r7, #68]	; 0x44
 80099cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e3      	bne.n	80099a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3314      	adds	r3, #20
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	623b      	str	r3, [r7, #32]
   return(result);
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3314      	adds	r3, #20
 80099fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a02:	633a      	str	r2, [r7, #48]	; 0x30
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e3      	bne.n	80099de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	330c      	adds	r3, #12
 8009a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0310 	bic.w	r3, r3, #16
 8009a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	330c      	adds	r3, #12
 8009a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a48:	61fa      	str	r2, [r7, #28]
 8009a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	69b9      	ldr	r1, [r7, #24]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	617b      	str	r3, [r7, #20]
   return(result);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e3      	bne.n	8009a24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f847 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a6e:	e023      	b.n	8009ab8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <HAL_UART_IRQHandler+0x4f4>
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fa7a 	bl	8009f82 <UART_Transmit_IT>
    return;
 8009a8e:	e014      	b.n	8009aba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00e      	beq.n	8009aba <HAL_UART_IRQHandler+0x51e>
 8009a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d008      	beq.n	8009aba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 faba 	bl	800a022 <UART_EndTransmit_IT>
    return;
 8009aae:	e004      	b.n	8009aba <HAL_UART_IRQHandler+0x51e>
    return;
 8009ab0:	bf00      	nop
 8009ab2:	e002      	b.n	8009aba <HAL_UART_IRQHandler+0x51e>
      return;
 8009ab4:	bf00      	nop
 8009ab6:	e000      	b.n	8009aba <HAL_UART_IRQHandler+0x51e>
      return;
 8009ab8:	bf00      	nop
  }
}
 8009aba:	37e8      	adds	r7, #232	; 0xe8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b09c      	sub	sp, #112	; 0x70
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d172      	bne.n	8009c16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b32:	2200      	movs	r2, #0
 8009b34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	330c      	adds	r3, #12
 8009b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b56:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e5      	bne.n	8009b36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3314      	adds	r3, #20
 8009b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	667b      	str	r3, [r7, #100]	; 0x64
 8009b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3314      	adds	r3, #20
 8009b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8009b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e5      	bne.n	8009b6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3314      	adds	r3, #20
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8009bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3314      	adds	r3, #20
 8009bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e5      	bne.n	8009b9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d119      	bne.n	8009c16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f023 0310 	bic.w	r3, r3, #16
 8009bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	330c      	adds	r3, #12
 8009c00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c02:	61fa      	str	r2, [r7, #28]
 8009c04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e5      	bne.n	8009be2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c18:	2200      	movs	r2, #0
 8009c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d106      	bne.n	8009c32 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c2c:	f7ff ff66 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c30:	e002      	b.n	8009c38 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c34:	f7ff ff4e 	bl	8009ad4 <HAL_UART_RxCpltCallback>
}
 8009c38:	bf00      	nop
 8009c3a:	3770      	adds	r7, #112	; 0x70
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d108      	bne.n	8009c6e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c60:	085b      	lsrs	r3, r3, #1
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4619      	mov	r1, r3
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff ff48 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c6c:	e002      	b.n	8009c74 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7f9 faac 	bl	80031cc <HAL_UART_RxHalfCpltCallback>
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c98:	2b80      	cmp	r3, #128	; 0x80
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b21      	cmp	r3, #33	; 0x21
 8009cae:	d108      	bne.n	8009cc2 <UART_DMAError+0x46>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f000 f8c1 	bl	8009e44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	bf0c      	ite	eq
 8009cd0:	2301      	moveq	r3, #1
 8009cd2:	2300      	movne	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b22      	cmp	r3, #34	; 0x22
 8009ce2:	d108      	bne.n	8009cf6 <UART_DMAError+0x7a>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009cf0:	68b8      	ldr	r0, [r7, #8]
 8009cf2:	f000 f8cf 	bl	8009e94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfa:	f043 0210 	orr.w	r2, r3, #16
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d02:	68b8      	ldr	r0, [r7, #8]
 8009d04:	f7ff fef0 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d08:	bf00      	nop
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b098      	sub	sp, #96	; 0x60
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	88fa      	ldrh	r2, [r7, #6]
 8009d28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2222      	movs	r2, #34	; 0x22
 8009d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3c:	4a3e      	ldr	r2, [pc, #248]	; (8009e38 <UART_Start_Receive_DMA+0x128>)
 8009d3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d44:	4a3d      	ldr	r2, [pc, #244]	; (8009e3c <UART_Start_Receive_DMA+0x12c>)
 8009d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4c:	4a3c      	ldr	r2, [pc, #240]	; (8009e40 <UART_Start_Receive_DMA+0x130>)
 8009d4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d54:	2200      	movs	r2, #0
 8009d56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	f7fb fc02 	bl	8005578 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d74:	2300      	movs	r3, #0
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d019      	beq.n	8009dc6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	330c      	adds	r3, #12
 8009db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009db4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e5      	bne.n	8009d92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3314      	adds	r3, #20
 8009dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	f043 0301 	orr.w	r3, r3, #1
 8009ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3314      	adds	r3, #20
 8009de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009de6:	63ba      	str	r2, [r7, #56]	; 0x38
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e5      	bne.n	8009dc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3314      	adds	r3, #20
 8009e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e10:	653b      	str	r3, [r7, #80]	; 0x50
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3314      	adds	r3, #20
 8009e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8009e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6a39      	ldr	r1, [r7, #32]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e5      	bne.n	8009dfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3760      	adds	r7, #96	; 0x60
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	08009b15 	.word	0x08009b15
 8009e3c:	08009c41 	.word	0x08009c41
 8009e40:	08009c7d 	.word	0x08009c7d

08009e44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b089      	sub	sp, #36	; 0x24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	330c      	adds	r3, #12
 8009e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e62:	61fb      	str	r3, [r7, #28]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	61ba      	str	r2, [r7, #24]
 8009e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6979      	ldr	r1, [r7, #20]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e5      	bne.n	8009e4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009e88:	bf00      	nop
 8009e8a:	3724      	adds	r7, #36	; 0x24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b095      	sub	sp, #84	; 0x54
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ebc:	643a      	str	r2, [r7, #64]	; 0x40
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e5      	bne.n	8009e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3314      	adds	r3, #20
 8009ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f023 0301 	bic.w	r3, r3, #1
 8009ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3314      	adds	r3, #20
 8009eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e5      	bne.n	8009ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d119      	bne.n	8009f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	330c      	adds	r3, #12
 8009f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f023 0310 	bic.w	r3, r3, #16
 8009f22:	647b      	str	r3, [r7, #68]	; 0x44
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	330c      	adds	r3, #12
 8009f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f2c:	61ba      	str	r2, [r7, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6979      	ldr	r1, [r7, #20]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e5      	bne.n	8009f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f4e:	bf00      	nop
 8009f50:	3754      	adds	r7, #84	; 0x54
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f7ff fdb7 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b085      	sub	sp, #20
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b21      	cmp	r3, #33	; 0x21
 8009f94:	d13e      	bne.n	800a014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f9e:	d114      	bne.n	8009fca <UART_Transmit_IT+0x48>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d110      	bne.n	8009fca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	1c9a      	adds	r2, r3, #2
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	621a      	str	r2, [r3, #32]
 8009fc8:	e008      	b.n	8009fdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	1c59      	adds	r1, r3, #1
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6211      	str	r1, [r2, #32]
 8009fd4:	781a      	ldrb	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10f      	bne.n	800a010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a00e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	e000      	b.n	800a016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a014:	2302      	movs	r3, #2
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff fd3c 	bl	8009ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b08c      	sub	sp, #48	; 0x30
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b22      	cmp	r3, #34	; 0x22
 800a064:	f040 80ae 	bne.w	800a1c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a070:	d117      	bne.n	800a0a2 <UART_Receive_IT+0x50>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d113      	bne.n	800a0a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a090:	b29a      	uxth	r2, r3
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	1c9a      	adds	r2, r3, #2
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	629a      	str	r2, [r3, #40]	; 0x28
 800a0a0:	e026      	b.n	800a0f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b4:	d007      	beq.n	800a0c6 <UART_Receive_IT+0x74>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <UART_Receive_IT+0x82>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	e008      	b.n	800a0e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a100:	2b00      	cmp	r3, #0
 800a102:	d15d      	bne.n	800a1c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0220 	bic.w	r2, r2, #32
 800a112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	695a      	ldr	r2, [r3, #20]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0201 	bic.w	r2, r2, #1
 800a132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	2b01      	cmp	r3, #1
 800a148:	d135      	bne.n	800a1b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	613b      	str	r3, [r7, #16]
   return(result);
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f023 0310 	bic.w	r3, r3, #16
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	330c      	adds	r3, #12
 800a16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a170:	623a      	str	r2, [r7, #32]
 800a172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	69f9      	ldr	r1, [r7, #28]
 800a176:	6a3a      	ldr	r2, [r7, #32]
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e5      	bne.n	800a150 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0310 	and.w	r3, r3, #16
 800a18e:	2b10      	cmp	r3, #16
 800a190:	d10a      	bne.n	800a1a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60fb      	str	r3, [r7, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fca4 	bl	8009afc <HAL_UARTEx_RxEventCallback>
 800a1b4:	e002      	b.n	800a1bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff fc8c 	bl	8009ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e002      	b.n	800a1c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e000      	b.n	800a1c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a1c4:	2302      	movs	r3, #2
  }
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3730      	adds	r7, #48	; 0x30
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1d4:	b0c0      	sub	sp, #256	; 0x100
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ec:	68d9      	ldr	r1, [r3, #12]
 800a1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	ea40 0301 	orr.w	r3, r0, r1
 800a1f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	431a      	orrs	r2, r3
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	431a      	orrs	r2, r3
 800a210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a228:	f021 010c 	bic.w	r1, r1, #12
 800a22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a236:	430b      	orrs	r3, r1
 800a238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a24a:	6999      	ldr	r1, [r3, #24]
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	ea40 0301 	orr.w	r3, r0, r1
 800a256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b8f      	ldr	r3, [pc, #572]	; (800a49c <UART_SetConfig+0x2cc>)
 800a260:	429a      	cmp	r2, r3
 800a262:	d005      	beq.n	800a270 <UART_SetConfig+0xa0>
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	4b8d      	ldr	r3, [pc, #564]	; (800a4a0 <UART_SetConfig+0x2d0>)
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d104      	bne.n	800a27a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a270:	f7fd fd4a 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 800a274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a278:	e003      	b.n	800a282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a27a:	f7fd fd31 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 800a27e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a28c:	f040 810c 	bne.w	800a4a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a294:	2200      	movs	r2, #0
 800a296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a29a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a29e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	1891      	adds	r1, r2, r2
 800a2a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2aa:	415b      	adcs	r3, r3
 800a2ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	eb12 0801 	adds.w	r8, r2, r1
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	eb43 0901 	adc.w	r9, r3, r1
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	f04f 0300 	mov.w	r3, #0
 800a2c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2d2:	4690      	mov	r8, r2
 800a2d4:	4699      	mov	r9, r3
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	eb18 0303 	adds.w	r3, r8, r3
 800a2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	eb49 0303 	adc.w	r3, r9, r3
 800a2e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a2fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a2fe:	460b      	mov	r3, r1
 800a300:	18db      	adds	r3, r3, r3
 800a302:	653b      	str	r3, [r7, #80]	; 0x50
 800a304:	4613      	mov	r3, r2
 800a306:	eb42 0303 	adc.w	r3, r2, r3
 800a30a:	657b      	str	r3, [r7, #84]	; 0x54
 800a30c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a314:	f7f5 ff74 	bl	8000200 <__aeabi_uldivmod>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4b61      	ldr	r3, [pc, #388]	; (800a4a4 <UART_SetConfig+0x2d4>)
 800a31e:	fba3 2302 	umull	r2, r3, r3, r2
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	011c      	lsls	r4, r3, #4
 800a326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	1891      	adds	r1, r2, r2
 800a33e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a340:	415b      	adcs	r3, r3
 800a342:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a348:	4641      	mov	r1, r8
 800a34a:	eb12 0a01 	adds.w	sl, r2, r1
 800a34e:	4649      	mov	r1, r9
 800a350:	eb43 0b01 	adc.w	fp, r3, r1
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a368:	4692      	mov	sl, r2
 800a36a:	469b      	mov	fp, r3
 800a36c:	4643      	mov	r3, r8
 800a36e:	eb1a 0303 	adds.w	r3, sl, r3
 800a372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a376:	464b      	mov	r3, r9
 800a378:	eb4b 0303 	adc.w	r3, fp, r3
 800a37c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a38c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a394:	460b      	mov	r3, r1
 800a396:	18db      	adds	r3, r3, r3
 800a398:	643b      	str	r3, [r7, #64]	; 0x40
 800a39a:	4613      	mov	r3, r2
 800a39c:	eb42 0303 	adc.w	r3, r2, r3
 800a3a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3aa:	f7f5 ff29 	bl	8000200 <__aeabi_uldivmod>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4b3b      	ldr	r3, [pc, #236]	; (800a4a4 <UART_SetConfig+0x2d4>)
 800a3b6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ba:	095b      	lsrs	r3, r3, #5
 800a3bc:	2264      	movs	r2, #100	; 0x64
 800a3be:	fb02 f303 	mul.w	r3, r2, r3
 800a3c2:	1acb      	subs	r3, r1, r3
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3ca:	4b36      	ldr	r3, [pc, #216]	; (800a4a4 <UART_SetConfig+0x2d4>)
 800a3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3d8:	441c      	add	r4, r3
 800a3da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a3e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	1891      	adds	r1, r2, r2
 800a3f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a3f4:	415b      	adcs	r3, r3
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3fc:	4641      	mov	r1, r8
 800a3fe:	1851      	adds	r1, r2, r1
 800a400:	6339      	str	r1, [r7, #48]	; 0x30
 800a402:	4649      	mov	r1, r9
 800a404:	414b      	adcs	r3, r1
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
 800a408:	f04f 0200 	mov.w	r2, #0
 800a40c:	f04f 0300 	mov.w	r3, #0
 800a410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a414:	4659      	mov	r1, fp
 800a416:	00cb      	lsls	r3, r1, #3
 800a418:	4651      	mov	r1, sl
 800a41a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a41e:	4651      	mov	r1, sl
 800a420:	00ca      	lsls	r2, r1, #3
 800a422:	4610      	mov	r0, r2
 800a424:	4619      	mov	r1, r3
 800a426:	4603      	mov	r3, r0
 800a428:	4642      	mov	r2, r8
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a430:	464b      	mov	r3, r9
 800a432:	460a      	mov	r2, r1
 800a434:	eb42 0303 	adc.w	r3, r2, r3
 800a438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a44c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a450:	460b      	mov	r3, r1
 800a452:	18db      	adds	r3, r3, r3
 800a454:	62bb      	str	r3, [r7, #40]	; 0x28
 800a456:	4613      	mov	r3, r2
 800a458:	eb42 0303 	adc.w	r3, r2, r3
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a45e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a466:	f7f5 fecb 	bl	8000200 <__aeabi_uldivmod>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <UART_SetConfig+0x2d4>)
 800a470:	fba3 1302 	umull	r1, r3, r3, r2
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	2164      	movs	r1, #100	; 0x64
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	3332      	adds	r3, #50	; 0x32
 800a482:	4a08      	ldr	r2, [pc, #32]	; (800a4a4 <UART_SetConfig+0x2d4>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	095b      	lsrs	r3, r3, #5
 800a48a:	f003 0207 	and.w	r2, r3, #7
 800a48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4422      	add	r2, r4
 800a496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a498:	e106      	b.n	800a6a8 <UART_SetConfig+0x4d8>
 800a49a:	bf00      	nop
 800a49c:	40011000 	.word	0x40011000
 800a4a0:	40011400 	.word	0x40011400
 800a4a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4ba:	4642      	mov	r2, r8
 800a4bc:	464b      	mov	r3, r9
 800a4be:	1891      	adds	r1, r2, r2
 800a4c0:	6239      	str	r1, [r7, #32]
 800a4c2:	415b      	adcs	r3, r3
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	1854      	adds	r4, r2, r1
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	eb43 0501 	adc.w	r5, r3, r1
 800a4d4:	f04f 0200 	mov.w	r2, #0
 800a4d8:	f04f 0300 	mov.w	r3, #0
 800a4dc:	00eb      	lsls	r3, r5, #3
 800a4de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4e2:	00e2      	lsls	r2, r4, #3
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	461d      	mov	r5, r3
 800a4e8:	4643      	mov	r3, r8
 800a4ea:	18e3      	adds	r3, r4, r3
 800a4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	eb45 0303 	adc.w	r3, r5, r3
 800a4f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a516:	4629      	mov	r1, r5
 800a518:	008b      	lsls	r3, r1, #2
 800a51a:	4621      	mov	r1, r4
 800a51c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a520:	4621      	mov	r1, r4
 800a522:	008a      	lsls	r2, r1, #2
 800a524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a528:	f7f5 fe6a 	bl	8000200 <__aeabi_uldivmod>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4b60      	ldr	r3, [pc, #384]	; (800a6b4 <UART_SetConfig+0x4e4>)
 800a532:	fba3 2302 	umull	r2, r3, r3, r2
 800a536:	095b      	lsrs	r3, r3, #5
 800a538:	011c      	lsls	r4, r3, #4
 800a53a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	1891      	adds	r1, r2, r2
 800a552:	61b9      	str	r1, [r7, #24]
 800a554:	415b      	adcs	r3, r3
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a55c:	4641      	mov	r1, r8
 800a55e:	1851      	adds	r1, r2, r1
 800a560:	6139      	str	r1, [r7, #16]
 800a562:	4649      	mov	r1, r9
 800a564:	414b      	adcs	r3, r1
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	f04f 0200 	mov.w	r2, #0
 800a56c:	f04f 0300 	mov.w	r3, #0
 800a570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a574:	4659      	mov	r1, fp
 800a576:	00cb      	lsls	r3, r1, #3
 800a578:	4651      	mov	r1, sl
 800a57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a57e:	4651      	mov	r1, sl
 800a580:	00ca      	lsls	r2, r1, #3
 800a582:	4610      	mov	r0, r2
 800a584:	4619      	mov	r1, r3
 800a586:	4603      	mov	r3, r0
 800a588:	4642      	mov	r2, r8
 800a58a:	189b      	adds	r3, r3, r2
 800a58c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a590:	464b      	mov	r3, r9
 800a592:	460a      	mov	r2, r1
 800a594:	eb42 0303 	adc.w	r3, r2, r3
 800a598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5a8:	f04f 0200 	mov.w	r2, #0
 800a5ac:	f04f 0300 	mov.w	r3, #0
 800a5b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	008b      	lsls	r3, r1, #2
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5be:	4641      	mov	r1, r8
 800a5c0:	008a      	lsls	r2, r1, #2
 800a5c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5c6:	f7f5 fe1b 	bl	8000200 <__aeabi_uldivmod>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4b38      	ldr	r3, [pc, #224]	; (800a6b4 <UART_SetConfig+0x4e4>)
 800a5d2:	fba3 2301 	umull	r2, r3, r3, r1
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	2264      	movs	r2, #100	; 0x64
 800a5da:	fb02 f303 	mul.w	r3, r2, r3
 800a5de:	1acb      	subs	r3, r1, r3
 800a5e0:	011b      	lsls	r3, r3, #4
 800a5e2:	3332      	adds	r3, #50	; 0x32
 800a5e4:	4a33      	ldr	r2, [pc, #204]	; (800a6b4 <UART_SetConfig+0x4e4>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	095b      	lsrs	r3, r3, #5
 800a5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f0:	441c      	add	r4, r3
 800a5f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	673b      	str	r3, [r7, #112]	; 0x70
 800a5fa:	677a      	str	r2, [r7, #116]	; 0x74
 800a5fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a600:	4642      	mov	r2, r8
 800a602:	464b      	mov	r3, r9
 800a604:	1891      	adds	r1, r2, r2
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	415b      	adcs	r3, r3
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a610:	4641      	mov	r1, r8
 800a612:	1851      	adds	r1, r2, r1
 800a614:	6039      	str	r1, [r7, #0]
 800a616:	4649      	mov	r1, r9
 800a618:	414b      	adcs	r3, r1
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	f04f 0300 	mov.w	r3, #0
 800a624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a628:	4659      	mov	r1, fp
 800a62a:	00cb      	lsls	r3, r1, #3
 800a62c:	4651      	mov	r1, sl
 800a62e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a632:	4651      	mov	r1, sl
 800a634:	00ca      	lsls	r2, r1, #3
 800a636:	4610      	mov	r0, r2
 800a638:	4619      	mov	r1, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	4642      	mov	r2, r8
 800a63e:	189b      	adds	r3, r3, r2
 800a640:	66bb      	str	r3, [r7, #104]	; 0x68
 800a642:	464b      	mov	r3, r9
 800a644:	460a      	mov	r2, r1
 800a646:	eb42 0303 	adc.w	r3, r2, r3
 800a64a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	663b      	str	r3, [r7, #96]	; 0x60
 800a656:	667a      	str	r2, [r7, #100]	; 0x64
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a664:	4649      	mov	r1, r9
 800a666:	008b      	lsls	r3, r1, #2
 800a668:	4641      	mov	r1, r8
 800a66a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a66e:	4641      	mov	r1, r8
 800a670:	008a      	lsls	r2, r1, #2
 800a672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a676:	f7f5 fdc3 	bl	8000200 <__aeabi_uldivmod>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <UART_SetConfig+0x4e4>)
 800a680:	fba3 1302 	umull	r1, r3, r3, r2
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	2164      	movs	r1, #100	; 0x64
 800a688:	fb01 f303 	mul.w	r3, r1, r3
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	3332      	adds	r3, #50	; 0x32
 800a692:	4a08      	ldr	r2, [pc, #32]	; (800a6b4 <UART_SetConfig+0x4e4>)
 800a694:	fba2 2303 	umull	r2, r3, r2, r3
 800a698:	095b      	lsrs	r3, r3, #5
 800a69a:	f003 020f 	and.w	r2, r3, #15
 800a69e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4422      	add	r2, r4
 800a6a6:	609a      	str	r2, [r3, #8]
}
 800a6a8:	bf00      	nop
 800a6aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6b4:	51eb851f 	.word	0x51eb851f

0800a6b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	f107 001c 	add.w	r0, r7, #28
 800a6c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d123      	bne.n	800a71a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a6e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a6fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d105      	bne.n	800a70e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fae2 	bl	800bcd8 <USB_CoreReset>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]
 800a718:	e01b      	b.n	800a752 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 fad6 	bl	800bcd8 <USB_CoreReset>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a730:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
 800a744:	e005      	b.n	800a752 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a752:	7fbb      	ldrb	r3, [r7, #30]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d10b      	bne.n	800a770 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f043 0206 	orr.w	r2, r3, #6
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f043 0220 	orr.w	r2, r3, #32
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a77c:	b004      	add	sp, #16
 800a77e:	4770      	bx	lr

0800a780 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d165      	bne.n	800a860 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4a41      	ldr	r2, [pc, #260]	; (800a89c <USB_SetTurnaroundTime+0x11c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d906      	bls.n	800a7aa <USB_SetTurnaroundTime+0x2a>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4a40      	ldr	r2, [pc, #256]	; (800a8a0 <USB_SetTurnaroundTime+0x120>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d202      	bcs.n	800a7aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a7a4:	230f      	movs	r3, #15
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e062      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4a3c      	ldr	r2, [pc, #240]	; (800a8a0 <USB_SetTurnaroundTime+0x120>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d306      	bcc.n	800a7c0 <USB_SetTurnaroundTime+0x40>
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	4a3b      	ldr	r2, [pc, #236]	; (800a8a4 <USB_SetTurnaroundTime+0x124>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d202      	bcs.n	800a7c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a7ba:	230e      	movs	r3, #14
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	e057      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4a38      	ldr	r2, [pc, #224]	; (800a8a4 <USB_SetTurnaroundTime+0x124>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d306      	bcc.n	800a7d6 <USB_SetTurnaroundTime+0x56>
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4a37      	ldr	r2, [pc, #220]	; (800a8a8 <USB_SetTurnaroundTime+0x128>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d202      	bcs.n	800a7d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a7d0:	230d      	movs	r3, #13
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	e04c      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4a33      	ldr	r2, [pc, #204]	; (800a8a8 <USB_SetTurnaroundTime+0x128>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d306      	bcc.n	800a7ec <USB_SetTurnaroundTime+0x6c>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	4a32      	ldr	r2, [pc, #200]	; (800a8ac <USB_SetTurnaroundTime+0x12c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d802      	bhi.n	800a7ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a7e6:	230c      	movs	r3, #12
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	e041      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4a2f      	ldr	r2, [pc, #188]	; (800a8ac <USB_SetTurnaroundTime+0x12c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d906      	bls.n	800a802 <USB_SetTurnaroundTime+0x82>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	4a2e      	ldr	r2, [pc, #184]	; (800a8b0 <USB_SetTurnaroundTime+0x130>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d802      	bhi.n	800a802 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a7fc:	230b      	movs	r3, #11
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	e036      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	4a2a      	ldr	r2, [pc, #168]	; (800a8b0 <USB_SetTurnaroundTime+0x130>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d906      	bls.n	800a818 <USB_SetTurnaroundTime+0x98>
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	4a29      	ldr	r2, [pc, #164]	; (800a8b4 <USB_SetTurnaroundTime+0x134>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d802      	bhi.n	800a818 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a812:	230a      	movs	r3, #10
 800a814:	617b      	str	r3, [r7, #20]
 800a816:	e02b      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <USB_SetTurnaroundTime+0x134>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d906      	bls.n	800a82e <USB_SetTurnaroundTime+0xae>
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	4a25      	ldr	r2, [pc, #148]	; (800a8b8 <USB_SetTurnaroundTime+0x138>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d202      	bcs.n	800a82e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a828:	2309      	movs	r3, #9
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	e020      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <USB_SetTurnaroundTime+0x138>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d306      	bcc.n	800a844 <USB_SetTurnaroundTime+0xc4>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <USB_SetTurnaroundTime+0x13c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d802      	bhi.n	800a844 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a83e:	2308      	movs	r3, #8
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e015      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4a1d      	ldr	r2, [pc, #116]	; (800a8bc <USB_SetTurnaroundTime+0x13c>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d906      	bls.n	800a85a <USB_SetTurnaroundTime+0xda>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	4a1c      	ldr	r2, [pc, #112]	; (800a8c0 <USB_SetTurnaroundTime+0x140>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d202      	bcs.n	800a85a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a854:	2307      	movs	r3, #7
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e00a      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a85a:	2306      	movs	r3, #6
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e007      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a866:	2309      	movs	r3, #9
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	e001      	b.n	800a870 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a86c:	2309      	movs	r3, #9
 800a86e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68da      	ldr	r2, [r3, #12]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	029b      	lsls	r3, r3, #10
 800a884:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a888:	431a      	orrs	r2, r3
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	371c      	adds	r7, #28
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	00d8acbf 	.word	0x00d8acbf
 800a8a0:	00e4e1c0 	.word	0x00e4e1c0
 800a8a4:	00f42400 	.word	0x00f42400
 800a8a8:	01067380 	.word	0x01067380
 800a8ac:	011a499f 	.word	0x011a499f
 800a8b0:	01312cff 	.word	0x01312cff
 800a8b4:	014ca43f 	.word	0x014ca43f
 800a8b8:	016e3600 	.word	0x016e3600
 800a8bc:	01a6ab1f 	.word	0x01a6ab1f
 800a8c0:	01e84800 	.word	0x01e84800

0800a8c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f043 0201 	orr.w	r2, r3, #1
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d115      	bne.n	800a956 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a936:	200a      	movs	r0, #10
 800a938:	f7f9 fdd2 	bl	80044e0 <HAL_Delay>
      ms += 10U;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	330a      	adds	r3, #10
 800a940:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 f939 	bl	800bbba <USB_GetMode>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d01e      	beq.n	800a98c <USB_SetCurrentMode+0x84>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2bc7      	cmp	r3, #199	; 0xc7
 800a952:	d9f0      	bls.n	800a936 <USB_SetCurrentMode+0x2e>
 800a954:	e01a      	b.n	800a98c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a956:	78fb      	ldrb	r3, [r7, #3]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d115      	bne.n	800a988 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a968:	200a      	movs	r0, #10
 800a96a:	f7f9 fdb9 	bl	80044e0 <HAL_Delay>
      ms += 10U;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	330a      	adds	r3, #10
 800a972:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f001 f920 	bl	800bbba <USB_GetMode>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <USB_SetCurrentMode+0x84>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2bc7      	cmp	r3, #199	; 0xc7
 800a984:	d9f0      	bls.n	800a968 <USB_SetCurrentMode+0x60>
 800a986:	e001      	b.n	800a98c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e005      	b.n	800a998 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2bc8      	cmp	r3, #200	; 0xc8
 800a990:	d101      	bne.n	800a996 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	613b      	str	r3, [r7, #16]
 800a9be:	e009      	b.n	800a9d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3340      	adds	r3, #64	; 0x40
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	613b      	str	r3, [r7, #16]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	2b0e      	cmp	r3, #14
 800a9d8:	d9f2      	bls.n	800a9c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a9da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11c      	bne.n	800aa1c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9f0:	f043 0302 	orr.w	r3, r3, #2
 800a9f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
 800aa1a:	e00b      	b.n	800aa34 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d10d      	bne.n	800aa64 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa50:	2100      	movs	r1, #0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f968 	bl	800ad28 <USB_SetDevSpeed>
 800aa58:	e008      	b.n	800aa6c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f963 	bl	800ad28 <USB_SetDevSpeed>
 800aa62:	e003      	b.n	800aa6c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa64:	2103      	movs	r1, #3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f95e 	bl	800ad28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa6c:	2110      	movs	r1, #16
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f8fa 	bl	800ac68 <USB_FlushTxFifo>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f924 	bl	800accc <USB_FlushRxFifo>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa94:	461a      	mov	r2, r3
 800aa96:	2300      	movs	r3, #0
 800aa98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaac:	461a      	mov	r2, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aab2:	2300      	movs	r3, #0
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	e043      	b.n	800ab40 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aace:	d118      	bne.n	800ab02 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae2:	461a      	mov	r2, r3
 800aae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	e013      	b.n	800ab14 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	e008      	b.n	800ab14 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2300      	movs	r3, #0
 800ab12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab20:	461a      	mov	r2, r3
 800ab22:	2300      	movs	r3, #0
 800ab24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab32:	461a      	mov	r2, r3
 800ab34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	613b      	str	r3, [r7, #16]
 800ab40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab44:	461a      	mov	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d3b5      	bcc.n	800aab8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	613b      	str	r3, [r7, #16]
 800ab50:	e043      	b.n	800abda <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab68:	d118      	bne.n	800ab9c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e013      	b.n	800abae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab92:	461a      	mov	r2, r3
 800ab94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	e008      	b.n	800abae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba8:	461a      	mov	r2, r3
 800abaa:	2300      	movs	r3, #0
 800abac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abba:	461a      	mov	r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abcc:	461a      	mov	r2, r3
 800abce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abde:	461a      	mov	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d3b5      	bcc.n	800ab52 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d105      	bne.n	800ac1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	f043 0210 	orr.w	r2, r3, #16
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	699a      	ldr	r2, [r3, #24]
 800ac20:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <USB_DevInit+0x2c4>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	f043 0208 	orr.w	r2, r3, #8
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d107      	bne.n	800ac54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac4c:	f043 0304 	orr.w	r3, r3, #4
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac60:	b004      	add	sp, #16
 800ac62:	4770      	bx	lr
 800ac64:	803c3800 	.word	0x803c3800

0800ac68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ac82:	d901      	bls.n	800ac88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e01b      	b.n	800acc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	daf2      	bge.n	800ac76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	019b      	lsls	r3, r3, #6
 800ac98:	f043 0220 	orr.w	r2, r3, #32
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800acac:	d901      	bls.n	800acb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e006      	b.n	800acc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f003 0320 	and.w	r3, r3, #32
 800acba:	2b20      	cmp	r3, #32
 800acbc:	d0f0      	beq.n	800aca0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ace4:	d901      	bls.n	800acea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e018      	b.n	800ad1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	daf2      	bge.n	800acd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2210      	movs	r2, #16
 800acfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad08:	d901      	bls.n	800ad0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e006      	b.n	800ad1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d0f0      	beq.n	800acfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b087      	sub	sp, #28
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 0306 	and.w	r3, r3, #6
 800ad72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d102      	bne.n	800ad80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
 800ad7e:	e00a      	b.n	800ad96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d002      	beq.n	800ad8c <USB_GetDevSpeed+0x32>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b06      	cmp	r3, #6
 800ad8a:	d102      	bne.n	800ad92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	75fb      	strb	r3, [r7, #23]
 800ad90:	e001      	b.n	800ad96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad92:	230f      	movs	r3, #15
 800ad94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	371c      	adds	r7, #28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	785b      	ldrb	r3, [r3, #1]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d13a      	bne.n	800ae36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	2101      	movs	r1, #1
 800add2:	fa01 f303 	lsl.w	r3, r1, r3
 800add6:	b29b      	uxth	r3, r3
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adde:	4313      	orrs	r3, r2
 800ade0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d155      	bne.n	800aea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	791b      	ldrb	r3, [r3, #4]
 800ae12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	059b      	lsls	r3, r3, #22
 800ae1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	0151      	lsls	r1, r2, #5
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	440a      	add	r2, r1
 800ae26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	e036      	b.n	800aea4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3c:	69da      	ldr	r2, [r3, #28]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	2101      	movs	r1, #1
 800ae48:	fa01 f303 	lsl.w	r3, r1, r3
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae54:	4313      	orrs	r3, r2
 800ae56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d11a      	bne.n	800aea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	791b      	ldrb	r3, [r3, #4]
 800ae88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aea2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	785b      	ldrb	r3, [r3, #1]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d161      	bne.n	800af94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aee6:	d11f      	bne.n	800af28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	2101      	movs	r1, #1
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	b29b      	uxth	r3, r3
 800af40:	43db      	mvns	r3, r3
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af48:	4013      	ands	r3, r2
 800af4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	2101      	movs	r1, #1
 800af5e:	fa01 f303 	lsl.w	r3, r1, r3
 800af62:	b29b      	uxth	r3, r3
 800af64:	43db      	mvns	r3, r3
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af6c:	4013      	ands	r3, r2
 800af6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	0159      	lsls	r1, r3, #5
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	440b      	add	r3, r1
 800af86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8a:	4619      	mov	r1, r3
 800af8c:	4b35      	ldr	r3, [pc, #212]	; (800b064 <USB_DeactivateEndpoint+0x1b0>)
 800af8e:	4013      	ands	r3, r2
 800af90:	600b      	str	r3, [r1, #0]
 800af92:	e060      	b.n	800b056 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afaa:	d11f      	bne.n	800afec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	0151      	lsls	r1, r2, #5
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	440a      	add	r2, r1
 800afc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	0151      	lsls	r1, r2, #5
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	440a      	add	r2, r1
 800afe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	f003 030f 	and.w	r3, r3, #15
 800affc:	2101      	movs	r1, #1
 800affe:	fa01 f303 	lsl.w	r3, r1, r3
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	43db      	mvns	r3, r3
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b00c:	4013      	ands	r3, r2
 800b00e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 030f 	and.w	r3, r3, #15
 800b020:	2101      	movs	r1, #1
 800b022:	fa01 f303 	lsl.w	r3, r1, r3
 800b026:	041b      	lsls	r3, r3, #16
 800b028:	43db      	mvns	r3, r3
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b030:	4013      	ands	r3, r2
 800b032:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	0159      	lsls	r1, r3, #5
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	440b      	add	r3, r1
 800b04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04e:	4619      	mov	r1, r3
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <USB_DeactivateEndpoint+0x1b4>)
 800b052:	4013      	ands	r3, r2
 800b054:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	ec337800 	.word	0xec337800
 800b068:	eff37800 	.word	0xeff37800

0800b06c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	4613      	mov	r3, r2
 800b078:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	f040 817a 	bne.w	800b382 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d132      	bne.n	800b0fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	69ba      	ldr	r2, [r7, #24]
 800b0a6:	0151      	lsls	r1, r2, #5
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	440a      	add	r2, r1
 800b0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	0151      	lsls	r1, r2, #5
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	440a      	add	r2, r1
 800b0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f4:	0cdb      	lsrs	r3, r3, #19
 800b0f6:	04db      	lsls	r3, r3, #19
 800b0f8:	6113      	str	r3, [r2, #16]
 800b0fa:	e092      	b.n	800b222 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	0151      	lsls	r1, r2, #5
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	440a      	add	r2, r1
 800b112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b116:	0cdb      	lsrs	r3, r3, #19
 800b118:	04db      	lsls	r3, r3, #19
 800b11a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b13a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b13e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d11a      	bne.n	800b17c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	691a      	ldr	r2, [r3, #16]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d903      	bls.n	800b15a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b178:	6113      	str	r3, [r2, #16]
 800b17a:	e01b      	b.n	800b1b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b188:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6919      	ldr	r1, [r3, #16]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	440b      	add	r3, r1
 800b194:	1e59      	subs	r1, r3, #1
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b19e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1a0:	4ba2      	ldr	r3, [pc, #648]	; (800b42c <USB_EPStartXfer+0x3c0>)
 800b1a2:	400b      	ands	r3, r1
 800b1a4:	69b9      	ldr	r1, [r7, #24]
 800b1a6:	0148      	lsls	r0, r1, #5
 800b1a8:	69f9      	ldr	r1, [r7, #28]
 800b1aa:	4401      	add	r1, r0
 800b1ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c0:	691a      	ldr	r2, [r3, #16]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ca:	69b9      	ldr	r1, [r7, #24]
 800b1cc:	0148      	lsls	r0, r1, #5
 800b1ce:	69f9      	ldr	r1, [r7, #28]
 800b1d0:	4401      	add	r1, r0
 800b1d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	791b      	ldrb	r3, [r3, #4]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d11f      	bne.n	800b222 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	0151      	lsls	r1, r2, #5
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	440a      	add	r2, r1
 800b1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	440a      	add	r2, r1
 800b218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d14b      	bne.n	800b2c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d009      	beq.n	800b244 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23c:	461a      	mov	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	791b      	ldrb	r3, [r3, #4]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d128      	bne.n	800b29e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d110      	bne.n	800b27e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	0151      	lsls	r1, r2, #5
 800b26e:	69fa      	ldr	r2, [r7, #28]
 800b270:	440a      	add	r2, r1
 800b272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	e00f      	b.n	800b29e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	0151      	lsls	r1, r2, #5
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	440a      	add	r2, r1
 800b294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b29c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	0151      	lsls	r1, r2, #5
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	e165      	b.n	800b58c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	791b      	ldrb	r3, [r3, #4]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d015      	beq.n	800b314 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 814d 	beq.w	800b58c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	2101      	movs	r1, #1
 800b304:	fa01 f303 	lsl.w	r3, r1, r3
 800b308:	69f9      	ldr	r1, [r7, #28]
 800b30a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b30e:	4313      	orrs	r3, r2
 800b310:	634b      	str	r3, [r1, #52]	; 0x34
 800b312:	e13b      	b.n	800b58c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b320:	2b00      	cmp	r3, #0
 800b322:	d110      	bne.n	800b346 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	e00f      	b.n	800b366 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	0151      	lsls	r1, r2, #5
 800b358:	69fa      	ldr	r2, [r7, #28]
 800b35a:	440a      	add	r2, r1
 800b35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	68d9      	ldr	r1, [r3, #12]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	781a      	ldrb	r2, [r3, #0]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	b298      	uxth	r0, r3
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	4603      	mov	r3, r0
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f9b8 	bl	800b6f0 <USB_WritePacket>
 800b380:	e104      	b.n	800b58c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	69ba      	ldr	r2, [r7, #24]
 800b392:	0151      	lsls	r1, r2, #5
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	440a      	add	r2, r1
 800b398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b39c:	0cdb      	lsrs	r3, r3, #19
 800b39e:	04db      	lsls	r3, r3, #19
 800b3a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	0151      	lsls	r1, r2, #5
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	440a      	add	r2, r1
 800b3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d131      	bne.n	800b430 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3fa:	69b9      	ldr	r1, [r7, #24]
 800b3fc:	0148      	lsls	r0, r1, #5
 800b3fe:	69f9      	ldr	r1, [r7, #28]
 800b400:	4401      	add	r1, r0
 800b402:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b406:	4313      	orrs	r3, r2
 800b408:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	0151      	lsls	r1, r2, #5
 800b41c:	69fa      	ldr	r2, [r7, #28]
 800b41e:	440a      	add	r2, r1
 800b420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b428:	6113      	str	r3, [r2, #16]
 800b42a:	e061      	b.n	800b4f0 <USB_EPStartXfer+0x484>
 800b42c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d123      	bne.n	800b480 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b44e:	69b9      	ldr	r1, [r7, #24]
 800b450:	0148      	lsls	r0, r1, #5
 800b452:	69f9      	ldr	r1, [r7, #28]
 800b454:	4401      	add	r1, r0
 800b456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b45a:	4313      	orrs	r3, r2
 800b45c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	0151      	lsls	r1, r2, #5
 800b470:	69fa      	ldr	r2, [r7, #28]
 800b472:	440a      	add	r2, r1
 800b474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b47c:	6113      	str	r3, [r2, #16]
 800b47e:	e037      	b.n	800b4f0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	691a      	ldr	r2, [r3, #16]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	4413      	add	r3, r2
 800b48a:	1e5a      	subs	r2, r3, #1
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	fbb2 f3f3 	udiv	r3, r2, r3
 800b494:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	8afa      	ldrh	r2, [r7, #22]
 800b49c:	fb03 f202 	mul.w	r2, r3, r2
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b0:	691a      	ldr	r2, [r3, #16]
 800b4b2:	8afb      	ldrh	r3, [r7, #22]
 800b4b4:	04d9      	lsls	r1, r3, #19
 800b4b6:	4b38      	ldr	r3, [pc, #224]	; (800b598 <USB_EPStartXfer+0x52c>)
 800b4b8:	400b      	ands	r3, r1
 800b4ba:	69b9      	ldr	r1, [r7, #24]
 800b4bc:	0148      	lsls	r0, r1, #5
 800b4be:	69f9      	ldr	r1, [r7, #28]
 800b4c0:	4401      	add	r1, r0
 800b4c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4e0:	69b9      	ldr	r1, [r7, #24]
 800b4e2:	0148      	lsls	r0, r1, #5
 800b4e4:	69f9      	ldr	r1, [r7, #28]
 800b4e6:	4401      	add	r1, r0
 800b4e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d10d      	bne.n	800b512 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	68d9      	ldr	r1, [r3, #12]
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b50e:	460a      	mov	r2, r1
 800b510:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	791b      	ldrb	r3, [r3, #4]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d128      	bne.n	800b56c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b526:	2b00      	cmp	r3, #0
 800b528:	d110      	bne.n	800b54c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	015a      	lsls	r2, r3, #5
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	4413      	add	r3, r2
 800b532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	69ba      	ldr	r2, [r7, #24]
 800b53a:	0151      	lsls	r1, r2, #5
 800b53c:	69fa      	ldr	r2, [r7, #28]
 800b53e:	440a      	add	r2, r1
 800b540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	e00f      	b.n	800b56c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	0151      	lsls	r1, r2, #5
 800b55e:	69fa      	ldr	r2, [r7, #28]
 800b560:	440a      	add	r2, r1
 800b562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b56a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	69ba      	ldr	r2, [r7, #24]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	69fa      	ldr	r2, [r7, #28]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b58a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	1ff80000 	.word	0x1ff80000

0800b59c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d14a      	bne.n	800b650 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5d2:	f040 8086 	bne.w	800b6e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	015a      	lsls	r2, r3, #5
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	4413      	add	r3, r2
 800b5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	7812      	ldrb	r2, [r2, #0]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	7812      	ldrb	r2, [r2, #0]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b61c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f242 7210 	movw	r2, #10000	; 0x2710
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d902      	bls.n	800b634 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	75fb      	strb	r3, [r7, #23]
          break;
 800b632:	e056      	b.n	800b6e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b64c:	d0e7      	beq.n	800b61e <USB_EPStopXfer+0x82>
 800b64e:	e048      	b.n	800b6e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b668:	d13b      	bne.n	800b6e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b68c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	7812      	ldrb	r2, [r2, #0]
 800b6a2:	0151      	lsls	r1, r2, #5
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	440a      	add	r2, r1
 800b6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d902      	bls.n	800b6c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6c6:	e00c      	b.n	800b6e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6e0:	d0e7      	beq.n	800b6b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b089      	sub	sp, #36	; 0x24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	460b      	mov	r3, r1
 800b700:	71fb      	strb	r3, [r7, #7]
 800b702:	4613      	mov	r3, r2
 800b704:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b70e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b712:	2b00      	cmp	r3, #0
 800b714:	d123      	bne.n	800b75e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b716:	88bb      	ldrh	r3, [r7, #4]
 800b718:	3303      	adds	r3, #3
 800b71a:	089b      	lsrs	r3, r3, #2
 800b71c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	e018      	b.n	800b756 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	031a      	lsls	r2, r3, #12
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b730:	461a      	mov	r2, r3
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	3301      	adds	r3, #1
 800b742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	3301      	adds	r3, #1
 800b748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	3301      	adds	r3, #1
 800b74e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	3301      	adds	r3, #1
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d3e2      	bcc.n	800b724 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3724      	adds	r7, #36	; 0x24
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b08b      	sub	sp, #44	; 0x2c
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	4613      	mov	r3, r2
 800b778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	089b      	lsrs	r3, r3, #2
 800b786:	b29b      	uxth	r3, r3
 800b788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	f003 0303 	and.w	r3, r3, #3
 800b790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b792:	2300      	movs	r3, #0
 800b794:	623b      	str	r3, [r7, #32]
 800b796:	e014      	b.n	800b7c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	623b      	str	r3, [r7, #32]
 800b7c2:	6a3a      	ldr	r2, [r7, #32]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d3e6      	bcc.n	800b798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b7ca:	8bfb      	ldrh	r3, [r7, #30]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d01e      	beq.n	800b80e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f107 0310 	add.w	r3, r7, #16
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	701a      	strb	r2, [r3, #0]
      i++;
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	623b      	str	r3, [r7, #32]
      pDest++;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	3301      	adds	r3, #1
 800b800:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b802:	8bfb      	ldrh	r3, [r7, #30]
 800b804:	3b01      	subs	r3, #1
 800b806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b808:	8bfb      	ldrh	r3, [r7, #30]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1ea      	bne.n	800b7e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b810:	4618      	mov	r0, r3
 800b812:	372c      	adds	r7, #44	; 0x2c
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	785b      	ldrb	r3, [r3, #1]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d12c      	bne.n	800b892 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	db12      	blt.n	800b870 <USB_EPSetStall+0x54>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00f      	beq.n	800b870 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	015a      	lsls	r2, r3, #5
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	4413      	add	r3, r2
 800b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	0151      	lsls	r1, r2, #5
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	440a      	add	r2, r1
 800b866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b86e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	0151      	lsls	r1, r2, #5
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	440a      	add	r2, r1
 800b886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	e02b      	b.n	800b8ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	db12      	blt.n	800b8ca <USB_EPSetStall+0xae>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00f      	beq.n	800b8ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	015a      	lsls	r2, r3, #5
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	0151      	lsls	r1, r2, #5
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	440a      	add	r2, r1
 800b8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	015a      	lsls	r2, r3, #5
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	0151      	lsls	r1, r2, #5
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	440a      	add	r2, r1
 800b8e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d128      	bne.n	800b966 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	0151      	lsls	r1, r2, #5
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	440a      	add	r2, r1
 800b92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b92e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b932:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d003      	beq.n	800b944 <USB_EPClearStall+0x4c>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d138      	bne.n	800b9b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b95e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	e027      	b.n	800b9b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	0151      	lsls	r1, r2, #5
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	440a      	add	r2, r1
 800b97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	791b      	ldrb	r3, [r3, #4]
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d003      	beq.n	800b996 <USB_EPClearStall+0x9e>
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	791b      	ldrb	r3, [r3, #4]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d10f      	bne.n	800b9b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	0151      	lsls	r1, r2, #5
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	440a      	add	r2, r1
 800b9ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b9e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b9f8:	68f9      	ldr	r1, [r7, #12]
 800b9fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba2a:	f023 0303 	bic.w	r3, r3, #3
 800ba2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba3e:	f023 0302 	bic.w	r3, r3, #2
 800ba42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b085      	sub	sp, #20
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba6c:	f023 0303 	bic.w	r3, r3, #3
 800ba70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba80:	f043 0302 	orr.w	r3, r3, #2
 800ba84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	4013      	ands	r3, r2
 800baaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800baac:	68fb      	ldr	r3, [r7, #12]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800baba:	b480      	push	{r7}
 800babc:	b085      	sub	sp, #20
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	4013      	ands	r3, r2
 800badc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	0c1b      	lsrs	r3, r3, #16
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800baee:	b480      	push	{r7}
 800baf0:	b085      	sub	sp, #20
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	b29b      	uxth	r3, r3
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb50:	68bb      	ldr	r3, [r7, #8]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b087      	sub	sp, #28
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	460b      	mov	r3, r1
 800bb68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb82:	78fb      	ldrb	r3, [r7, #3]
 800bb84:	f003 030f 	and.w	r3, r3, #15
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8e:	01db      	lsls	r3, r3, #7
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbac:	68bb      	ldr	r3, [r7, #8]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f003 0301 	and.w	r3, r3, #1
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b085      	sub	sp, #20
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bbf4:	f023 0307 	bic.w	r3, r3, #7
 800bbf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	460b      	mov	r3, r1
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	333c      	adds	r3, #60	; 0x3c
 800bc32:	3304      	adds	r3, #4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	4a26      	ldr	r2, [pc, #152]	; (800bcd4 <USB_EP0_OutStart+0xb8>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d90a      	bls.n	800bc56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc50:	d101      	bne.n	800bc56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e037      	b.n	800bcc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	2300      	movs	r3, #0
 800bc60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc84:	f043 0318 	orr.w	r3, r3, #24
 800bc88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bc9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d10f      	bne.n	800bcc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcaa:	461a      	mov	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bcc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	371c      	adds	r7, #28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	4f54300a 	.word	0x4f54300a

0800bcd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bce0:	2300      	movs	r3, #0
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3301      	adds	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bcf0:	d901      	bls.n	800bcf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e01b      	b.n	800bd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	daf2      	bge.n	800bce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	f043 0201 	orr.w	r2, r3, #1
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3301      	adds	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bd1a:	d901      	bls.n	800bd20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e006      	b.n	800bd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d0f0      	beq.n	800bd0e <USB_CoreReset+0x36>

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd4c:	f004 fa82 	bl	8010254 <USBD_static_malloc>
 800bd50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	32b0      	adds	r2, #176	; 0xb0
 800bd62:	2100      	movs	r1, #0
 800bd64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e0d4      	b.n	800bf16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bd6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bd70:	2100      	movs	r1, #0
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f006 fab7 	bl	80122e6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32b0      	adds	r2, #176	; 0xb0
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32b0      	adds	r2, #176	; 0xb0
 800bd92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7c1b      	ldrb	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d138      	bne.n	800be16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bda4:	4b5e      	ldr	r3, [pc, #376]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800bda6:	7819      	ldrb	r1, [r3, #0]
 800bda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdac:	2202      	movs	r2, #2
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f004 f92d 	bl	801000e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bdb4:	4b5a      	ldr	r3, [pc, #360]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 020f 	and.w	r2, r3, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	2201      	movs	r2, #1
 800bdcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bdce:	4b55      	ldr	r3, [pc, #340]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bdd0:	7819      	ldrb	r1, [r3, #0]
 800bdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f004 f918 	bl	801000e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bdde:	4b51      	ldr	r3, [pc, #324]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bdfa:	4b4b      	ldr	r3, [pc, #300]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	f003 020f 	and.w	r2, r3, #15
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	440b      	add	r3, r1
 800be0e:	3326      	adds	r3, #38	; 0x26
 800be10:	2210      	movs	r2, #16
 800be12:	801a      	strh	r2, [r3, #0]
 800be14:	e035      	b.n	800be82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be16:	4b42      	ldr	r3, [pc, #264]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800be18:	7819      	ldrb	r1, [r3, #0]
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	2202      	movs	r2, #2
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f004 f8f5 	bl	801000e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be24:	4b3e      	ldr	r3, [pc, #248]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	f003 020f 	and.w	r2, r3, #15
 800be2c:	6879      	ldr	r1, [r7, #4]
 800be2e:	4613      	mov	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	4413      	add	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	440b      	add	r3, r1
 800be38:	3324      	adds	r3, #36	; 0x24
 800be3a:	2201      	movs	r2, #1
 800be3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be3e:	4b39      	ldr	r3, [pc, #228]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800be40:	7819      	ldrb	r1, [r3, #0]
 800be42:	2340      	movs	r3, #64	; 0x40
 800be44:	2202      	movs	r2, #2
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f004 f8e1 	bl	801000e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be4c:	4b35      	ldr	r3, [pc, #212]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 020f 	and.w	r2, r3, #15
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be64:	2201      	movs	r2, #1
 800be66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be68:	4b2f      	ldr	r3, [pc, #188]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 020f 	and.w	r2, r3, #15
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	440b      	add	r3, r1
 800be7c:	3326      	adds	r3, #38	; 0x26
 800be7e:	2210      	movs	r2, #16
 800be80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be82:	4b29      	ldr	r3, [pc, #164]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be84:	7819      	ldrb	r1, [r3, #0]
 800be86:	2308      	movs	r3, #8
 800be88:	2203      	movs	r2, #3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f004 f8bf 	bl	801000e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800be90:	4b25      	ldr	r3, [pc, #148]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 020f 	and.w	r2, r3, #15
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	4613      	mov	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	440b      	add	r3, r1
 800bea4:	3324      	adds	r3, #36	; 0x24
 800bea6:	2201      	movs	r2, #1
 800bea8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	33b0      	adds	r3, #176	; 0xb0
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bee0:	2302      	movs	r3, #2
 800bee2:	e018      	b.n	800bf16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7c1b      	ldrb	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10a      	bne.n	800bf02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800beec:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800beee:	7819      	ldrb	r1, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f004 f976 	bl	80101ec <USBD_LL_PrepareReceive>
 800bf00:	e008      	b.n	800bf14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bf04:	7819      	ldrb	r1, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f004 f96c 	bl	80101ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000097 	.word	0x20000097
 800bf24:	20000098 	.word	0x20000098
 800bf28:	20000099 	.word	0x20000099

0800bf2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bf38:	4b3a      	ldr	r3, [pc, #232]	; (800c024 <USBD_CDC_DeInit+0xf8>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f004 f88b 	bl	801005a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bf44:	4b37      	ldr	r3, [pc, #220]	; (800c024 <USBD_CDC_DeInit+0xf8>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	f003 020f 	and.w	r2, r3, #15
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3324      	adds	r3, #36	; 0x24
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bf5e:	4b32      	ldr	r3, [pc, #200]	; (800c028 <USBD_CDC_DeInit+0xfc>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f004 f878 	bl	801005a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bf6a:	4b2f      	ldr	r3, [pc, #188]	; (800c028 <USBD_CDC_DeInit+0xfc>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	f003 020f 	and.w	r2, r3, #15
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	440b      	add	r3, r1
 800bf7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf82:	2200      	movs	r2, #0
 800bf84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bf86:	4b29      	ldr	r3, [pc, #164]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f004 f864 	bl	801005a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bf92:	4b26      	ldr	r3, [pc, #152]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	f003 020f 	and.w	r2, r3, #15
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	440b      	add	r3, r1
 800bfa6:	3324      	adds	r3, #36	; 0x24
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bfac:	4b1f      	ldr	r3, [pc, #124]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 020f 	and.w	r2, r3, #15
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3326      	adds	r3, #38	; 0x26
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	32b0      	adds	r2, #176	; 0xb0
 800bfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01f      	beq.n	800c018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	33b0      	adds	r3, #176	; 0xb0
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32b0      	adds	r2, #176	; 0xb0
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f004 f938 	bl	8010270 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32b0      	adds	r2, #176	; 0xb0
 800c00a:	2100      	movs	r1, #0
 800c00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000097 	.word	0x20000097
 800c028:	20000098 	.word	0x20000098
 800c02c:	20000099 	.word	0x20000099

0800c030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	32b0      	adds	r2, #176	; 0xb0
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e0bf      	b.n	800c1e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d050      	beq.n	800c10e <USBD_CDC_Setup+0xde>
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	f040 80af 	bne.w	800c1d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	88db      	ldrh	r3, [r3, #6]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d03a      	beq.n	800c0f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	2b00      	cmp	r3, #0
 800c082:	da1b      	bge.n	800c0bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	33b0      	adds	r3, #176	; 0xb0
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c09a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	88d2      	ldrh	r2, [r2, #6]
 800c0a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	88db      	ldrh	r3, [r3, #6]
 800c0a6:	2b07      	cmp	r3, #7
 800c0a8:	bf28      	it	cs
 800c0aa:	2307      	movcs	r3, #7
 800c0ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	89fa      	ldrh	r2, [r7, #14]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 fd89 	bl	800dbcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c0ba:	e090      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	785a      	ldrb	r2, [r3, #1]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	88db      	ldrh	r3, [r3, #6]
 800c0ca:	2b3f      	cmp	r3, #63	; 0x3f
 800c0cc:	d803      	bhi.n	800c0d6 <USBD_CDC_Setup+0xa6>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	88db      	ldrh	r3, [r3, #6]
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	e000      	b.n	800c0d8 <USBD_CDC_Setup+0xa8>
 800c0d6:	2240      	movs	r2, #64	; 0x40
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c0de:	6939      	ldr	r1, [r7, #16]
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f001 fd9b 	bl	800dc24 <USBD_CtlPrepareRx>
      break;
 800c0ee:	e076      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	33b0      	adds	r3, #176	; 0xb0
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	7850      	ldrb	r0, [r2, #1]
 800c106:	2200      	movs	r2, #0
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	4798      	blx	r3
      break;
 800c10c:	e067      	b.n	800c1de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	2b0b      	cmp	r3, #11
 800c114:	d851      	bhi.n	800c1ba <USBD_CDC_Setup+0x18a>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <USBD_CDC_Setup+0xec>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c14d 	.word	0x0800c14d
 800c120:	0800c1c9 	.word	0x0800c1c9
 800c124:	0800c1bb 	.word	0x0800c1bb
 800c128:	0800c1bb 	.word	0x0800c1bb
 800c12c:	0800c1bb 	.word	0x0800c1bb
 800c130:	0800c1bb 	.word	0x0800c1bb
 800c134:	0800c1bb 	.word	0x0800c1bb
 800c138:	0800c1bb 	.word	0x0800c1bb
 800c13c:	0800c1bb 	.word	0x0800c1bb
 800c140:	0800c1bb 	.word	0x0800c1bb
 800c144:	0800c177 	.word	0x0800c177
 800c148:	0800c1a1 	.word	0x0800c1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b03      	cmp	r3, #3
 800c156:	d107      	bne.n	800c168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c158:	f107 030a 	add.w	r3, r7, #10
 800c15c:	2202      	movs	r2, #2
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fd33 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c166:	e032      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 fcbd 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	75fb      	strb	r3, [r7, #23]
          break;
 800c174:	e02b      	b.n	800c1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d107      	bne.n	800c192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c182:	f107 030d 	add.w	r3, r7, #13
 800c186:	2201      	movs	r2, #1
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 fd1e 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c190:	e01d      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f001 fca8 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c19a:	2303      	movs	r3, #3
 800c19c:	75fb      	strb	r3, [r7, #23]
          break;
 800c19e:	e016      	b.n	800c1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d00f      	beq.n	800c1cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f001 fc9b 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c1b8:	e008      	b.n	800c1cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 fc94 	bl	800daea <USBD_CtlError>
          ret = USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800c1c6:	e002      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
          break;
 800c1c8:	bf00      	nop
 800c1ca:	e008      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
          break;
 800c1cc:	bf00      	nop
      }
      break;
 800c1ce:	e006      	b.n	800c1de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 fc89 	bl	800daea <USBD_CtlError>
      ret = USBD_FAIL;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	75fb      	strb	r3, [r7, #23]
      break;
 800c1dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	32b0      	adds	r2, #176	; 0xb0
 800c206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	e065      	b.n	800c2de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	32b0      	adds	r2, #176	; 0xb0
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	f003 020f 	and.w	r2, r3, #15
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	3318      	adds	r3, #24
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d02f      	beq.n	800c29c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	f003 020f 	and.w	r2, r3, #15
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	3318      	adds	r3, #24
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	78fb      	ldrb	r3, [r7, #3]
 800c254:	f003 010f 	and.w	r1, r3, #15
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	460b      	mov	r3, r1
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	440b      	add	r3, r1
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4403      	add	r3, r0
 800c264:	331c      	adds	r3, #28
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	fbb2 f1f3 	udiv	r1, r2, r3
 800c26c:	fb01 f303 	mul.w	r3, r1, r3
 800c270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c272:	2b00      	cmp	r3, #0
 800c274:	d112      	bne.n	800c29c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c276:	78fb      	ldrb	r3, [r7, #3]
 800c278:	f003 020f 	and.w	r2, r3, #15
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	440b      	add	r3, r1
 800c288:	3318      	adds	r3, #24
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c28e:	78f9      	ldrb	r1, [r7, #3]
 800c290:	2300      	movs	r3, #0
 800c292:	2200      	movs	r2, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f003 ff88 	bl	80101aa <USBD_LL_Transmit>
 800c29a:	e01f      	b.n	800c2dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	33b0      	adds	r3, #176	; 0xb0
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d010      	beq.n	800c2dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	33b0      	adds	r3, #176	; 0xb0
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	32b0      	adds	r2, #176	; 0xb0
 800c2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	32b0      	adds	r2, #176	; 0xb0
 800c30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	e01a      	b.n	800c34e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f003 ff86 	bl	801022e <USBD_LL_GetRxDataSize>
 800c322:	4602      	mov	r2, r0
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	33b0      	adds	r3, #176	; 0xb0
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c348:	4611      	mov	r1, r2
 800c34a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	32b0      	adds	r2, #176	; 0xb0
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c374:	2303      	movs	r3, #3
 800c376:	e025      	b.n	800c3c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	33b0      	adds	r3, #176	; 0xb0
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01a      	beq.n	800c3c2 <USBD_CDC_EP0_RxReady+0x6c>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c392:	2bff      	cmp	r3, #255	; 0xff
 800c394:	d015      	beq.n	800c3c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	33b0      	adds	r3, #176	; 0xb0
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c3ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3b6:	b292      	uxth	r2, r2
 800c3b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	22ff      	movs	r2, #255	; 0xff
 800c3be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3d4:	2182      	movs	r1, #130	; 0x82
 800c3d6:	4818      	ldr	r0, [pc, #96]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3d8:	f000 fd4f 	bl	800ce7a <USBD_GetEpDesc>
 800c3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4815      	ldr	r0, [pc, #84]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3e2:	f000 fd4a 	bl	800ce7a <USBD_GetEpDesc>
 800c3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3e8:	2181      	movs	r1, #129	; 0x81
 800c3ea:	4813      	ldr	r0, [pc, #76]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3ec:	f000 fd45 	bl	800ce7a <USBD_GetEpDesc>
 800c3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2210      	movs	r2, #16
 800c3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d006      	beq.n	800c412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2200      	movs	r2, #0
 800c408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c40c:	711a      	strb	r2, [r3, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d006      	beq.n	800c426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c420:	711a      	strb	r2, [r3, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2243      	movs	r2, #67	; 0x43
 800c42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20000054 	.word	0x20000054

0800c43c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c444:	2182      	movs	r1, #130	; 0x82
 800c446:	4818      	ldr	r0, [pc, #96]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c448:	f000 fd17 	bl	800ce7a <USBD_GetEpDesc>
 800c44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c44e:	2101      	movs	r1, #1
 800c450:	4815      	ldr	r0, [pc, #84]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c452:	f000 fd12 	bl	800ce7a <USBD_GetEpDesc>
 800c456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c458:	2181      	movs	r1, #129	; 0x81
 800c45a:	4813      	ldr	r0, [pc, #76]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c45c:	f000 fd0d 	bl	800ce7a <USBD_GetEpDesc>
 800c460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2210      	movs	r2, #16
 800c46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d006      	beq.n	800c482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	2200      	movs	r2, #0
 800c478:	711a      	strb	r2, [r3, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f042 0202 	orr.w	r2, r2, #2
 800c480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d006      	beq.n	800c496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	711a      	strb	r2, [r3, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f042 0202 	orr.w	r2, r2, #2
 800c494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2243      	movs	r2, #67	; 0x43
 800c49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c49c:	4b02      	ldr	r3, [pc, #8]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000054 	.word	0x20000054

0800c4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4b4:	2182      	movs	r1, #130	; 0x82
 800c4b6:	4818      	ldr	r0, [pc, #96]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4b8:	f000 fcdf 	bl	800ce7a <USBD_GetEpDesc>
 800c4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4815      	ldr	r0, [pc, #84]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4c2:	f000 fcda 	bl	800ce7a <USBD_GetEpDesc>
 800c4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4c8:	2181      	movs	r1, #129	; 0x81
 800c4ca:	4813      	ldr	r0, [pc, #76]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4cc:	f000 fcd5 	bl	800ce7a <USBD_GetEpDesc>
 800c4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2210      	movs	r2, #16
 800c4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ec:	711a      	strb	r2, [r3, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c500:	711a      	strb	r2, [r3, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2243      	movs	r2, #67	; 0x43
 800c50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c50c:	4b02      	ldr	r3, [pc, #8]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20000054 	.word	0x20000054

0800c51c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	220a      	movs	r2, #10
 800c528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	20000010 	.word	0x20000010

0800c53c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e009      	b.n	800c564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	33b0      	adds	r3, #176	; 0xb0
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	32b0      	adds	r2, #176	; 0xb0
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	e008      	b.n	800c5a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	371c      	adds	r7, #28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	32b0      	adds	r2, #176	; 0xb0
 800c5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	e004      	b.n	800c5e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
	...

0800c5f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	32b0      	adds	r2, #176	; 0xb0
 800c602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c606:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c608:	2301      	movs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c612:	2303      	movs	r3, #3
 800c614:	e025      	b.n	800c662 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d11f      	bne.n	800c660 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	2201      	movs	r2, #1
 800c624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c628:	4b10      	ldr	r3, [pc, #64]	; (800c66c <USBD_CDC_TransmitPacket+0x7c>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	f003 020f 	and.w	r2, r3, #15
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4403      	add	r3, r0
 800c642:	3318      	adds	r3, #24
 800c644:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c646:	4b09      	ldr	r3, [pc, #36]	; (800c66c <USBD_CDC_TransmitPacket+0x7c>)
 800c648:	7819      	ldrb	r1, [r3, #0]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f003 fda7 	bl	80101aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c660:	7bfb      	ldrb	r3, [r7, #15]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20000097 	.word	0x20000097

0800c670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	32b0      	adds	r2, #176	; 0xb0
 800c682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c686:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	32b0      	adds	r2, #176	; 0xb0
 800c692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e018      	b.n	800c6d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7c1b      	ldrb	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10a      	bne.n	800c6bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6a6:	4b0c      	ldr	r3, [pc, #48]	; (800c6d8 <USBD_CDC_ReceivePacket+0x68>)
 800c6a8:	7819      	ldrb	r1, [r3, #0]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f003 fd99 	bl	80101ec <USBD_LL_PrepareReceive>
 800c6ba:	e008      	b.n	800c6ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6bc:	4b06      	ldr	r3, [pc, #24]	; (800c6d8 <USBD_CDC_ReceivePacket+0x68>)
 800c6be:	7819      	ldrb	r1, [r3, #0]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6c6:	2340      	movs	r3, #64	; 0x40
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f003 fd8f 	bl	80101ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20000098 	.word	0x20000098

0800c6dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e01f      	b.n	800c734 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	79fa      	ldrb	r2, [r7, #7]
 800c726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f003 fc09 	bl	800ff40 <USBD_LL_Init>
 800c72e:	4603      	mov	r3, r0
 800c730:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c732:	7dfb      	ldrb	r3, [r7, #23]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c750:	2303      	movs	r3, #3
 800c752:	e025      	b.n	800c7a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	32ae      	adds	r2, #174	; 0xae
 800c766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00f      	beq.n	800c790 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	32ae      	adds	r2, #174	; 0xae
 800c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	f107 020e 	add.w	r2, r7, #14
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	4602      	mov	r2, r0
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f003 fc11 	bl	800ffd8 <USBD_LL_Start>
 800c7b6:	4603      	mov	r3, r0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d009      	beq.n	800c804 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	4798      	blx	r3
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c804:	7bfb      	ldrb	r3, [r7, #15]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	78fa      	ldrb	r2, [r7, #3]
 800c828:	4611      	mov	r1, r2
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c834:	2303      	movs	r3, #3
 800c836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	4618      	mov	r0, r3
 800c856:	f001 f90e 	bl	800da76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c868:	461a      	mov	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c876:	f003 031f 	and.w	r3, r3, #31
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d01a      	beq.n	800c8b4 <USBD_LL_SetupStage+0x72>
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d822      	bhi.n	800c8c8 <USBD_LL_SetupStage+0x86>
 800c882:	2b00      	cmp	r3, #0
 800c884:	d002      	beq.n	800c88c <USBD_LL_SetupStage+0x4a>
 800c886:	2b01      	cmp	r3, #1
 800c888:	d00a      	beq.n	800c8a0 <USBD_LL_SetupStage+0x5e>
 800c88a:	e01d      	b.n	800c8c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fb65 	bl	800cf64 <USBD_StdDevReq>
 800c89a:	4603      	mov	r3, r0
 800c89c:	73fb      	strb	r3, [r7, #15]
      break;
 800c89e:	e020      	b.n	800c8e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fbcd 	bl	800d048 <USBD_StdItfReq>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b2:	e016      	b.n	800c8e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fc2f 	bl	800d120 <USBD_StdEPReq>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c8c6:	e00c      	b.n	800c8e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f003 fbde 	bl	8010098 <USBD_LL_StallEP>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e0:	bf00      	nop
  }

  return ret;
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c8fe:	7afb      	ldrb	r3, [r7, #11]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d16e      	bne.n	800c9e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c90a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c912:	2b03      	cmp	r3, #3
 800c914:	f040 8098 	bne.w	800ca48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	689a      	ldr	r2, [r3, #8]
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	429a      	cmp	r2, r3
 800c922:	d913      	bls.n	800c94c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	1ad2      	subs	r2, r2, r3
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	4293      	cmp	r3, r2
 800c93c:	bf28      	it	cs
 800c93e:	4613      	movcs	r3, r2
 800c940:	461a      	mov	r2, r3
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f001 f98a 	bl	800dc5e <USBD_CtlContinueRx>
 800c94a:	e07d      	b.n	800ca48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c952:	f003 031f 	and.w	r3, r3, #31
 800c956:	2b02      	cmp	r3, #2
 800c958:	d014      	beq.n	800c984 <USBD_LL_DataOutStage+0x98>
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d81d      	bhi.n	800c99a <USBD_LL_DataOutStage+0xae>
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <USBD_LL_DataOutStage+0x7c>
 800c962:	2b01      	cmp	r3, #1
 800c964:	d003      	beq.n	800c96e <USBD_LL_DataOutStage+0x82>
 800c966:	e018      	b.n	800c99a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	75bb      	strb	r3, [r7, #22]
            break;
 800c96c:	e018      	b.n	800c9a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c974:	b2db      	uxtb	r3, r3
 800c976:	4619      	mov	r1, r3
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 fa64 	bl	800ce46 <USBD_CoreFindIF>
 800c97e:	4603      	mov	r3, r0
 800c980:	75bb      	strb	r3, [r7, #22]
            break;
 800c982:	e00d      	b.n	800c9a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	4619      	mov	r1, r3
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 fa66 	bl	800ce60 <USBD_CoreFindEP>
 800c994:	4603      	mov	r3, r0
 800c996:	75bb      	strb	r3, [r7, #22]
            break;
 800c998:	e002      	b.n	800c9a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	75bb      	strb	r3, [r7, #22]
            break;
 800c99e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c9a0:	7dbb      	ldrb	r3, [r7, #22]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d119      	bne.n	800c9da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d113      	bne.n	800c9da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c9b2:	7dba      	ldrb	r2, [r7, #22]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	32ae      	adds	r2, #174	; 0xae
 800c9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00b      	beq.n	800c9da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c9c2:	7dba      	ldrb	r2, [r7, #22]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c9ca:	7dba      	ldrb	r2, [r7, #22]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	32ae      	adds	r2, #174	; 0xae
 800c9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f001 f950 	bl	800dc80 <USBD_CtlSendStatus>
 800c9e0:	e032      	b.n	800ca48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c9e2:	7afb      	ldrb	r3, [r7, #11]
 800c9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 fa37 	bl	800ce60 <USBD_CoreFindEP>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9f6:	7dbb      	ldrb	r3, [r7, #22]
 800c9f8:	2bff      	cmp	r3, #255	; 0xff
 800c9fa:	d025      	beq.n	800ca48 <USBD_LL_DataOutStage+0x15c>
 800c9fc:	7dbb      	ldrb	r3, [r7, #22]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d122      	bne.n	800ca48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d117      	bne.n	800ca3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca0e:	7dba      	ldrb	r2, [r7, #22]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	32ae      	adds	r2, #174	; 0xae
 800ca14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00f      	beq.n	800ca3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca1e:	7dba      	ldrb	r2, [r7, #22]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca26:	7dba      	ldrb	r2, [r7, #22]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	32ae      	adds	r2, #174	; 0xae
 800ca2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	7afa      	ldrb	r2, [r7, #11]
 800ca34:	4611      	mov	r1, r2
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	4798      	blx	r3
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	e000      	b.n	800ca4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b086      	sub	sp, #24
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d16f      	bne.n	800cb46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3314      	adds	r3, #20
 800ca6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d15a      	bne.n	800cb2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	689a      	ldr	r2, [r3, #8]
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d914      	bls.n	800caac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	461a      	mov	r2, r3
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f001 f8b2 	bl	800dc02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2200      	movs	r2, #0
 800caa2:	2100      	movs	r1, #0
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f003 fba1 	bl	80101ec <USBD_LL_PrepareReceive>
 800caaa:	e03f      	b.n	800cb2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	68da      	ldr	r2, [r3, #12]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d11c      	bne.n	800caf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d316      	bcc.n	800caf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cace:	429a      	cmp	r2, r3
 800cad0:	d20f      	bcs.n	800caf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cad2:	2200      	movs	r2, #0
 800cad4:	2100      	movs	r1, #0
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f001 f893 	bl	800dc02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cae4:	2300      	movs	r3, #0
 800cae6:	2200      	movs	r2, #0
 800cae8:	2100      	movs	r1, #0
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f003 fb7e 	bl	80101ec <USBD_LL_PrepareReceive>
 800caf0:	e01c      	b.n	800cb2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d10f      	bne.n	800cb1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb1e:	2180      	movs	r1, #128	; 0x80
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f003 fab9 	bl	8010098 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f001 f8bd 	bl	800dca6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d03a      	beq.n	800cbac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff fe42 	bl	800c7c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cb44:	e032      	b.n	800cbac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f000 f985 	bl	800ce60 <USBD_CoreFindEP>
 800cb56:	4603      	mov	r3, r0
 800cb58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	2bff      	cmp	r3, #255	; 0xff
 800cb5e:	d025      	beq.n	800cbac <USBD_LL_DataInStage+0x15a>
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d122      	bne.n	800cbac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d11c      	bne.n	800cbac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cb72:	7dfa      	ldrb	r2, [r7, #23]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	32ae      	adds	r2, #174	; 0xae
 800cb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d014      	beq.n	800cbac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cb82:	7dfa      	ldrb	r2, [r7, #23]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cb8a:	7dfa      	ldrb	r2, [r7, #23]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	32ae      	adds	r2, #174	; 0xae
 800cb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	7afa      	ldrb	r2, [r7, #11]
 800cb98:	4611      	mov	r1, r2
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	4798      	blx	r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cba2:	7dbb      	ldrb	r3, [r7, #22]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cba8:	7dbb      	ldrb	r3, [r7, #22]
 800cbaa:	e000      	b.n	800cbae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d014      	beq.n	800cc1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	6852      	ldr	r2, [r2, #4]
 800cc0a:	b2d2      	uxtb	r2, r2
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	4798      	blx	r3
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc1c:	2340      	movs	r3, #64	; 0x40
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2100      	movs	r1, #0
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f003 f9f3 	bl	801000e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2240      	movs	r2, #64	; 0x40
 800cc34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc38:	2340      	movs	r3, #64	; 0x40
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2180      	movs	r1, #128	; 0x80
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f003 f9e5 	bl	801000e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2240      	movs	r2, #64	; 0x40
 800cc4e:	621a      	str	r2, [r3, #32]

  return ret;
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	78fa      	ldrb	r2, [r7, #3]
 800cc6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d006      	beq.n	800cc9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	d106      	bne.n	800ccd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cccc:	b2da      	uxtb	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d110      	bne.n	800cd18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	32ae      	adds	r2, #174	; 0xae
 800cd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e01c      	b.n	800cd7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d115      	bne.n	800cd7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	32ae      	adds	r2, #174	; 0xae
 800cd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	32ae      	adds	r2, #174	; 0xae
 800cd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	4611      	mov	r1, r2
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	32ae      	adds	r2, #174	; 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e01c      	b.n	800cde2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d115      	bne.n	800cde0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	32ae      	adds	r2, #174	; 0xae
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00e      	beq.n	800ce3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	6852      	ldr	r2, [r2, #4]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	4798      	blx	r3
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	460b      	mov	r3, r1
 800ce50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b086      	sub	sp, #24
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	885b      	ldrh	r3, [r3, #2]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d920      	bls.n	800cee4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ceaa:	e013      	b.n	800ced4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ceac:	f107 030a 	add.w	r3, r7, #10
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6978      	ldr	r0, [r7, #20]
 800ceb4:	f000 f81b 	bl	800ceee <USBD_GetNextDesc>
 800ceb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	d108      	bne.n	800ced4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d008      	beq.n	800cee2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	885b      	ldrh	r3, [r3, #2]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	897b      	ldrh	r3, [r7, #10]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d8e5      	bhi.n	800ceac <USBD_GetEpDesc+0x32>
 800cee0:	e000      	b.n	800cee4 <USBD_GetEpDesc+0x6a>
          break;
 800cee2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cee4:	693b      	ldr	r3, [r7, #16]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	881a      	ldrh	r2, [r3, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	4413      	add	r3, r2
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4413      	add	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf46:	8a3b      	ldrh	r3, [r7, #16]
 800cf48:	021b      	lsls	r3, r3, #8
 800cf4a:	b21a      	sxth	r2, r3
 800cf4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	b21b      	sxth	r3, r3
 800cf54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf56:	89fb      	ldrh	r3, [r7, #14]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	371c      	adds	r7, #28
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf7a:	2b40      	cmp	r3, #64	; 0x40
 800cf7c:	d005      	beq.n	800cf8a <USBD_StdDevReq+0x26>
 800cf7e:	2b40      	cmp	r3, #64	; 0x40
 800cf80:	d857      	bhi.n	800d032 <USBD_StdDevReq+0xce>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00f      	beq.n	800cfa6 <USBD_StdDevReq+0x42>
 800cf86:	2b20      	cmp	r3, #32
 800cf88:	d153      	bne.n	800d032 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	32ae      	adds	r2, #174	; 0xae
 800cf94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4798      	blx	r3
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa4:	e04a      	b.n	800d03c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	785b      	ldrb	r3, [r3, #1]
 800cfaa:	2b09      	cmp	r3, #9
 800cfac:	d83b      	bhi.n	800d026 <USBD_StdDevReq+0xc2>
 800cfae:	a201      	add	r2, pc, #4	; (adr r2, 800cfb4 <USBD_StdDevReq+0x50>)
 800cfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb4:	0800d009 	.word	0x0800d009
 800cfb8:	0800d01d 	.word	0x0800d01d
 800cfbc:	0800d027 	.word	0x0800d027
 800cfc0:	0800d013 	.word	0x0800d013
 800cfc4:	0800d027 	.word	0x0800d027
 800cfc8:	0800cfe7 	.word	0x0800cfe7
 800cfcc:	0800cfdd 	.word	0x0800cfdd
 800cfd0:	0800d027 	.word	0x0800d027
 800cfd4:	0800cfff 	.word	0x0800cfff
 800cfd8:	0800cff1 	.word	0x0800cff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa3c 	bl	800d45c <USBD_GetDescriptor>
          break;
 800cfe4:	e024      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fba1 	bl	800d730 <USBD_SetAddress>
          break;
 800cfee:	e01f      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fbe0 	bl	800d7b8 <USBD_SetConfig>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
          break;
 800cffc:	e018      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fc83 	bl	800d90c <USBD_GetConfig>
          break;
 800d006:	e013      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fcb4 	bl	800d978 <USBD_GetStatus>
          break;
 800d010:	e00e      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fce3 	bl	800d9e0 <USBD_SetFeature>
          break;
 800d01a:	e009      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fd07 	bl	800da32 <USBD_ClrFeature>
          break;
 800d024:	e004      	b.n	800d030 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fd5e 	bl	800daea <USBD_CtlError>
          break;
 800d02e:	bf00      	nop
      }
      break;
 800d030:	e004      	b.n	800d03c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fd58 	bl	800daea <USBD_CtlError>
      break;
 800d03a:	bf00      	nop
  }

  return ret;
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop

0800d048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d05e:	2b40      	cmp	r3, #64	; 0x40
 800d060:	d005      	beq.n	800d06e <USBD_StdItfReq+0x26>
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d852      	bhi.n	800d10c <USBD_StdItfReq+0xc4>
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <USBD_StdItfReq+0x26>
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d14e      	bne.n	800d10c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d074:	b2db      	uxtb	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d840      	bhi.n	800d0fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	889b      	ldrh	r3, [r3, #4]
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b01      	cmp	r3, #1
 800d084:	d836      	bhi.n	800d0f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	889b      	ldrh	r3, [r3, #4]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fed9 	bl	800ce46 <USBD_CoreFindIF>
 800d094:	4603      	mov	r3, r0
 800d096:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d098:	7bbb      	ldrb	r3, [r7, #14]
 800d09a:	2bff      	cmp	r3, #255	; 0xff
 800d09c:	d01d      	beq.n	800d0da <USBD_StdItfReq+0x92>
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11a      	bne.n	800d0da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d0a4:	7bba      	ldrb	r2, [r7, #14]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	32ae      	adds	r2, #174	; 0xae
 800d0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00f      	beq.n	800d0d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d0b4:	7bba      	ldrb	r2, [r7, #14]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0bc:	7bba      	ldrb	r2, [r7, #14]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	32ae      	adds	r2, #174	; 0xae
 800d0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	4798      	blx	r3
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0d2:	e004      	b.n	800d0de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0d8:	e001      	b.n	800d0de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	88db      	ldrh	r3, [r3, #6]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d110      	bne.n	800d108 <USBD_StdItfReq+0xc0>
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10d      	bne.n	800d108 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fdc7 	bl	800dc80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0f2:	e009      	b.n	800d108 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fcf7 	bl	800daea <USBD_CtlError>
          break;
 800d0fc:	e004      	b.n	800d108 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fcf2 	bl	800daea <USBD_CtlError>
          break;
 800d106:	e000      	b.n	800d10a <USBD_StdItfReq+0xc2>
          break;
 800d108:	bf00      	nop
      }
      break;
 800d10a:	e004      	b.n	800d116 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fceb 	bl	800daea <USBD_CtlError>
      break;
 800d114:	bf00      	nop
  }

  return ret;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	889b      	ldrh	r3, [r3, #4]
 800d132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d13c:	2b40      	cmp	r3, #64	; 0x40
 800d13e:	d007      	beq.n	800d150 <USBD_StdEPReq+0x30>
 800d140:	2b40      	cmp	r3, #64	; 0x40
 800d142:	f200 817f 	bhi.w	800d444 <USBD_StdEPReq+0x324>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d02a      	beq.n	800d1a0 <USBD_StdEPReq+0x80>
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	f040 817a 	bne.w	800d444 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff fe83 	bl	800ce60 <USBD_CoreFindEP>
 800d15a:	4603      	mov	r3, r0
 800d15c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d15e:	7b7b      	ldrb	r3, [r7, #13]
 800d160:	2bff      	cmp	r3, #255	; 0xff
 800d162:	f000 8174 	beq.w	800d44e <USBD_StdEPReq+0x32e>
 800d166:	7b7b      	ldrb	r3, [r7, #13]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f040 8170 	bne.w	800d44e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d16e:	7b7a      	ldrb	r2, [r7, #13]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d176:	7b7a      	ldrb	r2, [r7, #13]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	32ae      	adds	r2, #174	; 0xae
 800d17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 8163 	beq.w	800d44e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d188:	7b7a      	ldrb	r2, [r7, #13]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	32ae      	adds	r2, #174	; 0xae
 800d18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d19e:	e156      	b.n	800d44e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	785b      	ldrb	r3, [r3, #1]
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d008      	beq.n	800d1ba <USBD_StdEPReq+0x9a>
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	f300 8145 	bgt.w	800d438 <USBD_StdEPReq+0x318>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 809b 	beq.w	800d2ea <USBD_StdEPReq+0x1ca>
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d03c      	beq.n	800d232 <USBD_StdEPReq+0x112>
 800d1b8:	e13e      	b.n	800d438 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d002      	beq.n	800d1cc <USBD_StdEPReq+0xac>
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d016      	beq.n	800d1f8 <USBD_StdEPReq+0xd8>
 800d1ca:	e02c      	b.n	800d226 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00d      	beq.n	800d1ee <USBD_StdEPReq+0xce>
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	2b80      	cmp	r3, #128	; 0x80
 800d1d6:	d00a      	beq.n	800d1ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f002 ff5b 	bl	8010098 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1e2:	2180      	movs	r1, #128	; 0x80
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f002 ff57 	bl	8010098 <USBD_LL_StallEP>
 800d1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1ec:	e020      	b.n	800d230 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fc7a 	bl	800daea <USBD_CtlError>
              break;
 800d1f6:	e01b      	b.n	800d230 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10e      	bne.n	800d21e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00b      	beq.n	800d21e <USBD_StdEPReq+0xfe>
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	2b80      	cmp	r3, #128	; 0x80
 800d20a:	d008      	beq.n	800d21e <USBD_StdEPReq+0xfe>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	88db      	ldrh	r3, [r3, #6]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d104      	bne.n	800d21e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d214:	7bbb      	ldrb	r3, [r7, #14]
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f002 ff3d 	bl	8010098 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fd2e 	bl	800dc80 <USBD_CtlSendStatus>

              break;
 800d224:	e004      	b.n	800d230 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fc5e 	bl	800daea <USBD_CtlError>
              break;
 800d22e:	bf00      	nop
          }
          break;
 800d230:	e107      	b.n	800d442 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d002      	beq.n	800d244 <USBD_StdEPReq+0x124>
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d016      	beq.n	800d270 <USBD_StdEPReq+0x150>
 800d242:	e04b      	b.n	800d2dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d244:	7bbb      	ldrb	r3, [r7, #14]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00d      	beq.n	800d266 <USBD_StdEPReq+0x146>
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
 800d24c:	2b80      	cmp	r3, #128	; 0x80
 800d24e:	d00a      	beq.n	800d266 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f002 ff1f 	bl	8010098 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d25a:	2180      	movs	r1, #128	; 0x80
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f002 ff1b 	bl	8010098 <USBD_LL_StallEP>
 800d262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d264:	e040      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fc3e 	bl	800daea <USBD_CtlError>
              break;
 800d26e:	e03b      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	885b      	ldrh	r3, [r3, #2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d136      	bne.n	800d2e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d004      	beq.n	800d28c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	4619      	mov	r1, r3
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f002 ff25 	bl	80100d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fcf7 	bl	800dc80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d292:	7bbb      	ldrb	r3, [r7, #14]
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fde2 	bl	800ce60 <USBD_CoreFindEP>
 800d29c:	4603      	mov	r3, r0
 800d29e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2a0:	7b7b      	ldrb	r3, [r7, #13]
 800d2a2:	2bff      	cmp	r3, #255	; 0xff
 800d2a4:	d01f      	beq.n	800d2e6 <USBD_StdEPReq+0x1c6>
 800d2a6:	7b7b      	ldrb	r3, [r7, #13]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d11c      	bne.n	800d2e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d2ac:	7b7a      	ldrb	r2, [r7, #13]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d2b4:	7b7a      	ldrb	r2, [r7, #13]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	32ae      	adds	r2, #174	; 0xae
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d010      	beq.n	800d2e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2c4:	7b7a      	ldrb	r2, [r7, #13]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	32ae      	adds	r2, #174	; 0xae
 800d2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2da:	e004      	b.n	800d2e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fc03 	bl	800daea <USBD_CtlError>
              break;
 800d2e4:	e000      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>
              break;
 800d2e6:	bf00      	nop
          }
          break;
 800d2e8:	e0ab      	b.n	800d442 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d002      	beq.n	800d2fc <USBD_StdEPReq+0x1dc>
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d032      	beq.n	800d360 <USBD_StdEPReq+0x240>
 800d2fa:	e097      	b.n	800d42c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d007      	beq.n	800d312 <USBD_StdEPReq+0x1f2>
 800d302:	7bbb      	ldrb	r3, [r7, #14]
 800d304:	2b80      	cmp	r3, #128	; 0x80
 800d306:	d004      	beq.n	800d312 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fbed 	bl	800daea <USBD_CtlError>
                break;
 800d310:	e091      	b.n	800d436 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d316:	2b00      	cmp	r3, #0
 800d318:	da0b      	bge.n	800d332 <USBD_StdEPReq+0x212>
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	3310      	adds	r3, #16
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	4413      	add	r3, r2
 800d32e:	3304      	adds	r3, #4
 800d330:	e00b      	b.n	800d34a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	4413      	add	r3, r2
 800d348:	3304      	adds	r3, #4
 800d34a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2200      	movs	r2, #0
 800d350:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2202      	movs	r2, #2
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fc37 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d35e:	e06a      	b.n	800d436 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d364:	2b00      	cmp	r3, #0
 800d366:	da11      	bge.n	800d38c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d368:	7bbb      	ldrb	r3, [r7, #14]
 800d36a:	f003 020f 	and.w	r2, r3, #15
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	4613      	mov	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	440b      	add	r3, r1
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d117      	bne.n	800d3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fbb0 	bl	800daea <USBD_CtlError>
                  break;
 800d38a:	e054      	b.n	800d436 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	f003 020f 	and.w	r2, r3, #15
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d104      	bne.n	800d3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fb9d 	bl	800daea <USBD_CtlError>
                  break;
 800d3b0:	e041      	b.n	800d436 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da0b      	bge.n	800d3d2 <USBD_StdEPReq+0x2b2>
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	3310      	adds	r3, #16
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	e00b      	b.n	800d3ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <USBD_StdEPReq+0x2d8>
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b80      	cmp	r3, #128	; 0x80
 800d3f6:	d103      	bne.n	800d400 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	e00e      	b.n	800d41e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f002 fe85 	bl	8010114 <USBD_LL_IsStallEP>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2201      	movs	r2, #1
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e002      	b.n	800d41e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2202      	movs	r2, #2
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fbd1 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d42a:	e004      	b.n	800d436 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fb5b 	bl	800daea <USBD_CtlError>
              break;
 800d434:	bf00      	nop
          }
          break;
 800d436:	e004      	b.n	800d442 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fb55 	bl	800daea <USBD_CtlError>
          break;
 800d440:	bf00      	nop
      }
      break;
 800d442:	e005      	b.n	800d450 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb4f 	bl	800daea <USBD_CtlError>
      break;
 800d44c:	e000      	b.n	800d450 <USBD_StdEPReq+0x330>
      break;
 800d44e:	bf00      	nop
  }

  return ret;
 800d450:	7bfb      	ldrb	r3, [r7, #15]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d466:	2300      	movs	r3, #0
 800d468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	885b      	ldrh	r3, [r3, #2]
 800d476:	0a1b      	lsrs	r3, r3, #8
 800d478:	b29b      	uxth	r3, r3
 800d47a:	3b01      	subs	r3, #1
 800d47c:	2b06      	cmp	r3, #6
 800d47e:	f200 8128 	bhi.w	800d6d2 <USBD_GetDescriptor+0x276>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <USBD_GetDescriptor+0x2c>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4bd 	.word	0x0800d4bd
 800d490:	0800d4fd 	.word	0x0800d4fd
 800d494:	0800d6d3 	.word	0x0800d6d3
 800d498:	0800d6d3 	.word	0x0800d6d3
 800d49c:	0800d673 	.word	0x0800d673
 800d4a0:	0800d69f 	.word	0x0800d69f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7c12      	ldrb	r2, [r2, #16]
 800d4b0:	f107 0108 	add.w	r1, r7, #8
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
 800d4b8:	60f8      	str	r0, [r7, #12]
      break;
 800d4ba:	e112      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7c1b      	ldrb	r3, [r3, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10d      	bne.n	800d4e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4cc:	f107 0208 	add.w	r2, r7, #8
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4798      	blx	r3
 800d4d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	2202      	movs	r2, #2
 800d4dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4de:	e100      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	f107 0208 	add.w	r2, r7, #8
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	701a      	strb	r2, [r3, #0]
      break;
 800d4fa:	e0f2      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	885b      	ldrh	r3, [r3, #2]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b05      	cmp	r3, #5
 800d504:	f200 80ac 	bhi.w	800d660 <USBD_GetDescriptor+0x204>
 800d508:	a201      	add	r2, pc, #4	; (adr r2, 800d510 <USBD_GetDescriptor+0xb4>)
 800d50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50e:	bf00      	nop
 800d510:	0800d529 	.word	0x0800d529
 800d514:	0800d55d 	.word	0x0800d55d
 800d518:	0800d591 	.word	0x0800d591
 800d51c:	0800d5c5 	.word	0x0800d5c5
 800d520:	0800d5f9 	.word	0x0800d5f9
 800d524:	0800d62d 	.word	0x0800d62d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	7c12      	ldrb	r2, [r2, #16]
 800d540:	f107 0108 	add.w	r1, r7, #8
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
 800d548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d54a:	e091      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 facb 	bl	800daea <USBD_CtlError>
            err++;
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	3301      	adds	r3, #1
 800d558:	72fb      	strb	r3, [r7, #11]
          break;
 800d55a:	e089      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	7c12      	ldrb	r2, [r2, #16]
 800d574:	f107 0108 	add.w	r1, r7, #8
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3
 800d57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d57e:	e077      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fab1 	bl	800daea <USBD_CtlError>
            err++;
 800d588:	7afb      	ldrb	r3, [r7, #11]
 800d58a:	3301      	adds	r3, #1
 800d58c:	72fb      	strb	r3, [r7, #11]
          break;
 800d58e:	e06f      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	7c12      	ldrb	r2, [r2, #16]
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5b2:	e05d      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fa97 	bl	800daea <USBD_CtlError>
            err++;
 800d5bc:	7afb      	ldrb	r3, [r7, #11]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5c2:	e055      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	7c12      	ldrb	r2, [r2, #16]
 800d5dc:	f107 0108 	add.w	r1, r7, #8
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	4798      	blx	r3
 800d5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5e6:	e043      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fa7d 	bl	800daea <USBD_CtlError>
            err++;
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5f6:	e03b      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5fe:	695b      	ldr	r3, [r3, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	7c12      	ldrb	r2, [r2, #16]
 800d610:	f107 0108 	add.w	r1, r7, #8
 800d614:	4610      	mov	r0, r2
 800d616:	4798      	blx	r3
 800d618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d61a:	e029      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa63 	bl	800daea <USBD_CtlError>
            err++;
 800d624:	7afb      	ldrb	r3, [r7, #11]
 800d626:	3301      	adds	r3, #1
 800d628:	72fb      	strb	r3, [r7, #11]
          break;
 800d62a:	e021      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00b      	beq.n	800d650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	7c12      	ldrb	r2, [r2, #16]
 800d644:	f107 0108 	add.w	r1, r7, #8
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64e:	e00f      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fa49 	bl	800daea <USBD_CtlError>
            err++;
 800d658:	7afb      	ldrb	r3, [r7, #11]
 800d65a:	3301      	adds	r3, #1
 800d65c:	72fb      	strb	r3, [r7, #11]
          break;
 800d65e:	e007      	b.n	800d670 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d660:	6839      	ldr	r1, [r7, #0]
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa41 	bl	800daea <USBD_CtlError>
          err++;
 800d668:	7afb      	ldrb	r3, [r7, #11]
 800d66a:	3301      	adds	r3, #1
 800d66c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d66e:	bf00      	nop
      }
      break;
 800d670:	e037      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7c1b      	ldrb	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d109      	bne.n	800d68e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d682:	f107 0208 	add.w	r2, r7, #8
 800d686:	4610      	mov	r0, r2
 800d688:	4798      	blx	r3
 800d68a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d68c:	e029      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fa2a 	bl	800daea <USBD_CtlError>
        err++;
 800d696:	7afb      	ldrb	r3, [r7, #11]
 800d698:	3301      	adds	r3, #1
 800d69a:	72fb      	strb	r3, [r7, #11]
      break;
 800d69c:	e021      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7c1b      	ldrb	r3, [r3, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10d      	bne.n	800d6c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	f107 0208 	add.w	r2, r7, #8
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	4798      	blx	r3
 800d6b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	2207      	movs	r2, #7
 800d6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6c0:	e00f      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6c2:	6839      	ldr	r1, [r7, #0]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fa10 	bl	800daea <USBD_CtlError>
        err++;
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d6d0:	e007      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fa08 	bl	800daea <USBD_CtlError>
      err++;
 800d6da:	7afb      	ldrb	r3, [r7, #11]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	72fb      	strb	r3, [r7, #11]
      break;
 800d6e0:	bf00      	nop
  }

  if (err != 0U)
 800d6e2:	7afb      	ldrb	r3, [r7, #11]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d11e      	bne.n	800d726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	88db      	ldrh	r3, [r3, #6]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d016      	beq.n	800d71e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d6f0:	893b      	ldrh	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00e      	beq.n	800d714 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	88da      	ldrh	r2, [r3, #6]
 800d6fa:	893b      	ldrh	r3, [r7, #8]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	bf28      	it	cs
 800d700:	4613      	movcs	r3, r2
 800d702:	b29b      	uxth	r3, r3
 800d704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d706:	893b      	ldrh	r3, [r7, #8]
 800d708:	461a      	mov	r2, r3
 800d70a:	68f9      	ldr	r1, [r7, #12]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fa5d 	bl	800dbcc <USBD_CtlSendData>
 800d712:	e009      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f9e7 	bl	800daea <USBD_CtlError>
 800d71c:	e004      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 faae 	bl	800dc80 <USBD_CtlSendStatus>
 800d724:	e000      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    return;
 800d726:	bf00      	nop
  }
}
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop

0800d730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	889b      	ldrh	r3, [r3, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d131      	bne.n	800d7a6 <USBD_SetAddress+0x76>
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	88db      	ldrh	r3, [r3, #6]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d12d      	bne.n	800d7a6 <USBD_SetAddress+0x76>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	885b      	ldrh	r3, [r3, #2]
 800d74e:	2b7f      	cmp	r3, #127	; 0x7f
 800d750:	d829      	bhi.n	800d7a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	885b      	ldrh	r3, [r3, #2]
 800d756:	b2db      	uxtb	r3, r3
 800d758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	2b03      	cmp	r3, #3
 800d768:	d104      	bne.n	800d774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f9bc 	bl	800daea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d772:	e01d      	b.n	800d7b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7bfa      	ldrb	r2, [r7, #15]
 800d778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f002 fcf3 	bl	801016c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fa7a 	bl	800dc80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d004      	beq.n	800d79c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79a:	e009      	b.n	800d7b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a4:	e004      	b.n	800d7b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f99e 	bl	800daea <USBD_CtlError>
  }
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	4b4e      	ldr	r3, [pc, #312]	; (800d908 <USBD_SetConfig+0x150>)
 800d7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7d0:	4b4d      	ldr	r3, [pc, #308]	; (800d908 <USBD_SetConfig+0x150>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d905      	bls.n	800d7e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f985 	bl	800daea <USBD_CtlError>
    return USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e08c      	b.n	800d8fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d002      	beq.n	800d7f6 <USBD_SetConfig+0x3e>
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d029      	beq.n	800d848 <USBD_SetConfig+0x90>
 800d7f4:	e075      	b.n	800d8e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7f6:	4b44      	ldr	r3, [pc, #272]	; (800d908 <USBD_SetConfig+0x150>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d020      	beq.n	800d840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7fe:	4b42      	ldr	r3, [pc, #264]	; (800d908 <USBD_SetConfig+0x150>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d808:	4b3f      	ldr	r3, [pc, #252]	; (800d908 <USBD_SetConfig+0x150>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fe ffe1 	bl	800c7d6 <USBD_SetClassConfig>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d008      	beq.n	800d830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f962 	bl	800daea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2202      	movs	r2, #2
 800d82a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d82e:	e065      	b.n	800d8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fa25 	bl	800dc80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2203      	movs	r2, #3
 800d83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d83e:	e05d      	b.n	800d8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 fa1d 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d846:	e059      	b.n	800d8fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d848:	4b2f      	ldr	r3, [pc, #188]	; (800d908 <USBD_SetConfig+0x150>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d112      	bne.n	800d876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d858:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <USBD_SetConfig+0x150>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	461a      	mov	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d862:	4b29      	ldr	r3, [pc, #164]	; (800d908 <USBD_SetConfig+0x150>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7fe ffd0 	bl	800c80e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fa06 	bl	800dc80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d874:	e042      	b.n	800d8fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d876:	4b24      	ldr	r3, [pc, #144]	; (800d908 <USBD_SetConfig+0x150>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d02a      	beq.n	800d8da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7fe ffbe 	bl	800c80e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d892:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <USBD_SetConfig+0x150>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d89c:	4b1a      	ldr	r3, [pc, #104]	; (800d908 <USBD_SetConfig+0x150>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fe ff97 	bl	800c7d6 <USBD_SetClassConfig>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00f      	beq.n	800d8d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f918 	bl	800daea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fe ffa3 	bl	800c80e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8d0:	e014      	b.n	800d8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f9d4 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8d8:	e010      	b.n	800d8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f9d0 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8e0:	e00c      	b.n	800d8fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f900 	bl	800daea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8ea:	4b07      	ldr	r3, [pc, #28]	; (800d908 <USBD_SetConfig+0x150>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7fe ff8c 	bl	800c80e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8fa:	bf00      	nop
  }

  return ret;
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20001fb0 	.word	0x20001fb0

0800d90c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	88db      	ldrh	r3, [r3, #6]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d004      	beq.n	800d928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f8e2 	bl	800daea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d926:	e023      	b.n	800d970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b02      	cmp	r3, #2
 800d932:	dc02      	bgt.n	800d93a <USBD_GetConfig+0x2e>
 800d934:	2b00      	cmp	r3, #0
 800d936:	dc03      	bgt.n	800d940 <USBD_GetConfig+0x34>
 800d938:	e015      	b.n	800d966 <USBD_GetConfig+0x5a>
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d00b      	beq.n	800d956 <USBD_GetConfig+0x4a>
 800d93e:	e012      	b.n	800d966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3308      	adds	r3, #8
 800d94a:	2201      	movs	r2, #1
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f93c 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d954:	e00c      	b.n	800d970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3304      	adds	r3, #4
 800d95a:	2201      	movs	r2, #1
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f934 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d964:	e004      	b.n	800d970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f8be 	bl	800daea <USBD_CtlError>
        break;
 800d96e:	bf00      	nop
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	3b01      	subs	r3, #1
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d81e      	bhi.n	800d9ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	88db      	ldrh	r3, [r3, #6]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d004      	beq.n	800d9a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f8a5 	bl	800daea <USBD_CtlError>
        break;
 800d9a0:	e01a      	b.n	800d9d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d005      	beq.n	800d9be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	f043 0202 	orr.w	r2, r3, #2
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	330c      	adds	r3, #12
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f900 	bl	800dbcc <USBD_CtlSendData>
      break;
 800d9cc:	e004      	b.n	800d9d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f88a 	bl	800daea <USBD_CtlError>
      break;
 800d9d6:	bf00      	nop
  }
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d107      	bne.n	800da02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f940 	bl	800dc80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da00:	e013      	b.n	800da2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	2b02      	cmp	r3, #2
 800da08:	d10b      	bne.n	800da22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	889b      	ldrh	r3, [r3, #4]
 800da0e:	0a1b      	lsrs	r3, r3, #8
 800da10:	b29b      	uxth	r3, r3
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f930 	bl	800dc80 <USBD_CtlSendStatus>
}
 800da20:	e003      	b.n	800da2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 f860 	bl	800daea <USBD_CtlError>
}
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b082      	sub	sp, #8
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da42:	b2db      	uxtb	r3, r3
 800da44:	3b01      	subs	r3, #1
 800da46:	2b02      	cmp	r3, #2
 800da48:	d80b      	bhi.n	800da62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	885b      	ldrh	r3, [r3, #2]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d10c      	bne.n	800da6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f910 	bl	800dc80 <USBD_CtlSendStatus>
      }
      break;
 800da60:	e004      	b.n	800da6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f840 	bl	800daea <USBD_CtlError>
      break;
 800da6a:	e000      	b.n	800da6e <USBD_ClrFeature+0x3c>
      break;
 800da6c:	bf00      	nop
  }
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3301      	adds	r3, #1
 800da90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3301      	adds	r3, #1
 800da9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fa41 	bl	800cf28 <SWAPBYTE>
 800daa6:	4603      	mov	r3, r0
 800daa8:	461a      	mov	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3301      	adds	r3, #1
 800dab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff fa34 	bl	800cf28 <SWAPBYTE>
 800dac0:	4603      	mov	r3, r0
 800dac2:	461a      	mov	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3301      	adds	r3, #1
 800dacc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff fa27 	bl	800cf28 <SWAPBYTE>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	80da      	strh	r2, [r3, #6]
}
 800dae2:	bf00      	nop
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b082      	sub	sp, #8
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800daf4:	2180      	movs	r1, #128	; 0x80
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f002 face 	bl	8010098 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dafc:	2100      	movs	r1, #0
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f002 faca 	bl	8010098 <USBD_LL_StallEP>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d036      	beq.n	800db90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f000 f836 	bl	800db98 <USBD_GetLen>
 800db2c:	4603      	mov	r3, r0
 800db2e:	3301      	adds	r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	005b      	lsls	r3, r3, #1
 800db34:	b29a      	uxth	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	4413      	add	r3, r2
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	7812      	ldrb	r2, [r2, #0]
 800db44:	701a      	strb	r2, [r3, #0]
  idx++;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	3301      	adds	r3, #1
 800db4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	2203      	movs	r2, #3
 800db54:	701a      	strb	r2, [r3, #0]
  idx++;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	3301      	adds	r3, #1
 800db5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db5c:	e013      	b.n	800db86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	4413      	add	r3, r2
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	7812      	ldrb	r2, [r2, #0]
 800db68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	3301      	adds	r3, #1
 800db6e:	613b      	str	r3, [r7, #16]
    idx++;
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	3301      	adds	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db76:	7dfb      	ldrb	r3, [r7, #23]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	4413      	add	r3, r2
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	3301      	adds	r3, #1
 800db84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e7      	bne.n	800db5e <USBD_GetString+0x52>
 800db8e:	e000      	b.n	800db92 <USBD_GetString+0x86>
    return;
 800db90:	bf00      	nop
  }
}
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dba8:	e005      	b.n	800dbb6 <USBD_GetLen+0x1e>
  {
    len++;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	3301      	adds	r3, #1
 800dbae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1f5      	bne.n	800dbaa <USBD_GetLen+0x12>
  }

  return len;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f002 fad9 	bl	80101aa <USBD_LL_Transmit>

  return USBD_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	2100      	movs	r1, #0
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f002 fac8 	bl	80101aa <USBD_LL_Transmit>

  return USBD_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2203      	movs	r2, #3
 800dc34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f002 facc 	bl	80101ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	2100      	movs	r1, #0
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f002 fabb 	bl	80101ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc90:	2300      	movs	r3, #0
 800dc92:	2200      	movs	r2, #0
 800dc94:	2100      	movs	r1, #0
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f002 fa87 	bl	80101aa <USBD_LL_Transmit>

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2100      	movs	r1, #0
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f002 fa95 	bl	80101ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dcda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dcde:	2b84      	cmp	r3, #132	; 0x84
 800dce0:	d005      	beq.n	800dcee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dce2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	3303      	adds	r3, #3
 800dcec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dcee:	68fb      	ldr	r3, [r7, #12]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd02:	f3ef 8305 	mrs	r3, IPSR
 800dd06:	607b      	str	r3, [r7, #4]
  return(result);
 800dd08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bf14      	ite	ne
 800dd0e:	2301      	movne	r3, #1
 800dd10:	2300      	moveq	r3, #0
 800dd12:	b2db      	uxtb	r3, r3
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dd24:	f000 fba8 	bl	800e478 <vTaskStartScheduler>
  
  return osOK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dd32:	f7ff ffe3 	bl	800dcfc <inHandlerMode>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d003      	beq.n	800dd44 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dd3c:	f000 fca6 	bl	800e68c <xTaskGetTickCountFromISR>
 800dd40:	4603      	mov	r3, r0
 800dd42:	e002      	b.n	800dd4a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dd44:	f000 fc92 	bl	800e66c <xTaskGetTickCount>
 800dd48:	4603      	mov	r3, r0
  }
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd50:	b087      	sub	sp, #28
 800dd52:	af02      	add	r7, sp, #8
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685c      	ldr	r4, [r3, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd64:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff ffad 	bl	800dccc <makeFreeRtosPriority>
 800dd72:	4602      	mov	r2, r0
 800dd74:	f107 030c 	add.w	r3, r7, #12
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	9200      	str	r2, [sp, #0]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	4632      	mov	r2, r6
 800dd80:	4629      	mov	r1, r5
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f974 	bl	800e070 <xTaskCreate>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d001      	beq.n	800dd92 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e000      	b.n	800dd94 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800dd92:	68fb      	ldr	r3, [r7, #12]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3714      	adds	r7, #20
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <osDelay+0x16>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	e000      	b.n	800ddb4 <osDelay+0x18>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f000 fb2b 	bl	800e410 <vTaskDelay>
  
  return osOK;
 800ddba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800ddd6:	f7ff ff91 	bl	800dcfc <inHandlerMode>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d01c      	beq.n	800de1a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	f107 0208 	add.w	r2, r7, #8
 800dde6:	f107 030c 	add.w	r3, r7, #12
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	4613      	mov	r3, r2
 800ddee:	2201      	movs	r2, #1
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 ff77 	bl	800ece4 <xTaskGenericNotifyFromISR>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d002      	beq.n	800de02 <osSignalSet+0x3e>
      return 0x80000000;
 800ddfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de00:	e019      	b.n	800de36 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d015      	beq.n	800de34 <osSignalSet+0x70>
 800de08:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <osSignalSet+0x7c>)
 800de0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	e00c      	b.n	800de34 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	f107 0308 	add.w	r3, r7, #8
 800de20:	2201      	movs	r2, #1
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fea0 	bl	800eb68 <xTaskGenericNotify>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d002      	beq.n	800de34 <osSignalSet+0x70>
    return 0x80000000;
 800de2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de32:	e000      	b.n	800de36 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800de34:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	e000ed04 	.word	0xe000ed04

0800de44 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800de44:	b590      	push	{r4, r7, lr}
 800de46:	b089      	sub	sp, #36	; 0x24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de5e:	d103      	bne.n	800de68 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800de60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de64:	61fb      	str	r3, [r7, #28]
 800de66:	e009      	b.n	800de7c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d006      	beq.n	800de7c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <osSignalWait+0x38>
      ticks = 1;
 800de78:	2301      	movs	r3, #1
 800de7a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800de7c:	f7ff ff3e 	bl	800dcfc <inHandlerMode>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800de86:	2382      	movs	r3, #130	; 0x82
 800de88:	613b      	str	r3, [r7, #16]
 800de8a:	e01b      	b.n	800dec4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800de8c:	68b9      	ldr	r1, [r7, #8]
 800de8e:	f107 0310 	add.w	r3, r7, #16
 800de92:	1d1a      	adds	r2, r3, #4
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	2000      	movs	r0, #0
 800de98:	f000 fe06 	bl	800eaa8 <xTaskNotifyWait>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d008      	beq.n	800deb4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <osSignalWait+0x6a>
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]
 800deac:	e00a      	b.n	800dec4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800deae:	2340      	movs	r3, #64	; 0x40
 800deb0:	613b      	str	r3, [r7, #16]
 800deb2:	e007      	b.n	800dec4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	da02      	bge.n	800dec0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800deba:	2386      	movs	r3, #134	; 0x86
 800debc:	613b      	str	r3, [r7, #16]
 800debe:	e001      	b.n	800dec4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800dec0:	2308      	movs	r3, #8
 800dec2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	461c      	mov	r4, r3
 800dec8:	f107 0310 	add.w	r3, r7, #16
 800decc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ded0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	3724      	adds	r7, #36	; 0x24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd90      	pop	{r4, r7, pc}

0800dedc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <osDelayUntil+0x18>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	e000      	b.n	800def6 <osDelayUntil+0x1a>
 800def4:	2301      	movs	r3, #1
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fa0b 	bl	800e314 <vTaskDelayUntil>
  
  return osOK;
 800defe:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 0208 	add.w	r2, r3, #8
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f103 0208 	add.w	r2, r3, #8
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f103 0208 	add.w	r2, r3, #8
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df56:	bf00      	nop
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df62:	b480      	push	{r7}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	689a      	ldr	r2, [r3, #8]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	601a      	str	r2, [r3, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfc0:	d103      	bne.n	800dfca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	e00c      	b.n	800dfe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	e002      	b.n	800dfd8 <vListInsert+0x2e>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d2f6      	bcs.n	800dfd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	6892      	ldr	r2, [r2, #8]
 800e032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	6852      	ldr	r2, [r2, #4]
 800e03c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	429a      	cmp	r2, r3
 800e046:	d103      	bne.n	800e050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08c      	sub	sp, #48	; 0x30
 800e074:	af04      	add	r7, sp, #16
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	603b      	str	r3, [r7, #0]
 800e07c:	4613      	mov	r3, r2
 800e07e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e080:	88fb      	ldrh	r3, [r7, #6]
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4618      	mov	r0, r3
 800e086:	f001 f9c7 	bl	800f418 <pvPortMalloc>
 800e08a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00e      	beq.n	800e0b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e092:	20a0      	movs	r0, #160	; 0xa0
 800e094:	f001 f9c0 	bl	800f418 <pvPortMalloc>
 800e098:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d003      	beq.n	800e0a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	631a      	str	r2, [r3, #48]	; 0x30
 800e0a6:	e005      	b.n	800e0b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0a8:	6978      	ldr	r0, [r7, #20]
 800e0aa:	f001 fa85 	bl	800f5b8 <vPortFree>
 800e0ae:	e001      	b.n	800e0b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d013      	beq.n	800e0e2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0ba:	88fa      	ldrh	r2, [r7, #6]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9303      	str	r3, [sp, #12]
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	9302      	str	r3, [sp, #8]
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	68b9      	ldr	r1, [r7, #8]
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 f80f 	bl	800e0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d6:	69f8      	ldr	r0, [r7, #28]
 800e0d8:	f000 f8b2 	bl	800e240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	61bb      	str	r3, [r7, #24]
 800e0e0:	e002      	b.n	800e0e8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3720      	adds	r7, #32
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	461a      	mov	r2, r3
 800e10c:	21a5      	movs	r1, #165	; 0xa5
 800e10e:	f004 f8ea 	bl	80122e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e11c:	3b01      	subs	r3, #1
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	f023 0307 	bic.w	r3, r3, #7
 800e12a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d01f      	beq.n	800e192 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e152:	2300      	movs	r3, #0
 800e154:	61fb      	str	r3, [r7, #28]
 800e156:	e012      	b.n	800e17e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	4413      	add	r3, r2
 800e15e:	7819      	ldrb	r1, [r3, #0]
 800e160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	4413      	add	r3, r2
 800e166:	3334      	adds	r3, #52	; 0x34
 800e168:	460a      	mov	r2, r1
 800e16a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	4413      	add	r3, r2
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d006      	beq.n	800e186 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	3301      	adds	r3, #1
 800e17c:	61fb      	str	r3, [r7, #28]
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b0f      	cmp	r3, #15
 800e182:	d9e9      	bls.n	800e158 <prvInitialiseNewTask+0x64>
 800e184:	e000      	b.n	800e188 <prvInitialiseNewTask+0x94>
			{
				break;
 800e186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e190:	e003      	b.n	800e19a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	2200      	movs	r2, #0
 800e196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	2b06      	cmp	r3, #6
 800e19e:	d901      	bls.n	800e1a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1a0:	2306      	movs	r3, #6
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff fec4 	bl	800df48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c2:	3318      	adds	r3, #24
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7ff febf 	bl	800df48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d2:	f1c3 0207 	rsb	r2, r3, #7
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	334c      	adds	r3, #76	; 0x4c
 800e1f4:	224c      	movs	r2, #76	; 0x4c
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f004 f874 	bl	80122e6 <memset>
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	4a0c      	ldr	r2, [pc, #48]	; (800e234 <prvInitialiseNewTask+0x140>)
 800e202:	651a      	str	r2, [r3, #80]	; 0x50
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	4a0c      	ldr	r2, [pc, #48]	; (800e238 <prvInitialiseNewTask+0x144>)
 800e208:	655a      	str	r2, [r3, #84]	; 0x54
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	4a0b      	ldr	r2, [pc, #44]	; (800e23c <prvInitialiseNewTask+0x148>)
 800e20e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	68f9      	ldr	r1, [r7, #12]
 800e214:	69b8      	ldr	r0, [r7, #24]
 800e216:	f000 feaf 	bl	800ef78 <pxPortInitialiseStack>
 800e21a:	4602      	mov	r2, r0
 800e21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e22a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e22c:	bf00      	nop
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20017220 	.word	0x20017220
 800e238:	20017288 	.word	0x20017288
 800e23c:	200172f0 	.word	0x200172f0

0800e240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e248:	f000 ffc4 	bl	800f1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e24c:	4b2a      	ldr	r3, [pc, #168]	; (800e2f8 <prvAddNewTaskToReadyList+0xb8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	4a29      	ldr	r2, [pc, #164]	; (800e2f8 <prvAddNewTaskToReadyList+0xb8>)
 800e254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e256:	4b29      	ldr	r3, [pc, #164]	; (800e2fc <prvAddNewTaskToReadyList+0xbc>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d109      	bne.n	800e272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e25e:	4a27      	ldr	r2, [pc, #156]	; (800e2fc <prvAddNewTaskToReadyList+0xbc>)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e264:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <prvAddNewTaskToReadyList+0xb8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d110      	bne.n	800e28e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e26c:	f000 fb78 	bl	800e960 <prvInitialiseTaskLists>
 800e270:	e00d      	b.n	800e28e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e272:	4b23      	ldr	r3, [pc, #140]	; (800e300 <prvAddNewTaskToReadyList+0xc0>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d109      	bne.n	800e28e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e27a:	4b20      	ldr	r3, [pc, #128]	; (800e2fc <prvAddNewTaskToReadyList+0xbc>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	429a      	cmp	r2, r3
 800e286:	d802      	bhi.n	800e28e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e288:	4a1c      	ldr	r2, [pc, #112]	; (800e2fc <prvAddNewTaskToReadyList+0xbc>)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e28e:	4b1d      	ldr	r3, [pc, #116]	; (800e304 <prvAddNewTaskToReadyList+0xc4>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3301      	adds	r3, #1
 800e294:	4a1b      	ldr	r2, [pc, #108]	; (800e304 <prvAddNewTaskToReadyList+0xc4>)
 800e296:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	2201      	movs	r2, #1
 800e29e:	409a      	lsls	r2, r3
 800e2a0:	4b19      	ldr	r3, [pc, #100]	; (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	4a18      	ldr	r2, [pc, #96]	; (800e308 <prvAddNewTaskToReadyList+0xc8>)
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4a15      	ldr	r2, [pc, #84]	; (800e30c <prvAddNewTaskToReadyList+0xcc>)
 800e2b8:	441a      	add	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7ff fe4e 	bl	800df62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2c6:	f000 ffb5 	bl	800f234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <prvAddNewTaskToReadyList+0xc0>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00e      	beq.n	800e2f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2d2:	4b0a      	ldr	r3, [pc, #40]	; (800e2fc <prvAddNewTaskToReadyList+0xbc>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d207      	bcs.n	800e2f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <prvAddNewTaskToReadyList+0xd0>)
 800e2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2e6:	601a      	str	r2, [r3, #0]
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	200020b4 	.word	0x200020b4
 800e2fc:	20001fb4 	.word	0x20001fb4
 800e300:	200020c0 	.word	0x200020c0
 800e304:	200020d0 	.word	0x200020d0
 800e308:	200020bc 	.word	0x200020bc
 800e30c:	20001fb8 	.word	0x20001fb8
 800e310:	e000ed04 	.word	0xe000ed04

0800e314 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e314:	b580      	push	{r7, lr}
 800e316:	b08a      	sub	sp, #40	; 0x28
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e31e:	2300      	movs	r3, #0
 800e320:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	617b      	str	r3, [r7, #20]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10a      	bne.n	800e35a <vTaskDelayUntil+0x46>
	__asm volatile
 800e344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e348:	f383 8811 	msr	BASEPRI, r3
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	613b      	str	r3, [r7, #16]
}
 800e356:	bf00      	nop
 800e358:	e7fe      	b.n	800e358 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e35a:	4b2a      	ldr	r3, [pc, #168]	; (800e404 <vTaskDelayUntil+0xf0>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00a      	beq.n	800e378 <vTaskDelayUntil+0x64>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	60fb      	str	r3, [r7, #12]
}
 800e374:	bf00      	nop
 800e376:	e7fe      	b.n	800e376 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e378:	f000 f8ce 	bl	800e518 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e37c:	4b22      	ldr	r3, [pc, #136]	; (800e408 <vTaskDelayUntil+0xf4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	4413      	add	r3, r2
 800e38a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6a3a      	ldr	r2, [r7, #32]
 800e392:	429a      	cmp	r2, r3
 800e394:	d20b      	bcs.n	800e3ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	69fa      	ldr	r2, [r7, #28]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d211      	bcs.n	800e3c4 <vTaskDelayUntil+0xb0>
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	6a3b      	ldr	r3, [r7, #32]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d90d      	bls.n	800e3c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ac:	e00a      	b.n	800e3c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	69fa      	ldr	r2, [r7, #28]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d303      	bcc.n	800e3c0 <vTaskDelayUntil+0xac>
 800e3b8:	69fa      	ldr	r2, [r7, #28]
 800e3ba:	6a3b      	ldr	r3, [r7, #32]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d901      	bls.n	800e3c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	69fa      	ldr	r2, [r7, #28]
 800e3c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d006      	beq.n	800e3de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e3d0:	69fa      	ldr	r2, [r7, #28]
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 fd67 	bl	800eeac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e3de:	f000 f8a9 	bl	800e534 <xTaskResumeAll>
 800e3e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d107      	bne.n	800e3fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e3ea:	4b08      	ldr	r3, [pc, #32]	; (800e40c <vTaskDelayUntil+0xf8>)
 800e3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3fa:	bf00      	nop
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	200020dc 	.word	0x200020dc
 800e408:	200020b8 	.word	0x200020b8
 800e40c:	e000ed04 	.word	0xe000ed04

0800e410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d017      	beq.n	800e452 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e422:	4b13      	ldr	r3, [pc, #76]	; (800e470 <vTaskDelay+0x60>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00a      	beq.n	800e440 <vTaskDelay+0x30>
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	60bb      	str	r3, [r7, #8]
}
 800e43c:	bf00      	nop
 800e43e:	e7fe      	b.n	800e43e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e440:	f000 f86a 	bl	800e518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e444:	2100      	movs	r1, #0
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 fd30 	bl	800eeac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e44c:	f000 f872 	bl	800e534 <xTaskResumeAll>
 800e450:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d107      	bne.n	800e468 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e458:	4b06      	ldr	r3, [pc, #24]	; (800e474 <vTaskDelay+0x64>)
 800e45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	200020dc 	.word	0x200020dc
 800e474:	e000ed04 	.word	0xe000ed04

0800e478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e47e:	4b1e      	ldr	r3, [pc, #120]	; (800e4f8 <vTaskStartScheduler+0x80>)
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	2300      	movs	r3, #0
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	2300      	movs	r3, #0
 800e488:	2280      	movs	r2, #128	; 0x80
 800e48a:	491c      	ldr	r1, [pc, #112]	; (800e4fc <vTaskStartScheduler+0x84>)
 800e48c:	481c      	ldr	r0, [pc, #112]	; (800e500 <vTaskStartScheduler+0x88>)
 800e48e:	f7ff fdef 	bl	800e070 <xTaskCreate>
 800e492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d11b      	bne.n	800e4d2 <vTaskStartScheduler+0x5a>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	60bb      	str	r3, [r7, #8]
}
 800e4ac:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <vTaskStartScheduler+0x8c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	334c      	adds	r3, #76	; 0x4c
 800e4b4:	4a14      	ldr	r2, [pc, #80]	; (800e508 <vTaskStartScheduler+0x90>)
 800e4b6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4b8:	4b14      	ldr	r3, [pc, #80]	; (800e50c <vTaskStartScheduler+0x94>)
 800e4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4c0:	4b13      	ldr	r3, [pc, #76]	; (800e510 <vTaskStartScheduler+0x98>)
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4c6:	4b13      	ldr	r3, [pc, #76]	; (800e514 <vTaskStartScheduler+0x9c>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4cc:	f000 fde0 	bl	800f090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4d0:	e00e      	b.n	800e4f0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4d8:	d10a      	bne.n	800e4f0 <vTaskStartScheduler+0x78>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	607b      	str	r3, [r7, #4]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <vTaskStartScheduler+0x76>
}
 800e4f0:	bf00      	nop
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	200020d8 	.word	0x200020d8
 800e4fc:	08012838 	.word	0x08012838
 800e500:	0800e931 	.word	0x0800e931
 800e504:	20001fb4 	.word	0x20001fb4
 800e508:	20000198 	.word	0x20000198
 800e50c:	200020d4 	.word	0x200020d4
 800e510:	200020c0 	.word	0x200020c0
 800e514:	200020b8 	.word	0x200020b8

0800e518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e518:	b480      	push	{r7}
 800e51a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e51c:	4b04      	ldr	r3, [pc, #16]	; (800e530 <vTaskSuspendAll+0x18>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3301      	adds	r3, #1
 800e522:	4a03      	ldr	r2, [pc, #12]	; (800e530 <vTaskSuspendAll+0x18>)
 800e524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e526:	bf00      	nop
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	200020dc 	.word	0x200020dc

0800e534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e53e:	2300      	movs	r3, #0
 800e540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e542:	4b41      	ldr	r3, [pc, #260]	; (800e648 <xTaskResumeAll+0x114>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10a      	bne.n	800e560 <xTaskResumeAll+0x2c>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	603b      	str	r3, [r7, #0]
}
 800e55c:	bf00      	nop
 800e55e:	e7fe      	b.n	800e55e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e560:	f000 fe38 	bl	800f1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e564:	4b38      	ldr	r3, [pc, #224]	; (800e648 <xTaskResumeAll+0x114>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	3b01      	subs	r3, #1
 800e56a:	4a37      	ldr	r2, [pc, #220]	; (800e648 <xTaskResumeAll+0x114>)
 800e56c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e56e:	4b36      	ldr	r3, [pc, #216]	; (800e648 <xTaskResumeAll+0x114>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d161      	bne.n	800e63a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e576:	4b35      	ldr	r3, [pc, #212]	; (800e64c <xTaskResumeAll+0x118>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d05d      	beq.n	800e63a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e57e:	e02e      	b.n	800e5de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e580:	4b33      	ldr	r3, [pc, #204]	; (800e650 <xTaskResumeAll+0x11c>)
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	3318      	adds	r3, #24
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7ff fd45 	bl	800e01c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3304      	adds	r3, #4
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff fd40 	bl	800e01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	409a      	lsls	r2, r3
 800e5a4:	4b2b      	ldr	r3, [pc, #172]	; (800e654 <xTaskResumeAll+0x120>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	4a2a      	ldr	r2, [pc, #168]	; (800e654 <xTaskResumeAll+0x120>)
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4413      	add	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4a27      	ldr	r2, [pc, #156]	; (800e658 <xTaskResumeAll+0x124>)
 800e5bc:	441a      	add	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	f7ff fccc 	bl	800df62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ce:	4b23      	ldr	r3, [pc, #140]	; (800e65c <xTaskResumeAll+0x128>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d302      	bcc.n	800e5de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e5d8:	4b21      	ldr	r3, [pc, #132]	; (800e660 <xTaskResumeAll+0x12c>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5de:	4b1c      	ldr	r3, [pc, #112]	; (800e650 <xTaskResumeAll+0x11c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1cc      	bne.n	800e580 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5ec:	f000 fa3c 	bl	800ea68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5f0:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <xTaskResumeAll+0x130>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d010      	beq.n	800e61e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5fc:	f000 f858 	bl	800e6b0 <xTaskIncrementTick>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e606:	4b16      	ldr	r3, [pc, #88]	; (800e660 <xTaskResumeAll+0x12c>)
 800e608:	2201      	movs	r2, #1
 800e60a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3b01      	subs	r3, #1
 800e610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1f1      	bne.n	800e5fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e618:	4b12      	ldr	r3, [pc, #72]	; (800e664 <xTaskResumeAll+0x130>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e61e:	4b10      	ldr	r3, [pc, #64]	; (800e660 <xTaskResumeAll+0x12c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e626:	2301      	movs	r3, #1
 800e628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e62a:	4b0f      	ldr	r3, [pc, #60]	; (800e668 <xTaskResumeAll+0x134>)
 800e62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e63a:	f000 fdfb 	bl	800f234 <vPortExitCritical>

	return xAlreadyYielded;
 800e63e:	68bb      	ldr	r3, [r7, #8]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	200020dc 	.word	0x200020dc
 800e64c:	200020b4 	.word	0x200020b4
 800e650:	20002074 	.word	0x20002074
 800e654:	200020bc 	.word	0x200020bc
 800e658:	20001fb8 	.word	0x20001fb8
 800e65c:	20001fb4 	.word	0x20001fb4
 800e660:	200020c8 	.word	0x200020c8
 800e664:	200020c4 	.word	0x200020c4
 800e668:	e000ed04 	.word	0xe000ed04

0800e66c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e672:	4b05      	ldr	r3, [pc, #20]	; (800e688 <xTaskGetTickCount+0x1c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e678:	687b      	ldr	r3, [r7, #4]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	200020b8 	.word	0x200020b8

0800e68c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e692:	f000 fe81 	bl	800f398 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e696:	2300      	movs	r3, #0
 800e698:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e69a:	4b04      	ldr	r3, [pc, #16]	; (800e6ac <xTaskGetTickCountFromISR+0x20>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6a0:	683b      	ldr	r3, [r7, #0]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	200020b8 	.word	0x200020b8

0800e6b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ba:	4b4e      	ldr	r3, [pc, #312]	; (800e7f4 <xTaskIncrementTick+0x144>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f040 808e 	bne.w	800e7e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6c4:	4b4c      	ldr	r3, [pc, #304]	; (800e7f8 <xTaskIncrementTick+0x148>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6cc:	4a4a      	ldr	r2, [pc, #296]	; (800e7f8 <xTaskIncrementTick+0x148>)
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d120      	bne.n	800e71a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6d8:	4b48      	ldr	r3, [pc, #288]	; (800e7fc <xTaskIncrementTick+0x14c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00a      	beq.n	800e6f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	603b      	str	r3, [r7, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	e7fe      	b.n	800e6f6 <xTaskIncrementTick+0x46>
 800e6f8:	4b40      	ldr	r3, [pc, #256]	; (800e7fc <xTaskIncrementTick+0x14c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	4b40      	ldr	r3, [pc, #256]	; (800e800 <xTaskIncrementTick+0x150>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a3e      	ldr	r2, [pc, #248]	; (800e7fc <xTaskIncrementTick+0x14c>)
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	4a3e      	ldr	r2, [pc, #248]	; (800e800 <xTaskIncrementTick+0x150>)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	4b3d      	ldr	r3, [pc, #244]	; (800e804 <xTaskIncrementTick+0x154>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3301      	adds	r3, #1
 800e712:	4a3c      	ldr	r2, [pc, #240]	; (800e804 <xTaskIncrementTick+0x154>)
 800e714:	6013      	str	r3, [r2, #0]
 800e716:	f000 f9a7 	bl	800ea68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e71a:	4b3b      	ldr	r3, [pc, #236]	; (800e808 <xTaskIncrementTick+0x158>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	429a      	cmp	r2, r3
 800e722:	d348      	bcc.n	800e7b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e724:	4b35      	ldr	r3, [pc, #212]	; (800e7fc <xTaskIncrementTick+0x14c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d104      	bne.n	800e738 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e72e:	4b36      	ldr	r3, [pc, #216]	; (800e808 <xTaskIncrementTick+0x158>)
 800e730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e734:	601a      	str	r2, [r3, #0]
					break;
 800e736:	e03e      	b.n	800e7b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e738:	4b30      	ldr	r3, [pc, #192]	; (800e7fc <xTaskIncrementTick+0x14c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d203      	bcs.n	800e758 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e750:	4a2d      	ldr	r2, [pc, #180]	; (800e808 <xTaskIncrementTick+0x158>)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e756:	e02e      	b.n	800e7b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	3304      	adds	r3, #4
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff fc5d 	bl	800e01c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e766:	2b00      	cmp	r3, #0
 800e768:	d004      	beq.n	800e774 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	3318      	adds	r3, #24
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff fc54 	bl	800e01c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e778:	2201      	movs	r2, #1
 800e77a:	409a      	lsls	r2, r3
 800e77c:	4b23      	ldr	r3, [pc, #140]	; (800e80c <xTaskIncrementTick+0x15c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4313      	orrs	r3, r2
 800e782:	4a22      	ldr	r2, [pc, #136]	; (800e80c <xTaskIncrementTick+0x15c>)
 800e784:	6013      	str	r3, [r2, #0]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78a:	4613      	mov	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4a1f      	ldr	r2, [pc, #124]	; (800e810 <xTaskIncrementTick+0x160>)
 800e794:	441a      	add	r2, r3
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3304      	adds	r3, #4
 800e79a:	4619      	mov	r1, r3
 800e79c:	4610      	mov	r0, r2
 800e79e:	f7ff fbe0 	bl	800df62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a6:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <xTaskIncrementTick+0x164>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d3b9      	bcc.n	800e724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7b4:	e7b6      	b.n	800e724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7b6:	4b17      	ldr	r3, [pc, #92]	; (800e814 <xTaskIncrementTick+0x164>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7bc:	4914      	ldr	r1, [pc, #80]	; (800e810 <xTaskIncrementTick+0x160>)
 800e7be:	4613      	mov	r3, r2
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4413      	add	r3, r2
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	440b      	add	r3, r1
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d901      	bls.n	800e7d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7d2:	4b11      	ldr	r3, [pc, #68]	; (800e818 <xTaskIncrementTick+0x168>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	617b      	str	r3, [r7, #20]
 800e7de:	e004      	b.n	800e7ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7e0:	4b0e      	ldr	r3, [pc, #56]	; (800e81c <xTaskIncrementTick+0x16c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	4a0d      	ldr	r2, [pc, #52]	; (800e81c <xTaskIncrementTick+0x16c>)
 800e7e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7ea:	697b      	ldr	r3, [r7, #20]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	200020dc 	.word	0x200020dc
 800e7f8:	200020b8 	.word	0x200020b8
 800e7fc:	2000206c 	.word	0x2000206c
 800e800:	20002070 	.word	0x20002070
 800e804:	200020cc 	.word	0x200020cc
 800e808:	200020d4 	.word	0x200020d4
 800e80c:	200020bc 	.word	0x200020bc
 800e810:	20001fb8 	.word	0x20001fb8
 800e814:	20001fb4 	.word	0x20001fb4
 800e818:	200020c8 	.word	0x200020c8
 800e81c:	200020c4 	.word	0x200020c4

0800e820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b088      	sub	sp, #32
 800e824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e826:	4b3c      	ldr	r3, [pc, #240]	; (800e918 <vTaskSwitchContext+0xf8>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e82e:	4b3b      	ldr	r3, [pc, #236]	; (800e91c <vTaskSwitchContext+0xfc>)
 800e830:	2201      	movs	r2, #1
 800e832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e834:	e06b      	b.n	800e90e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800e836:	4b39      	ldr	r3, [pc, #228]	; (800e91c <vTaskSwitchContext+0xfc>)
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e83c:	4b38      	ldr	r3, [pc, #224]	; (800e920 <vTaskSwitchContext+0x100>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e842:	61fb      	str	r3, [r7, #28]
 800e844:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e848:	61bb      	str	r3, [r7, #24]
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	429a      	cmp	r2, r3
 800e852:	d111      	bne.n	800e878 <vTaskSwitchContext+0x58>
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	3304      	adds	r3, #4
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d10b      	bne.n	800e878 <vTaskSwitchContext+0x58>
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	3308      	adds	r3, #8
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d105      	bne.n	800e878 <vTaskSwitchContext+0x58>
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	330c      	adds	r3, #12
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	69ba      	ldr	r2, [r7, #24]
 800e874:	429a      	cmp	r2, r3
 800e876:	d008      	beq.n	800e88a <vTaskSwitchContext+0x6a>
 800e878:	4b29      	ldr	r3, [pc, #164]	; (800e920 <vTaskSwitchContext+0x100>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	4b28      	ldr	r3, [pc, #160]	; (800e920 <vTaskSwitchContext+0x100>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3334      	adds	r3, #52	; 0x34
 800e882:	4619      	mov	r1, r3
 800e884:	4610      	mov	r0, r2
 800e886:	f7f4 fe07 	bl	8003498 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e88a:	4b26      	ldr	r3, [pc, #152]	; (800e924 <vTaskSwitchContext+0x104>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	fab3 f383 	clz	r3, r3
 800e896:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	f1c3 031f 	rsb	r3, r3, #31
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	4921      	ldr	r1, [pc, #132]	; (800e928 <vTaskSwitchContext+0x108>)
 800e8a2:	697a      	ldr	r2, [r7, #20]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <vTaskSwitchContext+0xaa>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	607b      	str	r3, [r7, #4]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <vTaskSwitchContext+0xa8>
 800e8ca:	697a      	ldr	r2, [r7, #20]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4a14      	ldr	r2, [pc, #80]	; (800e928 <vTaskSwitchContext+0x108>)
 800e8d6:	4413      	add	r3, r2
 800e8d8:	613b      	str	r3, [r7, #16]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	605a      	str	r2, [r3, #4]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d104      	bne.n	800e8fa <vTaskSwitchContext+0xda>
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	685a      	ldr	r2, [r3, #4]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	605a      	str	r2, [r3, #4]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	4a07      	ldr	r2, [pc, #28]	; (800e920 <vTaskSwitchContext+0x100>)
 800e902:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e904:	4b06      	ldr	r3, [pc, #24]	; (800e920 <vTaskSwitchContext+0x100>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	334c      	adds	r3, #76	; 0x4c
 800e90a:	4a08      	ldr	r2, [pc, #32]	; (800e92c <vTaskSwitchContext+0x10c>)
 800e90c:	6013      	str	r3, [r2, #0]
}
 800e90e:	bf00      	nop
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	200020dc 	.word	0x200020dc
 800e91c:	200020c8 	.word	0x200020c8
 800e920:	20001fb4 	.word	0x20001fb4
 800e924:	200020bc 	.word	0x200020bc
 800e928:	20001fb8 	.word	0x20001fb8
 800e92c:	20000198 	.word	0x20000198

0800e930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e938:	f000 f852 	bl	800e9e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e93c:	4b06      	ldr	r3, [pc, #24]	; (800e958 <prvIdleTask+0x28>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d9f9      	bls.n	800e938 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e944:	4b05      	ldr	r3, [pc, #20]	; (800e95c <prvIdleTask+0x2c>)
 800e946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e954:	e7f0      	b.n	800e938 <prvIdleTask+0x8>
 800e956:	bf00      	nop
 800e958:	20001fb8 	.word	0x20001fb8
 800e95c:	e000ed04 	.word	0xe000ed04

0800e960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e966:	2300      	movs	r3, #0
 800e968:	607b      	str	r3, [r7, #4]
 800e96a:	e00c      	b.n	800e986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	4613      	mov	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4a12      	ldr	r2, [pc, #72]	; (800e9c0 <prvInitialiseTaskLists+0x60>)
 800e978:	4413      	add	r3, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff fac4 	bl	800df08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	3301      	adds	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b06      	cmp	r3, #6
 800e98a:	d9ef      	bls.n	800e96c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e98c:	480d      	ldr	r0, [pc, #52]	; (800e9c4 <prvInitialiseTaskLists+0x64>)
 800e98e:	f7ff fabb 	bl	800df08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e992:	480d      	ldr	r0, [pc, #52]	; (800e9c8 <prvInitialiseTaskLists+0x68>)
 800e994:	f7ff fab8 	bl	800df08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e998:	480c      	ldr	r0, [pc, #48]	; (800e9cc <prvInitialiseTaskLists+0x6c>)
 800e99a:	f7ff fab5 	bl	800df08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e99e:	480c      	ldr	r0, [pc, #48]	; (800e9d0 <prvInitialiseTaskLists+0x70>)
 800e9a0:	f7ff fab2 	bl	800df08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9a4:	480b      	ldr	r0, [pc, #44]	; (800e9d4 <prvInitialiseTaskLists+0x74>)
 800e9a6:	f7ff faaf 	bl	800df08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <prvInitialiseTaskLists+0x78>)
 800e9ac:	4a05      	ldr	r2, [pc, #20]	; (800e9c4 <prvInitialiseTaskLists+0x64>)
 800e9ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9b0:	4b0a      	ldr	r3, [pc, #40]	; (800e9dc <prvInitialiseTaskLists+0x7c>)
 800e9b2:	4a05      	ldr	r2, [pc, #20]	; (800e9c8 <prvInitialiseTaskLists+0x68>)
 800e9b4:	601a      	str	r2, [r3, #0]
}
 800e9b6:	bf00      	nop
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	20001fb8 	.word	0x20001fb8
 800e9c4:	20002044 	.word	0x20002044
 800e9c8:	20002058 	.word	0x20002058
 800e9cc:	20002074 	.word	0x20002074
 800e9d0:	20002088 	.word	0x20002088
 800e9d4:	200020a0 	.word	0x200020a0
 800e9d8:	2000206c 	.word	0x2000206c
 800e9dc:	20002070 	.word	0x20002070

0800e9e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9e6:	e019      	b.n	800ea1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9e8:	f000 fbf4 	bl	800f1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ec:	4b10      	ldr	r3, [pc, #64]	; (800ea30 <prvCheckTasksWaitingTermination+0x50>)
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff fb0f 	bl	800e01c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ea34 <prvCheckTasksWaitingTermination+0x54>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3b01      	subs	r3, #1
 800ea04:	4a0b      	ldr	r2, [pc, #44]	; (800ea34 <prvCheckTasksWaitingTermination+0x54>)
 800ea06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea08:	4b0b      	ldr	r3, [pc, #44]	; (800ea38 <prvCheckTasksWaitingTermination+0x58>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	4a0a      	ldr	r2, [pc, #40]	; (800ea38 <prvCheckTasksWaitingTermination+0x58>)
 800ea10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea12:	f000 fc0f 	bl	800f234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f810 	bl	800ea3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea1c:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <prvCheckTasksWaitingTermination+0x58>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1e1      	bne.n	800e9e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20002088 	.word	0x20002088
 800ea34:	200020b4 	.word	0x200020b4
 800ea38:	2000209c 	.word	0x2000209c

0800ea3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	334c      	adds	r3, #76	; 0x4c
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f003 fc55 	bl	80122f8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea52:	4618      	mov	r0, r3
 800ea54:	f000 fdb0 	bl	800f5b8 <vPortFree>
			vPortFree( pxTCB );
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fdad 	bl	800f5b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea5e:	bf00      	nop
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea6e:	4b0c      	ldr	r3, [pc, #48]	; (800eaa0 <prvResetNextTaskUnblockTime+0x38>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d104      	bne.n	800ea82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800ea7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea80:	e008      	b.n	800ea94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea82:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <prvResetNextTaskUnblockTime+0x38>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	4a04      	ldr	r2, [pc, #16]	; (800eaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800ea92:	6013      	str	r3, [r2, #0]
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	2000206c 	.word	0x2000206c
 800eaa4:	200020d4 	.word	0x200020d4

0800eaa8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800eab6:	f000 fb8d 	bl	800f1d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eaba:	4b29      	ldr	r3, [pc, #164]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d01c      	beq.n	800eb02 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800eac8:	4b25      	ldr	r3, [pc, #148]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	43d2      	mvns	r2, r2
 800ead4:	400a      	ands	r2, r1
 800ead6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800eada:	4b21      	ldr	r3, [pc, #132]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00b      	beq.n	800eb02 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eaea:	2101      	movs	r1, #1
 800eaec:	6838      	ldr	r0, [r7, #0]
 800eaee:	f000 f9dd 	bl	800eeac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800eaf2:	4b1c      	ldr	r3, [pc, #112]	; (800eb64 <xTaskNotifyWait+0xbc>)
 800eaf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eb02:	f000 fb97 	bl	800f234 <vPortExitCritical>

		taskENTER_CRITICAL();
 800eb06:	f000 fb65 	bl	800f1d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800eb10:	4b13      	ldr	r3, [pc, #76]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eb1c:	4b10      	ldr	r3, [pc, #64]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d002      	beq.n	800eb30 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	617b      	str	r3, [r7, #20]
 800eb2e:	e00a      	b.n	800eb46 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800eb30:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	43d2      	mvns	r2, r2
 800eb3c:	400a      	ands	r2, r1
 800eb3e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800eb42:	2301      	movs	r3, #1
 800eb44:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb46:	4b06      	ldr	r3, [pc, #24]	; (800eb60 <xTaskNotifyWait+0xb8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800eb50:	f000 fb70 	bl	800f234 <vPortExitCritical>

		return xReturn;
 800eb54:	697b      	ldr	r3, [r7, #20]
	}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	20001fb4 	.word	0x20001fb4
 800eb64:	e000ed04 	.word	0xe000ed04

0800eb68 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08a      	sub	sp, #40	; 0x28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	4613      	mov	r3, r2
 800eb76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10a      	bne.n	800eb98 <xTaskGenericNotify+0x30>
	__asm volatile
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	f383 8811 	msr	BASEPRI, r3
 800eb8a:	f3bf 8f6f 	isb	sy
 800eb8e:	f3bf 8f4f 	dsb	sy
 800eb92:	61bb      	str	r3, [r7, #24]
}
 800eb94:	bf00      	nop
 800eb96:	e7fe      	b.n	800eb96 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800eb9c:	f000 fb1a 	bl	800f1d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ebb6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ebb8:	6a3b      	ldr	r3, [r7, #32]
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d82d      	bhi.n	800ec22 <xTaskGenericNotify+0xba>
 800ebc6:	a201      	add	r2, pc, #4	; (adr r2, 800ebcc <xTaskGenericNotify+0x64>)
 800ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebcc:	0800ec45 	.word	0x0800ec45
 800ebd0:	0800ebe1 	.word	0x0800ebe1
 800ebd4:	0800ebf3 	.word	0x0800ebf3
 800ebd8:	0800ec03 	.word	0x0800ec03
 800ebdc:	0800ec0d 	.word	0x0800ec0d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	431a      	orrs	r2, r3
 800ebea:	6a3b      	ldr	r3, [r7, #32]
 800ebec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ebf0:	e02b      	b.n	800ec4a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
 800ebfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ec00:	e023      	b.n	800ec4a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ec0a:	e01e      	b.n	800ec4a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ec0c:	7ffb      	ldrb	r3, [r7, #31]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d004      	beq.n	800ec1c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ec1a:	e016      	b.n	800ec4a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ec20:	e013      	b.n	800ec4a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec2c:	d00c      	beq.n	800ec48 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	617b      	str	r3, [r7, #20]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <xTaskGenericNotify+0xda>
					break;
 800ec44:	bf00      	nop
 800ec46:	e000      	b.n	800ec4a <xTaskGenericNotify+0xe2>

					break;
 800ec48:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ec4a:	7ffb      	ldrb	r3, [r7, #31]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d139      	bne.n	800ecc4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	3304      	adds	r3, #4
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff f9e1 	bl	800e01c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5e:	2201      	movs	r2, #1
 800ec60:	409a      	lsls	r2, r3
 800ec62:	4b1c      	ldr	r3, [pc, #112]	; (800ecd4 <xTaskGenericNotify+0x16c>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	4a1a      	ldr	r2, [pc, #104]	; (800ecd4 <xTaskGenericNotify+0x16c>)
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4a17      	ldr	r2, [pc, #92]	; (800ecd8 <xTaskGenericNotify+0x170>)
 800ec7a:	441a      	add	r2, r3
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	4619      	mov	r1, r3
 800ec82:	4610      	mov	r0, r2
 800ec84:	f7ff f96d 	bl	800df62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00a      	beq.n	800eca6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	613b      	str	r3, [r7, #16]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecaa:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <xTaskGenericNotify+0x174>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d907      	bls.n	800ecc4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <xTaskGenericNotify+0x178>)
 800ecb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ecc4:	f000 fab6 	bl	800f234 <vPortExitCritical>

		return xReturn;
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3728      	adds	r7, #40	; 0x28
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	200020bc 	.word	0x200020bc
 800ecd8:	20001fb8 	.word	0x20001fb8
 800ecdc:	20001fb4 	.word	0x20001fb4
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08e      	sub	sp, #56	; 0x38
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	603b      	str	r3, [r7, #0]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d10a      	bne.n	800ed14 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	f383 8811 	msr	BASEPRI, r3
 800ed06:	f3bf 8f6f 	isb	sy
 800ed0a:	f3bf 8f4f 	dsb	sy
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed10:	bf00      	nop
 800ed12:	e7fe      	b.n	800ed12 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed14:	f000 fb40 	bl	800f398 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed1c:	f3ef 8211 	mrs	r2, BASEPRI
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	623a      	str	r2, [r7, #32]
 800ed32:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed34:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d004      	beq.n	800ed48 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ed4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	2202      	movs	r2, #2
 800ed56:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800ed5a:	79fb      	ldrb	r3, [r7, #7]
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	d82f      	bhi.n	800edc0 <xTaskGenericNotifyFromISR+0xdc>
 800ed60:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <xTaskGenericNotifyFromISR+0x84>)
 800ed62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed66:	bf00      	nop
 800ed68:	0800ede3 	.word	0x0800ede3
 800ed6c:	0800ed7d 	.word	0x0800ed7d
 800ed70:	0800ed8f 	.word	0x0800ed8f
 800ed74:	0800ed9f 	.word	0x0800ed9f
 800ed78:	0800eda9 	.word	0x0800eda9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	431a      	orrs	r2, r3
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ed8c:	e02c      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ed9c:	e024      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800eda6:	e01f      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eda8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800edac:	2b02      	cmp	r3, #2
 800edae:	d004      	beq.n	800edba <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800edb8:	e016      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800edba:	2300      	movs	r3, #0
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800edbe:	e013      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800edc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edca:	d00c      	beq.n	800ede6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	61bb      	str	r3, [r7, #24]
}
 800edde:	bf00      	nop
 800ede0:	e7fe      	b.n	800ede0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ede2:	bf00      	nop
 800ede4:	e000      	b.n	800ede8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ede6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ede8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800edec:	2b01      	cmp	r3, #1
 800edee:	d145      	bne.n	800ee7c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00a      	beq.n	800ee0e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	617b      	str	r3, [r7, #20]
}
 800ee0a:	bf00      	nop
 800ee0c:	e7fe      	b.n	800ee0c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee0e:	4b21      	ldr	r3, [pc, #132]	; (800ee94 <xTaskGenericNotifyFromISR+0x1b0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d11c      	bne.n	800ee50 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	3304      	adds	r3, #4
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff f8fe 	bl	800e01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee24:	2201      	movs	r2, #1
 800ee26:	409a      	lsls	r2, r3
 800ee28:	4b1b      	ldr	r3, [pc, #108]	; (800ee98 <xTaskGenericNotifyFromISR+0x1b4>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	4a1a      	ldr	r2, [pc, #104]	; (800ee98 <xTaskGenericNotifyFromISR+0x1b4>)
 800ee30:	6013      	str	r3, [r2, #0]
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee36:	4613      	mov	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4413      	add	r3, r2
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	4a17      	ldr	r2, [pc, #92]	; (800ee9c <xTaskGenericNotifyFromISR+0x1b8>)
 800ee40:	441a      	add	r2, r3
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	3304      	adds	r3, #4
 800ee46:	4619      	mov	r1, r3
 800ee48:	4610      	mov	r0, r2
 800ee4a:	f7ff f88a 	bl	800df62 <vListInsertEnd>
 800ee4e:	e005      	b.n	800ee5c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	3318      	adds	r3, #24
 800ee54:	4619      	mov	r1, r3
 800ee56:	4812      	ldr	r0, [pc, #72]	; (800eea0 <xTaskGenericNotifyFromISR+0x1bc>)
 800ee58:	f7ff f883 	bl	800df62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee60:	4b10      	ldr	r3, [pc, #64]	; (800eea4 <xTaskGenericNotifyFromISR+0x1c0>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d908      	bls.n	800ee7c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ee6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d002      	beq.n	800ee76 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ee70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee72:	2201      	movs	r2, #1
 800ee74:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ee76:	4b0c      	ldr	r3, [pc, #48]	; (800eea8 <xTaskGenericNotifyFromISR+0x1c4>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee86:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ee88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3738      	adds	r7, #56	; 0x38
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	200020dc 	.word	0x200020dc
 800ee98:	200020bc 	.word	0x200020bc
 800ee9c:	20001fb8 	.word	0x20001fb8
 800eea0:	20002074 	.word	0x20002074
 800eea4:	20001fb4 	.word	0x20001fb4
 800eea8:	200020c8 	.word	0x200020c8

0800eeac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eeb6:	4b29      	ldr	r3, [pc, #164]	; (800ef5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eebc:	4b28      	ldr	r3, [pc, #160]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3304      	adds	r3, #4
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff f8aa 	bl	800e01c <uxListRemove>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d10b      	bne.n	800eee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eece:	4b24      	ldr	r3, [pc, #144]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed4:	2201      	movs	r2, #1
 800eed6:	fa02 f303 	lsl.w	r3, r2, r3
 800eeda:	43da      	mvns	r2, r3
 800eedc:	4b21      	ldr	r3, [pc, #132]	; (800ef64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4013      	ands	r3, r2
 800eee2:	4a20      	ldr	r2, [pc, #128]	; (800ef64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeec:	d10a      	bne.n	800ef04 <prvAddCurrentTaskToDelayedList+0x58>
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d007      	beq.n	800ef04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eef4:	4b1a      	ldr	r3, [pc, #104]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	3304      	adds	r3, #4
 800eefa:	4619      	mov	r1, r3
 800eefc:	481a      	ldr	r0, [pc, #104]	; (800ef68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eefe:	f7ff f830 	bl	800df62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef02:	e026      	b.n	800ef52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4413      	add	r3, r2
 800ef0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef0c:	4b14      	ldr	r3, [pc, #80]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d209      	bcs.n	800ef30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef1c:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3304      	adds	r3, #4
 800ef26:	4619      	mov	r1, r3
 800ef28:	4610      	mov	r0, r2
 800ef2a:	f7ff f83e 	bl	800dfaa <vListInsert>
}
 800ef2e:	e010      	b.n	800ef52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef30:	4b0f      	ldr	r3, [pc, #60]	; (800ef70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7ff f834 	bl	800dfaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef42:	4b0c      	ldr	r3, [pc, #48]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d202      	bcs.n	800ef52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef4c:	4a09      	ldr	r2, [pc, #36]	; (800ef74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	6013      	str	r3, [r2, #0]
}
 800ef52:	bf00      	nop
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	200020b8 	.word	0x200020b8
 800ef60:	20001fb4 	.word	0x20001fb4
 800ef64:	200020bc 	.word	0x200020bc
 800ef68:	200020a0 	.word	0x200020a0
 800ef6c:	20002070 	.word	0x20002070
 800ef70:	2000206c 	.word	0x2000206c
 800ef74:	200020d4 	.word	0x200020d4

0800ef78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3b04      	subs	r3, #4
 800ef88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	3b04      	subs	r3, #4
 800ef96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	f023 0201 	bic.w	r2, r3, #1
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3b04      	subs	r3, #4
 800efa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efa8:	4a0c      	ldr	r2, [pc, #48]	; (800efdc <pxPortInitialiseStack+0x64>)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3b14      	subs	r3, #20
 800efb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	3b04      	subs	r3, #4
 800efbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f06f 0202 	mvn.w	r2, #2
 800efc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	3b20      	subs	r3, #32
 800efcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efce:	68fb      	ldr	r3, [r7, #12]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	0800efe1 	.word	0x0800efe1

0800efe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efe0:	b480      	push	{r7}
 800efe2:	b085      	sub	sp, #20
 800efe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efea:	4b12      	ldr	r3, [pc, #72]	; (800f034 <prvTaskExitError+0x54>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff2:	d00a      	beq.n	800f00a <prvTaskExitError+0x2a>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	60fb      	str	r3, [r7, #12]
}
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <prvTaskExitError+0x28>
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	60bb      	str	r3, [r7, #8]
}
 800f01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f01e:	bf00      	nop
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d0fc      	beq.n	800f020 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f026:	bf00      	nop
 800f028:	bf00      	nop
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	2000009c 	.word	0x2000009c
	...

0800f040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f040:	4b07      	ldr	r3, [pc, #28]	; (800f060 <pxCurrentTCBConst2>)
 800f042:	6819      	ldr	r1, [r3, #0]
 800f044:	6808      	ldr	r0, [r1, #0]
 800f046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04a:	f380 8809 	msr	PSP, r0
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f04f 0000 	mov.w	r0, #0
 800f056:	f380 8811 	msr	BASEPRI, r0
 800f05a:	4770      	bx	lr
 800f05c:	f3af 8000 	nop.w

0800f060 <pxCurrentTCBConst2>:
 800f060:	20001fb4 	.word	0x20001fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop

0800f068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f068:	4808      	ldr	r0, [pc, #32]	; (800f08c <prvPortStartFirstTask+0x24>)
 800f06a:	6800      	ldr	r0, [r0, #0]
 800f06c:	6800      	ldr	r0, [r0, #0]
 800f06e:	f380 8808 	msr	MSP, r0
 800f072:	f04f 0000 	mov.w	r0, #0
 800f076:	f380 8814 	msr	CONTROL, r0
 800f07a:	b662      	cpsie	i
 800f07c:	b661      	cpsie	f
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	df00      	svc	0
 800f088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f08a:	bf00      	nop
 800f08c:	e000ed08 	.word	0xe000ed08

0800f090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f096:	4b46      	ldr	r3, [pc, #280]	; (800f1b0 <xPortStartScheduler+0x120>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a46      	ldr	r2, [pc, #280]	; (800f1b4 <xPortStartScheduler+0x124>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d10a      	bne.n	800f0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	613b      	str	r3, [r7, #16]
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0b6:	4b3e      	ldr	r3, [pc, #248]	; (800f1b0 <xPortStartScheduler+0x120>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a3f      	ldr	r2, [pc, #252]	; (800f1b8 <xPortStartScheduler+0x128>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d10a      	bne.n	800f0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	60fb      	str	r3, [r7, #12]
}
 800f0d2:	bf00      	nop
 800f0d4:	e7fe      	b.n	800f0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0d6:	4b39      	ldr	r3, [pc, #228]	; (800f1bc <xPortStartScheduler+0x12c>)
 800f0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	22ff      	movs	r2, #255	; 0xff
 800f0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	4b31      	ldr	r3, [pc, #196]	; (800f1c0 <xPortStartScheduler+0x130>)
 800f0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0fe:	4b31      	ldr	r3, [pc, #196]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f100:	2207      	movs	r2, #7
 800f102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f104:	e009      	b.n	800f11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f106:	4b2f      	ldr	r3, [pc, #188]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	4a2d      	ldr	r2, [pc, #180]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	b2db      	uxtb	r3, r3
 800f118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f11a:	78fb      	ldrb	r3, [r7, #3]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f122:	2b80      	cmp	r3, #128	; 0x80
 800f124:	d0ef      	beq.n	800f106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f126:	4b27      	ldr	r3, [pc, #156]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f1c3 0307 	rsb	r3, r3, #7
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d00a      	beq.n	800f148 <xPortStartScheduler+0xb8>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	60bb      	str	r3, [r7, #8]
}
 800f144:	bf00      	nop
 800f146:	e7fe      	b.n	800f146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f148:	4b1e      	ldr	r3, [pc, #120]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	4a1d      	ldr	r2, [pc, #116]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f152:	4b1c      	ldr	r3, [pc, #112]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f15a:	4a1a      	ldr	r2, [pc, #104]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	b2da      	uxtb	r2, r3
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f166:	4b18      	ldr	r3, [pc, #96]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a17      	ldr	r2, [pc, #92]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f172:	4b15      	ldr	r3, [pc, #84]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a14      	ldr	r2, [pc, #80]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f17e:	f000 f8dd 	bl	800f33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f182:	4b12      	ldr	r3, [pc, #72]	; (800f1cc <xPortStartScheduler+0x13c>)
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f188:	f000 f8fc 	bl	800f384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <xPortStartScheduler+0x140>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a0f      	ldr	r2, [pc, #60]	; (800f1d0 <xPortStartScheduler+0x140>)
 800f192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f198:	f7ff ff66 	bl	800f068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f19c:	f7ff fb40 	bl	800e820 <vTaskSwitchContext>
	prvTaskExitError();
 800f1a0:	f7ff ff1e 	bl	800efe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	e000ed00 	.word	0xe000ed00
 800f1b4:	410fc271 	.word	0x410fc271
 800f1b8:	410fc270 	.word	0x410fc270
 800f1bc:	e000e400 	.word	0xe000e400
 800f1c0:	200020e0 	.word	0x200020e0
 800f1c4:	200020e4 	.word	0x200020e4
 800f1c8:	e000ed20 	.word	0xe000ed20
 800f1cc:	2000009c 	.word	0x2000009c
 800f1d0:	e000ef34 	.word	0xe000ef34

0800f1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	607b      	str	r3, [r7, #4]
}
 800f1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <vPortEnterCritical+0x58>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	4a0d      	ldr	r2, [pc, #52]	; (800f22c <vPortEnterCritical+0x58>)
 800f1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1f8:	4b0c      	ldr	r3, [pc, #48]	; (800f22c <vPortEnterCritical+0x58>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d10f      	bne.n	800f220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f200:	4b0b      	ldr	r3, [pc, #44]	; (800f230 <vPortEnterCritical+0x5c>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00a      	beq.n	800f220 <vPortEnterCritical+0x4c>
	__asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	603b      	str	r3, [r7, #0]
}
 800f21c:	bf00      	nop
 800f21e:	e7fe      	b.n	800f21e <vPortEnterCritical+0x4a>
	}
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	2000009c 	.word	0x2000009c
 800f230:	e000ed04 	.word	0xe000ed04

0800f234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f23a:	4b12      	ldr	r3, [pc, #72]	; (800f284 <vPortExitCritical+0x50>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <vPortExitCritical+0x24>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	607b      	str	r3, [r7, #4]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f258:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <vPortExitCritical+0x50>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <vPortExitCritical+0x50>)
 800f260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f262:	4b08      	ldr	r3, [pc, #32]	; (800f284 <vPortExitCritical+0x50>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d105      	bne.n	800f276 <vPortExitCritical+0x42>
 800f26a:	2300      	movs	r3, #0
 800f26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	f383 8811 	msr	BASEPRI, r3
}
 800f274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f276:	bf00      	nop
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	2000009c 	.word	0x2000009c
	...

0800f290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f290:	f3ef 8009 	mrs	r0, PSP
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <pxCurrentTCBConst>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	f01e 0f10 	tst.w	lr, #16
 800f2a0:	bf08      	it	eq
 800f2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2aa:	6010      	str	r0, [r2, #0]
 800f2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2b4:	f380 8811 	msr	BASEPRI, r0
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f7ff faae 	bl	800e820 <vTaskSwitchContext>
 800f2c4:	f04f 0000 	mov.w	r0, #0
 800f2c8:	f380 8811 	msr	BASEPRI, r0
 800f2cc:	bc09      	pop	{r0, r3}
 800f2ce:	6819      	ldr	r1, [r3, #0]
 800f2d0:	6808      	ldr	r0, [r1, #0]
 800f2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d6:	f01e 0f10 	tst.w	lr, #16
 800f2da:	bf08      	it	eq
 800f2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2e0:	f380 8809 	msr	PSP, r0
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	20001fb4 	.word	0x20001fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	607b      	str	r3, [r7, #4]
}
 800f310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f312:	f7ff f9cd 	bl	800e6b0 <xTaskIncrementTick>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f31c:	4b06      	ldr	r3, [pc, #24]	; (800f338 <SysTick_Handler+0x40>)
 800f31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	2300      	movs	r3, #0
 800f326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	f383 8811 	msr	BASEPRI, r3
}
 800f32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f340:	4b0b      	ldr	r3, [pc, #44]	; (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f346:	4b0b      	ldr	r3, [pc, #44]	; (800f374 <vPortSetupTimerInterrupt+0x38>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f34c:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <vPortSetupTimerInterrupt+0x3c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a0a      	ldr	r2, [pc, #40]	; (800f37c <vPortSetupTimerInterrupt+0x40>)
 800f352:	fba2 2303 	umull	r2, r3, r2, r3
 800f356:	099b      	lsrs	r3, r3, #6
 800f358:	4a09      	ldr	r2, [pc, #36]	; (800f380 <vPortSetupTimerInterrupt+0x44>)
 800f35a:	3b01      	subs	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f35e:	4b04      	ldr	r3, [pc, #16]	; (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f360:	2207      	movs	r2, #7
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	e000e010 	.word	0xe000e010
 800f374:	e000e018 	.word	0xe000e018
 800f378:	20000004 	.word	0x20000004
 800f37c:	10624dd3 	.word	0x10624dd3
 800f380:	e000e014 	.word	0xe000e014

0800f384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f394 <vPortEnableVFP+0x10>
 800f388:	6801      	ldr	r1, [r0, #0]
 800f38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f38e:	6001      	str	r1, [r0, #0]
 800f390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f392:	bf00      	nop
 800f394:	e000ed88 	.word	0xe000ed88

0800f398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f39e:	f3ef 8305 	mrs	r3, IPSR
 800f3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b0f      	cmp	r3, #15
 800f3a8:	d914      	bls.n	800f3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3aa:	4a17      	ldr	r2, [pc, #92]	; (800f408 <vPortValidateInterruptPriority+0x70>)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <vPortValidateInterruptPriority+0x74>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	7afa      	ldrb	r2, [r7, #11]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d20a      	bcs.n	800f3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	607b      	str	r3, [r7, #4]
}
 800f3d0:	bf00      	nop
 800f3d2:	e7fe      	b.n	800f3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3d4:	4b0e      	ldr	r3, [pc, #56]	; (800f410 <vPortValidateInterruptPriority+0x78>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3dc:	4b0d      	ldr	r3, [pc, #52]	; (800f414 <vPortValidateInterruptPriority+0x7c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d90a      	bls.n	800f3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	603b      	str	r3, [r7, #0]
}
 800f3f6:	bf00      	nop
 800f3f8:	e7fe      	b.n	800f3f8 <vPortValidateInterruptPriority+0x60>
	}
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	e000e3f0 	.word	0xe000e3f0
 800f40c:	200020e0 	.word	0x200020e0
 800f410:	e000ed0c 	.word	0xe000ed0c
 800f414:	200020e4 	.word	0x200020e4

0800f418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b08a      	sub	sp, #40	; 0x28
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f420:	2300      	movs	r3, #0
 800f422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f424:	f7ff f878 	bl	800e518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f428:	4b5d      	ldr	r3, [pc, #372]	; (800f5a0 <pvPortMalloc+0x188>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f430:	f000 f924 	bl	800f67c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f434:	4b5b      	ldr	r3, [pc, #364]	; (800f5a4 <pvPortMalloc+0x18c>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4013      	ands	r3, r2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 8093 	bne.w	800f568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d01d      	beq.n	800f484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f448:	2208      	movs	r2, #8
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4413      	add	r3, r2
 800f44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	2b00      	cmp	r3, #0
 800f458:	d014      	beq.n	800f484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f023 0307 	bic.w	r3, r3, #7
 800f460:	3308      	adds	r3, #8
 800f462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00a      	beq.n	800f484 <pvPortMalloc+0x6c>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	617b      	str	r3, [r7, #20]
}
 800f480:	bf00      	nop
 800f482:	e7fe      	b.n	800f482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d06e      	beq.n	800f568 <pvPortMalloc+0x150>
 800f48a:	4b47      	ldr	r3, [pc, #284]	; (800f5a8 <pvPortMalloc+0x190>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	429a      	cmp	r2, r3
 800f492:	d869      	bhi.n	800f568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f494:	4b45      	ldr	r3, [pc, #276]	; (800f5ac <pvPortMalloc+0x194>)
 800f496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f498:	4b44      	ldr	r3, [pc, #272]	; (800f5ac <pvPortMalloc+0x194>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f49e:	e004      	b.n	800f4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d903      	bls.n	800f4bc <pvPortMalloc+0xa4>
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1f1      	bne.n	800f4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4bc:	4b38      	ldr	r3, [pc, #224]	; (800f5a0 <pvPortMalloc+0x188>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d050      	beq.n	800f568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4c6:	6a3b      	ldr	r3, [r7, #32]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2208      	movs	r2, #8
 800f4cc:	4413      	add	r3, r2
 800f4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	1ad2      	subs	r2, r2, r3
 800f4e0:	2308      	movs	r3, #8
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d91f      	bls.n	800f528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	f003 0307 	and.w	r3, r3, #7
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00a      	beq.n	800f510 <pvPortMalloc+0xf8>
	__asm volatile
 800f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	613b      	str	r3, [r7, #16]
}
 800f50c:	bf00      	nop
 800f50e:	e7fe      	b.n	800f50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	1ad2      	subs	r2, r2, r3
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f522:	69b8      	ldr	r0, [r7, #24]
 800f524:	f000 f90c 	bl	800f740 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f528:	4b1f      	ldr	r3, [pc, #124]	; (800f5a8 <pvPortMalloc+0x190>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	4a1d      	ldr	r2, [pc, #116]	; (800f5a8 <pvPortMalloc+0x190>)
 800f534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f536:	4b1c      	ldr	r3, [pc, #112]	; (800f5a8 <pvPortMalloc+0x190>)
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	4b1d      	ldr	r3, [pc, #116]	; (800f5b0 <pvPortMalloc+0x198>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d203      	bcs.n	800f54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f542:	4b19      	ldr	r3, [pc, #100]	; (800f5a8 <pvPortMalloc+0x190>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a1a      	ldr	r2, [pc, #104]	; (800f5b0 <pvPortMalloc+0x198>)
 800f548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	4b15      	ldr	r3, [pc, #84]	; (800f5a4 <pvPortMalloc+0x18c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	431a      	orrs	r2, r3
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	2200      	movs	r2, #0
 800f55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f55e:	4b15      	ldr	r3, [pc, #84]	; (800f5b4 <pvPortMalloc+0x19c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3301      	adds	r3, #1
 800f564:	4a13      	ldr	r2, [pc, #76]	; (800f5b4 <pvPortMalloc+0x19c>)
 800f566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f568:	f7fe ffe4 	bl	800e534 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d101      	bne.n	800f576 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f572:	f7f3 ff9c 	bl	80034ae <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	f003 0307 	and.w	r3, r3, #7
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00a      	beq.n	800f596 <pvPortMalloc+0x17e>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	60fb      	str	r3, [r7, #12]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <pvPortMalloc+0x17c>
	return pvReturn;
 800f596:	69fb      	ldr	r3, [r7, #28]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3728      	adds	r7, #40	; 0x28
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20005cf0 	.word	0x20005cf0
 800f5a4:	20005d04 	.word	0x20005d04
 800f5a8:	20005cf4 	.word	0x20005cf4
 800f5ac:	20005ce8 	.word	0x20005ce8
 800f5b0:	20005cf8 	.word	0x20005cf8
 800f5b4:	20005cfc 	.word	0x20005cfc

0800f5b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d04d      	beq.n	800f666 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5ca:	2308      	movs	r3, #8
 800f5cc:	425b      	negs	r3, r3
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	4b24      	ldr	r3, [pc, #144]	; (800f670 <vPortFree+0xb8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d10a      	bne.n	800f5fc <vPortFree+0x44>
	__asm volatile
 800f5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	60fb      	str	r3, [r7, #12]
}
 800f5f8:	bf00      	nop
 800f5fa:	e7fe      	b.n	800f5fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00a      	beq.n	800f61a <vPortFree+0x62>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	60bb      	str	r3, [r7, #8]
}
 800f616:	bf00      	nop
 800f618:	e7fe      	b.n	800f618 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	4b14      	ldr	r3, [pc, #80]	; (800f670 <vPortFree+0xb8>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4013      	ands	r3, r2
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01e      	beq.n	800f666 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d11a      	bne.n	800f666 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	4b0e      	ldr	r3, [pc, #56]	; (800f670 <vPortFree+0xb8>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	43db      	mvns	r3, r3
 800f63a:	401a      	ands	r2, r3
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f640:	f7fe ff6a 	bl	800e518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <vPortFree+0xbc>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4413      	add	r3, r2
 800f64e:	4a09      	ldr	r2, [pc, #36]	; (800f674 <vPortFree+0xbc>)
 800f650:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f652:	6938      	ldr	r0, [r7, #16]
 800f654:	f000 f874 	bl	800f740 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f658:	4b07      	ldr	r3, [pc, #28]	; (800f678 <vPortFree+0xc0>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3301      	adds	r3, #1
 800f65e:	4a06      	ldr	r2, [pc, #24]	; (800f678 <vPortFree+0xc0>)
 800f660:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f662:	f7fe ff67 	bl	800e534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f666:	bf00      	nop
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20005d04 	.word	0x20005d04
 800f674:	20005cf4 	.word	0x20005cf4
 800f678:	20005d00 	.word	0x20005d00

0800f67c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f682:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f686:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f688:	4b27      	ldr	r3, [pc, #156]	; (800f728 <prvHeapInit+0xac>)
 800f68a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f003 0307 	and.w	r3, r3, #7
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00c      	beq.n	800f6b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3307      	adds	r3, #7
 800f69a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f023 0307 	bic.w	r3, r3, #7
 800f6a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	; (800f728 <prvHeapInit+0xac>)
 800f6ac:	4413      	add	r3, r2
 800f6ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6b4:	4a1d      	ldr	r2, [pc, #116]	; (800f72c <prvHeapInit+0xb0>)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6ba:	4b1c      	ldr	r3, [pc, #112]	; (800f72c <prvHeapInit+0xb0>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6c8:	2208      	movs	r2, #8
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	1a9b      	subs	r3, r3, r2
 800f6ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f023 0307 	bic.w	r3, r3, #7
 800f6d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	4a15      	ldr	r2, [pc, #84]	; (800f730 <prvHeapInit+0xb4>)
 800f6dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6de:	4b14      	ldr	r3, [pc, #80]	; (800f730 <prvHeapInit+0xb4>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6e6:	4b12      	ldr	r3, [pc, #72]	; (800f730 <prvHeapInit+0xb4>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	1ad2      	subs	r2, r2, r3
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6fc:	4b0c      	ldr	r3, [pc, #48]	; (800f730 <prvHeapInit+0xb4>)
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	4a0a      	ldr	r2, [pc, #40]	; (800f734 <prvHeapInit+0xb8>)
 800f70a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4a09      	ldr	r2, [pc, #36]	; (800f738 <prvHeapInit+0xbc>)
 800f712:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f714:	4b09      	ldr	r3, [pc, #36]	; (800f73c <prvHeapInit+0xc0>)
 800f716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f71a:	601a      	str	r2, [r3, #0]
}
 800f71c:	bf00      	nop
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	200020e8 	.word	0x200020e8
 800f72c:	20005ce8 	.word	0x20005ce8
 800f730:	20005cf0 	.word	0x20005cf0
 800f734:	20005cf8 	.word	0x20005cf8
 800f738:	20005cf4 	.word	0x20005cf4
 800f73c:	20005d04 	.word	0x20005d04

0800f740 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f748:	4b28      	ldr	r3, [pc, #160]	; (800f7ec <prvInsertBlockIntoFreeList+0xac>)
 800f74a:	60fb      	str	r3, [r7, #12]
 800f74c:	e002      	b.n	800f754 <prvInsertBlockIntoFreeList+0x14>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d8f7      	bhi.n	800f74e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	4413      	add	r3, r2
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d108      	bne.n	800f782 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	441a      	add	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	441a      	add	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	429a      	cmp	r2, r3
 800f794:	d118      	bne.n	800f7c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4b15      	ldr	r3, [pc, #84]	; (800f7f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d00d      	beq.n	800f7be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	441a      	add	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	601a      	str	r2, [r3, #0]
 800f7bc:	e008      	b.n	800f7d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7be:	4b0c      	ldr	r3, [pc, #48]	; (800f7f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	601a      	str	r2, [r3, #0]
 800f7c6:	e003      	b.n	800f7d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d002      	beq.n	800f7de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7de:	bf00      	nop
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	20005ce8 	.word	0x20005ce8
 800f7f0:	20005cf0 	.word	0x20005cf0

0800f7f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	4912      	ldr	r1, [pc, #72]	; (800f844 <MX_USB_DEVICE_Init+0x50>)
 800f7fc:	4812      	ldr	r0, [pc, #72]	; (800f848 <MX_USB_DEVICE_Init+0x54>)
 800f7fe:	f7fc ff6d 	bl	800c6dc <USBD_Init>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f808:	f7f4 f8de 	bl	80039c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f80c:	490f      	ldr	r1, [pc, #60]	; (800f84c <MX_USB_DEVICE_Init+0x58>)
 800f80e:	480e      	ldr	r0, [pc, #56]	; (800f848 <MX_USB_DEVICE_Init+0x54>)
 800f810:	f7fc ff94 	bl	800c73c <USBD_RegisterClass>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f81a:	f7f4 f8d5 	bl	80039c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f81e:	490c      	ldr	r1, [pc, #48]	; (800f850 <MX_USB_DEVICE_Init+0x5c>)
 800f820:	4809      	ldr	r0, [pc, #36]	; (800f848 <MX_USB_DEVICE_Init+0x54>)
 800f822:	f7fc fe8b 	bl	800c53c <USBD_CDC_RegisterInterface>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f82c:	f7f4 f8cc 	bl	80039c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f830:	4805      	ldr	r0, [pc, #20]	; (800f848 <MX_USB_DEVICE_Init+0x54>)
 800f832:	f7fc ffb9 	bl	800c7a8 <USBD_Start>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d001      	beq.n	800f840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f83c:	f7f4 f8c4 	bl	80039c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f840:	bf00      	nop
 800f842:	bd80      	pop	{r7, pc}
 800f844:	200000b4 	.word	0x200000b4
 800f848:	20005d08 	.word	0x20005d08
 800f84c:	2000001c 	.word	0x2000001c
 800f850:	200000a0 	.word	0x200000a0

0800f854 <CDC_Init_FS>:
#include "fifo.h"
fifo_s_t usb_tx_fifo;
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];

static int8_t CDC_Init_FS(void)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f858:	2200      	movs	r2, #0
 800f85a:	4908      	ldr	r1, [pc, #32]	; (800f87c <CDC_Init_FS+0x28>)
 800f85c:	4808      	ldr	r0, [pc, #32]	; (800f880 <CDC_Init_FS+0x2c>)
 800f85e:	f7fc fe87 	bl	800c570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f862:	4908      	ldr	r1, [pc, #32]	; (800f884 <CDC_Init_FS+0x30>)
 800f864:	4806      	ldr	r0, [pc, #24]	; (800f880 <CDC_Init_FS+0x2c>)
 800f866:	f7fc fea5 	bl	800c5b4 <USBD_CDC_SetRxBuffer>
  fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 800f86a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f86e:	4906      	ldr	r1, [pc, #24]	; (800f888 <CDC_Init_FS+0x34>)
 800f870:	4806      	ldr	r0, [pc, #24]	; (800f88c <CDC_Init_FS+0x38>)
 800f872:	f001 fd52 	bl	801131a <fifo_s_init>
  return (USBD_OK);
 800f876:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f878:	4618      	mov	r0, r3
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	200067f8 	.word	0x200067f8
 800f880:	20005d08 	.word	0x20005d08
 800f884:	20005ff8 	.word	0x20005ff8
 800f888:	20007010 	.word	0x20007010
 800f88c:	20006ff8 	.word	0x20006ff8

0800f890 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f890:	b480      	push	{r7}
 800f892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f894:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f896:	4618      	mov	r0, r3
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	6039      	str	r1, [r7, #0]
 800f8aa:	71fb      	strb	r3, [r7, #7]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	2b23      	cmp	r3, #35	; 0x23
 800f8b4:	d84a      	bhi.n	800f94c <CDC_Control_FS+0xac>
 800f8b6:	a201      	add	r2, pc, #4	; (adr r2, 800f8bc <CDC_Control_FS+0x1c>)
 800f8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8bc:	0800f94d 	.word	0x0800f94d
 800f8c0:	0800f94d 	.word	0x0800f94d
 800f8c4:	0800f94d 	.word	0x0800f94d
 800f8c8:	0800f94d 	.word	0x0800f94d
 800f8cc:	0800f94d 	.word	0x0800f94d
 800f8d0:	0800f94d 	.word	0x0800f94d
 800f8d4:	0800f94d 	.word	0x0800f94d
 800f8d8:	0800f94d 	.word	0x0800f94d
 800f8dc:	0800f94d 	.word	0x0800f94d
 800f8e0:	0800f94d 	.word	0x0800f94d
 800f8e4:	0800f94d 	.word	0x0800f94d
 800f8e8:	0800f94d 	.word	0x0800f94d
 800f8ec:	0800f94d 	.word	0x0800f94d
 800f8f0:	0800f94d 	.word	0x0800f94d
 800f8f4:	0800f94d 	.word	0x0800f94d
 800f8f8:	0800f94d 	.word	0x0800f94d
 800f8fc:	0800f94d 	.word	0x0800f94d
 800f900:	0800f94d 	.word	0x0800f94d
 800f904:	0800f94d 	.word	0x0800f94d
 800f908:	0800f94d 	.word	0x0800f94d
 800f90c:	0800f94d 	.word	0x0800f94d
 800f910:	0800f94d 	.word	0x0800f94d
 800f914:	0800f94d 	.word	0x0800f94d
 800f918:	0800f94d 	.word	0x0800f94d
 800f91c:	0800f94d 	.word	0x0800f94d
 800f920:	0800f94d 	.word	0x0800f94d
 800f924:	0800f94d 	.word	0x0800f94d
 800f928:	0800f94d 	.word	0x0800f94d
 800f92c:	0800f94d 	.word	0x0800f94d
 800f930:	0800f94d 	.word	0x0800f94d
 800f934:	0800f94d 	.word	0x0800f94d
 800f938:	0800f94d 	.word	0x0800f94d
 800f93c:	0800f94d 	.word	0x0800f94d
 800f940:	0800f94d 	.word	0x0800f94d
 800f944:	0800f94d 	.word	0x0800f94d
 800f948:	0800f94d 	.word	0x0800f94d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f94c:	bf00      	nop
  }

  return (USBD_OK);
 800f94e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	4805      	ldr	r0, [pc, #20]	; (800f980 <CDC_Receive_FS+0x24>)
 800f96a:	f7fc fe23 	bl	800c5b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f96e:	4804      	ldr	r0, [pc, #16]	; (800f980 <CDC_Receive_FS+0x24>)
 800f970:	f7fc fe7e 	bl	800c670 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f974:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	20005d08 	.word	0x20005d08

0800f984 <CDC_Transmit_FS>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73fb      	strb	r3, [r7, #15]
  // if (hcdc->TxState != 0){
  //   return USBD_BUSY;
  // }
  // USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  // result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  fifo_s_puts(&usb_tx_fifo, (char*)Buf, Len);
 800f994:	887b      	ldrh	r3, [r7, #2]
 800f996:	461a      	mov	r2, r3
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	4804      	ldr	r0, [pc, #16]	; (800f9ac <CDC_Transmit_FS+0x28>)
 800f99c:	f001 fcdf 	bl	801135e <fifo_s_puts>
  return result;
 800f9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20006ff8 	.word	0x20006ff8

0800f9b0 <usb_tx_flush>:

int32_t usb_tx_flush(void* argc)
{
 800f9b0:	b590      	push	{r4, r7, lr}
 800f9b2:	b089      	sub	sp, #36	; 0x24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	uint8_t result = USBD_OK;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	77fb      	strb	r3, [r7, #31]
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9bc:	4b17      	ldr	r3, [pc, #92]	; (800fa1c <usb_tx_flush+0x6c>)
 800f9be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9c2:	61bb      	str	r3, [r7, #24]
	
	if (hcdc->TxState != 0){
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <usb_tx_flush+0x22>
    return USBD_BUSY;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e01f      	b.n	800fa12 <usb_tx_flush+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f9d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
  }
	else
	{
		FIFO_CPU_SR_TYPE cpu_sr;
		uint32_t send_num;
    cpu_sr = FIFO_GET_CPU_SR();
 800f9da:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800f9dc:	b672      	cpsid	i
}
 800f9de:	bf00      	nop

    FIFO_ENTER_CRITICAL(); 
		send_num = usb_tx_fifo.used_num;
 800f9e0:	4b0f      	ldr	r3, [pc, #60]	; (800fa20 <usb_tx_flush+0x70>)
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	617b      	str	r3, [r7, #20]
		fifo_s_gets_noprotect(&usb_tx_fifo, (char*)UserTxBufferFS, send_num);
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	490e      	ldr	r1, [pc, #56]	; (800fa24 <usb_tx_flush+0x74>)
 800f9ec:	480c      	ldr	r0, [pc, #48]	; (800fa20 <usb_tx_flush+0x70>)
 800f9ee:	f001 fe50 	bl	8011692 <fifo_s_gets_noprotect>
 800f9f2:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f383 8810 	msr	PRIMASK, r3
}
 800f9fa:	bf00      	nop
		FIFO_RESTORE_CPU_SR(cpu_sr);

		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 800f9fc:	697a      	ldr	r2, [r7, #20]
 800f9fe:	4909      	ldr	r1, [pc, #36]	; (800fa24 <usb_tx_flush+0x74>)
 800fa00:	4806      	ldr	r0, [pc, #24]	; (800fa1c <usb_tx_flush+0x6c>)
 800fa02:	f7fc fdb5 	bl	800c570 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa06:	4805      	ldr	r0, [pc, #20]	; (800fa1c <usb_tx_flush+0x6c>)
 800fa08:	f7fc fdf2 	bl	800c5f0 <USBD_CDC_TransmitPacket>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	77fb      	strb	r3, [r7, #31]
		return result;
 800fa10:	7ffb      	ldrb	r3, [r7, #31]
	}
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3724      	adds	r7, #36	; 0x24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd90      	pop	{r4, r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20005d08 	.word	0x20005d08
 800fa20:	20006ff8 	.word	0x20006ff8
 800fa24:	200067f8 	.word	0x200067f8

0800fa28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	4613      	mov	r3, r2
 800fa34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
	...

0800fa4c <usb_vcp_rx_callback_register>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
    
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800fa54:	2300      	movs	r3, #0
 800fa56:	60fb      	str	r3, [r7, #12]
 800fa58:	e00f      	b.n	800fa7a <usb_vcp_rx_callback_register+0x2e>
  {
    if(usb_vcp_call_back[i] == NULL)
 800fa5a:	4a0d      	ldr	r2, [pc, #52]	; (800fa90 <usb_vcp_rx_callback_register+0x44>)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d106      	bne.n	800fa74 <usb_vcp_rx_callback_register+0x28>
    {
      usb_vcp_call_back[i] = fun;
 800fa66:	490a      	ldr	r1, [pc, #40]	; (800fa90 <usb_vcp_rx_callback_register+0x44>)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	e006      	b.n	800fa82 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	3301      	adds	r3, #1
 800fa78:	60fb      	str	r3, [r7, #12]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	ddec      	ble.n	800fa5a <usb_vcp_rx_callback_register+0xe>
    }
  }
    
  return USBD_FAIL;
 800fa80:	2303      	movs	r3, #3
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	20005fe4 	.word	0x20005fe4

0800fa94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	2212      	movs	r2, #18
 800faa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800faa6:	4b03      	ldr	r3, [pc, #12]	; (800fab4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	200000d0 	.word	0x200000d0

0800fab8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	4603      	mov	r3, r0
 800fac0:	6039      	str	r1, [r7, #0]
 800fac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	2204      	movs	r2, #4
 800fac8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800faca:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800facc:	4618      	mov	r0, r3
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	200000e4 	.word	0x200000e4

0800fadc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	4603      	mov	r3, r0
 800fae4:	6039      	str	r1, [r7, #0]
 800fae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d105      	bne.n	800fafa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	4907      	ldr	r1, [pc, #28]	; (800fb10 <USBD_FS_ProductStrDescriptor+0x34>)
 800faf2:	4808      	ldr	r0, [pc, #32]	; (800fb14 <USBD_FS_ProductStrDescriptor+0x38>)
 800faf4:	f7fe f80a 	bl	800db0c <USBD_GetString>
 800faf8:	e004      	b.n	800fb04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fafa:	683a      	ldr	r2, [r7, #0]
 800fafc:	4904      	ldr	r1, [pc, #16]	; (800fb10 <USBD_FS_ProductStrDescriptor+0x34>)
 800fafe:	4805      	ldr	r0, [pc, #20]	; (800fb14 <USBD_FS_ProductStrDescriptor+0x38>)
 800fb00:	f7fe f804 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb04:	4b02      	ldr	r3, [pc, #8]	; (800fb10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	20007810 	.word	0x20007810
 800fb14:	08012840 	.word	0x08012840

0800fb18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	6039      	str	r1, [r7, #0]
 800fb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb24:	683a      	ldr	r2, [r7, #0]
 800fb26:	4904      	ldr	r1, [pc, #16]	; (800fb38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb28:	4804      	ldr	r0, [pc, #16]	; (800fb3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb2a:	f7fd ffef 	bl	800db0c <USBD_GetString>
  return USBD_StrDesc;
 800fb2e:	4b02      	ldr	r3, [pc, #8]	; (800fb38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	20007810 	.word	0x20007810
 800fb3c:	08012858 	.word	0x08012858

0800fb40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	4603      	mov	r3, r0
 800fb48:	6039      	str	r1, [r7, #0]
 800fb4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	221a      	movs	r2, #26
 800fb50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb52:	f000 f843 	bl	800fbdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb56:	4b02      	ldr	r3, [pc, #8]	; (800fb60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	200000e8 	.word	0x200000e8

0800fb64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	6039      	str	r1, [r7, #0]
 800fb6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb70:	79fb      	ldrb	r3, [r7, #7]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d105      	bne.n	800fb82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	4907      	ldr	r1, [pc, #28]	; (800fb98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb7a:	4808      	ldr	r0, [pc, #32]	; (800fb9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb7c:	f7fd ffc6 	bl	800db0c <USBD_GetString>
 800fb80:	e004      	b.n	800fb8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	4904      	ldr	r1, [pc, #16]	; (800fb98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb86:	4805      	ldr	r0, [pc, #20]	; (800fb9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb88:	f7fd ffc0 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	20007810 	.word	0x20007810
 800fb9c:	0801286c 	.word	0x0801286c

0800fba0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	6039      	str	r1, [r7, #0]
 800fbaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fbac:	79fb      	ldrb	r3, [r7, #7]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d105      	bne.n	800fbbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	4907      	ldr	r1, [pc, #28]	; (800fbd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbb6:	4808      	ldr	r0, [pc, #32]	; (800fbd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbb8:	f7fd ffa8 	bl	800db0c <USBD_GetString>
 800fbbc:	e004      	b.n	800fbc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	4904      	ldr	r1, [pc, #16]	; (800fbd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbc2:	4805      	ldr	r0, [pc, #20]	; (800fbd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbc4:	f7fd ffa2 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbc8:	4b02      	ldr	r3, [pc, #8]	; (800fbd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	20007810 	.word	0x20007810
 800fbd8:	08012878 	.word	0x08012878

0800fbdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbe2:	4b0f      	ldr	r3, [pc, #60]	; (800fc20 <Get_SerialNum+0x44>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbe8:	4b0e      	ldr	r3, [pc, #56]	; (800fc24 <Get_SerialNum+0x48>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbee:	4b0e      	ldr	r3, [pc, #56]	; (800fc28 <Get_SerialNum+0x4c>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d009      	beq.n	800fc16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc02:	2208      	movs	r2, #8
 800fc04:	4909      	ldr	r1, [pc, #36]	; (800fc2c <Get_SerialNum+0x50>)
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f000 f814 	bl	800fc34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc0c:	2204      	movs	r2, #4
 800fc0e:	4908      	ldr	r1, [pc, #32]	; (800fc30 <Get_SerialNum+0x54>)
 800fc10:	68b8      	ldr	r0, [r7, #8]
 800fc12:	f000 f80f 	bl	800fc34 <IntToUnicode>
  }
}
 800fc16:	bf00      	nop
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	1fff7a10 	.word	0x1fff7a10
 800fc24:	1fff7a14 	.word	0x1fff7a14
 800fc28:	1fff7a18 	.word	0x1fff7a18
 800fc2c:	200000ea 	.word	0x200000ea
 800fc30:	200000fa 	.word	0x200000fa

0800fc34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc46:	2300      	movs	r3, #0
 800fc48:	75fb      	strb	r3, [r7, #23]
 800fc4a:	e027      	b.n	800fc9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	0f1b      	lsrs	r3, r3, #28
 800fc50:	2b09      	cmp	r3, #9
 800fc52:	d80b      	bhi.n	800fc6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	0f1b      	lsrs	r3, r3, #28
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	7dfb      	ldrb	r3, [r7, #23]
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	4619      	mov	r1, r3
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	440b      	add	r3, r1
 800fc64:	3230      	adds	r2, #48	; 0x30
 800fc66:	b2d2      	uxtb	r2, r2
 800fc68:	701a      	strb	r2, [r3, #0]
 800fc6a:	e00a      	b.n	800fc82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	0f1b      	lsrs	r3, r3, #28
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	4619      	mov	r1, r3
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	440b      	add	r3, r1
 800fc7c:	3237      	adds	r2, #55	; 0x37
 800fc7e:	b2d2      	uxtb	r2, r2
 800fc80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	011b      	lsls	r3, r3, #4
 800fc86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc88:	7dfb      	ldrb	r3, [r7, #23]
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	68ba      	ldr	r2, [r7, #8]
 800fc90:	4413      	add	r3, r2
 800fc92:	2200      	movs	r2, #0
 800fc94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	75fb      	strb	r3, [r7, #23]
 800fc9c:	7dfa      	ldrb	r2, [r7, #23]
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d3d3      	bcc.n	800fc4c <IntToUnicode+0x18>
  }
}
 800fca4:	bf00      	nop
 800fca6:	bf00      	nop
 800fca8:	371c      	adds	r7, #28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
	...

0800fcb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08a      	sub	sp, #40	; 0x28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcbc:	f107 0314 	add.w	r3, r7, #20
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	605a      	str	r2, [r3, #4]
 800fcc6:	609a      	str	r2, [r3, #8]
 800fcc8:	60da      	str	r2, [r3, #12]
 800fcca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fcd4:	d13a      	bne.n	800fd4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	613b      	str	r3, [r7, #16]
 800fcda:	4b1e      	ldr	r3, [pc, #120]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcde:	4a1d      	ldr	r2, [pc, #116]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fce0:	f043 0301 	orr.w	r3, r3, #1
 800fce4:	6313      	str	r3, [r2, #48]	; 0x30
 800fce6:	4b1b      	ldr	r3, [pc, #108]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	613b      	str	r3, [r7, #16]
 800fcf0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800fcf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcf8:	2302      	movs	r3, #2
 800fcfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd00:	2303      	movs	r3, #3
 800fd02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd04:	230a      	movs	r3, #10
 800fd06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd08:	f107 0314 	add.w	r3, r7, #20
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4812      	ldr	r0, [pc, #72]	; (800fd58 <HAL_PCD_MspInit+0xa4>)
 800fd10:	f7f5 ff86 	bl	8005c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd14:	4b0f      	ldr	r3, [pc, #60]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd18:	4a0e      	ldr	r2, [pc, #56]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fd1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd1e:	6353      	str	r3, [r2, #52]	; 0x34
 800fd20:	2300      	movs	r3, #0
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	4b0b      	ldr	r3, [pc, #44]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fd26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd28:	4a0a      	ldr	r2, [pc, #40]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fd2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd2e:	6453      	str	r3, [r2, #68]	; 0x44
 800fd30:	4b08      	ldr	r3, [pc, #32]	; (800fd54 <HAL_PCD_MspInit+0xa0>)
 800fd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd38:	60fb      	str	r3, [r7, #12]
 800fd3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2105      	movs	r1, #5
 800fd40:	2043      	movs	r0, #67	; 0x43
 800fd42:	f7f5 fb41 	bl	80053c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd46:	2043      	movs	r0, #67	; 0x43
 800fd48:	f7f5 fb5a 	bl	8005400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd4c:	bf00      	nop
 800fd4e:	3728      	adds	r7, #40	; 0x28
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	40023800 	.word	0x40023800
 800fd58:	40020000 	.word	0x40020000

0800fd5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800fd70:	4619      	mov	r1, r3
 800fd72:	4610      	mov	r0, r2
 800fd74:	f7fc fd65 	bl	800c842 <USBD_LL_SetupStage>
}
 800fd78:	bf00      	nop
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800fd92:	78fa      	ldrb	r2, [r7, #3]
 800fd94:	6879      	ldr	r1, [r7, #4]
 800fd96:	4613      	mov	r3, r2
 800fd98:	00db      	lsls	r3, r3, #3
 800fd9a:	4413      	add	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	440b      	add	r3, r1
 800fda0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	78fb      	ldrb	r3, [r7, #3]
 800fda8:	4619      	mov	r1, r3
 800fdaa:	f7fc fd9f 	bl	800c8ec <USBD_LL_DataOutStage>
}
 800fdae:	bf00      	nop
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b082      	sub	sp, #8
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800fdc8:	78fa      	ldrb	r2, [r7, #3]
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	4613      	mov	r3, r2
 800fdce:	00db      	lsls	r3, r3, #3
 800fdd0:	4413      	add	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	440b      	add	r3, r1
 800fdd6:	3320      	adds	r3, #32
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	78fb      	ldrb	r3, [r7, #3]
 800fddc:	4619      	mov	r1, r3
 800fdde:	f7fc fe38 	bl	800ca52 <USBD_LL_DataInStage>
}
 800fde2:	bf00      	nop
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b082      	sub	sp, #8
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fc ff72 	bl	800cce2 <USBD_LL_SOF>
}
 800fdfe:	bf00      	nop
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	79db      	ldrb	r3, [r3, #7]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d102      	bne.n	800fe20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
 800fe1e:	e008      	b.n	800fe32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	79db      	ldrb	r3, [r3, #7]
 800fe24:	2b02      	cmp	r3, #2
 800fe26:	d102      	bne.n	800fe2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	73fb      	strb	r3, [r7, #15]
 800fe2c:	e001      	b.n	800fe32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe2e:	f7f3 fdcb 	bl	80039c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe38:	7bfa      	ldrb	r2, [r7, #15]
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fc ff0c 	bl	800cc5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fc feb4 	bl	800cbb6 <USBD_LL_Reset>
}
 800fe4e:	bf00      	nop
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
	...

0800fe58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fc ff07 	bl	800cc7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	6812      	ldr	r2, [r2, #0]
 800fe7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe7e:	f043 0301 	orr.w	r3, r3, #1
 800fe82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	7adb      	ldrb	r3, [r3, #11]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d005      	beq.n	800fe98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe8c:	4b04      	ldr	r3, [pc, #16]	; (800fea0 <HAL_PCD_SuspendCallback+0x48>)
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	4a03      	ldr	r2, [pc, #12]	; (800fea0 <HAL_PCD_SuspendCallback+0x48>)
 800fe92:	f043 0306 	orr.w	r3, r3, #6
 800fe96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe98:	bf00      	nop
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	e000ed00 	.word	0xe000ed00

0800fea4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fc fefd 	bl	800ccb2 <USBD_LL_Resume>
}
 800feb8:	bf00      	nop
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fed2:	78fa      	ldrb	r2, [r7, #3]
 800fed4:	4611      	mov	r1, r2
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fc ff55 	bl	800cd86 <USBD_LL_IsoOUTIncomplete>
}
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fef6:	78fa      	ldrb	r2, [r7, #3]
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fc ff11 	bl	800cd22 <USBD_LL_IsoINIncomplete>
}
 800ff00:	bf00      	nop
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fc ff67 	bl	800cdea <USBD_LL_DevConnected>
}
 800ff1c:	bf00      	nop
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fc ff64 	bl	800ce00 <USBD_LL_DevDisconnected>
}
 800ff38:	bf00      	nop
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d13c      	bne.n	800ffca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff50:	4a20      	ldr	r2, [pc, #128]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4a1e      	ldr	r2, [pc, #120]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff60:	4b1c      	ldr	r3, [pc, #112]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ff68:	4b1a      	ldr	r3, [pc, #104]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff6a:	2204      	movs	r2, #4
 800ff6c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff6e:	4b19      	ldr	r3, [pc, #100]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff70:	2202      	movs	r2, #2
 800ff72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff74:	4b17      	ldr	r3, [pc, #92]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff7a:	4b16      	ldr	r3, [pc, #88]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff7c:	2202      	movs	r2, #2
 800ff7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff80:	4b14      	ldr	r3, [pc, #80]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff86:	4b13      	ldr	r3, [pc, #76]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff8c:	4b11      	ldr	r3, [pc, #68]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff8e:	2200      	movs	r2, #0
 800ff90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff92:	4b10      	ldr	r3, [pc, #64]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff94:	2200      	movs	r2, #0
 800ff96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff98:	4b0e      	ldr	r3, [pc, #56]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff9e:	480d      	ldr	r0, [pc, #52]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ffa0:	f7f6 f81d 	bl	8005fde <HAL_PCD_Init>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d001      	beq.n	800ffae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ffaa:	f7f3 fd0d 	bl	80039c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ffae:	2180      	movs	r1, #128	; 0x80
 800ffb0:	4808      	ldr	r0, [pc, #32]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ffb2:	f7f7 fa48 	bl	8007446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ffb6:	2240      	movs	r2, #64	; 0x40
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4806      	ldr	r0, [pc, #24]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ffbc:	f7f7 f9fc 	bl	80073b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ffc0:	2280      	movs	r2, #128	; 0x80
 800ffc2:	2101      	movs	r1, #1
 800ffc4:	4803      	ldr	r0, [pc, #12]	; (800ffd4 <USBD_LL_Init+0x94>)
 800ffc6:	f7f7 f9f7 	bl	80073b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	20007a10 	.word	0x20007a10

0800ffd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f6 f904 	bl	80061fc <HAL_PCD_Start>
 800fff4:	4603      	mov	r3, r0
 800fff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f000 f942 	bl	8010284 <USBD_Get_USB_Status>
 8010000:	4603      	mov	r3, r0
 8010002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010004:	7bbb      	ldrb	r3, [r7, #14]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b084      	sub	sp, #16
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	461a      	mov	r2, r3
 801001c:	4603      	mov	r3, r0
 801001e:	70fb      	strb	r3, [r7, #3]
 8010020:	460b      	mov	r3, r1
 8010022:	70bb      	strb	r3, [r7, #2]
 8010024:	4613      	mov	r3, r2
 8010026:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010028:	2300      	movs	r3, #0
 801002a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801002c:	2300      	movs	r3, #0
 801002e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010036:	78bb      	ldrb	r3, [r7, #2]
 8010038:	883a      	ldrh	r2, [r7, #0]
 801003a:	78f9      	ldrb	r1, [r7, #3]
 801003c:	f7f6 fdd8 	bl	8006bf0 <HAL_PCD_EP_Open>
 8010040:	4603      	mov	r3, r0
 8010042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	4618      	mov	r0, r3
 8010048:	f000 f91c 	bl	8010284 <USBD_Get_USB_Status>
 801004c:	4603      	mov	r3, r0
 801004e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010050:	7bbb      	ldrb	r3, [r7, #14]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801005a:	b580      	push	{r7, lr}
 801005c:	b084      	sub	sp, #16
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	460b      	mov	r3, r1
 8010064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010066:	2300      	movs	r3, #0
 8010068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801006a:	2300      	movs	r3, #0
 801006c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010074:	78fa      	ldrb	r2, [r7, #3]
 8010076:	4611      	mov	r1, r2
 8010078:	4618      	mov	r0, r3
 801007a:	f7f6 fe21 	bl	8006cc0 <HAL_PCD_EP_Close>
 801007e:	4603      	mov	r3, r0
 8010080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010082:	7bfb      	ldrb	r3, [r7, #15]
 8010084:	4618      	mov	r0, r3
 8010086:	f000 f8fd 	bl	8010284 <USBD_Get_USB_Status>
 801008a:	4603      	mov	r3, r0
 801008c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801008e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100b2:	78fa      	ldrb	r2, [r7, #3]
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7f6 fed9 	bl	8006e6e <HAL_PCD_EP_SetStall>
 80100bc:	4603      	mov	r3, r0
 80100be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 f8de 	bl	8010284 <USBD_Get_USB_Status>
 80100c8:	4603      	mov	r3, r0
 80100ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b084      	sub	sp, #16
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	460b      	mov	r3, r1
 80100e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100e6:	2300      	movs	r3, #0
 80100e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100f0:	78fa      	ldrb	r2, [r7, #3]
 80100f2:	4611      	mov	r1, r2
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7f6 ff1d 	bl	8006f34 <HAL_PCD_EP_ClrStall>
 80100fa:	4603      	mov	r3, r0
 80100fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
 8010100:	4618      	mov	r0, r3
 8010102:	f000 f8bf 	bl	8010284 <USBD_Get_USB_Status>
 8010106:	4603      	mov	r3, r0
 8010108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801010a:	7bbb      	ldrb	r3, [r7, #14]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010126:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801012c:	2b00      	cmp	r3, #0
 801012e:	da0b      	bge.n	8010148 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	4613      	mov	r3, r2
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	440b      	add	r3, r1
 8010142:	3316      	adds	r3, #22
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	e00b      	b.n	8010160 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010148:	78fb      	ldrb	r3, [r7, #3]
 801014a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801014e:	68f9      	ldr	r1, [r7, #12]
 8010150:	4613      	mov	r3, r2
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	4413      	add	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	440b      	add	r3, r1
 801015a:	f203 2356 	addw	r3, r3, #598	; 0x256
 801015e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	460b      	mov	r3, r1
 8010176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010178:	2300      	movs	r3, #0
 801017a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010186:	78fa      	ldrb	r2, [r7, #3]
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f7f6 fd0c 	bl	8006ba8 <HAL_PCD_SetAddress>
 8010190:	4603      	mov	r3, r0
 8010192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010194:	7bfb      	ldrb	r3, [r7, #15]
 8010196:	4618      	mov	r0, r3
 8010198:	f000 f874 	bl	8010284 <USBD_Get_USB_Status>
 801019c:	4603      	mov	r3, r0
 801019e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b086      	sub	sp, #24
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	60f8      	str	r0, [r7, #12]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	603b      	str	r3, [r7, #0]
 80101b6:	460b      	mov	r3, r1
 80101b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101ba:	2300      	movs	r3, #0
 80101bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80101c8:	7af9      	ldrb	r1, [r7, #11]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	f7f6 fe14 	bl	8006dfa <HAL_PCD_EP_Transmit>
 80101d2:	4603      	mov	r3, r0
 80101d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101d6:	7dfb      	ldrb	r3, [r7, #23]
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f853 	bl	8010284 <USBD_Get_USB_Status>
 80101de:	4603      	mov	r3, r0
 80101e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	603b      	str	r3, [r7, #0]
 80101f8:	460b      	mov	r3, r1
 80101fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010200:	2300      	movs	r3, #0
 8010202:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801020a:	7af9      	ldrb	r1, [r7, #11]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	f7f6 fda0 	bl	8006d54 <HAL_PCD_EP_Receive>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	4618      	mov	r0, r3
 801021c:	f000 f832 	bl	8010284 <USBD_Get_USB_Status>
 8010220:	4603      	mov	r3, r0
 8010222:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010224:	7dbb      	ldrb	r3, [r7, #22]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b082      	sub	sp, #8
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	460b      	mov	r3, r1
 8010238:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010240:	78fa      	ldrb	r2, [r7, #3]
 8010242:	4611      	mov	r1, r2
 8010244:	4618      	mov	r0, r3
 8010246:	f7f6 fdc0 	bl	8006dca <HAL_PCD_EP_GetRxCount>
 801024a:	4603      	mov	r3, r0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801025c:	4b03      	ldr	r3, [pc, #12]	; (801026c <USBD_static_malloc+0x18>)
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	20007ef4 	.word	0x20007ef4

08010270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]

}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	2b03      	cmp	r3, #3
 8010296:	d817      	bhi.n	80102c8 <USBD_Get_USB_Status+0x44>
 8010298:	a201      	add	r2, pc, #4	; (adr r2, 80102a0 <USBD_Get_USB_Status+0x1c>)
 801029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029e:	bf00      	nop
 80102a0:	080102b1 	.word	0x080102b1
 80102a4:	080102b7 	.word	0x080102b7
 80102a8:	080102bd 	.word	0x080102bd
 80102ac:	080102c3 	.word	0x080102c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
    break;
 80102b4:	e00b      	b.n	80102ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102b6:	2303      	movs	r3, #3
 80102b8:	73fb      	strb	r3, [r7, #15]
    break;
 80102ba:	e008      	b.n	80102ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102bc:	2301      	movs	r3, #1
 80102be:	73fb      	strb	r3, [r7, #15]
    break;
 80102c0:	e005      	b.n	80102ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102c2:	2303      	movs	r3, #3
 80102c4:	73fb      	strb	r3, [r7, #15]
    break;
 80102c6:	e002      	b.n	80102ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80102c8:	2303      	movs	r3, #3
 80102ca:	73fb      	strb	r3, [r7, #15]
    break;
 80102cc:	bf00      	nop
  }
  return usb_status;
 80102ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	edd3 7a00 	vldr	s15, [r3]
 80102ee:	ed97 7a00 	vldr	s14, [r7]
 80102f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fa:	d502      	bpl.n	8010302 <abs_limit+0x26>
    *a = ABS_MAX;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	683a      	ldr	r2, [r7, #0]
 8010300:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	ed93 7a00 	vldr	s14, [r3]
 8010308:	edd7 7a00 	vldr	s15, [r7]
 801030c:	eef1 7a67 	vneg.f32	s15, s15
 8010310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010318:	d400      	bmi.n	801031c <abs_limit+0x40>
    *a = -ABS_MAX;
}
 801031a:	e006      	b.n	801032a <abs_limit+0x4e>
    *a = -ABS_MAX;
 801031c:	edd7 7a00 	vldr	s15, [r7]
 8010320:	eef1 7a67 	vneg.f32	s15, s15
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	edc3 7a00 	vstr	s15, [r3]
}
 801032a:	bf00      	nop
 801032c:	370c      	adds	r7, #12
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 8010336:	b480      	push	{r7}
 8010338:	b087      	sub	sp, #28
 801033a:	af00      	add	r7, sp, #0
 801033c:	6178      	str	r0, [r7, #20]
 801033e:	ed87 0a04 	vstr	s0, [r7, #16]
 8010342:	edc7 0a03 	vstr	s1, [r7, #12]
 8010346:	ed87 1a02 	vstr	s2, [r7, #8]
 801034a:	edc7 1a01 	vstr	s3, [r7, #4]
 801034e:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	693a      	ldr	r2, [r7, #16]
 801035c:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	68ba      	ldr	r2, [r7, #8]
 8010362:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	683a      	ldr	r2, [r7, #0]
 801036e:	609a      	str	r2, [r3, #8]
}
 8010370:	bf00      	nop
 8010372:	371c      	adds	r7, #28
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 801037c:	b480      	push	{r7}
 801037e:	b085      	sub	sp, #20
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	ed87 0a02 	vstr	s0, [r7, #8]
 8010388:	edc7 0a01 	vstr	s1, [r7, #4]
 801038c:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	683a      	ldr	r2, [r7, #0]
 80103a0:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f04f 0200 	mov.w	r2, #0
 80103a8:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f04f 0200 	mov.w	r2, #0
 80103b0:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f04f 0200 	mov.w	r2, #0
 80103b8:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f04f 0200 	mov.w	r2, #0
 80103c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr

080103ce <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b084      	sub	sp, #16
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	60f8      	str	r0, [r7, #12]
 80103d6:	ed87 0a02 	vstr	s0, [r7, #8]
 80103da:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	61da      	str	r2, [r3, #28]
  pid->set = set;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 80103ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80103ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80103f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8010402:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040a:	d00f      	beq.n	801042c <pid_calculate+0x5e>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	edd3 7a08 	vldr	s15, [r3, #32]
 8010412:	eeb0 7ae7 	vabs.f32	s14, s15
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	edd3 7a03 	vldr	s15, [r3, #12]
 801041c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010424:	dd02      	ble.n	801042c <pid_calculate+0x5e>
    return 0;
 8010426:	f04f 0300 	mov.w	r3, #0
 801042a:	e052      	b.n	80104d2 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	ed93 7a00 	vldr	s14, [r3]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	edd3 7a08 	vldr	s15, [r3, #32]
 8010438:	ee67 7a27 	vmul.f32	s15, s14, s15
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	edd3 6a01 	vldr	s13, [r3, #4]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	edd3 7a08 	vldr	s15, [r3, #32]
 8010454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010458:	ee77 7a27 	vadd.f32	s15, s14, s15
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	ed93 7a02 	vldr	s14, [r3, #8]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	edd3 6a08 	vldr	s13, [r3, #32]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010474:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	edd3 7a05 	vldr	s15, [r3, #20]
 801048e:	eeb0 0a67 	vmov.f32	s0, s15
 8010492:	4610      	mov	r0, r2
 8010494:	f7ff ff22 	bl	80102dc <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80104a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80104ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80104c4:	eeb0 0a67 	vmov.f32	s0, s15
 80104c8:	4610      	mov	r0, r2
 80104ca:	f7ff ff07 	bl	80102dc <abs_limit>

  return pid->out;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80104d2:	ee07 3a90 	vmov	s15, r3
 80104d6:	eeb0 0a67 	vmov.f32	s0, s15
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6178      	str	r0, [r7, #20]
 80104e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80104ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80104f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80104f4:	edc7 1a01 	vstr	s3, [r7, #4]
 80104f8:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	4a10      	ldr	r2, [pc, #64]	; (8010540 <pid_struct_init+0x60>)
 8010500:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	4a0f      	ldr	r2, [pc, #60]	; (8010544 <pid_struct_init+0x64>)
 8010506:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801050c:	ed97 2a00 	vldr	s4, [r7]
 8010510:	edd7 1a01 	vldr	s3, [r7, #4]
 8010514:	ed97 1a02 	vldr	s2, [r7, #8]
 8010518:	edd7 0a03 	vldr	s1, [r7, #12]
 801051c:	ed97 0a04 	vldr	s0, [r7, #16]
 8010520:	6978      	ldr	r0, [r7, #20]
 8010522:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010528:	ed97 1a00 	vldr	s2, [r7]
 801052c:	edd7 0a01 	vldr	s1, [r7, #4]
 8010530:	ed97 0a02 	vldr	s0, [r7, #8]
 8010534:	6978      	ldr	r0, [r7, #20]
 8010536:	4798      	blx	r3
}
 8010538:	bf00      	nop
 801053a:	3718      	adds	r7, #24
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	08010337 	.word	0x08010337
 8010544:	0801037d 	.word	0x0801037d

08010548 <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	4613      	mov	r3, r2
 8010556:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d102      	bne.n	8010564 <controller_register+0x1c>
    return -RM_INVAL;
 801055e:	f06f 0301 	mvn.w	r3, #1
 8010562:	e01d      	b.n	80105a0 <controller_register+0x58>
  if (controller_find(name) != NULL)
 8010564:	68b8      	ldr	r0, [r7, #8]
 8010566:	f000 f81f 	bl	80105a8 <controller_find>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <controller_register+0x2e>
    return -RM_EXISTED;
 8010570:	f06f 0302 	mvn.w	r3, #2
 8010574:	e014      	b.n	80105a0 <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	2102      	movs	r1, #2
 801057c:	4618      	mov	r0, r3
 801057e:	f000 fe27 	bl	80111d0 <object_init>

  ctrl->type = type;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	79fa      	ldrb	r2, [r7, #7]
 8010586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	7f3a      	ldrb	r2, [r7, #28]
 801058e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3710      	adds	r7, #16
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 80105b0:	2102      	movs	r1, #2
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fe48 	bl	8011248 <object_find>
 80105b8:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 80105ba:	68fb      	ldr	r3, [r7, #12]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <controller_disable>:
  ctrl->enable = 1;
  return RM_OK;
}

int32_t controller_disable(struct controller *ctrl)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d101      	bne.n	80105d6 <controller_disable+0x12>
    return RM_INVAL;
 80105d2:	2302      	movs	r3, #2
 80105d4:	e00c      	b.n	80105f0 <controller_disable+0x2c>
  ctrl->enable = 0;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f04f 0200 	mov.w	r2, #0
 80105e4:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f04f 0200 	mov.w	r2, #0
 80105ec:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af02      	add	r7, sp, #8
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	607a      	str	r2, [r7, #4]
 8010608:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d102      	bne.n	8010616 <pid_controller_register+0x1a>
    return -RM_INVAL;
 8010610:	f06f 0301 	mvn.w	r3, #1
 8010614:	e00d      	b.n	8010632 <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	4a08      	ldr	r2, [pc, #32]	; (801063c <pid_controller_register+0x40>)
 801061a:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 801061c:	7e3b      	ldrb	r3, [r7, #24]
 801061e:	9301      	str	r3, [sp, #4]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7ff ff8c 	bl	8010548 <controller_register>

  return RM_OK;
 8010630:	2300      	movs	r3, #0
}              
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	08010641 	.word	0x08010641

08010640 <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	edd3 7a00 	vldr	s15, [r3]
 801065e:	edd7 0a00 	vldr	s1, [r7]
 8010662:	eeb0 0a67 	vmov.f32	s0, s15
 8010666:	6978      	ldr	r0, [r7, #20]
 8010668:	f7ff feb1 	bl	80103ce <pid_calculate>
  
  ctrl->output = pid_param->out;
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	60f8      	str	r0, [r7, #12]
 8010686:	60b9      	str	r1, [r7, #8]
 8010688:	4613      	mov	r3, r2
 801068a:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <device_register+0x1a>
    return -RM_INVAL;
 8010692:	f06f 0301 	mvn.w	r3, #1
 8010696:	e019      	b.n	80106cc <device_register+0x4e>
  if (device_find(name) != NULL)
 8010698:	68b8      	ldr	r0, [r7, #8]
 801069a:	f000 f81b 	bl	80106d4 <device_find>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d002      	beq.n	80106aa <device_register+0x2c>
    return -RM_EXISTED;
 80106a4:	f06f 0302 	mvn.w	r3, #2
 80106a8:	e010      	b.n	80106cc <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	2100      	movs	r1, #0
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 fd8d 	bl	80111d0 <object_init>

  dev->flag = flags;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	88fa      	ldrh	r2, [r7, #6]
 80106ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2200      	movs	r2, #0
 80106c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2200      	movs	r2, #0
 80106c8:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 80106dc:	2100      	movs	r1, #0
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fdb2 	bl	8011248 <object_find>
 80106e4:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 80106e6:	68fb      	ldr	r3, [r7, #12]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <motor_device_register>:
static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev,
                              const char *name,
                              uint16_t flags)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d102      	bne.n	801070a <motor_device_register+0x1a>
    return -RM_INVAL;
 8010704:	f06f 0301 	mvn.w	r3, #1
 8010708:	e035      	b.n	8010776 <motor_device_register+0x86>

  if (device_find(name) != NULL)
 801070a:	68b8      	ldr	r0, [r7, #8]
 801070c:	f7ff ffe2 	bl	80106d4 <device_find>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <motor_device_register+0x2c>
    return -RM_EXISTED;
 8010716:	f06f 0302 	mvn.w	r3, #2
 801071a:	e02c      	b.n	8010776 <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) != NULL)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010728:	4619      	mov	r1, r3
 801072a:	4610      	mov	r0, r2
 801072c:	f000 f83c 	bl	80107a8 <motor_device_find_by_canid>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d002      	beq.n	801073c <motor_device_register+0x4c>
    return -RM_EXISTED;
 8010736:	f06f 0302 	mvn.w	r3, #2
 801073a:	e01c      	b.n	8010776 <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010746:	d808      	bhi.n	801075a <motor_device_register+0x6a>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801074e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010752:	d902      	bls.n	801075a <motor_device_register+0x6a>
    return -RM_ERROR;
 8010754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010758:	e00d      	b.n	8010776 <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2200      	movs	r2, #0
 801075e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	4a06      	ldr	r2, [pc, #24]	; (8010780 <motor_device_register+0x90>)
 8010766:	661a      	str	r2, [r3, #96]	; 0x60

  device_register( &(motor_dev->parent), name, flags);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	88fa      	ldrh	r2, [r7, #6]
 801076c:	68b9      	ldr	r1, [r7, #8]
 801076e:	4618      	mov	r0, r3
 8010770:	f7ff ff85 	bl	801067e <device_register>

  return RM_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	08010a69 	.word	0x08010a69

08010784 <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn)
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d002      	beq.n	8010798 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 8010792:	4a04      	ldr	r2, [pc, #16]	; (80107a4 <motor_device_can_send_register+0x20>)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6013      	str	r3, [r2, #0]
}
 8010798:	bf00      	nop
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	20008114 	.word	0x20008114

080107a8 <motor_device_find_by_canid>:
  }
  return -RM_ERROR;
}

motor_device_t motor_device_find_by_canid(enum device_can can, uint16_t can_id)
{
 80107a8:	b590      	push	{r4, r7, lr}
 80107aa:	b08b      	sub	sp, #44	; 0x2c
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	460a      	mov	r2, r1
 80107b2:	71fb      	strb	r3, [r7, #7]
 80107b4:	4613      	mov	r3, r2
 80107b6:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 80107b8:	2300      	movs	r3, #0
 80107ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80107bc:	f3ef 8310 	mrs	r3, PRIMASK
 80107c0:	617b      	str	r3, [r7, #20]
  return(result);
 80107c2:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();
  
  /* enter critical */
  enter_critical();
 80107c4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80107c6:	b672      	cpsid	i
}
 80107c8:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 80107ca:	2000      	movs	r0, #0
 80107cc:	f000 fcd6 	bl	801117c <object_get_information>
 80107d0:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	627b      	str	r3, [r7, #36]	; 0x24
 80107d8:	e020      	b.n	801081c <motor_device_find_by_canid+0x74>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	3b24      	subs	r3, #36	; 0x24
 80107de:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107e6:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor)
 80107e8:	7efb      	ldrb	r3, [r7, #27]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d112      	bne.n	8010814 <motor_device_find_by_canid+0x6c>
    {
      continue;
    }  
    else if ((((motor_device_t)object)->can_id == can_id) && (((motor_device_t)object)->can_periph == can))
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107f4:	88ba      	ldrh	r2, [r7, #4]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d10d      	bne.n	8010816 <motor_device_find_by_canid+0x6e>
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010800:	79fa      	ldrb	r2, [r7, #7]
 8010802:	429a      	cmp	r2, r3
 8010804:	d107      	bne.n	8010816 <motor_device_find_by_canid+0x6e>
 8010806:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	f383 8810 	msr	PRIMASK, r3
}
 801080e:	bf00      	nop
    {
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	e00e      	b.n	8010832 <motor_device_find_by_canid+0x8a>
      continue;
 8010814:	bf00      	nop
       node = node->next)
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	3304      	adds	r3, #4
 8010820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010822:	429a      	cmp	r2, r3
 8010824:	d1d9      	bne.n	80107da <motor_device_find_by_canid+0x32>
 8010826:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f383 8810 	msr	PRIMASK, r3
}
 801082e:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	372c      	adds	r7, #44	; 0x2c
 8010836:	46bd      	mov	sp, r7
 8010838:	bd90      	pop	{r4, r7, pc}
	...

0801083c <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];

int32_t motor_device_can_output(enum device_can m_can)
{
 801083c:	b590      	push	{r4, r7, lr}
 801083e:	b08d      	sub	sp, #52	; 0x34
 8010840:	af02      	add	r7, sp, #8
 8010842:	4603      	mov	r3, r0
 8010844:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 801084a:	2240      	movs	r2, #64	; 0x40
 801084c:	2100      	movs	r1, #0
 801084e:	4873      	ldr	r0, [pc, #460]	; (8010a1c <motor_device_can_output+0x1e0>)
 8010850:	f001 fd49 	bl	80122e6 <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010854:	f3ef 8310 	mrs	r3, PRIMASK
 8010858:	613b      	str	r3, [r7, #16]
  return(result);
 801085a:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();
   
  /* enter critical */
  enter_critical();
 801085c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801085e:	b672      	cpsid	i
}
 8010860:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8010862:	2000      	movs	r0, #0
 8010864:	f000 fc8a 	bl	801117c <object_get_information>
 8010868:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	627b      	str	r3, [r7, #36]	; 0x24
 8010870:	e098      	b.n	80109a4 <motor_device_can_output+0x168>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	3b24      	subs	r3, #36	; 0x24
 8010876:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	617b      	str	r3, [r7, #20]
    if(motor_dev->parent.type == Device_Class_Motor)
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010882:	2b00      	cmp	r3, #0
 8010884:	f040 808b 	bne.w	801099e <motor_device_can_output+0x162>
    {
      if (((motor_device_t)object)->can_id < 0x205)
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801088e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010892:	d841      	bhi.n	8010918 <motor_device_can_output+0xdc>
      {
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801089a:	4a60      	ldr	r2, [pc, #384]	; (8010a1c <motor_device_can_output+0x1e0>)
 801089c:	015b      	lsls	r3, r3, #5
 801089e:	441a      	add	r2, r3
 80108a0:	6813      	ldr	r3, [r2, #0]
 80108a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80108a6:	f361 031c 	bfi	r3, r1, #0, #29
 80108aa:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80108b2:	121b      	asrs	r3, r3, #8
 80108b4:	b219      	sxth	r1, r3
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80108bc:	461a      	mov	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80108c4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	b2c8      	uxtb	r0, r1
 80108cc:	4953      	ldr	r1, [pc, #332]	; (8010a1c <motor_device_can_output+0x1e0>)
 80108ce:	0152      	lsls	r2, r2, #5
 80108d0:	440a      	add	r2, r1
 80108d2:	4413      	add	r3, r2
 80108d4:	3308      	adds	r3, #8
 80108d6:	4602      	mov	r2, r0
 80108d8:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80108e6:	461a      	mov	r2, r3
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80108ee:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	3301      	adds	r3, #1
 80108f6:	b2c8      	uxtb	r0, r1
 80108f8:	4948      	ldr	r1, [pc, #288]	; (8010a1c <motor_device_can_output+0x1e0>)
 80108fa:	0152      	lsls	r2, r2, #5
 80108fc:	440a      	add	r2, r1
 80108fe:	4413      	add	r3, r2
 8010900:	3308      	adds	r3, #8
 8010902:	4602      	mov	r2, r0
 8010904:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801090c:	461a      	mov	r2, r3
 801090e:	4b44      	ldr	r3, [pc, #272]	; (8010a20 <motor_device_can_output+0x1e4>)
 8010910:	2101      	movs	r1, #1
 8010912:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 8010916:	e042      	b.n	801099e <motor_device_can_output+0x162>
      }
      else
      {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801091e:	4a3f      	ldr	r2, [pc, #252]	; (8010a1c <motor_device_can_output+0x1e0>)
 8010920:	015b      	lsls	r3, r3, #5
 8010922:	4413      	add	r3, r2
 8010924:	f103 0210 	add.w	r2, r3, #16
 8010928:	6813      	ldr	r3, [r2, #0]
 801092a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801092e:	f361 031c 	bfi	r3, r1, #0, #29
 8010932:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801093a:	121b      	asrs	r3, r3, #8
 801093c:	b219      	sxth	r1, r3
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010944:	461a      	mov	r2, r3
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801094c:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	b2c8      	uxtb	r0, r1
 8010954:	4931      	ldr	r1, [pc, #196]	; (8010a1c <motor_device_can_output+0x1e0>)
 8010956:	0152      	lsls	r2, r2, #5
 8010958:	440a      	add	r2, r1
 801095a:	4413      	add	r3, r2
 801095c:	3318      	adds	r3, #24
 801095e:	4602      	mov	r2, r0
 8010960:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801096e:	461a      	mov	r2, r3
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010976:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	3301      	adds	r3, #1
 801097e:	b2c8      	uxtb	r0, r1
 8010980:	4926      	ldr	r1, [pc, #152]	; (8010a1c <motor_device_can_output+0x1e0>)
 8010982:	0152      	lsls	r2, r2, #5
 8010984:	440a      	add	r2, r1
 8010986:	4413      	add	r3, r2
 8010988:	3318      	adds	r3, #24
 801098a:	4602      	mov	r2, r0
 801098c:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010994:	4a22      	ldr	r2, [pc, #136]	; (8010a20 <motor_device_can_output+0x1e4>)
 8010996:	005b      	lsls	r3, r3, #1
 8010998:	4413      	add	r3, r2
 801099a:	2201      	movs	r2, #1
 801099c:	705a      	strb	r2, [r3, #1]
       node = node->next)
 801099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	3304      	adds	r3, #4
 80109a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109aa:	429a      	cmp	r2, r3
 80109ac:	f47f af61 	bne.w	8010872 <motor_device_can_output+0x36>
 80109b0:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f383 8810 	msr	PRIMASK, r3
}
 80109b8:	bf00      	nop
  }

  /* leave critical */
  exit_critical();
  
  for (int j = 0; j < 2; j++)
 80109ba:	2300      	movs	r3, #0
 80109bc:	623b      	str	r3, [r7, #32]
 80109be:	e025      	b.n	8010a0c <motor_device_can_output+0x1d0>
  {
    if (motor_send_flag[m_can][j] == 1)
 80109c0:	79fb      	ldrb	r3, [r7, #7]
 80109c2:	4a17      	ldr	r2, [pc, #92]	; (8010a20 <motor_device_can_output+0x1e4>)
 80109c4:	005b      	lsls	r3, r3, #1
 80109c6:	441a      	add	r2, r3
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	4413      	add	r3, r2
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d119      	bne.n	8010a06 <motor_device_can_output+0x1ca>
    {
      if (motor_can_send != NULL)
 80109d2:	4b14      	ldr	r3, [pc, #80]	; (8010a24 <motor_device_can_output+0x1e8>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00d      	beq.n	80109f6 <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 80109da:	4b12      	ldr	r3, [pc, #72]	; (8010a24 <motor_device_can_output+0x1e8>)
 80109dc:	681c      	ldr	r4, [r3, #0]
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	490e      	ldr	r1, [pc, #56]	; (8010a1c <motor_device_can_output+0x1e0>)
 80109e2:	005a      	lsls	r2, r3, #1
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	4413      	add	r3, r2
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	440b      	add	r3, r1
 80109ec:	79f8      	ldrb	r0, [r7, #7]
 80109ee:	68da      	ldr	r2, [r3, #12]
 80109f0:	9200      	str	r2, [sp, #0]
 80109f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109f4:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 80109f6:	79fb      	ldrb	r3, [r7, #7]
 80109f8:	4a09      	ldr	r2, [pc, #36]	; (8010a20 <motor_device_can_output+0x1e4>)
 80109fa:	005b      	lsls	r3, r3, #1
 80109fc:	441a      	add	r2, r3
 80109fe:	6a3b      	ldr	r3, [r7, #32]
 8010a00:	4413      	add	r3, r2
 8010a02:	2200      	movs	r2, #0
 8010a04:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++)
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	623b      	str	r3, [r7, #32]
 8010a0c:	6a3b      	ldr	r3, [r7, #32]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	ddd6      	ble.n	80109c0 <motor_device_can_output+0x184>
    }
  }

  /* not found */
  return RM_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	372c      	adds	r7, #44	; 0x2c
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd90      	pop	{r4, r7, pc}
 8010a1c:	2000811c 	.word	0x2000811c
 8010a20:	20008118 	.word	0x20008118
 8010a24:	20008114 	.word	0x20008114

08010a28 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id, uint8_t can_rx_data[])
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	603a      	str	r2, [r7, #0]
 8010a32:	71fb      	strb	r3, [r7, #7]
 8010a34:	460b      	mov	r3, r1
 8010a36:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 8010a38:	88ba      	ldrh	r2, [r7, #4]
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff feb2 	bl	80107a8 <motor_device_find_by_canid>
 8010a44:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL)
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d006      	beq.n	8010a5a <motor_device_data_update+0x32>
  {
    motor_dev->get_data(motor_dev, can_rx_data);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	4798      	blx	r3
    return RM_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	e001      	b.n	8010a5e <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 8010a5a:	f06f 0303 	mvn.w	r3, #3
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[])
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	3338      	adds	r3, #56	; 0x38
 8010a76:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	2b32      	cmp	r3, #50	; 0x32
 8010a88:	d903      	bls.n	8010a92 <get_encoder_data+0x2a>
  {
    motor->init_offset_f = 0;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d104      	bne.n	8010aa6 <get_encoder_data+0x3e>
  {
    get_motor_offset(ptr, can_rx_data);
 8010a9c:	6839      	ldr	r1, [r7, #0]
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f000 f886 	bl	8010bb0 <get_motor_offset>
    return;
 8010aa4:	e07f      	b.n	8010ba6 <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	881a      	ldrh	r2, [r3, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	021b      	lsls	r3, r3, #8
 8010ab4:	b21a      	sxth	r2, r3
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	3301      	adds	r3, #1
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	b21b      	sxth	r3, r3
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	b21b      	sxth	r3, r3
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	885b      	ldrh	r3, [r3, #2]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ad8:	dd0f      	ble.n	8010afa <get_encoder_data+0x92>
  {
    ptr->round_cnt--;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	689b      	ldr	r3, [r3, #8]
 8010ade:	1e5a      	subs	r2, r3, #1
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	881b      	ldrh	r3, [r3, #0]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	885b      	ldrh	r3, [r3, #2]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	615a      	str	r2, [r3, #20]
 8010af8:	e020      	b.n	8010b3c <get_encoder_data+0xd4>
  }
  else if (ptr->ecd - ptr->last_ecd < -4096)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	881b      	ldrh	r3, [r3, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	885b      	ldrh	r3, [r3, #2]
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8010b0a:	da0f      	bge.n	8010b2c <get_encoder_data+0xc4>
  {
    ptr->round_cnt++;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	1c5a      	adds	r2, r3, #1
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	881b      	ldrh	r3, [r3, #0]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	885b      	ldrh	r3, [r3, #2]
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	615a      	str	r2, [r3, #20]
 8010b2a:	e007      	b.n	8010b3c <get_encoder_data+0xd4>
  }
  else
  {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	881b      	ldrh	r3, [r3, #0]
 8010b30:	461a      	mov	r2, r3
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	885b      	ldrh	r3, [r3, #2]
 8010b36:	1ad2      	subs	r2, r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	689b      	ldr	r3, [r3, #8]
 8010b40:	035b      	lsls	r3, r3, #13
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	8812      	ldrh	r2, [r2, #0]
 8010b46:	4413      	add	r3, r2
 8010b48:	68fa      	ldr	r2, [r7, #12]
 8010b4a:	8b92      	ldrh	r2, [r2, #28]
 8010b4c:	1a9a      	subs	r2, r3, r2
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	ee07 3a90 	vmov	s15, r3
 8010b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8010bac <get_encoder_data+0x144>
 8010b62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b6a:	ee17 2a90 	vmov	r2, s15
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	3302      	adds	r3, #2
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	021b      	lsls	r3, r3, #8
 8010b7a:	b21a      	sxth	r2, r3
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	3303      	adds	r3, #3
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	b21b      	sxth	r3, r3
 8010b84:	4313      	orrs	r3, r2
 8010b86:	b21a      	sxth	r2, r3
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	3304      	adds	r3, #4
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	021b      	lsls	r3, r3, #8
 8010b94:	b21a      	sxth	r2, r3
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	3305      	adds	r3, #5
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	b21b      	sxth	r3, r3
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	b21a      	sxth	r2, r3
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	80da      	strh	r2, [r3, #6]
}
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	41b60b61 	.word	0x41b60b61

08010bb0 <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[])
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	021b      	lsls	r3, r3, #8
 8010bc0:	b21a      	sxth	r2, r3
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	b21b      	sxth	r3, r3
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	b21b      	sxth	r3, r3
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	881a      	ldrh	r2, [r3, #0]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	839a      	strh	r2, [r3, #28]
}
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <chassis_pid_register>:
 * Initialises the chassis device with the given name and CAN bus.
 * Registers the four motors and their PID controllers.
 * Sets the parameters of the skid steer.
*/
int32_t chassis_pid_register(struct chassis *chassis, const char *name, enum device_can can)
{
 8010be8:	b590      	push	{r4, r7, lr}
 8010bea:	b0ad      	sub	sp, #180	; 0xb4
 8010bec:	af02      	add	r7, sp, #8
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	71fb      	strb	r3, [r7, #7]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 8010bf6:	f107 0314 	add.w	r3, r7, #20
 8010bfa:	2280      	movs	r2, #128	; 0x80
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f001 fb71 	bl	80122e6 <memset>
  uint8_t name_len;

  int32_t err;

  if (chassis == NULL)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d102      	bne.n	8010c10 <chassis_pid_register+0x28>
    return -RM_INVAL;
 8010c0a:	f06f 0301 	mvn.w	r3, #1
 8010c0e:	e137      	b.n	8010e80 <chassis_pid_register+0x298>
  if (chassis_find(name) != NULL)
 8010c10:	68b8      	ldr	r0, [r7, #8]
 8010c12:	f000 fa1b 	bl	801104c <chassis_find>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d002      	beq.n	8010c22 <chassis_pid_register+0x3a>
    return -RM_EXISTED;
 8010c1c:	f06f 0302 	mvn.w	r3, #2
 8010c20:	e12e      	b.n	8010e80 <chassis_pid_register+0x298>

  object_init(&(chassis->parent), Object_Class_Chassis, name);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	2103      	movs	r1, #3
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 fad1 	bl	80111d0 <object_init>

  name_len = strlen(name);
 8010c2e:	68b8      	ldr	r0, [r7, #8]
 8010c30:	f7ef fade 	bl	80001f0 <strlen>
 8010c34:	4603      	mov	r3, r0
 8010c36:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  if (name_len > OBJECT_NAME_MAX_LEN / 2)
 8010c3a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010c3e:	2b10      	cmp	r3, #16
 8010c40:	d902      	bls.n	8010c48 <chassis_pid_register+0x60>
  {
    name_len = OBJECT_NAME_MAX_LEN / 2;
 8010c42:	2310      	movs	r3, #16
 8010c44:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  }

  for (int i = 0; i < 4; i++)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010c4e:	e04b      	b.n	8010ce8 <chassis_pid_register+0x100>
  {
    memcpy(&motor_name[i], name, name_len);
 8010c50:	f107 0214 	add.w	r2, r7, #20
 8010c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c58:	015b      	lsls	r3, r3, #5
 8010c5a:	4413      	add	r3, r2
 8010c5c:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8010c60:	68b9      	ldr	r1, [r7, #8]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f001 fbc4 	bl	80123f0 <memcpy>
    chassis->motor[i].can_periph = can;
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c6e:	2164      	movs	r1, #100	; 0x64
 8010c70:	fb01 f303 	mul.w	r3, r1, r3
 8010c74:	4413      	add	r3, r2
 8010c76:	33d4      	adds	r3, #212	; 0xd4
 8010c78:	79fa      	ldrb	r2, [r7, #7]
 8010c7a:	701a      	strb	r2, [r3, #0]
    chassis->motor[i].can_id = 0x201 + i;
 8010c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	f203 2301 	addw	r3, r3, #513	; 0x201
 8010c86:	b298      	uxth	r0, r3
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c8e:	2164      	movs	r1, #100	; 0x64
 8010c90:	fb01 f303 	mul.w	r3, r1, r3
 8010c94:	4413      	add	r3, r2
 8010c96:	33d6      	adds	r3, #214	; 0xd6
 8010c98:	4602      	mov	r2, r0
 8010c9a:	801a      	strh	r2, [r3, #0]
    // chassis->motor[i].init_offset_f = 1;

    chassis->ctrl[i].convert_feedback = motor_pid_input_convert;
 8010c9c:	68f9      	ldr	r1, [r7, #12]
 8010c9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	4413      	add	r3, r2
 8010ca8:	00db      	lsls	r3, r3, #3
 8010caa:	440b      	add	r3, r1
 8010cac:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010cb0:	4a75      	ldr	r2, [pc, #468]	; (8010e88 <chassis_pid_register+0x2a0>)
 8010cb2:	601a      	str	r2, [r3, #0]
    pid_struct_init(&chassis->motor_pid[i], 15000, 500, 6.5f, 0.1, 0);
 8010cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010cb8:	019b      	lsls	r3, r3, #6
 8010cba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	ed9f 2a71 	vldr	s4, [pc, #452]	; 8010e8c <chassis_pid_register+0x2a4>
 8010cc8:	eddf 1a71 	vldr	s3, [pc, #452]	; 8010e90 <chassis_pid_register+0x2a8>
 8010ccc:	eeb1 1a0a 	vmov.f32	s2, #26	; 0x40d00000  6.5
 8010cd0:	eddf 0a70 	vldr	s1, [pc, #448]	; 8010e94 <chassis_pid_register+0x2ac>
 8010cd4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8010e98 <chassis_pid_register+0x2b0>
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7ff fc01 	bl	80104e0 <pid_struct_init>
  for (int i = 0; i < 4; i++)
 8010cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010cec:	2b03      	cmp	r3, #3
 8010cee:	ddaf      	ble.n	8010c50 <chassis_pid_register+0x68>
  }

  chassis->skid_steer.param.wheel_perimeter = PERIMETER;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	4a6a      	ldr	r2, [pc, #424]	; (8010e9c <chassis_pid_register+0x2b4>)
 8010cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  chassis->skid_steer.param.wheeltrack = WHEELTRACK;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	4a69      	ldr	r2, [pc, #420]	; (8010ea0 <chassis_pid_register+0x2b8>)
 8010cfa:	631a      	str	r2, [r3, #48]	; 0x30
  chassis->skid_steer.param.wheelbase = WHEELBASE;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	4a69      	ldr	r2, [pc, #420]	; (8010ea4 <chassis_pid_register+0x2bc>)
 8010d00:	635a      	str	r2, [r3, #52]	; 0x34
  // chassis->skid_steer.param.rotate_x_offset = ROTATE_X_OFFSET;
  // chassis->skid_steer.param.rotate_y_offset = ROTATE_Y_OFFSET;

  memcpy(&motor_name[0][name_len], "_FR\0", 4);
 8010d02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010d06:	f107 0214 	add.w	r2, r7, #20
 8010d0a:	4413      	add	r3, r2
 8010d0c:	2204      	movs	r2, #4
 8010d0e:	4966      	ldr	r1, [pc, #408]	; (8010ea8 <chassis_pid_register+0x2c0>)
 8010d10:	4618      	mov	r0, r3
 8010d12:	f001 fb6d 	bl	80123f0 <memcpy>
  memcpy(&motor_name[1][name_len], "_FL\0", 4);
 8010d16:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010d1a:	f107 0214 	add.w	r2, r7, #20
 8010d1e:	3320      	adds	r3, #32
 8010d20:	4413      	add	r3, r2
 8010d22:	2204      	movs	r2, #4
 8010d24:	4961      	ldr	r1, [pc, #388]	; (8010eac <chassis_pid_register+0x2c4>)
 8010d26:	4618      	mov	r0, r3
 8010d28:	f001 fb62 	bl	80123f0 <memcpy>
  memcpy(&motor_name[2][name_len], "_BL\0", 4);
 8010d2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010d30:	f107 0214 	add.w	r2, r7, #20
 8010d34:	3340      	adds	r3, #64	; 0x40
 8010d36:	4413      	add	r3, r2
 8010d38:	2204      	movs	r2, #4
 8010d3a:	495d      	ldr	r1, [pc, #372]	; (8010eb0 <chassis_pid_register+0x2c8>)
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f001 fb57 	bl	80123f0 <memcpy>
  memcpy(&motor_name[3][name_len], "_BR\0", 4);
 8010d42:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010d46:	f107 0214 	add.w	r2, r7, #20
 8010d4a:	3360      	adds	r3, #96	; 0x60
 8010d4c:	4413      	add	r3, r2
 8010d4e:	2204      	movs	r2, #4
 8010d50:	4958      	ldr	r1, [pc, #352]	; (8010eb4 <chassis_pid_register+0x2cc>)
 8010d52:	4618      	mov	r0, r3
 8010d54:	f001 fb4c 	bl	80123f0 <memcpy>

  for (int i = 0; i < 4; i++)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010d5e:	e01d      	b.n	8010d9c <chassis_pid_register+0x1b4>
  {
    err = motor_device_register(&(chassis->motor[i]), motor_name[i], 0);
 8010d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d64:	2264      	movs	r2, #100	; 0x64
 8010d66:	fb02 f303 	mul.w	r3, r2, r3
 8010d6a:	3378      	adds	r3, #120	; 0x78
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	4413      	add	r3, r2
 8010d70:	1d18      	adds	r0, r3, #4
 8010d72:	f107 0214 	add.w	r2, r7, #20
 8010d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d7a:	015b      	lsls	r3, r3, #5
 8010d7c:	4413      	add	r3, r2
 8010d7e:	2200      	movs	r2, #0
 8010d80:	4619      	mov	r1, r3
 8010d82:	f7ff fcb5 	bl	80106f0 <motor_device_register>
 8010d86:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8010d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d16d      	bne.n	8010e6e <chassis_pid_register+0x286>
  for (int i = 0; i < 4; i++)
 8010d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d96:	3301      	adds	r3, #1
 8010d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	dddd      	ble.n	8010d60 <chassis_pid_register+0x178>
      goto end;
  }

  memcpy(&motor_name[0][name_len], "_CTLFR\0", 7);
 8010da4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010da8:	f107 0214 	add.w	r2, r7, #20
 8010dac:	4413      	add	r3, r2
 8010dae:	2207      	movs	r2, #7
 8010db0:	4941      	ldr	r1, [pc, #260]	; (8010eb8 <chassis_pid_register+0x2d0>)
 8010db2:	4618      	mov	r0, r3
 8010db4:	f001 fb1c 	bl	80123f0 <memcpy>
  memcpy(&motor_name[1][name_len], "_CTLFL\0", 7);
 8010db8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010dbc:	f107 0214 	add.w	r2, r7, #20
 8010dc0:	3320      	adds	r3, #32
 8010dc2:	4413      	add	r3, r2
 8010dc4:	2207      	movs	r2, #7
 8010dc6:	493d      	ldr	r1, [pc, #244]	; (8010ebc <chassis_pid_register+0x2d4>)
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f001 fb11 	bl	80123f0 <memcpy>
  memcpy(&motor_name[2][name_len], "_CTLBL\0", 7);
 8010dce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010dd2:	f107 0214 	add.w	r2, r7, #20
 8010dd6:	3340      	adds	r3, #64	; 0x40
 8010dd8:	4413      	add	r3, r2
 8010dda:	2207      	movs	r2, #7
 8010ddc:	4938      	ldr	r1, [pc, #224]	; (8010ec0 <chassis_pid_register+0x2d8>)
 8010dde:	4618      	mov	r0, r3
 8010de0:	f001 fb06 	bl	80123f0 <memcpy>
  memcpy(&motor_name[3][name_len], "_CTLBR\0", 7);
 8010de4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010de8:	f107 0214 	add.w	r2, r7, #20
 8010dec:	3360      	adds	r3, #96	; 0x60
 8010dee:	4413      	add	r3, r2
 8010df0:	2207      	movs	r2, #7
 8010df2:	4934      	ldr	r1, [pc, #208]	; (8010ec4 <chassis_pid_register+0x2dc>)
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 fafb 	bl	80123f0 <memcpy>

  for (int i = 0; i < 4; i++)
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010e00:	e02f      	b.n	8010e62 <chassis_pid_register+0x27a>
  {
    err = pid_controller_register(&(chassis->ctrl[i]), motor_name[i], &(chassis->motor_pid[i]), &(chassis->motor_feedback[i]), 1);
 8010e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e06:	4613      	mov	r3, r2
 8010e08:	00db      	lsls	r3, r3, #3
 8010e0a:	4413      	add	r3, r2
 8010e0c:	00db      	lsls	r3, r3, #3
 8010e0e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010e12:	68fa      	ldr	r2, [r7, #12]
 8010e14:	4413      	add	r3, r2
 8010e16:	1d18      	adds	r0, r3, #4
 8010e18:	f107 0214 	add.w	r2, r7, #20
 8010e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e20:	015b      	lsls	r3, r3, #5
 8010e22:	18d1      	adds	r1, r2, r3
 8010e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e28:	019b      	lsls	r3, r3, #6
 8010e2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010e2e:	68fa      	ldr	r2, [r7, #12]
 8010e30:	4413      	add	r3, r2
 8010e32:	1d1c      	adds	r4, r3, #4
 8010e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e38:	33c2      	adds	r3, #194	; 0xc2
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	4413      	add	r3, r2
 8010e40:	3304      	adds	r3, #4
 8010e42:	2201      	movs	r2, #1
 8010e44:	9200      	str	r2, [sp, #0]
 8010e46:	4622      	mov	r2, r4
 8010e48:	f7ff fbd8 	bl	80105fc <pid_controller_register>
 8010e4c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8010e50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d10c      	bne.n	8010e72 <chassis_pid_register+0x28a>
  for (int i = 0; i < 4; i++)
 8010e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e66:	2b03      	cmp	r3, #3
 8010e68:	ddcb      	ble.n	8010e02 <chassis_pid_register+0x21a>
      goto end;
  }

  return RM_OK;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	e008      	b.n	8010e80 <chassis_pid_register+0x298>
      goto end;
 8010e6e:	bf00      	nop
 8010e70:	e000      	b.n	8010e74 <chassis_pid_register+0x28c>
      goto end;
 8010e72:	bf00      	nop
end:
  object_detach(&(chassis->parent));
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f000 fa32 	bl	80112e0 <object_detach>

  return err;
 8010e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	37ac      	adds	r7, #172	; 0xac
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd90      	pop	{r4, r7, pc}
 8010e88:	080110b3 	.word	0x080110b3
 8010e8c:	00000000 	.word	0x00000000
 8010e90:	3dcccccd 	.word	0x3dcccccd
 8010e94:	43fa0000 	.word	0x43fa0000
 8010e98:	466a6000 	.word	0x466a6000
 8010e9c:	43ef0000 	.word	0x43ef0000
 8010ea0:	43c50000 	.word	0x43c50000
 8010ea4:	43cf8000 	.word	0x43cf8000
 8010ea8:	08012888 	.word	0x08012888
 8010eac:	08012890 	.word	0x08012890
 8010eb0:	08012898 	.word	0x08012898
 8010eb4:	080128a0 	.word	0x080128a0
 8010eb8:	080128a8 	.word	0x080128a8
 8010ebc:	080128b0 	.word	0x080128b0
 8010ec0:	080128b8 	.word	0x080128b8
 8010ec4:	080128c0 	.word	0x080128c0

08010ec8 <chassis_get_info>:

//   return RM_OK;
// }

int32_t chassis_get_info(struct chassis *chassis, struct chassis_info *info)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
  if (chassis == NULL)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d101      	bne.n	8010edc <chassis_get_info+0x14>
    return NULL;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e0ab      	b.n	8011034 <chassis_get_info+0x16c>

  memcpy(info, &(chassis->skid_steer.position), sizeof(struct skid_steer_position));
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	3340      	adds	r3, #64	; 0x40
 8010ee0:	2218      	movs	r2, #24
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6838      	ldr	r0, [r7, #0]
 8010ee6:	f001 fa83 	bl	80123f0 <memcpy>
  ANGLE_LIMIT_360(info->angle_deg, chassis->skid_steer.position.angle_deg);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8010ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	edc3 7a05 	vstr	s15, [r3, #20]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8010f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f18:	ee17 3a90 	vmov	r3, s15
 8010f1c:	4a47      	ldr	r2, [pc, #284]	; (801103c <chassis_get_info+0x174>)
 8010f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8010f22:	441a      	add	r2, r3
 8010f24:	1211      	asrs	r1, r2, #8
 8010f26:	17da      	asrs	r2, r3, #31
 8010f28:	1a8a      	subs	r2, r1, r2
 8010f2a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010f2e:	fb01 f202 	mul.w	r2, r1, r2
 8010f32:	1a9a      	subs	r2, r3, r2
 8010f34:	ee07 2a90 	vmov	s15, r2
 8010f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360_TO_180(info->angle_deg);
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	edd3 7a05 	vldr	s15, [r3, #20]
 8010f4c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8011040 <chassis_get_info+0x178>
 8010f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	dd09      	ble.n	8010f6e <chassis_get_info+0xa6>
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8010f60:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011044 <chassis_get_info+0x17c>
 8010f64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360(info->yaw_gyro_angle, chassis->skid_steer.gyro.yaw_gyro_angle);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8010f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	edc3 7a06 	vstr	s15, [r3, #24]
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8010f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f9c:	ee17 3a90 	vmov	r3, s15
 8010fa0:	4a26      	ldr	r2, [pc, #152]	; (801103c <chassis_get_info+0x174>)
 8010fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8010fa6:	441a      	add	r2, r3
 8010fa8:	1211      	asrs	r1, r2, #8
 8010faa:	17da      	asrs	r2, r3, #31
 8010fac:	1a8a      	subs	r2, r1, r2
 8010fae:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010fb2:	fb01 f202 	mul.w	r2, r1, r2
 8010fb6:	1a9a      	subs	r2, r3, r2
 8010fb8:	ee07 2a90 	vmov	s15, r2
 8010fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	edc3 7a06 	vstr	s15, [r3, #24]
  ANGLE_LIMIT_360_TO_180(info->yaw_gyro_angle);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	edd3 7a06 	vldr	s15, [r3, #24]
 8010fd0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8011040 <chassis_get_info+0x178>
 8010fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fdc:	dd09      	ble.n	8010ff2 <chassis_get_info+0x12a>
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	edd3 7a06 	vldr	s15, [r3, #24]
 8010fe4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8011044 <chassis_get_info+0x17c>
 8010fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	edc3 7a06 	vstr	s15, [r3, #24]
  info->yaw_gyro_rate = chassis->skid_steer.gyro.yaw_gyro_rate;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	61da      	str	r2, [r3, #28]

  for (int i = 0; i < 4; i++)
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60fb      	str	r3, [r7, #12]
 8010ffe:	e015      	b.n	801102c <chassis_get_info+0x164>
  {
    info->wheel_rpm[i] = chassis->skid_steer.wheel_rpm[i] * MOTOR_DECELE_RATIO;
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	3316      	adds	r3, #22
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	4413      	add	r3, r2
 801100a:	3308      	adds	r3, #8
 801100c:	edd3 7a00 	vldr	s15, [r3]
 8011010:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8011048 <chassis_get_info+0x180>
 8011014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	3308      	adds	r3, #8
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3301      	adds	r3, #1
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b03      	cmp	r3, #3
 8011030:	dde6      	ble.n	8011000 <chassis_get_info+0x138>
  }

  return RM_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	b60b60b7 	.word	0xb60b60b7
 8011040:	43340000 	.word	0x43340000
 8011044:	43b40000 	.word	0x43b40000
 8011048:	3d554c35 	.word	0x3d554c35

0801104c <chassis_find>:

chassis_t chassis_find(const char *name)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 8011054:	2103      	movs	r1, #3
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f8f6 	bl	8011248 <object_find>
 801105c:	60f8      	str	r0, [r7, #12]

  return (chassis_t)object;
 801105e:	68fb      	ldr	r3, [r7, #12]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <chassis_disable>:

  return RM_OK;
}

int32_t chassis_disable(struct chassis *chassis)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d102      	bne.n	801107c <chassis_disable+0x14>
    return -RM_INVAL;
 8011076:	f06f 0301 	mvn.w	r3, #1
 801107a:	e016      	b.n	80110aa <chassis_disable+0x42>

  for (int i = 0; i < 4; i++)
 801107c:	2300      	movs	r3, #0
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e00f      	b.n	80110a2 <chassis_disable+0x3a>
  {
    controller_disable(&(chassis->ctrl[i])); 
 8011082:	68fa      	ldr	r2, [r7, #12]
 8011084:	4613      	mov	r3, r2
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	4413      	add	r3, r2
 801108a:	00db      	lsls	r3, r3, #3
 801108c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	4413      	add	r3, r2
 8011094:	3304      	adds	r3, #4
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff fa94 	bl	80105c4 <controller_disable>
  for (int i = 0; i < 4; i++)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	3301      	adds	r3, #1
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2b03      	cmp	r3, #3
 80110a6:	ddec      	ble.n	8011082 <chassis_disable+0x1a>
  }

  return RM_OK;
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <motor_pid_input_convert>:

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input)
{
 80110b2:	b480      	push	{r7}
 80110b4:	b085      	sub	sp, #20
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110c0:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80110cc:	ee07 3a90 	vmov	s15, r3
 80110d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 80110da:	2300      	movs	r3, #0
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3714      	adds	r7, #20
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <__list_add>:
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
  next->prev = new;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	605a      	str	r2, [r3, #4]
  new->next = next;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	601a      	str	r2, [r3, #0]
}
 801110c:	bf00      	nop
 801110e:	3714      	adds	r7, #20
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr

08011118 <list_add>:
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	461a      	mov	r2, r3
 8011128:	6839      	ldr	r1, [r7, #0]
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f7ff ffdc 	bl	80110e8 <__list_add>
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <__list_del>:
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	605a      	str	r2, [r3, #4]
  prev->next = next;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	601a      	str	r2, [r3, #0]
}
 801114e:	bf00      	nop
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <list_del>:
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b082      	sub	sp, #8
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4619      	mov	r1, r3
 801116c:	4610      	mov	r0, r2
 801116e:	f7ff ffe3 	bl	8011138 <__list_del>
}
 8011172:	bf00      	nop
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <object_get_information>:
        {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *
object_get_information(enum object_class_type type)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 8011186:	2300      	movs	r3, #0
 8011188:	60fb      	str	r3, [r7, #12]
 801118a:	e015      	b.n	80111b8 <object_get_information+0x3c>
    if (object_container[index].type == type)
 801118c:	490f      	ldr	r1, [pc, #60]	; (80111cc <object_get_information+0x50>)
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	4613      	mov	r3, r2
 8011192:	005b      	lsls	r3, r3, #1
 8011194:	4413      	add	r3, r2
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	440b      	add	r3, r1
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	79fa      	ldrb	r2, [r7, #7]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d107      	bne.n	80111b2 <object_get_information+0x36>
      return &object_container[index];
 80111a2:	68fa      	ldr	r2, [r7, #12]
 80111a4:	4613      	mov	r3, r2
 80111a6:	005b      	lsls	r3, r3, #1
 80111a8:	4413      	add	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4a07      	ldr	r2, [pc, #28]	; (80111cc <object_get_information+0x50>)
 80111ae:	4413      	add	r3, r2
 80111b0:	e006      	b.n	80111c0 <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	3301      	adds	r3, #1
 80111b6:	60fb      	str	r3, [r7, #12]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2b05      	cmp	r3, #5
 80111bc:	dde6      	ble.n	801118c <object_get_information+0x10>

  return NULL;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3714      	adds	r7, #20
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	20000104 	.word	0x20000104

080111d0 <object_init>:

int32_t object_init(struct object *object,
                    enum object_class_type type,
                    const char *name)
{
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b089      	sub	sp, #36	; 0x24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	460b      	mov	r3, r1
 80111da:	607a      	str	r2, [r7, #4]
 80111dc:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 80111de:	7afb      	ldrb	r3, [r7, #11]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7ff ffcb 	bl	801117c <object_get_information>
 80111e6:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	7afa      	ldrb	r2, [r7, #11]
 80111ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1)
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ee fffd 	bl	80001f0 <strlen>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b1f      	cmp	r3, #31
 80111fa:	d902      	bls.n	8011202 <object_init+0x32>
  {
    return -1;
 80111fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011200:	e01e      	b.n	8011240 <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2220      	movs	r2, #32
 8011206:	6879      	ldr	r1, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	f001 f859 	bl	80122c0 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011214:	f3ef 8310 	mrs	r3, PRIMASK
 8011218:	617b      	str	r3, [r7, #20]
  return(result);
 801121a:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 801121c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801121e:	b672      	cpsid	i
}
 8011220:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	3304      	adds	r3, #4
 801122c:	4619      	mov	r1, r3
 801122e:	4610      	mov	r0, r2
 8011230:	f7ff ff72 	bl	8011118 <list_add>
 8011234:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	f383 8810 	msr	PRIMASK, r3
}
 801123c:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3724      	adds	r7, #36	; 0x24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd90      	pop	{r4, r7, pc}

08011248 <object_find>:

object_t object_find(const char *name, enum object_class_type type)
{
 8011248:	b590      	push	{r4, r7, lr}
 801124a:	b089      	sub	sp, #36	; 0x24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	460b      	mov	r3, r1
 8011252:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 8011254:	2300      	movs	r3, #0
 8011256:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 8011258:	2300      	movs	r3, #0
 801125a:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 801125c:	2300      	movs	r3, #0
 801125e:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d002      	beq.n	801126c <object_find+0x24>
 8011266:	78fb      	ldrb	r3, [r7, #3]
 8011268:	2b05      	cmp	r3, #5
 801126a:	d901      	bls.n	8011270 <object_find+0x28>
    return NULL;
 801126c:	2300      	movs	r3, #0
 801126e:	e033      	b.n	80112d8 <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011270:	f3ef 8310 	mrs	r3, PRIMASK
 8011274:	613b      	str	r3, [r7, #16]
  return(result);
 8011276:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 8011278:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801127a:	b672      	cpsid	i
}
 801127c:	bf00      	nop

  /* try to find object */
  if (information == NULL)
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d104      	bne.n	801128e <object_find+0x46>
  {
    information = object_get_information(type);
 8011284:	78fb      	ldrb	r3, [r7, #3]
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff ff78 	bl	801117c <object_get_information>
 801128c:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	61bb      	str	r3, [r7, #24]
 8011294:	e015      	b.n	80112c2 <object_find+0x7a>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	3b24      	subs	r3, #36	; 0x24
 801129a:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0)
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	2220      	movs	r2, #32
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f000 fffa 	bl	801229c <strncmp>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <object_find+0x74>
 80112ae:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f383 8810 	msr	PRIMASK, r3
}
 80112b6:	bf00      	nop
    {
      /* leave critical */
      exit_critical();

      return object;
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	e00d      	b.n	80112d8 <object_find+0x90>
       node = node->next)
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	61bb      	str	r3, [r7, #24]
       node != &(information->object_list);
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	3304      	adds	r3, #4
 80112c6:	69ba      	ldr	r2, [r7, #24]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d1e4      	bne.n	8011296 <object_find+0x4e>
 80112cc:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	f383 8810 	msr	PRIMASK, r3
}
 80112d4:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3724      	adds	r7, #36	; 0x24
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd90      	pop	{r4, r7, pc}

080112e0 <object_detach>:

void object_detach(object_t object)
{
 80112e0:	b590      	push	{r4, r7, lr}
 80112e2:	b085      	sub	sp, #20
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2206      	movs	r2, #6
 80112ec:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80112f0:	f3ef 8310 	mrs	r3, PRIMASK
 80112f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80112f6:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 80112f8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80112fa:	b672      	cpsid	i
}
 80112fc:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	3324      	adds	r3, #36	; 0x24
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff ff29 	bl	801115a <list_del>
 8011308:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f383 8810 	msr	PRIMASK, r3
}
 8011310:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 8011312:	bf00      	nop
 8011314:	3714      	adds	r7, #20
 8011316:	46bd      	mov	sp, r7
 8011318:	bd90      	pop	{r4, r7, pc}

0801131a <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 801131a:	b480      	push	{r7}
 801131c:	b085      	sub	sp, #20
 801131e:	af00      	add	r7, sp, #0
 8011320:	60f8      	str	r0, [r7, #12]
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	68ba      	ldr	r2, [r7, #8]
 801132a:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3b01      	subs	r3, #1
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	441a      	add	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2200      	movs	r2, #0
 8011342:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	68ba      	ldr	r2, [r7, #8]
 8011348:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	615a      	str	r2, [r3, #20]

  return (0);
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 801135e:	b590      	push	{r4, r7, lr}
 8011360:	b08b      	sub	sp, #44	; 0x2c
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801136a:	f3ef 8310 	mrs	r3, PRIMASK
 801136e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011370:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8011372:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011374:	b672      	cpsid	i
}
 8011376:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d05e      	beq.n	801143c <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d05c      	beq.n	8011440 <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	695a      	ldr	r2, [r3, #20]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	429a      	cmp	r2, r3
 8011390:	d903      	bls.n	801139a <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	689b      	ldr	r3, [r3, #8]
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	4293      	cmp	r3, r2
 80113a2:	bfa8      	it	ge
 80113a4:	4613      	movge	r3, r2
 80113a6:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	685a      	ldr	r2, [r3, #4]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	3301      	adds	r3, #1
 80113b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 80113b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	db0f      	blt.n	80113de <fifo_s_puts+0x80>
  {
    len_to_end = len;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	695b      	ldr	r3, [r3, #20]
 80113c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c8:	68b9      	ldr	r1, [r7, #8]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f001 f810 	bl	80123f0 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	695a      	ldr	r2, [r3, #20]
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	441a      	add	r2, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	615a      	str	r2, [r3, #20]
 80113dc:	e019      	b.n	8011412 <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ec:	68b9      	ldr	r1, [r7, #8]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f000 fffe 	bl	80123f0 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6818      	ldr	r0, [r3, #0]
 80113f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fa:	68ba      	ldr	r2, [r7, #8]
 80113fc:	4413      	add	r3, r2
 80113fe:	6a3a      	ldr	r2, [r7, #32]
 8011400:	4619      	mov	r1, r3
 8011402:	f000 fff5 	bl	80123f0 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	6a3b      	ldr	r3, [r7, #32]
 801140c:	441a      	add	r2, r3
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	689a      	ldr	r2, [r3, #8]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	1ad2      	subs	r2, r2, r3
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	441a      	add	r2, r3
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	60da      	str	r2, [r3, #12]
  retval = len;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	61fb      	str	r3, [r7, #28]
 801142e:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f383 8810 	msr	PRIMASK, r3
}
 8011436:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	e009      	b.n	8011450 <fifo_s_puts+0xf2>
      goto end;
 801143c:	bf00      	nop
 801143e:	e000      	b.n	8011442 <fifo_s_puts+0xe4>
      goto end;
 8011440:	bf00      	nop
 8011442:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	f383 8810 	msr	PRIMASK, r3
}
 801144a:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 801144c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011450:	4618      	mov	r0, r3
 8011452:	372c      	adds	r7, #44	; 0x2c
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}

08011458 <fifo_s_puts_noprotect>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts_noprotect(fifo_s_t *p_fifo, char *p_source, int len)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_source)
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d102      	bne.n	8011470 <fifo_s_puts_noprotect+0x18>
    return -1;
 801146a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801146e:	e05a      	b.n	8011526 <fifo_s_puts_noprotect+0xce>

  if (0 == p_fifo->free_num)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d101      	bne.n	801147c <fifo_s_puts_noprotect+0x24>
    return 0;
 8011478:	2300      	movs	r3, #0
 801147a:	e054      	b.n	8011526 <fifo_s_puts_noprotect+0xce>

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	695a      	ldr	r2, [r3, #20]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	429a      	cmp	r2, r3
 8011486:	d903      	bls.n	8011490 <fifo_s_puts_noprotect+0x38>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	4293      	cmp	r3, r2
 8011498:	bfa8      	it	ge
 801149a:	4613      	movge	r3, r2
 801149c:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	695b      	ldr	r3, [r3, #20]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	3301      	adds	r3, #1
 80114aa:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 80114ac:	69fa      	ldr	r2, [r7, #28]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	db0f      	blt.n	80114d4 <fifo_s_puts_noprotect+0x7c>
  {
    len_to_end = len;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	61fb      	str	r3, [r7, #28]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	69fa      	ldr	r2, [r7, #28]
 80114be:	68b9      	ldr	r1, [r7, #8]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f000 ff95 	bl	80123f0 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	695a      	ldr	r2, [r3, #20]
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	441a      	add	r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	615a      	str	r2, [r3, #20]
 80114d2:	e019      	b.n	8011508 <fifo_s_puts_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	61bb      	str	r3, [r7, #24]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	695b      	ldr	r3, [r3, #20]
 80114e0:	69fa      	ldr	r2, [r7, #28]
 80114e2:	68b9      	ldr	r1, [r7, #8]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 ff83 	bl	80123f0 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6818      	ldr	r0, [r3, #0]
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	4413      	add	r3, r2
 80114f4:	69ba      	ldr	r2, [r7, #24]
 80114f6:	4619      	mov	r1, r3
 80114f8:	f000 ff7a 	bl	80123f0 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	441a      	add	r2, r3
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	689a      	ldr	r2, [r3, #8]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	1ad2      	subs	r2, r2, r3
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	68da      	ldr	r2, [r3, #12]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	441a      	add	r2, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	60da      	str	r2, [r3, #12]
  retval = len;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	617b      	str	r3, [r7, #20]

  return retval;
 8011524:	697b      	ldr	r3, [r7, #20]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3720      	adds	r7, #32
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 801152e:	b490      	push	{r4, r7}
 8011530:	b086      	sub	sp, #24
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801153a:	f3ef 8310 	mrs	r3, PRIMASK
 801153e:	613b      	str	r3, [r7, #16]
  return(result);
 8011540:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8011542:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011544:	b672      	cpsid	i
}
 8011546:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	691a      	ldr	r2, [r3, #16]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	429a      	cmp	r2, r3
 8011552:	d903      	bls.n	801155c <fifo_s_get+0x2e>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	691b      	ldr	r3, [r3, #16]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	1e5a      	subs	r2, r3, #1
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	60da      	str	r2, [r3, #12]
 8011582:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f383 8810 	msr	PRIMASK, r3
}
 801158a:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 801158c:	7dfb      	ldrb	r3, [r7, #23]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3718      	adds	r7, #24
 8011592:	46bd      	mov	sp, r7
 8011594:	bc90      	pop	{r4, r7}
 8011596:	4770      	bx	lr

08011598 <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 8011598:	b590      	push	{r4, r7, lr}
 801159a:	b08b      	sub	sp, #44	; 0x2c
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80115a4:	f3ef 8310 	mrs	r3, PRIMASK
 80115a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80115aa:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80115ac:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80115ae:	b672      	cpsid	i
}
 80115b0:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d05e      	beq.n	8011676 <fifo_s_gets+0xde>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d05c      	beq.n	801167a <fifo_s_gets+0xe2>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	691a      	ldr	r2, [r3, #16]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d903      	bls.n	80115d4 <fifo_s_gets+0x3c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	4293      	cmp	r3, r2
 80115dc:	bfa8      	it	ge
 80115de:	4613      	movge	r3, r2
 80115e0:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	685a      	ldr	r2, [r3, #4]
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	3301      	adds	r3, #1
 80115ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 80115f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	db0f      	blt.n	8011618 <fifo_s_gets+0x80>
  {
    len_to_end = len;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011602:	4619      	mov	r1, r3
 8011604:	68b8      	ldr	r0, [r7, #8]
 8011606:	f000 fef3 	bl	80123f0 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	691a      	ldr	r2, [r3, #16]
 801160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011610:	441a      	add	r2, r3
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	611a      	str	r2, [r3, #16]
 8011616:	e019      	b.n	801164c <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	1ad3      	subs	r3, r2, r3
 801161e:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	691b      	ldr	r3, [r3, #16]
 8011624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011626:	4619      	mov	r1, r3
 8011628:	68b8      	ldr	r0, [r7, #8]
 801162a:	f000 fee1 	bl	80123f0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 801162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	18d0      	adds	r0, r2, r3
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6a3a      	ldr	r2, [r7, #32]
 801163a:	4619      	mov	r1, r3
 801163c:	f000 fed8 	bl	80123f0 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	441a      	add	r2, r3
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	689a      	ldr	r2, [r3, #8]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	441a      	add	r2, r3
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	68da      	ldr	r2, [r3, #12]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	60da      	str	r2, [r3, #12]
  retval = len;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	61fb      	str	r3, [r7, #28]
 8011668:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	f383 8810 	msr	PRIMASK, r3
}
 8011670:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	e009      	b.n	801168a <fifo_s_gets+0xf2>
    goto end;
 8011676:	bf00      	nop
 8011678:	e000      	b.n	801167c <fifo_s_gets+0xe4>
    goto end;
 801167a:	bf00      	nop
 801167c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	f383 8810 	msr	PRIMASK, r3
}
 8011684:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8011686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801168a:	4618      	mov	r0, r3
 801168c:	372c      	adds	r7, #44	; 0x2c
 801168e:	46bd      	mov	sp, r7
 8011690:	bd90      	pop	{r4, r7, pc}

08011692 <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 8011692:	b580      	push	{r7, lr}
 8011694:	b088      	sub	sp, #32
 8011696:	af00      	add	r7, sp, #0
 8011698:	60f8      	str	r0, [r7, #12]
 801169a:	60b9      	str	r1, [r7, #8]
 801169c:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d102      	bne.n	80116aa <fifo_s_gets_noprotect+0x18>
    return -1;
 80116a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116a8:	e05a      	b.n	8011760 <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <fifo_s_gets_noprotect+0x24>
    return 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	e054      	b.n	8011760 <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	691a      	ldr	r2, [r3, #16]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d903      	bls.n	80116ca <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4293      	cmp	r3, r2
 80116d2:	bfa8      	it	ge
 80116d4:	4613      	movge	r3, r2
 80116d6:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	685a      	ldr	r2, [r3, #4]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	3301      	adds	r3, #1
 80116e4:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	db0f      	blt.n	801170e <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	691b      	ldr	r3, [r3, #16]
 80116f6:	69fa      	ldr	r2, [r7, #28]
 80116f8:	4619      	mov	r1, r3
 80116fa:	68b8      	ldr	r0, [r7, #8]
 80116fc:	f000 fe78 	bl	80123f0 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	691a      	ldr	r2, [r3, #16]
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	441a      	add	r2, r3
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	611a      	str	r2, [r3, #16]
 801170c:	e019      	b.n	8011742 <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	691b      	ldr	r3, [r3, #16]
 801171a:	69fa      	ldr	r2, [r7, #28]
 801171c:	4619      	mov	r1, r3
 801171e:	68b8      	ldr	r0, [r7, #8]
 8011720:	f000 fe66 	bl	80123f0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	18d0      	adds	r0, r2, r3
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	69ba      	ldr	r2, [r7, #24]
 8011730:	4619      	mov	r1, r3
 8011732:	f000 fe5d 	bl	80123f0 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	441a      	add	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	689a      	ldr	r2, [r3, #8]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	441a      	add	r2, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	68da      	ldr	r2, [r3, #12]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	1ad2      	subs	r2, r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	60da      	str	r2, [r3, #12]
  retval = len;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	617b      	str	r3, [r7, #20]

  return retval;
 801175e:	697b      	ldr	r3, [r7, #20]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3720      	adds	r7, #32
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <fifo_s_preread>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_preread(fifo_s_t *p_fifo, int offset)
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  char *tmp_read_addr;

  //! Check input parameters.
  ASSERT(p_fifo);

  if (offset > p_fifo->used_num)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	429a      	cmp	r2, r3
 801177a:	dd01      	ble.n	8011780 <fifo_s_preread+0x18>
  {
    return 0;
 801177c:	2300      	movs	r3, #0
 801177e:	e014      	b.n	80117aa <fifo_s_preread+0x42>
  }
  else
  {
    // Move Read Pointer to right position
    tmp_read_addr = p_fifo->p_read_addr + offset;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	4413      	add	r3, r2
 8011788:	60fb      	str	r3, [r7, #12]
    if (tmp_read_addr > p_fifo->p_end_addr)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	429a      	cmp	r2, r3
 8011792:	d908      	bls.n	80117a6 <fifo_s_preread+0x3e>
      tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	68f9      	ldr	r1, [r7, #12]
 801179e:	1acb      	subs	r3, r1, r3
 80117a0:	3b01      	subs	r3, #1
 80117a2:	4413      	add	r3, r2
 80117a4:	60fb      	str	r3, [r7, #12]

    return *tmp_read_addr;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <fifo_s_prereads>:
 *
 *
 *
 */
int fifo_s_prereads(fifo_s_t *p_fifo, char *p_dest, int offset, int len)
{
 80117b6:	b590      	push	{r4, r7, lr}
 80117b8:	b08d      	sub	sp, #52	; 0x34
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	60f8      	str	r0, [r7, #12]
 80117be:	60b9      	str	r1, [r7, #8]
 80117c0:	607a      	str	r2, [r7, #4]
 80117c2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80117c4:	f3ef 8310 	mrs	r3, PRIMASK
 80117c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80117ca:	69fb      	ldr	r3, [r7, #28]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80117cc:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80117ce:	b672      	cpsid	i
}
 80117d0:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d053      	beq.n	8011880 <fifo_s_prereads+0xca>
    goto end;

  if (0 == p_fifo->used_num)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d051      	beq.n	8011884 <fifo_s_prereads+0xce>
    goto end;

  if (offset >= p_fifo->used_num)
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	da4e      	bge.n	8011888 <fifo_s_prereads+0xd2>
    goto end;

  tmp_read_addr = p_fifo->p_read_addr + offset;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	691a      	ldr	r2, [r3, #16]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4413      	add	r3, r2
 80117f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (tmp_read_addr > p_fifo->p_end_addr)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d908      	bls.n	8011810 <fifo_s_prereads+0x5a>
    tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011808:	1acb      	subs	r3, r1, r3
 801180a:	3b01      	subs	r3, #1
 801180c:	4413      	add	r3, r2
 801180e:	62fb      	str	r3, [r7, #44]	; 0x2c

  len = (len < (p_fifo->used_num - offset)) ? len : (p_fifo->used_num - offset);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	68da      	ldr	r2, [r3, #12]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	1ad3      	subs	r3, r2, r3
 8011818:	683a      	ldr	r2, [r7, #0]
 801181a:	4293      	cmp	r3, r2
 801181c:	bfa8      	it	ge
 801181e:	4613      	movge	r3, r2
 8011820:	603b      	str	r3, [r7, #0]
  len_to_end = p_fifo->p_end_addr - tmp_read_addr + 1;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	685a      	ldr	r2, [r3, #4]
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	3301      	adds	r3, #1
 801182c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (len_to_end >= len) //no rollback
 801182e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	db08      	blt.n	8011848 <fifo_s_prereads+0x92>
  {
    len_to_end = len;
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(p_dest, tmp_read_addr, len_to_end);
 801183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183c:	461a      	mov	r2, r3
 801183e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011840:	68b8      	ldr	r0, [r7, #8]
 8011842:	f000 fdd5 	bl	80123f0 <memcpy>
 8011846:	e012      	b.n	801186e <fifo_s_prereads+0xb8>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8011850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011852:	461a      	mov	r2, r3
 8011854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011856:	68b8      	ldr	r0, [r7, #8]
 8011858:	f000 fdca 	bl	80123f0 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	18d0      	adds	r0, r2, r3
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011868:	4619      	mov	r1, r3
 801186a:	f000 fdc1 	bl	80123f0 <memcpy>
  }

  retval = len;
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	623b      	str	r3, [r7, #32]
 8011872:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	f383 8810 	msr	PRIMASK, r3
}
 801187a:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 801187c:	6a3b      	ldr	r3, [r7, #32]
 801187e:	e00b      	b.n	8011898 <fifo_s_prereads+0xe2>
    goto end;
 8011880:	bf00      	nop
 8011882:	e002      	b.n	801188a <fifo_s_prereads+0xd4>
    goto end;
 8011884:	bf00      	nop
 8011886:	e000      	b.n	801188a <fifo_s_prereads+0xd4>
    goto end;
 8011888:	bf00      	nop
 801188a:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	f383 8810 	msr	PRIMASK, r3
}
 8011892:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8011894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011898:	4618      	mov	r0, r3
 801189a:	3734      	adds	r7, #52	; 0x34
 801189c:	46bd      	mov	sp, r7
 801189e:	bd90      	pop	{r4, r7, pc}

080118a0 <fifo_s_isempty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
char fifo_s_isempty(fifo_s_t *p_fifo)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return (p_fifo->used_num ? 0 : 1);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf0c      	ite	eq
 80118b0:	2301      	moveq	r3, #1
 80118b2:	2300      	movne	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr

080118c2 <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 80118c2:	b480      	push	{r7}
 80118c4:	b085      	sub	sp, #20
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	60f8      	str	r0, [r7, #12]
 80118ca:	60b9      	str	r1, [r7, #8]
 80118cc:	603b      	str	r3, [r7, #0]
 80118ce:	4613      	mov	r3, r2
 80118d0:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	68ba      	ldr	r2, [r7, #8]
 80118d6:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 80118d8:	79fb      	ldrb	r3, [r7, #7]
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	fb02 f303 	mul.w	r3, r2, r3
 80118e0:	3b01      	subs	r3, #1
 80118e2:	68ba      	ldr	r2, [r7, #8]
 80118e4:	441a      	add	r2, r3
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	683a      	ldr	r2, [r7, #0]
 80118ee:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2200      	movs	r2, #0
 80118f4:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 80118f6:	79fa      	ldrb	r2, [r7, #7]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	619a      	str	r2, [r3, #24]

  return (0);
 8011908:	2300      	movs	r3, #0
}
 801190a:	4618      	mov	r0, r3
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 8011916:	b590      	push	{r4, r7, lr}
 8011918:	b087      	sub	sp, #28
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011920:	f3ef 8310 	mrs	r3, PRIMASK
 8011924:	617b      	str	r3, [r7, #20]
  return(result);
 8011926:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8011928:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801192a:	b672      	cpsid	i
}
 801192c:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d029      	beq.n	801198a <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	699a      	ldr	r2, [r3, #24]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	429a      	cmp	r2, r3
 8011940:	d903      	bls.n	801194a <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6998      	ldr	r0, [r3, #24]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	461a      	mov	r2, r3
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	f000 fd4b 	bl	80123f0 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	699b      	ldr	r3, [r3, #24]
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	6912      	ldr	r2, [r2, #16]
 8011962:	441a      	add	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	689b      	ldr	r3, [r3, #8]
 801196c:	1e5a      	subs	r2, r3, #1
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	1c5a      	adds	r2, r3, #1
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	60da      	str	r2, [r3, #12]
 801197c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	f383 8810 	msr	PRIMASK, r3
}
 8011984:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8011986:	2300      	movs	r3, #0
 8011988:	e007      	b.n	801199a <fifo_put+0x84>
    goto end;
 801198a:	bf00      	nop
 801198c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f383 8810 	msr	PRIMASK, r3
}
 8011994:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8011996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801199a:	4618      	mov	r0, r3
 801199c:	371c      	adds	r7, #28
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd90      	pop	{r4, r7, pc}

080119a2 <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 80119a2:	b590      	push	{r4, r7, lr}
 80119a4:	b087      	sub	sp, #28
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80119ac:	f3ef 8310 	mrs	r3, PRIMASK
 80119b0:	617b      	str	r3, [r7, #20]
  return(result);
 80119b2:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80119b4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80119b6:	b672      	cpsid	i
}
 80119b8:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d029      	beq.n	8011a16 <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	695a      	ldr	r2, [r3, #20]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d903      	bls.n	80119d6 <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6959      	ldr	r1, [r3, #20]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	691b      	ldr	r3, [r3, #16]
 80119de:	461a      	mov	r2, r3
 80119e0:	6838      	ldr	r0, [r7, #0]
 80119e2:	f000 fd05 	bl	80123f0 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	695b      	ldr	r3, [r3, #20]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	6912      	ldr	r2, [r2, #16]
 80119ee:	441a      	add	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	689b      	ldr	r3, [r3, #8]
 80119f8:	1c5a      	adds	r2, r3, #1
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	1e5a      	subs	r2, r3, #1
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	60da      	str	r2, [r3, #12]
 8011a08:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	f383 8810 	msr	PRIMASK, r3
}
 8011a10:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8011a12:	2300      	movs	r3, #0
 8011a14:	e007      	b.n	8011a26 <fifo_get+0x84>
    goto end;
 8011a16:	bf00      	nop
 8011a18:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f383 8810 	msr	PRIMASK, r3
}
 8011a20:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	371c      	adds	r7, #28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd90      	pop	{r4, r7, pc}

08011a2e <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 8011a2e:	b580      	push	{r7, lr}
 8011a30:	b082      	sub	sp, #8
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
 8011a36:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68db      	ldr	r3, [r3, #12]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d102      	bne.n	8011a46 <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a44:	e023      	b.n	8011a8e <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	695a      	ldr	r2, [r3, #20]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d903      	bls.n	8011a5a <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6959      	ldr	r1, [r3, #20]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	691b      	ldr	r3, [r3, #16]
 8011a62:	461a      	mov	r2, r3
 8011a64:	6838      	ldr	r0, [r7, #0]
 8011a66:	f000 fcc3 	bl	80123f0 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	6912      	ldr	r2, [r2, #16]
 8011a72:	441a      	add	r2, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	1c5a      	adds	r2, r3, #1
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	1e5a      	subs	r2, r3, #1
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	60da      	str	r2, [r3, #12]

  return (0);
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b083      	sub	sp, #12
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	bf0c      	ite	eq
 8011aa6:	2301      	moveq	r3, #1
 8011aa8:	2300      	movne	r3, #0
 8011aaa:	b2db      	uxtb	r3, r3
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bf0c      	ite	eq
 8011ac8:	2301      	moveq	r3, #1
 8011aca:	2300      	movne	r3, #0
 8011acc:	b2db      	uxtb	r3, r3
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	370c      	adds	r7, #12
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr
	...

08011adc <heap_malloc>:
static uint32_t block_allocated_bit = 0;

/*-----------------------------------------------------------*/

void *heap_malloc(uint32_t wanted_size)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b088      	sub	sp, #32
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  block_link_t *block, *prev_block, *new_block;
  void *reval = NULL;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]

  if (mutex_init == 0)
 8011ae8:	4b4a      	ldr	r3, [pc, #296]	; (8011c14 <heap_malloc+0x138>)
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <heap_malloc+0x1a>
  {
    mutex_init = 1;
 8011af0:	4b48      	ldr	r3, [pc, #288]	; (8011c14 <heap_malloc+0x138>)
 8011af2:	2201      	movs	r2, #1
 8011af4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011af6:	f3ef 8310 	mrs	r3, PRIMASK
 8011afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8011afc:	68fb      	ldr	r3, [r7, #12]
    MUTEX_INIT(mem_mutex);
  }

  MUTEX_LOCK(mem_mutex);
 8011afe:	4a46      	ldr	r2, [pc, #280]	; (8011c18 <heap_malloc+0x13c>)
 8011b00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8011b02:	b672      	cpsid	i
}
 8011b04:	bf00      	nop
  {
    /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
    if (end == NULL)
 8011b06:	4b45      	ldr	r3, [pc, #276]	; (8011c1c <heap_malloc+0x140>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d101      	bne.n	8011b12 <heap_malloc+0x36>
    {
      heap_init();
 8011b0e:	f000 f8d5 	bl	8011cbc <heap_init>

    /* Check the requested block size is not so large that the top bit is
        set.  The top bit of the block size member of the block_link_t structure
        is used to determine who owns the block - the application or the
        kernel, so it must be free. */
    if ((wanted_size & block_allocated_bit) == 0)
 8011b12:	4b43      	ldr	r3, [pc, #268]	; (8011c20 <heap_malloc+0x144>)
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4013      	ands	r3, r2
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d16d      	bne.n	8011bfa <heap_malloc+0x11e>
    {
      /* The wanted size is increased so it can contain a block_link_t
            structure in addition to the requested amount of bytes. */
      if (wanted_size > 0)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00d      	beq.n	8011b40 <heap_malloc+0x64>
      {
        wanted_size += STRUCT_SIZE;
 8011b24:	2208      	movs	r2, #8
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	4413      	add	r3, r2
 8011b2a:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
                of bytes. */
        if ((wanted_size & BYTE_ALIGNMENT_MASK) != 0x00)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f003 0307 	and.w	r3, r3, #7
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d004      	beq.n	8011b40 <heap_malloc+0x64>
        {
          /* Byte alignment required. */
          wanted_size += (BYTE_ALIGNMENT - (wanted_size & BYTE_ALIGNMENT_MASK));
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f023 0307 	bic.w	r3, r3, #7
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	607b      	str	r3, [r7, #4]
          HEAP_ASSERT((wanted_size & BYTE_ALIGNMENT_MASK) == 0);
        }
      }

      if ((wanted_size > 0) && (wanted_size <= free_bytes_remain))
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d059      	beq.n	8011bfa <heap_malloc+0x11e>
 8011b46:	4b37      	ldr	r3, [pc, #220]	; (8011c24 <heap_malloc+0x148>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d854      	bhi.n	8011bfa <heap_malloc+0x11e>
      {
        /* Traverse the list from the start    (lowest address) block until
                one    of adequate size is found. */
        prev_block = &start;
 8011b50:	4b35      	ldr	r3, [pc, #212]	; (8011c28 <heap_malloc+0x14c>)
 8011b52:	61bb      	str	r3, [r7, #24]
        block = start.next_free;
 8011b54:	4b34      	ldr	r3, [pc, #208]	; (8011c28 <heap_malloc+0x14c>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8011b5a:	e004      	b.n	8011b66 <heap_malloc+0x8a>
        {
          prev_block = block;
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	61bb      	str	r3, [r7, #24]
          block = block->next_free;
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d903      	bls.n	8011b78 <heap_malloc+0x9c>
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1f1      	bne.n	8011b5c <heap_malloc+0x80>
        }

        /* If the end marker was reached then a block of adequate size
                was    not found. */
        if (block != end)
 8011b78:	4b28      	ldr	r3, [pc, #160]	; (8011c1c <heap_malloc+0x140>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	69fa      	ldr	r2, [r7, #28]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d03b      	beq.n	8011bfa <heap_malloc+0x11e>
        {
          /* Return the memory space pointed to - jumping over the
                    block_link_t structure at its start. */
          reval = (void *)(((uint8_t *)prev_block->next_free) + STRUCT_SIZE);
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2208      	movs	r2, #8
 8011b88:	4413      	add	r3, r2
 8011b8a:	617b      	str	r3, [r7, #20]

          /* This block is being returned for use so must be taken out
                    of the list of free blocks. */
          prev_block->next_free = block->next_free;
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
                    two. */
          if ((block->block_size - wanted_size) > MINIMUM_BLOCK_SIZE)
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	685a      	ldr	r2, [r3, #4]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	1ad2      	subs	r2, r2, r3
 8011b9c:	2308      	movs	r3, #8
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d90f      	bls.n	8011bc4 <heap_malloc+0xe8>
          {
            /* This block is to be split into two.  Create a new
                        block following the number of bytes requested. The void
                        cast is used to prevent byte alignment warnings from the
                        compiler. */
            new_block = (void *)(((uint8_t *)block) + wanted_size);
 8011ba4:	69fa      	ldr	r2, [r7, #28]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4413      	add	r3, r2
 8011baa:	613b      	str	r3, [r7, #16]
            HEAP_ASSERT((((uint32_t)new_block) & BYTE_ALIGNMENT_MASK) == 0);

            /* Calculate the sizes of two blocks split from the
                        single block. */
            new_block->block_size = block->block_size - wanted_size;
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	685a      	ldr	r2, [r3, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	1ad2      	subs	r2, r2, r3
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	605a      	str	r2, [r3, #4]
            block->block_size = wanted_size;
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            insert_into_free_list(new_block);
 8011bbe:	6938      	ldr	r0, [r7, #16]
 8011bc0:	f000 f8de 	bl	8011d80 <insert_into_free_list>
          }

          free_bytes_remain -= block->block_size;
 8011bc4:	4b17      	ldr	r3, [pc, #92]	; (8011c24 <heap_malloc+0x148>)
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	4a15      	ldr	r2, [pc, #84]	; (8011c24 <heap_malloc+0x148>)
 8011bd0:	6013      	str	r3, [r2, #0]

          if (free_bytes_remain < ever_free_bytes_remain)
 8011bd2:	4b14      	ldr	r3, [pc, #80]	; (8011c24 <heap_malloc+0x148>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	4b15      	ldr	r3, [pc, #84]	; (8011c2c <heap_malloc+0x150>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d203      	bcs.n	8011be6 <heap_malloc+0x10a>
          {
            ever_free_bytes_remain = free_bytes_remain;
 8011bde:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <heap_malloc+0x148>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4a12      	ldr	r2, [pc, #72]	; (8011c2c <heap_malloc+0x150>)
 8011be4:	6013      	str	r3, [r2, #0]
          }

          /* The block is being returned - it is allocated and owned
                    by the application and has no "next" block. */
          block->block_size |= block_allocated_bit;
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	685a      	ldr	r2, [r3, #4]
 8011bea:	4b0d      	ldr	r3, [pc, #52]	; (8011c20 <heap_malloc+0x144>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	431a      	orrs	r2, r3
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	605a      	str	r2, [r3, #4]
          block->next_free = NULL;
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 8011bfa:	4b07      	ldr	r3, [pc, #28]	; (8011c18 <heap_malloc+0x13c>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	f383 8810 	msr	PRIMASK, r3
}
 8011c06:	bf00      	nop

  HEAP_ASSERT((((uint32_t)reval) & (uint32_t)BYTE_ALIGNMENT_MASK) == 0);
  return reval;
 8011c08:	697b      	ldr	r3, [r7, #20]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3720      	adds	r7, #32
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	20017160 	.word	0x20017160
 8011c18:	2000815c 	.word	0x2000815c
 8011c1c:	2001716c 	.word	0x2001716c
 8011c20:	20017178 	.word	0x20017178
 8011c24:	20017170 	.word	0x20017170
 8011c28:	20017164 	.word	0x20017164
 8011c2c:	20017174 	.word	0x20017174

08011c30 <heap_free>:
/*-----------------------------------------------------------*/

void heap_free(void *pv)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8011c40:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c42:	68fb      	ldr	r3, [r7, #12]
  block_link_t *block;

  MUTEX_LOCK(mem_mutex);
 8011c44:	4a1a      	ldr	r2, [pc, #104]	; (8011cb0 <heap_free+0x80>)
 8011c46:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c48:	b672      	cpsid	i
}
 8011c4a:	bf00      	nop

  if (pv != NULL)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d023      	beq.n	8011c9a <heap_free+0x6a>
  {
    /* The memory being freed will have an block_link_t structure immediately
        before it. */
    puc -= STRUCT_SIZE;
 8011c52:	2308      	movs	r3, #8
 8011c54:	425b      	negs	r3, r3
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	4413      	add	r3, r2
 8011c5a:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    block = (void *)puc;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    HEAP_ASSERT((block->block_size & block_allocated_bit) != 0);
    HEAP_ASSERT(block->next_free == NULL);

    if ((block->block_size & block_allocated_bit) != 0)
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	685a      	ldr	r2, [r3, #4]
 8011c64:	4b13      	ldr	r3, [pc, #76]	; (8011cb4 <heap_free+0x84>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4013      	ands	r3, r2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d015      	beq.n	8011c9a <heap_free+0x6a>
    {
      if (block->next_free == NULL)
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d111      	bne.n	8011c9a <heap_free+0x6a>
      {
        /* The block is being returned to the heap - it is no longer
                allocated. */
        block->block_size &= ~block_allocated_bit;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	685a      	ldr	r2, [r3, #4]
 8011c7a:	4b0e      	ldr	r3, [pc, #56]	; (8011cb4 <heap_free+0x84>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	43db      	mvns	r3, r3
 8011c80:	401a      	ands	r2, r3
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	605a      	str	r2, [r3, #4]

        {
          /* Add this block to the list of free blocks. */
          free_bytes_remain += block->block_size;
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	685a      	ldr	r2, [r3, #4]
 8011c8a:	4b0b      	ldr	r3, [pc, #44]	; (8011cb8 <heap_free+0x88>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4413      	add	r3, r2
 8011c90:	4a09      	ldr	r2, [pc, #36]	; (8011cb8 <heap_free+0x88>)
 8011c92:	6013      	str	r3, [r2, #0]
          insert_into_free_list(((block_link_t *)block));
 8011c94:	6938      	ldr	r0, [r7, #16]
 8011c96:	f000 f873 	bl	8011d80 <insert_into_free_list>
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 8011c9a:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <heap_free+0x80>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	f383 8810 	msr	PRIMASK, r3
}
 8011ca6:	bf00      	nop
}
 8011ca8:	bf00      	nop
 8011caa:	3718      	adds	r7, #24
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	2000815c 	.word	0x2000815c
 8011cb4:	20017178 	.word	0x20017178
 8011cb8:	20017170 	.word	0x20017170

08011cbc <heap_init>:
  return ever_free_bytes_remain;
}
/*-----------------------------------------------------------*/

static void heap_init(void)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
  block_link_t *first_free_block;
  uint8_t *aligned_heap;
  uint32_t address;
  uint32_t total_heap_size = TOTAL_HEAP_SIZE;
 8011cc2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8011cc6:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  address = (uint32_t)heap;
 8011cc8:	4b27      	ldr	r3, [pc, #156]	; (8011d68 <heap_init+0xac>)
 8011cca:	60fb      	str	r3, [r7, #12]

  if ((address & BYTE_ALIGNMENT_MASK) != 0)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f003 0307 	and.w	r3, r3, #7
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00c      	beq.n	8011cf0 <heap_init+0x34>
  {
    address += (BYTE_ALIGNMENT - 1);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	3307      	adds	r3, #7
 8011cda:	60fb      	str	r3, [r7, #12]
    address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f023 0307 	bic.w	r3, r3, #7
 8011ce2:	60fb      	str	r3, [r7, #12]
    total_heap_size -= address - (uint32_t)heap;
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	1ad3      	subs	r3, r2, r3
 8011cea:	4a1f      	ldr	r2, [pc, #124]	; (8011d68 <heap_init+0xac>)
 8011cec:	4413      	add	r3, r2
 8011cee:	60bb      	str	r3, [r7, #8]
  }

  aligned_heap = (uint8_t *)address;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	607b      	str	r3, [r7, #4]

  /* start is used to hold a pointer to the first item in the list of free
    blocks.  The void cast is used to prevent compiler warnings. */
  start.next_free = (void *)aligned_heap;
 8011cf4:	4a1d      	ldr	r2, [pc, #116]	; (8011d6c <heap_init+0xb0>)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6013      	str	r3, [r2, #0]
  start.block_size = (uint32_t)0;
 8011cfa:	4b1c      	ldr	r3, [pc, #112]	; (8011d6c <heap_init+0xb0>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	605a      	str	r2, [r3, #4]

  /* end is used to mark the end of the list of free blocks and is inserted
    at the end of the heap space. */
  address = ((uint32_t)aligned_heap) + total_heap_size;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	4413      	add	r3, r2
 8011d06:	60fb      	str	r3, [r7, #12]
  address -= STRUCT_SIZE;
 8011d08:	2208      	movs	r2, #8
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	1a9b      	subs	r3, r3, r2
 8011d0e:	60fb      	str	r3, [r7, #12]
  address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f023 0307 	bic.w	r3, r3, #7
 8011d16:	60fb      	str	r3, [r7, #12]
  end = (void *)address;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	4a15      	ldr	r2, [pc, #84]	; (8011d70 <heap_init+0xb4>)
 8011d1c:	6013      	str	r3, [r2, #0]
  end->block_size = 0;
 8011d1e:	4b14      	ldr	r3, [pc, #80]	; (8011d70 <heap_init+0xb4>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2200      	movs	r2, #0
 8011d24:	605a      	str	r2, [r3, #4]
  end->next_free = NULL;
 8011d26:	4b12      	ldr	r3, [pc, #72]	; (8011d70 <heap_init+0xb4>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
    entire heap space, minus the space taken by end. */
  first_free_block = (void *)aligned_heap;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	603b      	str	r3, [r7, #0]
  first_free_block->block_size = address - (uint32_t)first_free_block;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	1ad2      	subs	r2, r2, r3
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	605a      	str	r2, [r3, #4]
  first_free_block->next_free = end;
 8011d3c:	4b0c      	ldr	r3, [pc, #48]	; (8011d70 <heap_init+0xb4>)
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  ever_free_bytes_remain = first_free_block->block_size;
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	4a0a      	ldr	r2, [pc, #40]	; (8011d74 <heap_init+0xb8>)
 8011d4a:	6013      	str	r3, [r2, #0]
  free_bytes_remain = first_free_block->block_size;
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	4a09      	ldr	r2, [pc, #36]	; (8011d78 <heap_init+0xbc>)
 8011d52:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a uint32_t variable. */
  block_allocated_bit = ((uint32_t)1) << ((sizeof(uint32_t) * BITS_PER_BYTE) - 1);
 8011d54:	4b09      	ldr	r3, [pc, #36]	; (8011d7c <heap_init+0xc0>)
 8011d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d5a:	601a      	str	r2, [r3, #0]
}
 8011d5c:	bf00      	nop
 8011d5e:	3714      	adds	r7, #20
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	20008160 	.word	0x20008160
 8011d6c:	20017164 	.word	0x20017164
 8011d70:	2001716c 	.word	0x2001716c
 8011d74:	20017174 	.word	0x20017174
 8011d78:	20017170 	.word	0x20017170
 8011d7c:	20017178 	.word	0x20017178

08011d80 <insert_into_free_list>:
/*-----------------------------------------------------------*/

static void insert_into_free_list(block_link_t *block_to_insert)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  block_link_t *iterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
  for (iterator = &start; iterator->next_free < block_to_insert; iterator = iterator->next_free)
 8011d88:	4b28      	ldr	r3, [pc, #160]	; (8011e2c <insert_into_free_list+0xac>)
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	e002      	b.n	8011d94 <insert_into_free_list+0x14>
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	60fb      	str	r3, [r7, #12]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d8f7      	bhi.n	8011d8e <insert_into_free_list+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
  puc = (uint8_t *)iterator;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	60bb      	str	r3, [r7, #8]
  if ((puc + iterator->block_size) == (uint8_t *)block_to_insert)
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	68ba      	ldr	r2, [r7, #8]
 8011da8:	4413      	add	r3, r2
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d108      	bne.n	8011dc2 <insert_into_free_list+0x42>
  {
    iterator->block_size += block_to_insert->block_size;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	441a      	add	r2, r3
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	605a      	str	r2, [r3, #4]
    block_to_insert = iterator;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	607b      	str	r3, [r7, #4]
  }

  /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
  puc = (uint8_t *)block_to_insert;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	60bb      	str	r3, [r7, #8]
  if ((puc + block_to_insert->block_size) == (uint8_t *)iterator->next_free)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	441a      	add	r2, r3
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d118      	bne.n	8011e08 <insert_into_free_list+0x88>
  {
    if (iterator->next_free != end)
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <insert_into_free_list+0xb0>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d00d      	beq.n	8011dfe <insert_into_free_list+0x7e>
    {
      /* Form one big block from the two blocks. */
      block_to_insert->block_size += iterator->next_free->block_size;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	441a      	add	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	605a      	str	r2, [r3, #4]
      block_to_insert->next_free = iterator->next_free->next_free;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	601a      	str	r2, [r3, #0]
 8011dfc:	e008      	b.n	8011e10 <insert_into_free_list+0x90>
    }
    else
    {
      block_to_insert->next_free = end;
 8011dfe:	4b0c      	ldr	r3, [pc, #48]	; (8011e30 <insert_into_free_list+0xb0>)
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	601a      	str	r2, [r3, #0]
 8011e06:	e003      	b.n	8011e10 <insert_into_free_list+0x90>
    }
  }
  else
  {
    block_to_insert->next_free = iterator->next_free;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's next_free pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
  if (iterator != block_to_insert)
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d002      	beq.n	8011e1e <insert_into_free_list+0x9e>
  {
    iterator->next_free = block_to_insert;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	601a      	str	r2, [r3, #0]
  }
}
 8011e1e:	bf00      	nop
 8011e20:	3714      	adds	r7, #20
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	20017164 	.word	0x20017164
 8011e30:	2001716c 	.word	0x2001716c

08011e34 <get_crc16>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint16_t get_crc16(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b087      	sub	sp, #28
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pchMessage == NULL)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d113      	bne.n	8011e70 <get_crc16+0x3c>
    {
        return 0xFFFF;
 8011e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e4c:	e016      	b.n	8011e7c <get_crc16+0x48>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	1c5a      	adds	r2, r3, #1
 8011e52:	60fa      	str	r2, [r7, #12]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8)  ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8011e58:	88fb      	ldrh	r3, [r7, #6]
 8011e5a:	0a1b      	lsrs	r3, r3, #8
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	88f9      	ldrh	r1, [r7, #6]
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
 8011e62:	404b      	eors	r3, r1
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	4908      	ldr	r1, [pc, #32]	; (8011e88 <get_crc16+0x54>)
 8011e68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e6c:	4053      	eors	r3, r2
 8011e6e:	80fb      	strh	r3, [r7, #6]
    while(dwLength--)
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	1e5a      	subs	r2, r3, #1
 8011e74:	60ba      	str	r2, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d1e9      	bne.n	8011e4e <get_crc16+0x1a>
    }

    return wCRC;
 8011e7a:	88fb      	ldrh	r3, [r7, #6]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	371c      	adds	r7, #28
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr
 8011e88:	080128e8 	.word	0x080128e8

08011e8c <verify_crc16>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc16(uint8_t *pchMessage, uint32_t dwLength)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 8011e96:	2300      	movs	r3, #0
 8011e98:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <verify_crc16+0x1a>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d801      	bhi.n	8011eaa <verify_crc16+0x1e>
    {
        return __FALSE;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e020      	b.n	8011eec <verify_crc16+0x60>
    }
    wExpected = get_crc16(pchMessage, dwLength - 2, CRC16_INIT);
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	3b02      	subs	r3, #2
 8011eae:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff ffbd 	bl	8011e34 <get_crc16>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	81fb      	strh	r3, [r7, #14]

    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8011ebe:	89fb      	ldrh	r3, [r7, #14]
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	683a      	ldr	r2, [r7, #0]
 8011ec4:	3a02      	subs	r2, #2
 8011ec6:	6879      	ldr	r1, [r7, #4]
 8011ec8:	440a      	add	r2, r1
 8011eca:	7812      	ldrb	r2, [r2, #0]
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d10c      	bne.n	8011eea <verify_crc16+0x5e>
 8011ed0:	89fb      	ldrh	r3, [r7, #14]
 8011ed2:	0a1b      	lsrs	r3, r3, #8
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	683a      	ldr	r2, [r7, #0]
 8011eda:	3a01      	subs	r2, #1
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	440a      	add	r2, r1
 8011ee0:	7812      	ldrb	r2, [r2, #0]
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d101      	bne.n	8011eea <verify_crc16+0x5e>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e000      	b.n	8011eec <verify_crc16+0x60>
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3710      	adds	r7, #16
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <append_crc16>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc16(uint8_t* pchMessage,uint32_t dwLength)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d01d      	beq.n	8011f44 <append_crc16+0x50>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	d91a      	bls.n	8011f44 <append_crc16+0x50>
    {
        return;
    }
    wCRC = get_crc16 ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	3b02      	subs	r3, #2
 8011f12:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff ff8b 	bl	8011e34 <get_crc16>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	81fb      	strh	r3, [r7, #14]

    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	3b02      	subs	r3, #2
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	4413      	add	r3, r2
 8011f2a:	89fa      	ldrh	r2, [r7, #14]
 8011f2c:	b2d2      	uxtb	r2, r2
 8011f2e:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 8011f30:	89fb      	ldrh	r3, [r7, #14]
 8011f32:	0a1b      	lsrs	r3, r3, #8
 8011f34:	b299      	uxth	r1, r3
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	b2ca      	uxtb	r2, r1
 8011f40:	701a      	strb	r2, [r3, #0]
 8011f42:	e000      	b.n	8011f46 <append_crc16+0x52>
        return;
 8011f44:	bf00      	nop
}
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <get_crc32>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint32_t get_crc32(uint8_t *pchMessage,uint32_t dwLength,uint32_t wCRC)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b087      	sub	sp, #28
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
    uint8_t chData;
    if (pchMessage == NULL)
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d112      	bne.n	8011f84 <get_crc32+0x38>
    {
        return 0xFFFF;
 8011f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f62:	e015      	b.n	8011f90 <get_crc32+0x44>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	1c5a      	adds	r2, r3, #1
 8011f68:	60fa      	str	r2, [r7, #12]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint32_t)(wCRC) >> 8)  ^ CRC32_Table[((uint32_t)(wCRC) ^ (uint32_t)(chData)) & 0x000000ff];
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	0a1a      	lsrs	r2, r3, #8
 8011f72:	7df9      	ldrb	r1, [r7, #23]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	404b      	eors	r3, r1
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	4908      	ldr	r1, [pc, #32]	; (8011f9c <get_crc32+0x50>)
 8011f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011f80:	4053      	eors	r3, r2
 8011f82:	607b      	str	r3, [r7, #4]
    while(dwLength--)
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	1e5a      	subs	r2, r3, #1
 8011f88:	60ba      	str	r2, [r7, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1ea      	bne.n	8011f64 <get_crc32+0x18>
    }

    return wCRC;
 8011f8e:	687b      	ldr	r3, [r7, #4]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	371c      	adds	r7, #28
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr
 8011f9c:	08012ae8 	.word	0x08012ae8

08011fa0 <verify_crc32>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc32(uint8_t *pchMessage, uint32_t dwLength)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
    uint32_t wExpected = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	60fb      	str	r3, [r7, #12]
    uint32_t input_crc = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	60bb      	str	r3, [r7, #8]
    if ((pchMessage == NULL) || (dwLength <= 4))
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d002      	beq.n	8011fbe <verify_crc32+0x1e>
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	2b04      	cmp	r3, #4
 8011fbc:	d801      	bhi.n	8011fc2 <verify_crc32+0x22>
    {
        return __FALSE;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e036      	b.n	8012030 <verify_crc32+0x90>
    }
    wExpected = get_crc32(pchMessage, dwLength - 4, CRC32_INIT);
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	3b04      	subs	r3, #4
 8011fc6:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff ffbd 	bl	8011f4c <get_crc32>
 8011fd2:	60f8      	str	r0, [r7, #12]

    input_crc |= pchMessage[dwLength - 4];
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	3b04      	subs	r3, #4
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	4413      	add	r3, r2
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	461a      	mov	r2, r3
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 3]) << 8)  & 0xff00;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3b03      	subs	r3, #3
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	4413      	add	r3, r2
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	021b      	lsls	r3, r3, #8
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 2]) << 16) & 0xff0000;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	3b02      	subs	r3, #2
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	4413      	add	r3, r2
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	041b      	lsls	r3, r3, #16
 8012006:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801200a:	68ba      	ldr	r2, [r7, #8]
 801200c:	4313      	orrs	r3, r2
 801200e:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 1]) << 24) & 0xff000000;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	3b01      	subs	r3, #1
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	4413      	add	r3, r2
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	061b      	lsls	r3, r3, #24
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	4313      	orrs	r3, r2
 8012020:	60bb      	str	r3, [r7, #8]

    return (input_crc == wExpected);
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	429a      	cmp	r2, r3
 8012028:	bf0c      	ite	eq
 801202a:	2301      	moveq	r3, #1
 801202c:	2300      	movne	r3, #0
 801202e:	b2db      	uxtb	r3, r3
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <append_crc32>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc32(uint8_t* pchMessage,uint32_t dwLength)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
    uint32_t wCRC = 0;
 8012042:	2300      	movs	r3, #0
 8012044:	60fb      	str	r3, [r7, #12]

    if ((pchMessage == NULL) || (dwLength <= 4))
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d02b      	beq.n	80120a4 <append_crc32+0x6c>
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	2b04      	cmp	r3, #4
 8012050:	d928      	bls.n	80120a4 <append_crc32+0x6c>
    {
        return;
    }
    wCRC = get_crc32 ( (uint8_t *)pchMessage, dwLength-4, CRC32_INIT);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	3b04      	subs	r3, #4
 8012056:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 801205a:	4619      	mov	r1, r3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff ff75 	bl	8011f4c <get_crc32>
 8012062:	60f8      	str	r0, [r7, #12]

    pchMessage[dwLength-4] = (uint8_t)(wCRC & 0xff);
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	3b04      	subs	r3, #4
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	4413      	add	r3, r2
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	b2d2      	uxtb	r2, r2
 8012070:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-3] = (uint8_t)((wCRC >> 8)& 0xff);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	0a19      	lsrs	r1, r3, #8
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	3b03      	subs	r3, #3
 801207a:	687a      	ldr	r2, [r7, #4]
 801207c:	4413      	add	r3, r2
 801207e:	b2ca      	uxtb	r2, r1
 8012080:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-2] = (uint8_t)((wCRC >> 16)& 0xff);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	0c19      	lsrs	r1, r3, #16
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	3b02      	subs	r3, #2
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	4413      	add	r3, r2
 801208e:	b2ca      	uxtb	r2, r1
 8012090:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 24)& 0xff);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	0e19      	lsrs	r1, r3, #24
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	3b01      	subs	r3, #1
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	4413      	add	r3, r2
 801209e:	b2ca      	uxtb	r2, r1
 80120a0:	701a      	strb	r2, [r3, #0]
 80120a2:	e000      	b.n	80120a6 <append_crc32+0x6e>
        return;
 80120a4:	bf00      	nop
}
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80120b2:	2301      	movs	r3, #1
 80120b4:	71fb      	strb	r3, [r7, #7]
 80120b6:	e019      	b.n	80120ec <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 80120b8:	79fb      	ldrb	r3, [r7, #7]
 80120ba:	4a11      	ldr	r2, [pc, #68]	; (8012100 <TimerISR_Hook+0x54>)
 80120bc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d010      	beq.n	80120e6 <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 80120c4:	79fb      	ldrb	r3, [r7, #7]
 80120c6:	4a0e      	ldr	r2, [pc, #56]	; (8012100 <TimerISR_Hook+0x54>)
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	4413      	add	r3, r2
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d009      	beq.n	80120e6 <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 80120d2:	79fa      	ldrb	r2, [r7, #7]
 80120d4:	490a      	ldr	r1, [pc, #40]	; (8012100 <TimerISR_Hook+0x54>)
 80120d6:	00d3      	lsls	r3, r2, #3
 80120d8:	440b      	add	r3, r1
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	1e59      	subs	r1, r3, #1
 80120de:	4808      	ldr	r0, [pc, #32]	; (8012100 <TimerISR_Hook+0x54>)
 80120e0:	00d3      	lsls	r3, r2, #3
 80120e2:	4403      	add	r3, r0
 80120e4:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80120e6:	79fb      	ldrb	r3, [r7, #7]
 80120e8:	3301      	adds	r3, #1
 80120ea:	71fb      	strb	r3, [r7, #7]
 80120ec:	79fb      	ldrb	r3, [r7, #7]
 80120ee:	2b13      	cmp	r3, #19
 80120f0:	d9e2      	bls.n	80120b8 <TimerISR_Hook+0xc>
            }
        }
    }
}
 80120f2:	bf00      	nop
 80120f4:	bf00      	nop
 80120f6:	370c      	adds	r7, #12
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr
 8012100:	2001717c 	.word	0x2001717c

08012104 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 801210a:	2300      	movs	r3, #0
 801210c:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801210e:	2301      	movs	r3, #1
 8012110:	71fb      	strb	r3, [r7, #7]
 8012112:	e00d      	b.n	8012130 <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	4a0b      	ldr	r2, [pc, #44]	; (8012144 <soft_timer_init+0x40>)
 8012118:	2100      	movs	r1, #0
 801211a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 801211e:	79fb      	ldrb	r3, [r7, #7]
 8012120:	4a08      	ldr	r2, [pc, #32]	; (8012144 <soft_timer_init+0x40>)
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	4413      	add	r3, r2
 8012126:	2200      	movs	r2, #0
 8012128:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801212a:	79fb      	ldrb	r3, [r7, #7]
 801212c:	3301      	adds	r3, #1
 801212e:	71fb      	strb	r3, [r7, #7]
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	2b13      	cmp	r3, #19
 8012134:	d9ee      	bls.n	8012114 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr
 8012144:	2001717c 	.word	0x2001717c

08012148 <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 8012148:	b480      	push	{r7}
 801214a:	b087      	sub	sp, #28
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8012154:	2301      	movs	r3, #1
 8012156:	75fb      	strb	r3, [r7, #23]
 8012158:	e024      	b.n	80121a4 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	4a16      	ldr	r2, [pc, #88]	; (80121b8 <soft_timer_req+0x70>)
 801215e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d11b      	bne.n	801219e <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012166:	f3ef 8310 	mrs	r3, PRIMASK
 801216a:	60bb      	str	r3, [r7, #8]
  return(result);
 801216c:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 801216e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012170:	b672      	cpsid	i
}
 8012172:	bf00      	nop

            SoftTimer[i].handle    = i;
 8012174:	7dfb      	ldrb	r3, [r7, #23]
 8012176:	7dfa      	ldrb	r2, [r7, #23]
 8012178:	b291      	uxth	r1, r2
 801217a:	4a0f      	ldr	r2, [pc, #60]	; (80121b8 <soft_timer_req+0x70>)
 801217c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 8012180:	7dfb      	ldrb	r3, [r7, #23]
 8012182:	4a0d      	ldr	r2, [pc, #52]	; (80121b8 <soft_timer_req+0x70>)
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	4413      	add	r3, r2
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	605a      	str	r2, [r3, #4]
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f383 8810 	msr	PRIMASK, r3
}
 8012196:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	b29b      	uxth	r3, r3
 801219c:	e006      	b.n	80121ac <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801219e:	7dfb      	ldrb	r3, [r7, #23]
 80121a0:	3301      	adds	r3, #1
 80121a2:	75fb      	strb	r3, [r7, #23]
 80121a4:	7dfb      	ldrb	r3, [r7, #23]
 80121a6:	2b13      	cmp	r3, #19
 80121a8:	d9d7      	bls.n	801215a <soft_timer_req+0x12>
        }
    }

    return (0);
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	371c      	adds	r7, #28
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	2001717c 	.word	0x2001717c

080121bc <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 80121bc:	b480      	push	{r7}
 80121be:	b087      	sub	sp, #28
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80121c6:	2301      	movs	r3, #1
 80121c8:	75fb      	strb	r3, [r7, #23]
 80121ca:	e01f      	b.n	801220c <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 80121cc:	7dfb      	ldrb	r3, [r7, #23]
 80121ce:	4a14      	ldr	r2, [pc, #80]	; (8012220 <soft_timer_update+0x64>)
 80121d0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80121d4:	461a      	mov	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4293      	cmp	r3, r2
 80121da:	d114      	bne.n	8012206 <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80121dc:	f3ef 8310 	mrs	r3, PRIMASK
 80121e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80121e2:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 80121e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80121e6:	b672      	cpsid	i
}
 80121e8:	bf00      	nop

            SoftTimer[i].delay = Tick;
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	4a0c      	ldr	r2, [pc, #48]	; (8012220 <soft_timer_update+0x64>)
 80121ee:	00db      	lsls	r3, r3, #3
 80121f0:	4413      	add	r3, r2
 80121f2:	683a      	ldr	r2, [r7, #0]
 80121f4:	605a      	str	r2, [r3, #4]
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f383 8810 	msr	PRIMASK, r3
}
 8012200:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 8012202:	2300      	movs	r3, #0
 8012204:	e006      	b.n	8012214 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8012206:	7dfb      	ldrb	r3, [r7, #23]
 8012208:	3301      	adds	r3, #1
 801220a:	75fb      	strb	r3, [r7, #23]
 801220c:	7dfb      	ldrb	r3, [r7, #23]
 801220e:	2b13      	cmp	r3, #19
 8012210:	d9dc      	bls.n	80121cc <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 8012212:	2301      	movs	r3, #1
}
 8012214:	4618      	mov	r0, r3
 8012216:	371c      	adds	r7, #28
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	2001717c 	.word	0x2001717c

08012224 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 8012224:	b480      	push	{r7}
 8012226:	b087      	sub	sp, #28
 8012228:	af00      	add	r7, sp, #0
 801222a:	4603      	mov	r3, r0
 801222c:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 801222e:	2303      	movs	r3, #3
 8012230:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012232:	f3ef 8310 	mrs	r3, PRIMASK
 8012236:	60fb      	str	r3, [r7, #12]
  return(result);
 8012238:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 801223a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801223c:	b672      	cpsid	i
}
 801223e:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 8012240:	88fb      	ldrh	r3, [r7, #6]
 8012242:	4a0f      	ldr	r2, [pc, #60]	; (8012280 <soft_timer_check+0x5c>)
 8012244:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8012248:	88fa      	ldrh	r2, [r7, #6]
 801224a:	429a      	cmp	r2, r3
 801224c:	d10b      	bne.n	8012266 <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 801224e:	88fb      	ldrh	r3, [r7, #6]
 8012250:	4a0b      	ldr	r2, [pc, #44]	; (8012280 <soft_timer_check+0x5c>)
 8012252:	00db      	lsls	r3, r3, #3
 8012254:	4413      	add	r3, r2
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 801225c:	2301      	movs	r3, #1
 801225e:	82fb      	strh	r3, [r7, #22]
 8012260:	e001      	b.n	8012266 <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 8012262:	2302      	movs	r3, #2
 8012264:	82fb      	strh	r3, [r7, #22]
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	f383 8810 	msr	PRIMASK, r3
}
 8012270:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 8012272:	8afb      	ldrh	r3, [r7, #22]
}
 8012274:	4618      	mov	r0, r3
 8012276:	371c      	adds	r7, #28
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr
 8012280:	2001717c 	.word	0x2001717c

08012284 <__malloc_lock>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__malloc_lock+0x8>)
 8012286:	f000 b8b1 	b.w	80123ec <__retarget_lock_acquire_recursive>
 801228a:	bf00      	nop
 801228c:	20017358 	.word	0x20017358

08012290 <__malloc_unlock>:
 8012290:	4801      	ldr	r0, [pc, #4]	; (8012298 <__malloc_unlock+0x8>)
 8012292:	f000 b8ac 	b.w	80123ee <__retarget_lock_release_recursive>
 8012296:	bf00      	nop
 8012298:	20017358 	.word	0x20017358

0801229c <strncmp>:
 801229c:	b510      	push	{r4, lr}
 801229e:	b16a      	cbz	r2, 80122bc <strncmp+0x20>
 80122a0:	3901      	subs	r1, #1
 80122a2:	1884      	adds	r4, r0, r2
 80122a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d103      	bne.n	80122b8 <strncmp+0x1c>
 80122b0:	42a0      	cmp	r0, r4
 80122b2:	d001      	beq.n	80122b8 <strncmp+0x1c>
 80122b4:	2a00      	cmp	r2, #0
 80122b6:	d1f5      	bne.n	80122a4 <strncmp+0x8>
 80122b8:	1ad0      	subs	r0, r2, r3
 80122ba:	bd10      	pop	{r4, pc}
 80122bc:	4610      	mov	r0, r2
 80122be:	e7fc      	b.n	80122ba <strncmp+0x1e>

080122c0 <strncpy>:
 80122c0:	b510      	push	{r4, lr}
 80122c2:	3901      	subs	r1, #1
 80122c4:	4603      	mov	r3, r0
 80122c6:	b132      	cbz	r2, 80122d6 <strncpy+0x16>
 80122c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80122cc:	f803 4b01 	strb.w	r4, [r3], #1
 80122d0:	3a01      	subs	r2, #1
 80122d2:	2c00      	cmp	r4, #0
 80122d4:	d1f7      	bne.n	80122c6 <strncpy+0x6>
 80122d6:	441a      	add	r2, r3
 80122d8:	2100      	movs	r1, #0
 80122da:	4293      	cmp	r3, r2
 80122dc:	d100      	bne.n	80122e0 <strncpy+0x20>
 80122de:	bd10      	pop	{r4, pc}
 80122e0:	f803 1b01 	strb.w	r1, [r3], #1
 80122e4:	e7f9      	b.n	80122da <strncpy+0x1a>

080122e6 <memset>:
 80122e6:	4402      	add	r2, r0
 80122e8:	4603      	mov	r3, r0
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d100      	bne.n	80122f0 <memset+0xa>
 80122ee:	4770      	bx	lr
 80122f0:	f803 1b01 	strb.w	r1, [r3], #1
 80122f4:	e7f9      	b.n	80122ea <memset+0x4>
	...

080122f8 <_reclaim_reent>:
 80122f8:	4b29      	ldr	r3, [pc, #164]	; (80123a0 <_reclaim_reent+0xa8>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4283      	cmp	r3, r0
 80122fe:	b570      	push	{r4, r5, r6, lr}
 8012300:	4604      	mov	r4, r0
 8012302:	d04b      	beq.n	801239c <_reclaim_reent+0xa4>
 8012304:	69c3      	ldr	r3, [r0, #28]
 8012306:	b143      	cbz	r3, 801231a <_reclaim_reent+0x22>
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d144      	bne.n	8012398 <_reclaim_reent+0xa0>
 801230e:	69e3      	ldr	r3, [r4, #28]
 8012310:	6819      	ldr	r1, [r3, #0]
 8012312:	b111      	cbz	r1, 801231a <_reclaim_reent+0x22>
 8012314:	4620      	mov	r0, r4
 8012316:	f000 f879 	bl	801240c <_free_r>
 801231a:	6961      	ldr	r1, [r4, #20]
 801231c:	b111      	cbz	r1, 8012324 <_reclaim_reent+0x2c>
 801231e:	4620      	mov	r0, r4
 8012320:	f000 f874 	bl	801240c <_free_r>
 8012324:	69e1      	ldr	r1, [r4, #28]
 8012326:	b111      	cbz	r1, 801232e <_reclaim_reent+0x36>
 8012328:	4620      	mov	r0, r4
 801232a:	f000 f86f 	bl	801240c <_free_r>
 801232e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012330:	b111      	cbz	r1, 8012338 <_reclaim_reent+0x40>
 8012332:	4620      	mov	r0, r4
 8012334:	f000 f86a 	bl	801240c <_free_r>
 8012338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801233a:	b111      	cbz	r1, 8012342 <_reclaim_reent+0x4a>
 801233c:	4620      	mov	r0, r4
 801233e:	f000 f865 	bl	801240c <_free_r>
 8012342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012344:	b111      	cbz	r1, 801234c <_reclaim_reent+0x54>
 8012346:	4620      	mov	r0, r4
 8012348:	f000 f860 	bl	801240c <_free_r>
 801234c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801234e:	b111      	cbz	r1, 8012356 <_reclaim_reent+0x5e>
 8012350:	4620      	mov	r0, r4
 8012352:	f000 f85b 	bl	801240c <_free_r>
 8012356:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012358:	b111      	cbz	r1, 8012360 <_reclaim_reent+0x68>
 801235a:	4620      	mov	r0, r4
 801235c:	f000 f856 	bl	801240c <_free_r>
 8012360:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012362:	b111      	cbz	r1, 801236a <_reclaim_reent+0x72>
 8012364:	4620      	mov	r0, r4
 8012366:	f000 f851 	bl	801240c <_free_r>
 801236a:	6a23      	ldr	r3, [r4, #32]
 801236c:	b1b3      	cbz	r3, 801239c <_reclaim_reent+0xa4>
 801236e:	4620      	mov	r0, r4
 8012370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012374:	4718      	bx	r3
 8012376:	5949      	ldr	r1, [r1, r5]
 8012378:	b941      	cbnz	r1, 801238c <_reclaim_reent+0x94>
 801237a:	3504      	adds	r5, #4
 801237c:	69e3      	ldr	r3, [r4, #28]
 801237e:	2d80      	cmp	r5, #128	; 0x80
 8012380:	68d9      	ldr	r1, [r3, #12]
 8012382:	d1f8      	bne.n	8012376 <_reclaim_reent+0x7e>
 8012384:	4620      	mov	r0, r4
 8012386:	f000 f841 	bl	801240c <_free_r>
 801238a:	e7c0      	b.n	801230e <_reclaim_reent+0x16>
 801238c:	680e      	ldr	r6, [r1, #0]
 801238e:	4620      	mov	r0, r4
 8012390:	f000 f83c 	bl	801240c <_free_r>
 8012394:	4631      	mov	r1, r6
 8012396:	e7ef      	b.n	8012378 <_reclaim_reent+0x80>
 8012398:	2500      	movs	r5, #0
 801239a:	e7ef      	b.n	801237c <_reclaim_reent+0x84>
 801239c:	bd70      	pop	{r4, r5, r6, pc}
 801239e:	bf00      	nop
 80123a0:	20000198 	.word	0x20000198

080123a4 <__libc_init_array>:
 80123a4:	b570      	push	{r4, r5, r6, lr}
 80123a6:	4d0d      	ldr	r5, [pc, #52]	; (80123dc <__libc_init_array+0x38>)
 80123a8:	4c0d      	ldr	r4, [pc, #52]	; (80123e0 <__libc_init_array+0x3c>)
 80123aa:	1b64      	subs	r4, r4, r5
 80123ac:	10a4      	asrs	r4, r4, #2
 80123ae:	2600      	movs	r6, #0
 80123b0:	42a6      	cmp	r6, r4
 80123b2:	d109      	bne.n	80123c8 <__libc_init_array+0x24>
 80123b4:	4d0b      	ldr	r5, [pc, #44]	; (80123e4 <__libc_init_array+0x40>)
 80123b6:	4c0c      	ldr	r4, [pc, #48]	; (80123e8 <__libc_init_array+0x44>)
 80123b8:	f000 f874 	bl	80124a4 <_init>
 80123bc:	1b64      	subs	r4, r4, r5
 80123be:	10a4      	asrs	r4, r4, #2
 80123c0:	2600      	movs	r6, #0
 80123c2:	42a6      	cmp	r6, r4
 80123c4:	d105      	bne.n	80123d2 <__libc_init_array+0x2e>
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80123cc:	4798      	blx	r3
 80123ce:	3601      	adds	r6, #1
 80123d0:	e7ee      	b.n	80123b0 <__libc_init_array+0xc>
 80123d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80123d6:	4798      	blx	r3
 80123d8:	3601      	adds	r6, #1
 80123da:	e7f2      	b.n	80123c2 <__libc_init_array+0x1e>
 80123dc:	08012ef0 	.word	0x08012ef0
 80123e0:	08012ef0 	.word	0x08012ef0
 80123e4:	08012ef0 	.word	0x08012ef0
 80123e8:	08012ef4 	.word	0x08012ef4

080123ec <__retarget_lock_acquire_recursive>:
 80123ec:	4770      	bx	lr

080123ee <__retarget_lock_release_recursive>:
 80123ee:	4770      	bx	lr

080123f0 <memcpy>:
 80123f0:	440a      	add	r2, r1
 80123f2:	4291      	cmp	r1, r2
 80123f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80123f8:	d100      	bne.n	80123fc <memcpy+0xc>
 80123fa:	4770      	bx	lr
 80123fc:	b510      	push	{r4, lr}
 80123fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012406:	4291      	cmp	r1, r2
 8012408:	d1f9      	bne.n	80123fe <memcpy+0xe>
 801240a:	bd10      	pop	{r4, pc}

0801240c <_free_r>:
 801240c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801240e:	2900      	cmp	r1, #0
 8012410:	d044      	beq.n	801249c <_free_r+0x90>
 8012412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012416:	9001      	str	r0, [sp, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f1a1 0404 	sub.w	r4, r1, #4
 801241e:	bfb8      	it	lt
 8012420:	18e4      	addlt	r4, r4, r3
 8012422:	f7ff ff2f 	bl	8012284 <__malloc_lock>
 8012426:	4a1e      	ldr	r2, [pc, #120]	; (80124a0 <_free_r+0x94>)
 8012428:	9801      	ldr	r0, [sp, #4]
 801242a:	6813      	ldr	r3, [r2, #0]
 801242c:	b933      	cbnz	r3, 801243c <_free_r+0x30>
 801242e:	6063      	str	r3, [r4, #4]
 8012430:	6014      	str	r4, [r2, #0]
 8012432:	b003      	add	sp, #12
 8012434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012438:	f7ff bf2a 	b.w	8012290 <__malloc_unlock>
 801243c:	42a3      	cmp	r3, r4
 801243e:	d908      	bls.n	8012452 <_free_r+0x46>
 8012440:	6825      	ldr	r5, [r4, #0]
 8012442:	1961      	adds	r1, r4, r5
 8012444:	428b      	cmp	r3, r1
 8012446:	bf01      	itttt	eq
 8012448:	6819      	ldreq	r1, [r3, #0]
 801244a:	685b      	ldreq	r3, [r3, #4]
 801244c:	1949      	addeq	r1, r1, r5
 801244e:	6021      	streq	r1, [r4, #0]
 8012450:	e7ed      	b.n	801242e <_free_r+0x22>
 8012452:	461a      	mov	r2, r3
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	b10b      	cbz	r3, 801245c <_free_r+0x50>
 8012458:	42a3      	cmp	r3, r4
 801245a:	d9fa      	bls.n	8012452 <_free_r+0x46>
 801245c:	6811      	ldr	r1, [r2, #0]
 801245e:	1855      	adds	r5, r2, r1
 8012460:	42a5      	cmp	r5, r4
 8012462:	d10b      	bne.n	801247c <_free_r+0x70>
 8012464:	6824      	ldr	r4, [r4, #0]
 8012466:	4421      	add	r1, r4
 8012468:	1854      	adds	r4, r2, r1
 801246a:	42a3      	cmp	r3, r4
 801246c:	6011      	str	r1, [r2, #0]
 801246e:	d1e0      	bne.n	8012432 <_free_r+0x26>
 8012470:	681c      	ldr	r4, [r3, #0]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	6053      	str	r3, [r2, #4]
 8012476:	440c      	add	r4, r1
 8012478:	6014      	str	r4, [r2, #0]
 801247a:	e7da      	b.n	8012432 <_free_r+0x26>
 801247c:	d902      	bls.n	8012484 <_free_r+0x78>
 801247e:	230c      	movs	r3, #12
 8012480:	6003      	str	r3, [r0, #0]
 8012482:	e7d6      	b.n	8012432 <_free_r+0x26>
 8012484:	6825      	ldr	r5, [r4, #0]
 8012486:	1961      	adds	r1, r4, r5
 8012488:	428b      	cmp	r3, r1
 801248a:	bf04      	itt	eq
 801248c:	6819      	ldreq	r1, [r3, #0]
 801248e:	685b      	ldreq	r3, [r3, #4]
 8012490:	6063      	str	r3, [r4, #4]
 8012492:	bf04      	itt	eq
 8012494:	1949      	addeq	r1, r1, r5
 8012496:	6021      	streq	r1, [r4, #0]
 8012498:	6054      	str	r4, [r2, #4]
 801249a:	e7ca      	b.n	8012432 <_free_r+0x26>
 801249c:	b003      	add	sp, #12
 801249e:	bd30      	pop	{r4, r5, pc}
 80124a0:	2001721c 	.word	0x2001721c

080124a4 <_init>:
 80124a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a6:	bf00      	nop
 80124a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124aa:	bc08      	pop	{r3}
 80124ac:	469e      	mov	lr, r3
 80124ae:	4770      	bx	lr

080124b0 <_fini>:
 80124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b2:	bf00      	nop
 80124b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124b6:	bc08      	pop	{r3}
 80124b8:	469e      	mov	lr, r3
 80124ba:	4770      	bx	lr
