
ROBOT_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c460  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800c610  0800c610  0001c610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6cc  0800c6cc  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6cc  0800c6cc  0001c6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d4  0800c6d4  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d4  0800c6d4  0001c6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800c6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00006a24  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006b74  20006b74  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   000273b7  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005ff7  00000000  00000000  0004757a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002010  00000000  00000000  0004d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000188d  00000000  00000000  0004f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a69d  00000000  00000000  00050e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029364  00000000  00000000  0007b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb496  00000000  00000000  000a4816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000087fc  00000000  00000000  0018fcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  001984a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c5f8 	.word	0x0800c5f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800c5f8 	.word	0x0800c5f8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <blinky_task>:

#include "blinky_task.h"

#include "drv_blinky.h"

void blinky_task (void const *argument){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	uint32_t period = 100;
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	60fb      	str	r3, [r7, #12]
	while(1){
		uint32_t t = osKernelGetTickCount();
 80004f8:	f008 fc9e 	bl	8008e38 <osKernelGetTickCount>
 80004fc:	60b8      	str	r0, [r7, #8]

		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 80004fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000502:	4830      	ldr	r0, [pc, #192]	; (80005c4 <blinky_task+0xd8>)
 8000504:	f001 ff75 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*1);
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fd54 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	482b      	ldr	r0, [pc, #172]	; (80005c4 <blinky_task+0xd8>)
 8000518:	f001 ff6b 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*2);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	005a      	lsls	r2, r3, #1
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	4413      	add	r3, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f008 fd49 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4825      	ldr	r0, [pc, #148]	; (80005c4 <blinky_task+0xd8>)
 800052e:	f001 ff60 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*3);
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	441a      	add	r2, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4413      	add	r3, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f008 fd3c 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 8000544:	2120      	movs	r1, #32
 8000546:	481f      	ldr	r0, [pc, #124]	; (80005c4 <blinky_task+0xd8>)
 8000548:	f001 ff53 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*4);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	009a      	lsls	r2, r3, #2
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4413      	add	r3, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f008 fd31 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800055a:	2110      	movs	r1, #16
 800055c:	4819      	ldr	r0, [pc, #100]	; (80005c4 <blinky_task+0xd8>)
 800055e:	f001 ff48 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*5);
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	441a      	add	r2, r3
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	4413      	add	r3, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f008 fd24 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 8000574:	2108      	movs	r1, #8
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <blinky_task+0xd8>)
 8000578:	f001 ff3b 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*6);
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	461a      	mov	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4413      	add	r3, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f008 fd15 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000592:	2104      	movs	r1, #4
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <blinky_task+0xd8>)
 8000596:	f001 ff2c 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*7);
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	4613      	mov	r3, r2
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	1a9a      	subs	r2, r3, r2
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4413      	add	r3, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fd08 	bl	8008fbc <osDelayUntil>

		HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 80005ac:	2102      	movs	r1, #2
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <blinky_task+0xd8>)
 80005b0:	f001 ff1f 	bl	80023f2 <HAL_GPIO_TogglePin>
		osDelayUntil(t+period*8);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	00da      	lsls	r2, r3, #3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4413      	add	r3, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f008 fcfd 	bl	8008fbc <osDelayUntil>
	while(1){
 80005c2:	e799      	b.n	80004f8 <blinky_task+0xc>
 80005c4:	40021800 	.word	0x40021800

080005c8 <hw_init>:

#include "init.h"

#include "blinky_task.h"

void hw_init(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <task_init>:

osThreadId blinky_task_t;

void task_init(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
	const osThreadAttr_t blinkyTask_attributes = {
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2224      	movs	r2, #36	; 0x24
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00b ff1d 	bl	800c424 <memset>
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <task_init+0x3c>)
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	2328      	movs	r3, #40	; 0x28
 80005f6:	61fb      	str	r3, [r7, #28]
	.name = "BLINKY_1S",
	.stack_size = 128 * 4,
	.priority = (osPriority_t) osPriorityHigh,
	};
	blinky_task_t = osThreadNew(blinky_task, NULL, &blinkyTask_attributes);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	461a      	mov	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <task_init+0x40>)
 8000600:	f008 fc2f 	bl	8008e62 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <task_init+0x44>)
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	3728      	adds	r7, #40	; 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	0800c610 	.word	0x0800c610
 8000618:	080004ed 	.word	0x080004ed
 800061c:	2000016c 	.word	0x2000016c

08000620 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_CAN1_Init+0x64>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <MX_CAN1_Init+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_CAN1_Init+0x64>)
 800062c:	2207      	movs	r2, #7
 800062e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_CAN1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_CAN1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_CAN1_Init+0x64>)
 800063e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000642:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_CAN1_Init+0x64>)
 8000646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_CAN1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_CAN1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_CAN1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_CAN1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_CAN1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_CAN1_Init+0x64>)
 800066c:	2201      	movs	r2, #1
 800066e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_CAN1_Init+0x64>)
 8000672:	f001 f831 	bl	80016d8 <HAL_CAN_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800067c:	f000 fab2 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000170 	.word	0x20000170
 8000688:	40006400 	.word	0x40006400

0800068c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_CAN_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_CAN_MspInit+0x88>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006e6:	2303      	movs	r3, #3
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006f6:	2309      	movs	r3, #9
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_CAN_MspInit+0x8c>)
 8000702:	f001 fcb1 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40006400 	.word	0x40006400
 8000714:	40023800 	.word	0x40023800
 8000718:	40020c00 	.word	0x40020c00

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_DMA_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_DMA_Init+0x4c>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2105      	movs	r1, #5
 8000742:	2039      	movs	r0, #57	; 0x39
 8000744:	f001 f97c 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000748:	2039      	movs	r0, #57	; 0x39
 800074a:	f001 f995 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2105      	movs	r1, #5
 8000752:	2045      	movs	r0, #69	; 0x45
 8000754:	f001 f974 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000758:	2045      	movs	r0, #69	; 0x45
 800075a:	f001 f98d 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <MX_FREERTOS_Init+0x18>)
 8000772:	2100      	movs	r1, #0
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_FREERTOS_Init+0x1c>)
 8000776:	f008 fb74 	bl	8008e62 <osThreadNew>
 800077a:	4603      	mov	r3, r0
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <MX_FREERTOS_Init+0x20>)
 800077e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	0800c688 	.word	0x0800c688
 8000788:	08000791 	.word	0x08000791
 800078c:	20000198 	.word	0x20000198

08000790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000798:	f00b f950 	bl	800ba3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f008 fbf2 	bl	8008f86 <osDelay>
 80007a2:	e7fb      	b.n	800079c <StartDefaultTask+0xc>

080007a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	; 0x38
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
 80007be:	4baf      	ldr	r3, [pc, #700]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4aae      	ldr	r2, [pc, #696]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4bac      	ldr	r3, [pc, #688]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	623b      	str	r3, [r7, #32]
 80007d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
 80007da:	4ba8      	ldr	r3, [pc, #672]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4aa7      	ldr	r2, [pc, #668]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4ba5      	ldr	r3, [pc, #660]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4ba1      	ldr	r3, [pc, #644]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4aa0      	ldr	r2, [pc, #640]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b9e      	ldr	r3, [pc, #632]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b9a      	ldr	r3, [pc, #616]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a99      	ldr	r2, [pc, #612]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b97      	ldr	r3, [pc, #604]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b93      	ldr	r3, [pc, #588]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a92      	ldr	r2, [pc, #584]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b90      	ldr	r3, [pc, #576]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b8c      	ldr	r3, [pc, #560]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a8b      	ldr	r2, [pc, #556]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b89      	ldr	r3, [pc, #548]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b85      	ldr	r3, [pc, #532]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a84      	ldr	r2, [pc, #528]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 800086c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b82      	ldr	r3, [pc, #520]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b7e      	ldr	r3, [pc, #504]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a7d      	ldr	r2, [pc, #500]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b7b      	ldr	r3, [pc, #492]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b77      	ldr	r3, [pc, #476]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b74      	ldr	r3, [pc, #464]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f640 0104 	movw	r1, #2052	; 0x804
 80008bc:	4870      	ldr	r0, [pc, #448]	; (8000a80 <MX_GPIO_Init+0x2dc>)
 80008be:	f001 fd7f 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	213c      	movs	r1, #60	; 0x3c
 80008c6:	486f      	ldr	r0, [pc, #444]	; (8000a84 <MX_GPIO_Init+0x2e0>)
 80008c8:	f001 fd7a 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80008d2:	486d      	ldr	r0, [pc, #436]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 80008d4:	f001 fd74 	bl	80023c0 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GF14_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f244 0140 	movw	r1, #16448	; 0x4040
 80008de:	486b      	ldr	r0, [pc, #428]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 80008e0:	f001 fd6e 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 80008e4:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	2303      	movs	r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4861      	ldr	r0, [pc, #388]	; (8000a80 <MX_GPIO_Init+0x2dc>)
 80008fa:	f001 fbb5 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_R_Pin;
 80008fe:	f640 0304 	movw	r3, #2052	; 0x804
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	485a      	ldr	r0, [pc, #360]	; (8000a80 <MX_GPIO_Init+0x2dc>)
 8000918:	f001 fba6 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB2 PB12
                           PB13 PB1 PB0 PB10
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 800091c:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4857      	ldr	r0, [pc, #348]	; (8000a90 <MX_GPIO_Init+0x2ec>)
 8000932:	f001 fb99 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 8000936:	f64b 4301 	movw	r3, #48129	; 0xbc01
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 800094c:	f001 fb8c 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD2 PD15 PD14
                           PD13 PD12 PD11 PD10
                           PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000950:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	484b      	ldr	r0, [pc, #300]	; (8000a94 <MX_GPIO_Init+0x2f0>)
 8000966:	f001 fb7f 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000970:	2303      	movs	r3, #3
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4846      	ldr	r0, [pc, #280]	; (8000a98 <MX_GPIO_Init+0x2f4>)
 8000980:	f001 fb72 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 8000984:	f248 63f0 	movw	r3, #34544	; 0x86f0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	2303      	movs	r3, #3
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4840      	ldr	r0, [pc, #256]	; (8000a9c <MX_GPIO_Init+0x2f8>)
 800099a:	f001 fb65 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 800099e:	23e4      	movs	r3, #228	; 0xe4
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x2fc>)
 80009b2:	f001 fb59 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80009b6:	f640 731b 	movw	r3, #3867	; 0xf1b
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4835      	ldr	r0, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0x2fc>)
 80009cc:	f001 fb4c 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 80009d0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4827      	ldr	r0, [pc, #156]	; (8000a84 <MX_GPIO_Init+0x2e0>)
 80009e6:	f001 fb3f 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF10 PF13
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80009ea:	f64b 433f 	movw	r3, #48191	; 0xbc3f
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 8000a00:	f001 fb32 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000a04:	233c      	movs	r3, #60	; 0x3c
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x2e0>)
 8000a1c:	f001 fb24 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000a20:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 8000a3a:	f001 fb15 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GF14_Pin;
 8000a3e:	f244 0340 	movw	r3, #16448	; 0x4040
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 8000a58:	f001 fb06 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <MX_GPIO_Init+0x2f8>)
 8000a70:	f001 fafa 	bl	8002068 <HAL_GPIO_Init>

}
 8000a74:	bf00      	nop
 8000a76:	3738      	adds	r7, #56	; 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40021c00 	.word	0x40021c00
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40021400 	.word	0x40021400
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 fdb0 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f81e 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f7ff fe78 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab4:	f7ff fe32 	bl	800071c <MX_DMA_Init>
  MX_SPI5_Init();
 8000ab8:	f000 f89a 	bl	8000bf0 <MX_SPI5_Init>
  MX_CAN1_Init();
 8000abc:	f7ff fdb0 	bl	8000620 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8000ac0:	f000 fca2 	bl	8001408 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000ac4:	f000 fa0a 	bl	8000edc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac8:	f000 fa98 	bl	8000ffc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000acc:	f000 fae2 	bl	8001094 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000ad0:	f000 fb3a 	bl	8001148 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8000ad4:	f7ff fd78 	bl	80005c8 <hw_init>
  task_init();
 8000ad8:	f7ff fd7e 	bl	80005d8 <task_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000adc:	f008 f962 	bl	8008da4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ae0:	f7ff fe44 	bl	800076c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ae4:	f008 f982 	bl	8008dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x44>
	...

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00b fc92 	bl	800c424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b60:	23a8      	movs	r3, #168	; 0xa8
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fea9 	bl	80038c8 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b7c:	f000 f832 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f90a 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000baa:	f000 f81b 	bl	8000be4 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd2:	f000 fd3d 	bl	8001650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40000c00 	.word	0x40000c00

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MX_SPI5_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c00:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c20:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c24:	2230      	movs	r2, #48	; 0x30
 8000c26:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_SPI5_Init+0x64>)
 8000c42:	f003 facb 	bl	80041dc <HAL_SPI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f7ff ffca 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000019c 	.word	0x2000019c
 8000c58:	40015000 	.word	0x40015000

08000c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_SPI_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12c      	bne.n	8000cd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_SPI_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000cb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_SPI_MspInit+0x8c>)
 8000cd4:	f001 f9c8 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40015000 	.word	0x40015000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021400 	.word	0x40021400

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_MspInit+0x54>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_MspInit+0x54>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	f06f 0001 	mvn.w	r0, #1
 8000d32:	f000 fe85 	bl	8001a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 f9fc 	bl	8004178 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8a:	f003 f9cd 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8000d8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d92:	f003 f9c9 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8000d96:	4603      	mov	r3, r0
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_InitTick+0xe8>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9b      	lsrs	r3, r3, #18
 8000da6:	3b01      	subs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_InitTick+0xec>)
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <HAL_InitTick+0xf0>)
 8000dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_InitTick+0xec>)
 8000db2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_InitTick+0xec>)
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_InitTick+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_InitTick+0xec>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <HAL_InitTick+0xec>)
 8000dd2:	f003 fa8c 	bl	80042ee <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d11b      	bne.n	8000e1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_InitTick+0xec>)
 8000de6:	f003 fad1 	bl	800438c <HAL_TIM_Base_Start_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d111      	bne.n	8000e1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000df8:	2032      	movs	r0, #50	; 0x32
 8000dfa:	f000 fe3d 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d808      	bhi.n	8000e16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2032      	movs	r0, #50	; 0x32
 8000e0a:	f000 fe19 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_InitTick+0xf4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e002      	b.n	8000e1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3738      	adds	r7, #56	; 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	200001f4 	.word	0x200001f4
 8000e34:	40000c00 	.word	0x40000c00
 8000e38:	20000004 	.word	0x20000004

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM5_IRQHandler+0x10>)
 8000e6e:	f003 fb4c 	bl	800450a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001f4 	.word	0x200001f4

08000e7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Stream1_IRQHandler+0x10>)
 8000e82:	f000 feb5 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200003a4 	.word	0x200003a4

08000e90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <OTG_FS_IRQHandler+0x10>)
 8000e96:	f001 fc0a 	bl	80026ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20006330 	.word	0x20006330

08000ea4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA2_Stream6_IRQHandler+0x10>)
 8000eaa:	f000 fea1 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000404 	.word	0x20000404

08000eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b092      	sub	sp, #72	; 0x48
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2220      	movs	r2, #32
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00b fa8c 	bl	800c424 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f0c:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	; (8000ff8 <MX_TIM1_Init+0x11c>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f14:	2210      	movs	r2, #16
 8000f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f20:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f38:	482e      	ldr	r0, [pc, #184]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f3a:	f003 fa97 	bl	800446c <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f44:	f7ff fe4e 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f54:	4619      	mov	r1, r3
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f58:	f004 f870 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f62:	f7ff fe3f 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	; 0x60
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4819      	ldr	r0, [pc, #100]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000f8e:	f003 fbad 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f98:	f7ff fe24 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000fa6:	f003 fba1 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000fb0:	f7ff fe18 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000fd8:	f004 f8ac 	bl	8005134 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000fe2:	f7ff fdff 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x118>)
 8000fe8:	f000 f962 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3748      	adds	r7, #72	; 0x48
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000023c 	.word	0x2000023c
 8000ff8:	40010000 	.word	0x40010000

08000ffc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0x94>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0x94>)
 8001022:	2253      	movs	r2, #83	; 0x53
 8001024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM2_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM2_Init+0x94>)
 800102e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM2_Init+0x94>)
 8001042:	f003 f954 	bl	80042ee <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800104c:	f7ff fdca 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM2_Init+0x94>)
 800105e:	f003 fc07 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001068:	f7ff fdbc 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM2_Init+0x94>)
 800107a:	f003 ffdf 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001084:	f7ff fdae 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000284 	.word	0x20000284

08001094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_TIM3_Init+0xac>)
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <MX_TIM3_Init+0xb0>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_TIM3_Init+0xac>)
 80010be:	2253      	movs	r2, #83	; 0x53
 80010c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_TIM3_Init+0xac>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM3_Init+0xac>)
 80010ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM3_Init+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0xac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010dc:	4818      	ldr	r0, [pc, #96]	; (8001140 <MX_TIM3_Init+0xac>)
 80010de:	f003 f9c5 	bl	800446c <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010e8:	f7ff fd7c 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_TIM3_Init+0xac>)
 80010fc:	f003 ff9e 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001106:	f7ff fd6d 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2204      	movs	r2, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM3_Init+0xac>)
 8001122:	f003 fae3 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800112c:	f7ff fd5a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM3_Init+0xac>)
 8001132:	f000 f8bd 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002cc 	.word	0x200002cc
 8001144:	40000400 	.word	0x40000400

08001148 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM12_Init+0x84>)
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <MX_TIM12_Init+0x88>)
 8001164:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_TIM12_Init+0x84>)
 8001168:	2253      	movs	r2, #83	; 0x53
 800116a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_TIM12_Init+0x84>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_TIM12_Init+0x84>)
 8001174:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001178:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_TIM12_Init+0x84>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_TIM12_Init+0x84>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_TIM12_Init+0x84>)
 8001188:	f003 f970 	bl	800446c <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001192:	f7ff fd27 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM12_Init+0x84>)
 80011ae:	f003 fa9d 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011b8:	f7ff fd14 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM12_Init+0x84>)
 80011be:	f000 f877 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000314 	.word	0x20000314
 80011d0:	40001800 	.word	0x40001800

080011d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_TIM_PWM_MspInit+0x8c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10e      	bne.n	8001204 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001202:	e026      	b.n	8001252 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_TIM_PWM_MspInit+0x94>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
}
 800122a:	e012      	b.n	8001252 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_TIM_PWM_MspInit+0x98>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10d      	bne.n	8001252 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_TIM_PWM_MspInit+0x90>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000
 8001264:	40023800 	.word	0x40023800
 8001268:	40000400 	.word	0x40000400
 800126c:	40001800 	.word	0x40001800

08001270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d10d      	bne.n	800129e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_TIM_Base_MspInit+0x3c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_TIM_Base_MspInit+0x3c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_TIM_Base_MspInit+0x3c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <HAL_TIM_MspPostInit+0x138>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d13e      	bne.n	8001350 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4832      	ldr	r0, [pc, #200]	; (80013f0 <HAL_TIM_MspPostInit+0x140>)
 8001328:	f000 fe9e 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800132c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800133e:	2301      	movs	r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	482a      	ldr	r0, [pc, #168]	; (80013f4 <HAL_TIM_MspPostInit+0x144>)
 800134a:	f000 fe8d 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800134e:	e046      	b.n	80013de <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <HAL_TIM_MspPostInit+0x148>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11e      	bne.n	8001398 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001376:	2320      	movs	r3, #32
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001386:	2302      	movs	r3, #2
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	481a      	ldr	r0, [pc, #104]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 8001392:	f000 fe69 	bl	8002068 <HAL_GPIO_Init>
}
 8001396:	e022      	b.n	80013de <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_TIM_MspPostInit+0x150>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11d      	bne.n	80013de <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_TIM_MspPostInit+0x13c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80013ce:	2309      	movs	r3, #9
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <HAL_TIM_MspPostInit+0x154>)
 80013da:	f000 fe45 	bl	8002068 <HAL_GPIO_Init>
}
 80013de:	bf00      	nop
 80013e0:	3730      	adds	r7, #48	; 0x30
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40000400 	.word	0x40000400
 80013fc:	40020400 	.word	0x40020400
 8001400:	40001800 	.word	0x40001800
 8001404:	40021c00 	.word	0x40021c00

08001408 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART6_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001414:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001418:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001440:	f003 fede 	bl	8005200 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f7ff fbcb 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000035c 	.word	0x2000035c
 8001458:	40011400 	.word	0x40011400

0800145c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_UART_MspInit+0x140>)
 800147a:	4293      	cmp	r3, r2
 800147c:	f040 808a 	bne.w	8001594 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_UART_MspInit+0x144>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_UART_MspInit+0x144>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	6453      	str	r3, [r2, #68]	; 0x44
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_UART_MspInit+0x144>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_UART_MspInit+0x144>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <HAL_UART_MspInit+0x144>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_UART_MspInit+0x144>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80014b8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014ca:	2308      	movs	r3, #8
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4833      	ldr	r0, [pc, #204]	; (80015a4 <HAL_UART_MspInit+0x148>)
 80014d6:	f000 fdc7 	bl	8002068 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014dc:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_UART_MspInit+0x150>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 800150a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 800151e:	f000 fab9 	bl	8001a94 <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001528:	f7ff fb5c 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_UART_MspInit+0x14c>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0x158>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001540:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001544:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001548:	2240      	movs	r2, #64	; 0x40
 800154a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001558:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800157a:	f000 fa8b 	bl	8001a94 <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001584:	f7ff fb2e 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_UART_MspInit+0x154>)
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_UART_MspInit+0x154>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40011400 	.word	0x40011400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021800 	.word	0x40021800
 80015a8:	200003a4 	.word	0x200003a4
 80015ac:	40026428 	.word	0x40026428
 80015b0:	20000404 	.word	0x20000404
 80015b4:	400264a0 	.word	0x400264a0

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015bc:	f7ff fc7c 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	; (8001604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f00a ff7b 	bl	800c4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fa5b 	bl	8000aa4 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80015fc:	0800c6dc 	.word	0x0800c6dc
  ldr r2, =_sbss
 8001600:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001604:	20006b74 	.word	0x20006b74

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f9f8 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff fb82 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fb54 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	20000464 	.word	0x20000464

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000464 	.word	0x20000464

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0ed      	b.n	80018c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7fe ffc8 	bl	800068c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170c:	f7ff ffb4 	bl	8001678 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001712:	e012      	b.n	800173a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001714:	f7ff ffb0 	bl	8001678 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d90b      	bls.n	800173a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0c5      	b.n	80018c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0e5      	beq.n	8001714 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0202 	bic.w	r2, r2, #2
 8001756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001758:	f7ff ff8e 	bl	8001678 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800175e:	e012      	b.n	8001786 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001760:	f7ff ff8a 	bl	8001678 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d90b      	bls.n	8001786 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2205      	movs	r2, #5
 800177e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e09f      	b.n	80018c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e5      	bne.n	8001760 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e1b      	ldrb	r3, [r3, #24]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7e5b      	ldrb	r3, [r3, #25]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e9b      	ldrb	r3, [r3, #26]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0220 	bic.w	r2, r2, #32
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7edb      	ldrb	r3, [r3, #27]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0210 	bic.w	r2, r2, #16
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0210 	orr.w	r2, r2, #16
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7f1b      	ldrb	r3, [r3, #28]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0208 	orr.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0208 	bic.w	r2, r2, #8
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7f5b      	ldrb	r3, [r3, #29]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0204 	orr.w	r2, r2, #4
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	ea42 0103 	orr.w	r1, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff fdea 	bl	8001678 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e099      	b.n	8001be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	e00f      	b.n	8001af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad2:	f7ff fdd1 	bl	8001678 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d908      	bls.n	8001af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e078      	b.n	8001be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e8      	bne.n	8001ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_DMA_Init+0x158>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d117      	bne.n	8001bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f9e9 	bl	8001f70 <DMA_CheckFifoParam>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2240      	movs	r2, #64	; 0x40
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f9a0 	bl	8001f04 <DMA_CalcBaseAndBitshift>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bcc:	223f      	movs	r2, #63	; 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f010803f 	.word	0xf010803f

08001bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bfc:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <HAL_DMA_IRQHandler+0x248>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a8e      	ldr	r2, [pc, #568]	; (8001e3c <HAL_DMA_IRQHandler+0x24c>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2208      	movs	r2, #8
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	409a      	lsls	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f043 0202 	orr.w	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2204      	movs	r2, #4
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2210      	movs	r2, #16
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d043      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03c      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2210      	movs	r2, #16
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d024      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
 8001d1e:	e01f      	b.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
 8001d30:	e016      	b.n	8001d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2220      	movs	r2, #32
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 808f 	beq.w	8001e90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8087 	beq.w	8001e90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2220      	movs	r2, #32
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d136      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0216 	bic.w	r2, r2, #22
 8001da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_DMA_IRQHandler+0x1da>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	223f      	movs	r2, #63	; 0x3f
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d07e      	beq.n	8001efc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
        }
        return;
 8001e06:	e079      	b.n	8001efc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01d      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e02c      	b.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
 8001e50:	e01e      	b.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d032      	beq.n	8001efe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d022      	beq.n	8001eea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d307      	bcc.n	8001ed8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f2      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x2cc>
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ed8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e000      	b.n	8001efe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001efc:	bf00      	nop
    }
  }
}
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3b10      	subs	r3, #16
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <DMA_CalcBaseAndBitshift+0x64>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <DMA_CalcBaseAndBitshift+0x68>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d909      	bls.n	8001f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	659a      	str	r2, [r3, #88]	; 0x58
 8001f44:	e007      	b.n	8001f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	aaaaaaab 	.word	0xaaaaaaab
 8001f6c:	0800c6c4 	.word	0x0800c6c4

08001f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11f      	bne.n	8001fca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d856      	bhi.n	800203e <DMA_CheckFifoParam+0xce>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <DMA_CheckFifoParam+0x28>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fbb 	.word	0x08001fbb
 8001fa0:	08001fa9 	.word	0x08001fa9
 8001fa4:	0800203f 	.word	0x0800203f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d046      	beq.n	8002042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb8:	e043      	b.n	8002042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fc2:	d140      	bne.n	8002046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e03d      	b.n	8002046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd2:	d121      	bne.n	8002018 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d837      	bhi.n	800204a <DMA_CheckFifoParam+0xda>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <DMA_CheckFifoParam+0x70>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08001ff7 	.word	0x08001ff7
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08002009 	.word	0x08002009
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff4:	e030      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d025      	beq.n	800204e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002006:	e022      	b.n	800204e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002010:	d11f      	bne.n	8002052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002016:	e01c      	b.n	8002052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d903      	bls.n	8002026 <DMA_CheckFifoParam+0xb6>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d003      	beq.n	800202c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002024:	e018      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
      break;
 800202a:	e015      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      break;
 800203c:	e00b      	b.n	8002056 <DMA_CheckFifoParam+0xe6>
      break;
 800203e:	bf00      	nop
 8002040:	e00a      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e008      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e006      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e004      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;   
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
    }
  } 
  
  return status; 
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e177      	b.n	8002374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8166 	bne.w	800236e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d005      	beq.n	80020ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80c0 	beq.w	800236e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b66      	ldr	r3, [pc, #408]	; (800238c <HAL_GPIO_Init+0x324>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a65      	ldr	r2, [pc, #404]	; (800238c <HAL_GPIO_Init+0x324>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_GPIO_Init+0x324>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220a:	4a61      	ldr	r2, [pc, #388]	; (8002390 <HAL_GPIO_Init+0x328>)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_GPIO_Init+0x32c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d037      	beq.n	80022a6 <HAL_GPIO_Init+0x23e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_GPIO_Init+0x330>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d031      	beq.n	80022a2 <HAL_GPIO_Init+0x23a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a56      	ldr	r2, [pc, #344]	; (800239c <HAL_GPIO_Init+0x334>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d02b      	beq.n	800229e <HAL_GPIO_Init+0x236>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a55      	ldr	r2, [pc, #340]	; (80023a0 <HAL_GPIO_Init+0x338>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d025      	beq.n	800229a <HAL_GPIO_Init+0x232>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a54      	ldr	r2, [pc, #336]	; (80023a4 <HAL_GPIO_Init+0x33c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01f      	beq.n	8002296 <HAL_GPIO_Init+0x22e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a53      	ldr	r2, [pc, #332]	; (80023a8 <HAL_GPIO_Init+0x340>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x22a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_GPIO_Init+0x344>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x226>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <HAL_GPIO_Init+0x348>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x222>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_GPIO_Init+0x34c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x21e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <HAL_GPIO_Init+0x350>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x21a>
 800227e:	2309      	movs	r3, #9
 8002280:	e012      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 8002282:	230a      	movs	r3, #10
 8002284:	e010      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 8002286:	2308      	movs	r3, #8
 8002288:	e00e      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 800228a:	2307      	movs	r3, #7
 800228c:	e00c      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 800228e:	2306      	movs	r3, #6
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 8002292:	2305      	movs	r3, #5
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x240>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x328>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_GPIO_Init+0x354>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_GPIO_Init+0x354>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_GPIO_Init+0x354>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_GPIO_Init+0x354>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x354>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_GPIO_Init+0x354>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_GPIO_Init+0x354>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_GPIO_Init+0x354>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f ae84 	bls.w	8002084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40021c00 	.word	0x40021c00
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40022400 	.word	0x40022400
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	041a      	lsls	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43d9      	mvns	r1, r3
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	400b      	ands	r3, r1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af02      	add	r7, sp, #8
 800242c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e101      	b.n	800263c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f009 fcd2 	bl	800bdfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002466:	d102      	bne.n	800246e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fa9f 	bl	80059b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7c1a      	ldrb	r2, [r3, #16]
 8002480:	f88d 2000 	strb.w	r2, [sp]
 8002484:	3304      	adds	r3, #4
 8002486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002488:	f003 f97e 	bl	8005788 <USB_CoreInit>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0ce      	b.n	800263c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fa97 	bl	80059d8 <USB_SetCurrentMode>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0bf      	b.n	800263c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e04a      	b.n	8002558 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3315      	adds	r3, #21
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3314      	adds	r3, #20
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	b298      	uxth	r0, r3
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	332e      	adds	r3, #46	; 0x2e
 80024fe:	4602      	mov	r2, r0
 8002500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3318      	adds	r3, #24
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	331c      	adds	r3, #28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3320      	adds	r3, #32
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3324      	adds	r3, #36	; 0x24
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3301      	adds	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3af      	bcc.n	80024c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	f203 2355 	addw	r3, r3, #597	; 0x255
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b5      	bcc.n	8002568 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7c1a      	ldrb	r2, [r3, #16]
 8002604:	f88d 2000 	strb.w	r2, [sp]
 8002608:	3304      	adds	r3, #4
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	f003 fa30 	bl	8005a70 <USB_DevInit>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00c      	b.n	800263c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fa74 	bl	8006b22 <USB_DevDisconnect>

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_PCD_Start+0x1c>
 800265c:	2302      	movs	r3, #2
 800265e:	e022      	b.n	80026a6 <HAL_PCD_Start+0x62>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f981 	bl	8005994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fa22 	bl	8006ae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b08d      	sub	sp, #52	; 0x34
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fae0 	bl	8006c8a <USB_GetMode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 848c 	bne.w	8002fea <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fa44 	bl	8006b64 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8482 	beq.w	8002fe8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fa31 	bl	8006b64 <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 0202 	and.w	r2, r2, #2
 800271a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f004 fa1f 	bl	8006b64 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b10      	cmp	r3, #16
 800272e:	d161      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	3304      	adds	r3, #4
 800275e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	0c5b      	lsrs	r3, r3, #17
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	2b02      	cmp	r3, #2
 800276a:	d124      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d035      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6a38      	ldr	r0, [r7, #32]
 800278c:	f004 f856 	bl	800683c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	441a      	add	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	615a      	str	r2, [r3, #20]
 80027b4:	e016      	b.n	80027e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	0c5b      	lsrs	r3, r3, #17
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d110      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027c8:	2208      	movs	r2, #8
 80027ca:	4619      	mov	r1, r3
 80027cc:	6a38      	ldr	r0, [r7, #32]
 80027ce:	f004 f835 	bl	800683c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027de:	441a      	add	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0210 	orr.w	r2, r2, #16
 80027f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 f9b3 	bl	8006b64 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002808:	f040 80a7 	bne.w	800295a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f004 f9b8 	bl	8006b8a <USB_ReadDevAllOutEpInterrupt>
 800281a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800281c:	e099      	b.n	8002952 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 808e 	beq.w	8002946 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f004 f9dc 	bl	8006bf2 <USB_ReadDevOutEPInterrupt>
 800283a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002852:	461a      	mov	r2, r3
 8002854:	2301      	movs	r3, #1
 8002856:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fea2 	bl	80035a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002876:	461a      	mov	r2, r3
 8002878:	2308      	movs	r3, #8
 800287a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 ff78 	bl	8003774 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	2310      	movs	r3, #16
 800289e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d030      	beq.n	800290c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d109      	bne.n	80028ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f009 fb87 	bl	800c008 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	2302      	movs	r3, #2
 800290a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	461a      	mov	r2, r3
 8002924:	2320      	movs	r3, #32
 8002926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002944:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af62 	bne.w	800281e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f004 f900 	bl	8006b64 <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800296e:	f040 80db 	bne.w	8002b28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f004 f921 	bl	8006bbe <USB_ReadDevAllInEpInterrupt>
 800297c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002982:	e0cd      	b.n	8002b20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80c2 	beq.w	8002b14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f004 f947 	bl	8006c2e <USB_ReadDevInEPInterrupt>
 80029a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d057      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69f9      	ldr	r1, [r7, #28]
 80029c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029cc:	4013      	ands	r3, r2
 80029ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d132      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3320      	adds	r3, #32
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4403      	add	r3, r0
 8002a0a:	331c      	adds	r3, #28
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4419      	add	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3320      	adds	r3, #32
 8002a20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x3a2>
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f004 f94e 	bl	8006cec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f009 fa51 	bl	800befe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a72:	461a      	mov	r2, r3
 8002a74:	2308      	movs	r3, #8
 8002a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2310      	movs	r3, #16
 8002a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abc:	6a38      	ldr	r0, [r7, #32]
 8002abe:	f003 f93b 	bl	8005d38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	3310      	adds	r3, #16
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	78db      	ldrb	r3, [r3, #3]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f009 fa9e 	bl	800c02c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afc:	461a      	mov	r2, r3
 8002afe:	2302      	movs	r3, #2
 8002b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fcbb 	bl	800348a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	3301      	adds	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f47f af2e 	bne.w	8002984 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 f819 	bl	8006b64 <USB_ReadInterrupts>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b3c:	d122      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fea2 	bl	80038b0 <HAL_PCDEx_LPM_Callback>
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f009 fa3c 	bl	800bfec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 ffeb 	bl	8006b64 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b98:	d112      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f009 f9f8 	bl	800bfa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bbe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 ffcd 	bl	8006b64 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	f040 80b7 	bne.w	8002d46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 f8a0 	bl	8005d38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfc:	e046      	b.n	8002c8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c22:	0151      	lsls	r1, r2, #5
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	440a      	add	r2, r1
 8002c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c56:	0151      	lsls	r1, r2, #5
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c76:	0151      	lsls	r1, r2, #5
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	440a      	add	r2, r1
 8002c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	3301      	adds	r3, #1
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	791b      	ldrb	r3, [r3, #4]
 8002c90:	461a      	mov	r2, r3
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d3b2      	bcc.n	8002bfe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002caa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7bdb      	ldrb	r3, [r3, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc4:	f043 030b 	orr.w	r3, r3, #11
 8002cc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cda:	f043 030b 	orr.w	r3, r3, #11
 8002cde:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce0:	e015      	b.n	8002d0e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cf8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d08:	f043 030b 	orr.w	r3, r3, #11
 8002d0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d30:	461a      	mov	r2, r3
 8002d32:	f003 ffdb 	bl	8006cec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 ff0a 	bl	8006b64 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	d123      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 ffa0 	bl	8006ca6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f85d 	bl	8005e2a <USB_GetDevSpeed>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681c      	ldr	r4, [r3, #0]
 8002d7c:	f001 f9c8 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8002d80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d86:	461a      	mov	r2, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f002 fd61 	bl	8005850 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f009 f8dd 	bl	800bf4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fedb 	bl	8006b64 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d10a      	bne.n	8002dce <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f009 f8ba 	bl	800bf32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 0208 	and.w	r2, r2, #8
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fec6 	bl	8006b64 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d123      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dee:	2301      	movs	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	e014      	b.n	8002e1e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb08 	bl	8003428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d3e4      	bcc.n	8002df4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fe98 	bl	8006b64 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e3e:	d13c      	bne.n	8002eba <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e02b      	b.n	8002e9e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3318      	adds	r3, #24
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d115      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da12      	bge.n	8002e98 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3317      	adds	r3, #23
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fac8 	bl	8003428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	791b      	ldrb	r3, [r3, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d3cd      	bcc.n	8002e46 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fe50 	bl	8006b64 <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ece:	d156      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e045      	b.n	8002f62 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d12e      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002efe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	da2b      	bge.n	8002f5c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002f10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d121      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f58:	6053      	str	r3, [r2, #4]
            break;
 8002f5a:	e008      	b.n	8002f6e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d3b3      	bcc.n	8002ed6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fdee 	bl	8006b64 <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d10a      	bne.n	8002faa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f009 f85b 	bl	800c050 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fdd8 	bl	8006b64 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d115      	bne.n	8002fea <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f009 f84b 	bl	800c06c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e000      	b.n	8002fea <HAL_PCD_IRQHandler+0x93c>
      return;
 8002fe8:	bf00      	nop
    }
  }
}
 8002fea:	3734      	adds	r7, #52	; 0x34
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}

08002ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_SetAddress+0x1a>
 8003006:	2302      	movs	r3, #2
 8003008:	e012      	b.n	8003030 <HAL_PCD_SetAddress+0x40>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fd37 	bl	8006a94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	70fb      	strb	r3, [r7, #3]
 800304a:	460b      	mov	r3, r1
 800304c:	803b      	strh	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da0f      	bge.n	800307e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	3310      	adds	r3, #16
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	705a      	strb	r2, [r3, #1]
 800307c:	e00f      	b.n	800309e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030aa:	883a      	ldrh	r2, [r7, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	78ba      	ldrb	r2, [r7, #2]
 80030b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030c8:	78bb      	ldrb	r3, [r7, #2]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d102      	bne.n	80030d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_PCD_EP_Open+0xaa>
 80030de:	2302      	movs	r3, #2
 80030e0:	e00e      	b.n	8003100 <HAL_PCD_EP_Open+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 febf 	bl	8005e74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da0f      	bge.n	800313c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 020f 	and.w	r2, r3, #15
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	3310      	adds	r3, #16
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	705a      	strb	r2, [r3, #1]
 800313a:	e00f      	b.n	800315c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	b2da      	uxtb	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_PCD_EP_Close+0x6e>
 8003172:	2302      	movs	r3, #2
 8003174:	e00e      	b.n	8003194 <HAL_PCD_EP_Close+0x8c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fefd 	bl	8005f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ac:	7afb      	ldrb	r3, [r7, #11]
 80031ae:	f003 020f 	and.w	r2, r3, #15
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	799b      	ldrb	r3, [r3, #6]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	799b      	ldrb	r3, [r3, #6]
 8003200:	461a      	mov	r2, r3
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	f002 ff9a 	bl	800613c <USB_EPStartXfer>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003234:	681b      	ldr	r3, [r3, #0]
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	460b      	mov	r3, r1
 8003250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3310      	adds	r3, #16
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2201      	movs	r2, #1
 8003280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	799b      	ldrb	r3, [r3, #6]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	799b      	ldrb	r3, [r3, #6]
 80032a4:	461a      	mov	r2, r3
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	f002 ff48 	bl	800613c <USB_EPStartXfer>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	7912      	ldrb	r2, [r2, #4]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04f      	b.n	8003374 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0f      	bge.n	80032fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	705a      	strb	r2, [r3, #1]
 80032fa:	e00d      	b.n	8003318 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_PCD_EP_SetStall+0x82>
 8003334:	2302      	movs	r3, #2
 8003336:	e01d      	b.n	8003374 <HAL_PCD_EP_SetStall+0xbe>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68f9      	ldr	r1, [r7, #12]
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fad0 	bl	80068ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7999      	ldrb	r1, [r3, #6]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003364:	461a      	mov	r2, r3
 8003366:	f003 fcc1 	bl	8006cec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	7912      	ldrb	r2, [r2, #4]
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e042      	b.n	8003420 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da0f      	bge.n	80033c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3310      	adds	r3, #16
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	705a      	strb	r2, [r3, #1]
 80033c0:	e00f      	b.n	80033e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_PCD_EP_ClrStall+0x86>
 80033fe:	2302      	movs	r3, #2
 8003400:	e00e      	b.n	8003420 <HAL_PCD_EP_ClrStall+0xa4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fad9 	bl	80069c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003438:	2b00      	cmp	r3, #0
 800343a:	da0c      	bge.n	8003456 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3310      	adds	r3, #16
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e00c      	b.n	8003470 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 f8f8 	bl	800666c <USB_EPStopXfer>
 800347c:	4603      	mov	r3, r0
 800347e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003480:	7afb      	ldrb	r3, [r7, #11]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	3310      	adds	r3, #16
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d901      	bls.n	80034c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d902      	bls.n	80034de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3303      	adds	r3, #3
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034e6:	e02a      	b.n	800353e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d902      	bls.n	8003504 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	3303      	adds	r3, #3
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68d9      	ldr	r1, [r3, #12]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4603      	mov	r3, r0
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f003 f94d 	bl	80067c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d809      	bhi.n	8003568 <PCD_WriteEmptyTxFifo+0xde>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d203      	bcs.n	8003568 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1bf      	bne.n	80034e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d811      	bhi.n	8003598 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	43db      	mvns	r3, r3
 800358e:	6939      	ldr	r1, [r7, #16]
 8003590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003594:	4013      	ands	r3, r2
 8003596:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	333c      	adds	r3, #60	; 0x3c
 80035bc:	3304      	adds	r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	799b      	ldrb	r3, [r3, #6]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d17b      	bne.n	80036d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4a61      	ldr	r2, [pc, #388]	; (800376c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f240 80b9 	bls.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80b3 	beq.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360c:	6093      	str	r3, [r2, #8]
 800360e:	e0a7      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2320      	movs	r3, #32
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	e098      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	f040 8093 	bne.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a4b      	ldr	r2, [pc, #300]	; (800376c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90f      	bls.n	8003662 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]
 8003660:	e07e      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	440b      	add	r3, r1
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d114      	bne.n	80036c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036ac:	461a      	mov	r2, r3
 80036ae:	2101      	movs	r1, #1
 80036b0:	f003 fb1c 	bl	8006cec <USB_EP0_OutStart>
 80036b4:	e006      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f008 fbfc 	bl	800bec8 <HAL_PCD_DataOutStageCallback>
 80036d0:	e046      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d124      	bne.n	8003724 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	e032      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	2320      	movs	r3, #32
 8003714:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f008 fbd3 	bl	800bec8 <HAL_PCD_DataOutStageCallback>
 8003722:	e01d      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d114      	bne.n	8003754 <PCD_EP_OutXfrComplete_int+0x1b0>
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800374c:	461a      	mov	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f003 facc 	bl	8006cec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f008 fbb4 	bl	800bec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	4f54300a 	.word	0x4f54300a
 8003770:	4f54310a 	.word	0x4f54310a

08003774 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	333c      	adds	r3, #60	; 0x3c
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <PCD_EP_OutSetupPacket_int+0x88>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d90e      	bls.n	80037c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c0:	461a      	mov	r2, r3
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f008 fb6b 	bl	800bea4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <PCD_EP_OutSetupPacket_int+0x88>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d90c      	bls.n	80037f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	799b      	ldrb	r3, [r3, #6]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80037e8:	461a      	mov	r2, r3
 80037ea:	2101      	movs	r1, #1
 80037ec:	f003 fa7e 	bl	8006cec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	4f54300a 	.word	0x4f54300a

08003800 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800381e:	883b      	ldrh	r3, [r7, #0]
 8003820:	0419      	lsls	r1, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	430a      	orrs	r2, r1
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	e028      	b.n	8003880 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e00d      	b.n	800385e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	3340      	adds	r3, #64	; 0x40
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4413      	add	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	3301      	adds	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	3b01      	subs	r3, #1
 8003864:	429a      	cmp	r2, r3
 8003866:	d3ec      	bcc.n	8003842 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003868:	883b      	ldrh	r3, [r7, #0]
 800386a:	0418      	lsls	r0, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	3b01      	subs	r3, #1
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4302      	orrs	r2, r0
 8003878:	3340      	adds	r3, #64	; 0x40
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e267      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d075      	beq.n	80039d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x108>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e242      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x74>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6f      	ldr	r2, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6c      	ldr	r2, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fe7a 	bl	8001678 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fe76 	bl	8001678 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e207      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xc0>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fe66 	bl	8001678 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fe62 	bl	8001678 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1f3      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0xe8>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d063      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e1c7      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fe1b 	bl	8001678 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fd fe17 	bl	8001678 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1a8      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4925      	ldr	r1, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fdfa 	bl	8001678 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fd fdf6 	bl	8001678 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e187      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d036      	beq.n	8003b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fdda 	bl	8001678 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fdd6 	bl	8001678 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e167      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x200>
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fdc3 	bl	8001678 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fdbf 	bl	8001678 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e150      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a7c      	ldr	r2, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fd7f 	bl	8001678 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fd7b 	bl	8001678 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e10c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ea>
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x30c>
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fd40 	bl	8001678 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fd3c 	bl	8001678 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0cb      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fd2a 	bl	8001678 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fd26 	bl	8001678 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0b5      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a1 	beq.w	8003da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d05c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d141      	bne.n	8003cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd fcfa 	bl	8001678 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fcf6 	bl	8001678 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e087      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fccf 	bl	8001678 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd fccb 	bl	8001678 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e05c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x416>
 8003cfc:	e054      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fcb8 	bl	8001678 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd fcb4 	bl	8001678 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e045      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e038      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d028      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d121      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fbe6 	bl	8001678 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fbe2 	bl	8001678 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fef0 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	0800c6ac 	.word	0x0800c6ac
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	20000004 	.word	0x20000004

08003f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b090      	sub	sp, #64	; 0x40
 8003f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f90:	2300      	movs	r3, #0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	2300      	movs	r3, #0
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f200 80a1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb6:	e09b      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fbc:	e09b      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fc2:	e098      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fec:	2100      	movs	r1, #0
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff0:	fb03 f201 	mul.w	r2, r3, r1
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	460a      	mov	r2, r1
 8004006:	62ba      	str	r2, [r7, #40]	; 0x28
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	4413      	add	r3, r2
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2200      	movs	r2, #0
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	61fa      	str	r2, [r7, #28]
 8004016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800401e:	f7fc f8e7 	bl	80001f0 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402a:	e053      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402c:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	2200      	movs	r2, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	617a      	str	r2, [r7, #20]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403e:	f04f 0b00 	mov.w	fp, #0
 8004042:	4652      	mov	r2, sl
 8004044:	465b      	mov	r3, fp
 8004046:	f04f 0000 	mov.w	r0, #0
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004054:	0150      	lsls	r0, r2, #5
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	ebb2 080a 	subs.w	r8, r2, sl
 800405e:	eb63 090b 	sbc.w	r9, r3, fp
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004076:	ebb2 0408 	subs.w	r4, r2, r8
 800407a:	eb63 0509 	sbc.w	r5, r3, r9
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	00eb      	lsls	r3, r5, #3
 8004088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408c:	00e2      	lsls	r2, r4, #3
 800408e:	4614      	mov	r4, r2
 8004090:	461d      	mov	r5, r3
 8004092:	eb14 030a 	adds.w	r3, r4, sl
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	eb45 030b 	adc.w	r3, r5, fp
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	2200      	movs	r2, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	60fa      	str	r2, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	f7fc f892 	bl	80001f0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x184>)
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3740      	adds	r7, #64	; 0x40
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	00b71b00 	.word	0x00b71b00

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	0800c6bc 	.word	0x0800c6bc

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffdc 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	0800c6bc 	.word	0x0800c6bc

08004178 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	220f      	movs	r2, #15
 8004186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0203 	and.w	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_GetClockConfig+0x5c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_GetClockConfig+0x5c>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	08db      	lsrs	r3, r3, #3
 80041b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_RCC_GetClockConfig+0x60>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40023c00 	.word	0x40023c00

080041dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07b      	b.n	80042e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d009      	beq.n	8004214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
 8004206:	e005      	b.n	8004214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fd14 	bl	8000c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0104 	and.w	r1, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0210 	and.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e041      	b.n	8004384 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fc ffab 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f000 fb8f 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e04e      	b.n	8004442 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_TIM_Base_Start_IT+0xc4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d01d      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_TIM_Base_Start_IT+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_TIM_Base_Start_IT+0xcc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_TIM_Base_Start_IT+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_TIM_Base_Start_IT+0xd4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_TIM_Base_Start_IT+0xd8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIM_Base_Start_IT+0xdc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d010      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e007      	b.n	8004440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fe9e 	bl	80011d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fad0 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0202 	mvn.w	r2, #2
 800453e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fa5c 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 800455a:	e005      	b.n	8004568 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa4e 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa5f 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01b      	beq.n	80045ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0204 	mvn.w	r2, #4
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa36 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa28 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa39 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01b      	beq.n	8004606 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0208 	mvn.w	r2, #8
 80045d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2204      	movs	r2, #4
 80045dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa10 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 80045f2:	e005      	b.n	8004600 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fa02 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa13 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01b      	beq.n	8004652 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0210 	mvn.w	r2, #16
 8004622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2208      	movs	r2, #8
 8004628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f9ea 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 800463e:	e005      	b.n	800464c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f9dc 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f9ed 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0201 	mvn.w	r2, #1
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fc faa5 	bl	8000bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fda9 	bl	80051ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9be 	bl	8004a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0220 	mvn.w	r2, #32
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fd7b 	bl	80051d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004706:	2302      	movs	r3, #2
 8004708:	e0ae      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	f200 809f 	bhi.w	8004858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800471a:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004755 	.word	0x08004755
 8004724:	08004859 	.word	0x08004859
 8004728:	08004859 	.word	0x08004859
 800472c:	08004859 	.word	0x08004859
 8004730:	08004795 	.word	0x08004795
 8004734:	08004859 	.word	0x08004859
 8004738:	08004859 	.word	0x08004859
 800473c:	08004859 	.word	0x08004859
 8004740:	080047d7 	.word	0x080047d7
 8004744:	08004859 	.word	0x08004859
 8004748:	08004859 	.word	0x08004859
 800474c:	08004859 	.word	0x08004859
 8004750:	08004817 	.word	0x08004817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa24 	bl	8004ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	619a      	str	r2, [r3, #24]
      break;
 8004792:	e064      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa74 	bl	8004c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
      break;
 80047d4:	e043      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fac9 	bl	8004d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0204 	bic.w	r2, r2, #4
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      break;
 8004814:	e023      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fb1d 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	61da      	str	r2, [r3, #28]
      break;
 8004856:	e002      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
      break;
 800485c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e0b4      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x186>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d03e      	beq.n	8004944 <HAL_TIM_ConfigClockSource+0xd4>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	f200 8087 	bhi.w	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d2:	f000 8086 	beq.w	80049e2 <HAL_TIM_ConfigClockSource+0x172>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d87f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d01a      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0xa6>
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d87b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d050      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x11a>
 80048e8:	2b60      	cmp	r3, #96	; 0x60
 80048ea:	d877      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d03c      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xfa>
 80048f0:	2b50      	cmp	r3, #80	; 0x50
 80048f2:	d873      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d058      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x13a>
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d86f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d064      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b30      	cmp	r3, #48	; 0x30
 8004902:	d86b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d060      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d867      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05c      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d05a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	e062      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004926:	f000 fb69 	bl	8004ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]
      break;
 8004942:	e04f      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004954:	f000 fb52 	bl	8004ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e03c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fac6 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2150      	movs	r1, #80	; 0x50
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb1f 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 8004988:	e02c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fae5 	bl	8004f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2160      	movs	r1, #96	; 0x60
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb0f 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 80049a8:	e01c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 faa6 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 faff 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e00c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 faf6 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 80049da:	e003      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a46      	ldr	r2, [pc, #280]	; (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d00f      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <TIM_Base_SetConfig+0x130>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a42      	ldr	r2, [pc, #264]	; (8004b84 <TIM_Base_SetConfig+0x134>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <TIM_Base_SetConfig+0x138>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d108      	bne.n	8004aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab0:	d027      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a32      	ldr	r2, [pc, #200]	; (8004b80 <TIM_Base_SetConfig+0x130>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d023      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a31      	ldr	r2, [pc, #196]	; (8004b84 <TIM_Base_SetConfig+0x134>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <TIM_Base_SetConfig+0x138>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <TIM_Base_SetConfig+0x140>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <TIM_Base_SetConfig+0x144>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <TIM_Base_SetConfig+0x148>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <TIM_Base_SetConfig+0x14c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <TIM_Base_SetConfig+0x150>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <TIM_Base_SetConfig+0x154>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d103      	bne.n	8004b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d105      	bne.n	8004b6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40010400 	.word	0x40010400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800
 8004b9c:	40001800 	.word	0x40001800
 8004ba0:	40001c00 	.word	0x40001c00
 8004ba4:	40002000 	.word	0x40002000

08004ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 0201 	bic.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f023 0302 	bic.w	r3, r3, #2
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a20      	ldr	r2, [pc, #128]	; (8004c80 <TIM_OC1_SetConfig+0xd8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC1_SetConfig+0x64>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <TIM_OC1_SetConfig+0xdc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10c      	bne.n	8004c26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0308 	bic.w	r3, r3, #8
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <TIM_OC1_SetConfig+0xd8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_OC1_SetConfig+0x8e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <TIM_OC1_SetConfig+0xdc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d111      	bne.n	8004c5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 0210 	bic.w	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0320 	bic.w	r3, r3, #32
 8004cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <TIM_OC2_SetConfig+0xe4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC2_SetConfig+0x68>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <TIM_OC2_SetConfig+0xe8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10d      	bne.n	8004d0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <TIM_OC2_SetConfig+0xe4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC2_SetConfig+0x94>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <TIM_OC2_SetConfig+0xe8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400

08004d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <TIM_OC3_SetConfig+0xe0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC3_SetConfig+0x66>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_OC3_SetConfig+0xe4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <TIM_OC3_SetConfig+0xe0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_OC3_SetConfig+0x92>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <TIM_OC3_SetConfig+0xe4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d113      	bne.n	8004e2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40010400 	.word	0x40010400

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <TIM_OC4_SetConfig+0xa4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_OC4_SetConfig+0x68>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <TIM_OC4_SetConfig+0xa8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d109      	bne.n	8004ed8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 030a 	bic.w	r3, r3, #10
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f023 0210 	bic.w	r2, r3, #16
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f043 0307 	orr.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	431a      	orrs	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4313      	orrs	r3, r2
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e05a      	b.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d01d      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10c      	bne.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800

08005134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800514c:	2302      	movs	r3, #2
 800514e:	e03d      	b.n	80051cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e042      	b.n	8005298 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc f918 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f82b 	bl	80052a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b0c0      	sub	sp, #256	; 0x100
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	ea40 0301 	orr.w	r3, r0, r1
 80052c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052f8:	f021 010c 	bic.w	r1, r1, #12
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005306:	430b      	orrs	r3, r1
 8005308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	6999      	ldr	r1, [r3, #24]
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	ea40 0301 	orr.w	r3, r0, r1
 8005326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b8f      	ldr	r3, [pc, #572]	; (800556c <UART_SetConfig+0x2cc>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d005      	beq.n	8005340 <UART_SetConfig+0xa0>
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b8d      	ldr	r3, [pc, #564]	; (8005570 <UART_SetConfig+0x2d0>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d104      	bne.n	800534a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe ff06 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8005344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005348:	e003      	b.n	8005352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800534a:	f7fe feed 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800534e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535c:	f040 810c 	bne.w	8005578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800536a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800536e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005372:	4622      	mov	r2, r4
 8005374:	462b      	mov	r3, r5
 8005376:	1891      	adds	r1, r2, r2
 8005378:	65b9      	str	r1, [r7, #88]	; 0x58
 800537a:	415b      	adcs	r3, r3
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005382:	4621      	mov	r1, r4
 8005384:	eb12 0801 	adds.w	r8, r2, r1
 8005388:	4629      	mov	r1, r5
 800538a:	eb43 0901 	adc.w	r9, r3, r1
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a2:	4690      	mov	r8, r2
 80053a4:	4699      	mov	r9, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	eb18 0303 	adds.w	r3, r8, r3
 80053ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053b0:	462b      	mov	r3, r5
 80053b2:	eb49 0303 	adc.w	r3, r9, r3
 80053b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053ce:	460b      	mov	r3, r1
 80053d0:	18db      	adds	r3, r3, r3
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	4613      	mov	r3, r2
 80053d6:	eb42 0303 	adc.w	r3, r2, r3
 80053da:	657b      	str	r3, [r7, #84]	; 0x54
 80053dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053e4:	f7fa ff04 	bl	80001f0 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4b61      	ldr	r3, [pc, #388]	; (8005574 <UART_SetConfig+0x2d4>)
 80053ee:	fba3 2302 	umull	r2, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	011c      	lsls	r4, r3, #4
 80053f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005410:	415b      	adcs	r3, r3
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005418:	4641      	mov	r1, r8
 800541a:	eb12 0a01 	adds.w	sl, r2, r1
 800541e:	4649      	mov	r1, r9
 8005420:	eb43 0b01 	adc.w	fp, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005438:	4692      	mov	sl, r2
 800543a:	469b      	mov	fp, r3
 800543c:	4643      	mov	r3, r8
 800543e:	eb1a 0303 	adds.w	r3, sl, r3
 8005442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005446:	464b      	mov	r3, r9
 8005448:	eb4b 0303 	adc.w	r3, fp, r3
 800544c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800545c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005464:	460b      	mov	r3, r1
 8005466:	18db      	adds	r3, r3, r3
 8005468:	643b      	str	r3, [r7, #64]	; 0x40
 800546a:	4613      	mov	r3, r2
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
 8005472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800547a:	f7fa feb9 	bl	80001f0 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4611      	mov	r1, r2
 8005484:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <UART_SetConfig+0x2d4>)
 8005486:	fba3 2301 	umull	r2, r3, r3, r1
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2264      	movs	r2, #100	; 0x64
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	1acb      	subs	r3, r1, r3
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <UART_SetConfig+0x2d4>)
 800549c:	fba3 2302 	umull	r2, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054a8:	441c      	add	r4, r3
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054bc:	4642      	mov	r2, r8
 80054be:	464b      	mov	r3, r9
 80054c0:	1891      	adds	r1, r2, r2
 80054c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054c4:	415b      	adcs	r3, r3
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054cc:	4641      	mov	r1, r8
 80054ce:	1851      	adds	r1, r2, r1
 80054d0:	6339      	str	r1, [r7, #48]	; 0x30
 80054d2:	4649      	mov	r1, r9
 80054d4:	414b      	adcs	r3, r1
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054e4:	4659      	mov	r1, fp
 80054e6:	00cb      	lsls	r3, r1, #3
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ee:	4651      	mov	r1, sl
 80054f0:	00ca      	lsls	r2, r1, #3
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	4642      	mov	r2, r8
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005500:	464b      	mov	r3, r9
 8005502:	460a      	mov	r2, r1
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800551c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005520:	460b      	mov	r3, r1
 8005522:	18db      	adds	r3, r3, r3
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
 8005526:	4613      	mov	r3, r2
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005536:	f7fa fe5b 	bl	80001f0 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <UART_SetConfig+0x2d4>)
 8005540:	fba3 1302 	umull	r1, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	2164      	movs	r1, #100	; 0x64
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	3332      	adds	r3, #50	; 0x32
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <UART_SetConfig+0x2d4>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	f003 0207 	and.w	r2, r3, #7
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4422      	add	r2, r4
 8005566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005568:	e106      	b.n	8005778 <UART_SetConfig+0x4d8>
 800556a:	bf00      	nop
 800556c:	40011000 	.word	0x40011000
 8005570:	40011400 	.word	0x40011400
 8005574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800558a:	4642      	mov	r2, r8
 800558c:	464b      	mov	r3, r9
 800558e:	1891      	adds	r1, r2, r2
 8005590:	6239      	str	r1, [r7, #32]
 8005592:	415b      	adcs	r3, r3
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
 8005596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559a:	4641      	mov	r1, r8
 800559c:	1854      	adds	r4, r2, r1
 800559e:	4649      	mov	r1, r9
 80055a0:	eb43 0501 	adc.w	r5, r3, r1
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	00eb      	lsls	r3, r5, #3
 80055ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b2:	00e2      	lsls	r2, r4, #3
 80055b4:	4614      	mov	r4, r2
 80055b6:	461d      	mov	r5, r3
 80055b8:	4643      	mov	r3, r8
 80055ba:	18e3      	adds	r3, r4, r3
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055c0:	464b      	mov	r3, r9
 80055c2:	eb45 0303 	adc.w	r3, r5, r3
 80055c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055e6:	4629      	mov	r1, r5
 80055e8:	008b      	lsls	r3, r1, #2
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f0:	4621      	mov	r1, r4
 80055f2:	008a      	lsls	r2, r1, #2
 80055f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055f8:	f7fa fdfa 	bl	80001f0 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4b60      	ldr	r3, [pc, #384]	; (8005784 <UART_SetConfig+0x4e4>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	011c      	lsls	r4, r3, #4
 800560a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800561c:	4642      	mov	r2, r8
 800561e:	464b      	mov	r3, r9
 8005620:	1891      	adds	r1, r2, r2
 8005622:	61b9      	str	r1, [r7, #24]
 8005624:	415b      	adcs	r3, r3
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562c:	4641      	mov	r1, r8
 800562e:	1851      	adds	r1, r2, r1
 8005630:	6139      	str	r1, [r7, #16]
 8005632:	4649      	mov	r1, r9
 8005634:	414b      	adcs	r3, r1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005644:	4659      	mov	r1, fp
 8005646:	00cb      	lsls	r3, r1, #3
 8005648:	4651      	mov	r1, sl
 800564a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564e:	4651      	mov	r1, sl
 8005650:	00ca      	lsls	r2, r1, #3
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	4603      	mov	r3, r0
 8005658:	4642      	mov	r2, r8
 800565a:	189b      	adds	r3, r3, r2
 800565c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005660:	464b      	mov	r3, r9
 8005662:	460a      	mov	r2, r1
 8005664:	eb42 0303 	adc.w	r3, r2, r3
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	67bb      	str	r3, [r7, #120]	; 0x78
 8005676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005684:	4649      	mov	r1, r9
 8005686:	008b      	lsls	r3, r1, #2
 8005688:	4641      	mov	r1, r8
 800568a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568e:	4641      	mov	r1, r8
 8005690:	008a      	lsls	r2, r1, #2
 8005692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005696:	f7fa fdab 	bl	80001f0 <__aeabi_uldivmod>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	4b38      	ldr	r3, [pc, #224]	; (8005784 <UART_SetConfig+0x4e4>)
 80056a2:	fba3 2301 	umull	r2, r3, r3, r1
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2264      	movs	r2, #100	; 0x64
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	1acb      	subs	r3, r1, r3
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	3332      	adds	r3, #50	; 0x32
 80056b4:	4a33      	ldr	r2, [pc, #204]	; (8005784 <UART_SetConfig+0x4e4>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c0:	441c      	add	r4, r3
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	673b      	str	r3, [r7, #112]	; 0x70
 80056ca:	677a      	str	r2, [r7, #116]	; 0x74
 80056cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	415b      	adcs	r3, r3
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e0:	4641      	mov	r1, r8
 80056e2:	1851      	adds	r1, r2, r1
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	4649      	mov	r1, r9
 80056e8:	414b      	adcs	r3, r1
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056f8:	4659      	mov	r1, fp
 80056fa:	00cb      	lsls	r3, r1, #3
 80056fc:	4651      	mov	r1, sl
 80056fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005702:	4651      	mov	r1, sl
 8005704:	00ca      	lsls	r2, r1, #3
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	4603      	mov	r3, r0
 800570c:	4642      	mov	r2, r8
 800570e:	189b      	adds	r3, r3, r2
 8005710:	66bb      	str	r3, [r7, #104]	; 0x68
 8005712:	464b      	mov	r3, r9
 8005714:	460a      	mov	r2, r1
 8005716:	eb42 0303 	adc.w	r3, r2, r3
 800571a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
 8005726:	667a      	str	r2, [r7, #100]	; 0x64
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005734:	4649      	mov	r1, r9
 8005736:	008b      	lsls	r3, r1, #2
 8005738:	4641      	mov	r1, r8
 800573a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573e:	4641      	mov	r1, r8
 8005740:	008a      	lsls	r2, r1, #2
 8005742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005746:	f7fa fd53 	bl	80001f0 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <UART_SetConfig+0x4e4>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	3332      	adds	r3, #50	; 0x32
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <UART_SetConfig+0x4e4>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 020f 	and.w	r2, r3, #15
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4422      	add	r2, r4
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800577e:	46bd      	mov	sp, r7
 8005780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005784:	51eb851f 	.word	0x51eb851f

08005788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005788:	b084      	sub	sp, #16
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	f107 001c 	add.w	r0, r7, #28
 8005796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800579a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d123      	bne.n	80057ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 fae2 	bl	8006da8 <USB_CoreReset>
 80057e4:	4603      	mov	r3, r0
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e01b      	b.n	8005822 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fad6 	bl	8006da8 <USB_CoreReset>
 80057fc:	4603      	mov	r3, r0
 80057fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005800:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
 8005814:	e005      	b.n	8005822 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005822:	7fbb      	ldrb	r3, [r7, #30]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10b      	bne.n	8005840 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f043 0206 	orr.w	r2, r3, #6
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584c:	b004      	add	sp, #16
 800584e:	4770      	bx	lr

08005850 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d165      	bne.n	8005930 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a41      	ldr	r2, [pc, #260]	; (800596c <USB_SetTurnaroundTime+0x11c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d906      	bls.n	800587a <USB_SetTurnaroundTime+0x2a>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <USB_SetTurnaroundTime+0x120>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d202      	bcs.n	800587a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005874:	230f      	movs	r3, #15
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e062      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a3c      	ldr	r2, [pc, #240]	; (8005970 <USB_SetTurnaroundTime+0x120>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d306      	bcc.n	8005890 <USB_SetTurnaroundTime+0x40>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a3b      	ldr	r2, [pc, #236]	; (8005974 <USB_SetTurnaroundTime+0x124>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d202      	bcs.n	8005890 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800588a:	230e      	movs	r3, #14
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e057      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a38      	ldr	r2, [pc, #224]	; (8005974 <USB_SetTurnaroundTime+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d306      	bcc.n	80058a6 <USB_SetTurnaroundTime+0x56>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a37      	ldr	r2, [pc, #220]	; (8005978 <USB_SetTurnaroundTime+0x128>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d202      	bcs.n	80058a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058a0:	230d      	movs	r3, #13
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e04c      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a33      	ldr	r2, [pc, #204]	; (8005978 <USB_SetTurnaroundTime+0x128>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d306      	bcc.n	80058bc <USB_SetTurnaroundTime+0x6c>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4a32      	ldr	r2, [pc, #200]	; (800597c <USB_SetTurnaroundTime+0x12c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d802      	bhi.n	80058bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058b6:	230c      	movs	r3, #12
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e041      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a2f      	ldr	r2, [pc, #188]	; (800597c <USB_SetTurnaroundTime+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d906      	bls.n	80058d2 <USB_SetTurnaroundTime+0x82>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <USB_SetTurnaroundTime+0x130>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d802      	bhi.n	80058d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058cc:	230b      	movs	r3, #11
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e036      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <USB_SetTurnaroundTime+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d906      	bls.n	80058e8 <USB_SetTurnaroundTime+0x98>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4a29      	ldr	r2, [pc, #164]	; (8005984 <USB_SetTurnaroundTime+0x134>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d802      	bhi.n	80058e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058e2:	230a      	movs	r3, #10
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e02b      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a26      	ldr	r2, [pc, #152]	; (8005984 <USB_SetTurnaroundTime+0x134>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d906      	bls.n	80058fe <USB_SetTurnaroundTime+0xae>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a25      	ldr	r2, [pc, #148]	; (8005988 <USB_SetTurnaroundTime+0x138>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d202      	bcs.n	80058fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058f8:	2309      	movs	r3, #9
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e020      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <USB_SetTurnaroundTime+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d306      	bcc.n	8005914 <USB_SetTurnaroundTime+0xc4>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <USB_SetTurnaroundTime+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d802      	bhi.n	8005914 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800590e:	2308      	movs	r3, #8
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e015      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <USB_SetTurnaroundTime+0x13c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d906      	bls.n	800592a <USB_SetTurnaroundTime+0xda>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <USB_SetTurnaroundTime+0x140>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d202      	bcs.n	800592a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005924:	2307      	movs	r3, #7
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e00a      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800592a:	2306      	movs	r3, #6
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e007      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005936:	2309      	movs	r3, #9
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e001      	b.n	8005940 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800593c:	2309      	movs	r3, #9
 800593e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	00d8acbf 	.word	0x00d8acbf
 8005970:	00e4e1c0 	.word	0x00e4e1c0
 8005974:	00f42400 	.word	0x00f42400
 8005978:	01067380 	.word	0x01067380
 800597c:	011a499f 	.word	0x011a499f
 8005980:	01312cff 	.word	0x01312cff
 8005984:	014ca43f 	.word	0x014ca43f
 8005988:	016e3600 	.word	0x016e3600
 800598c:	01a6ab1f 	.word	0x01a6ab1f
 8005990:	01e84800 	.word	0x01e84800

08005994 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d115      	bne.n	8005a26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a06:	200a      	movs	r0, #10
 8005a08:	f7fb fe42 	bl	8001690 <HAL_Delay>
      ms += 10U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	330a      	adds	r3, #10
 8005a10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 f939 	bl	8006c8a <USB_GetMode>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d01e      	beq.n	8005a5c <USB_SetCurrentMode+0x84>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2bc7      	cmp	r3, #199	; 0xc7
 8005a22:	d9f0      	bls.n	8005a06 <USB_SetCurrentMode+0x2e>
 8005a24:	e01a      	b.n	8005a5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d115      	bne.n	8005a58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a38:	200a      	movs	r0, #10
 8005a3a:	f7fb fe29 	bl	8001690 <HAL_Delay>
      ms += 10U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	330a      	adds	r3, #10
 8005a42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 f920 	bl	8006c8a <USB_GetMode>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <USB_SetCurrentMode+0x84>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2bc7      	cmp	r3, #199	; 0xc7
 8005a54:	d9f0      	bls.n	8005a38 <USB_SetCurrentMode+0x60>
 8005a56:	e001      	b.n	8005a5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e005      	b.n	8005a68 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2bc8      	cmp	r3, #200	; 0xc8
 8005a60:	d101      	bne.n	8005a66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e009      	b.n	8005aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3340      	adds	r3, #64	; 0x40
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b0e      	cmp	r3, #14
 8005aa8:	d9f2      	bls.n	8005a90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11c      	bne.n	8005aec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac0:	f043 0302 	orr.w	r3, r3, #2
 8005ac4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8005aea:	e00b      	b.n	8005b04 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d10d      	bne.n	8005b34 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b20:	2100      	movs	r1, #0
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f968 	bl	8005df8 <USB_SetDevSpeed>
 8005b28:	e008      	b.n	8005b3c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f963 	bl	8005df8 <USB_SetDevSpeed>
 8005b32:	e003      	b.n	8005b3c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b34:	2103      	movs	r1, #3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f95e 	bl	8005df8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8fa 	bl	8005d38 <USB_FlushTxFifo>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f924 	bl	8005d9c <USB_FlushRxFifo>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e043      	b.n	8005c10 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	d118      	bne.n	8005bd2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e013      	b.n	8005be4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	e008      	b.n	8005be4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c14:	461a      	mov	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d3b5      	bcc.n	8005b88 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e043      	b.n	8005caa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d118      	bne.n	8005c6c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e013      	b.n	8005c7e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e008      	b.n	8005c7e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cae:	461a      	mov	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d3b5      	bcc.n	8005c22 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f043 0210 	orr.w	r2, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <USB_DevInit+0x2c4>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cf8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f043 0208 	orr.w	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1c:	f043 0304 	orr.w	r3, r3, #4
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d30:	b004      	add	sp, #16
 8005d32:	4770      	bx	lr
 8005d34:	803c3800 	.word	0x803c3800

08005d38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d52:	d901      	bls.n	8005d58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e01b      	b.n	8005d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	daf2      	bge.n	8005d46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	019b      	lsls	r3, r3, #6
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d7c:	d901      	bls.n	8005d82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e006      	b.n	8005d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d0f0      	beq.n	8005d70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005db4:	d901      	bls.n	8005dba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e018      	b.n	8005dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	daf2      	bge.n	8005da8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005dd8:	d901      	bls.n	8005dde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e006      	b.n	8005dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d0f0      	beq.n	8005dcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0306 	and.w	r3, r3, #6
 8005e42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]
 8005e4e:	e00a      	b.n	8005e66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d002      	beq.n	8005e5c <USB_GetDevSpeed+0x32>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d102      	bne.n	8005e62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	75fb      	strb	r3, [r7, #23]
 8005e60:	e001      	b.n	8005e66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e62:	230f      	movs	r3, #15
 8005e64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d13a      	bne.n	8005f06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d155      	bne.n	8005f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	791b      	ldrb	r3, [r3, #4]
 8005ee2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ee4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	059b      	lsls	r3, r3, #22
 8005eea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005eec:	4313      	orrs	r3, r2
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e036      	b.n	8005f74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	2101      	movs	r1, #1
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11a      	bne.n	8005f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	791b      	ldrb	r3, [r3, #4]
 8005f58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d161      	bne.n	8006064 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb6:	d11f      	bne.n	8005ff8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006018:	4013      	ands	r3, r2
 800601a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603c:	4013      	ands	r3, r2
 800603e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	0159      	lsls	r1, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	440b      	add	r3, r1
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	4619      	mov	r1, r3
 800605c:	4b35      	ldr	r3, [pc, #212]	; (8006134 <USB_DeactivateEndpoint+0x1b0>)
 800605e:	4013      	ands	r3, r2
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	e060      	b.n	8006126 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800607a:	d11f      	bne.n	80060bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800609a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	2101      	movs	r1, #1
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	43db      	mvns	r3, r3
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060dc:	4013      	ands	r3, r2
 80060de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f303 	lsl.w	r3, r1, r3
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	43db      	mvns	r3, r3
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006100:	4013      	ands	r3, r2
 8006102:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	440b      	add	r3, r1
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	4619      	mov	r1, r3
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <USB_DeactivateEndpoint+0x1b4>)
 8006122:	4013      	ands	r3, r2
 8006124:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	ec337800 	.word	0xec337800
 8006138:	eff37800 	.word	0xeff37800

0800613c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	f040 817a 	bne.w	8006452 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d132      	bne.n	80061cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c4:	0cdb      	lsrs	r3, r3, #19
 80061c6:	04db      	lsls	r3, r3, #19
 80061c8:	6113      	str	r3, [r2, #16]
 80061ca:	e092      	b.n	80062f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	0cdb      	lsrs	r3, r3, #19
 80061e8:	04db      	lsls	r3, r3, #19
 80061ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800620a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800620e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11a      	bne.n	800624c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d903      	bls.n	800622a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	e01b      	b.n	8006284 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6919      	ldr	r1, [r3, #16]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	440b      	add	r3, r1
 8006264:	1e59      	subs	r1, r3, #1
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	fbb1 f3f3 	udiv	r3, r1, r3
 800626e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006270:	4ba2      	ldr	r3, [pc, #648]	; (80064fc <USB_EPStartXfer+0x3c0>)
 8006272:	400b      	ands	r3, r1
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	0148      	lsls	r0, r1, #5
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	4401      	add	r1, r0
 800627c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006280:	4313      	orrs	r3, r2
 8006282:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	69b9      	ldr	r1, [r7, #24]
 800629c:	0148      	lsls	r0, r1, #5
 800629e:	69f9      	ldr	r1, [r7, #28]
 80062a0:	4401      	add	r1, r0
 80062a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d11f      	bne.n	80062f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d14b      	bne.n	8006390 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	791b      	ldrb	r3, [r3, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d128      	bne.n	800636e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e00f      	b.n	800636e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e165      	b.n	800665c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	791b      	ldrb	r3, [r3, #4]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d015      	beq.n	80063e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 814d 	beq.w	800665c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	69f9      	ldr	r1, [r7, #28]
 80063da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063de:	4313      	orrs	r3, r2
 80063e0:	634b      	str	r3, [r1, #52]	; 0x34
 80063e2:	e13b      	b.n	800665c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d110      	bne.n	8006416 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e00f      	b.n	8006436 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68d9      	ldr	r1, [r3, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	b298      	uxth	r0, r3
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	4603      	mov	r3, r0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f9b8 	bl	80067c0 <USB_WritePacket>
 8006450:	e104      	b.n	800665c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646c:	0cdb      	lsrs	r3, r3, #19
 800646e:	04db      	lsls	r3, r3, #19
 8006470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006494:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d131      	bne.n	8006500 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f8:	6113      	str	r3, [r2, #16]
 80064fa:	e061      	b.n	80065c0 <USB_EPStartXfer+0x484>
 80064fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d123      	bne.n	8006550 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	69b9      	ldr	r1, [r7, #24]
 8006520:	0148      	lsls	r0, r1, #5
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	4401      	add	r1, r0
 8006526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654c:	6113      	str	r3, [r2, #16]
 800654e:	e037      	b.n	80065c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4413      	add	r3, r2
 800655a:	1e5a      	subs	r2, r3, #1
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	8afa      	ldrh	r2, [r7, #22]
 800656c:	fb03 f202 	mul.w	r2, r3, r2
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	8afb      	ldrh	r3, [r7, #22]
 8006584:	04d9      	lsls	r1, r3, #19
 8006586:	4b38      	ldr	r3, [pc, #224]	; (8006668 <USB_EPStartXfer+0x52c>)
 8006588:	400b      	ands	r3, r1
 800658a:	69b9      	ldr	r1, [r7, #24]
 800658c:	0148      	lsls	r0, r1, #5
 800658e:	69f9      	ldr	r1, [r7, #28]
 8006590:	4401      	add	r1, r0
 8006592:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006596:	4313      	orrs	r3, r2
 8006598:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	0148      	lsls	r0, r1, #5
 80065b4:	69f9      	ldr	r1, [r7, #28]
 80065b6:	4401      	add	r1, r0
 80065b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065bc:	4313      	orrs	r3, r2
 80065be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10d      	bne.n	80065e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68d9      	ldr	r1, [r3, #12]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	460a      	mov	r2, r1
 80065e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d128      	bne.n	800663c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d110      	bne.n	800661c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e00f      	b.n	800663c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	1ff80000 	.word	0x1ff80000

0800666c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d14a      	bne.n	8006720 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a2:	f040 8086 	bne.w	80067b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	7812      	ldrb	r2, [r2, #0]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
          break;
 8006702:	e056      	b.n	80067b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671c:	d0e7      	beq.n	80066ee <USB_EPStopXfer+0x82>
 800671e:	e048      	b.n	80067b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d13b      	bne.n	80067b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800675c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f242 7210 	movw	r2, #10000	; 0x2710
 800678e:	4293      	cmp	r3, r2
 8006790:	d902      	bls.n	8006798 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
          break;
 8006796:	e00c      	b.n	80067b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d0e7      	beq.n	8006782 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	460b      	mov	r3, r1
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d123      	bne.n	800682e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067e6:	88bb      	ldrh	r3, [r7, #4]
 80067e8:	3303      	adds	r3, #3
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	e018      	b.n	8006826 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	031a      	lsls	r2, r3, #12
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006800:	461a      	mov	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	3301      	adds	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d3e2      	bcc.n	80067f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3724      	adds	r7, #36	; 0x24
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800683c:	b480      	push	{r7}
 800683e:	b08b      	sub	sp, #44	; 0x2c
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	089b      	lsrs	r3, r3, #2
 8006856:	b29b      	uxth	r3, r3
 8006858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006862:	2300      	movs	r3, #0
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	e014      	b.n	8006892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	601a      	str	r2, [r3, #0]
    pDest++;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	3301      	adds	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	3301      	adds	r3, #1
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	3301      	adds	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	3301      	adds	r3, #1
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	6a3a      	ldr	r2, [r7, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d3e6      	bcc.n	8006868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800689a:	8bfb      	ldrh	r3, [r7, #30]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01e      	beq.n	80068de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068aa:	461a      	mov	r2, r3
 80068ac:	f107 0310 	add.w	r3, r7, #16
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	701a      	strb	r2, [r3, #0]
      i++;
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068d2:	8bfb      	ldrh	r3, [r7, #30]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068d8:	8bfb      	ldrh	r3, [r7, #30]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ea      	bne.n	80068b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	372c      	adds	r7, #44	; 0x2c
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d12c      	bne.n	8006962 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	db12      	blt.n	8006940 <USB_EPSetStall+0x54>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800693e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e02b      	b.n	80069ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db12      	blt.n	800699a <USB_EPSetStall+0xae>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00f      	beq.n	800699a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006998:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d128      	bne.n	8006a36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d003      	beq.n	8006a14 <USB_EPClearStall+0x4c>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	791b      	ldrb	r3, [r3, #4]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d138      	bne.n	8006a86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e027      	b.n	8006a86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	791b      	ldrb	r3, [r3, #4]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d003      	beq.n	8006a66 <USB_EPClearStall+0x9e>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d10f      	bne.n	8006a86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ab6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0e:	f023 0302 	bic.w	r3, r3, #2
 8006b12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b50:	f043 0302 	orr.w	r3, r3, #2
 8006b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	0c1b      	lsrs	r3, r3, #16
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	b29b      	uxth	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c20:	68bb      	ldr	r3, [r7, #8]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	01db      	lsls	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f003 0301 	and.w	r3, r3, #1
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	333c      	adds	r3, #60	; 0x3c
 8006d02:	3304      	adds	r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <USB_EP0_OutStart+0xb8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d90a      	bls.n	8006d26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d101      	bne.n	8006d26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e037      	b.n	8006d96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d54:	f043 0318 	orr.w	r3, r3, #24
 8006d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d10f      	bne.n	8006d94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	4f54300a 	.word	0x4f54300a

08006da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006dc0:	d901      	bls.n	8006dc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e01b      	b.n	8006dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	daf2      	bge.n	8006db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f043 0201 	orr.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006dea:	d901      	bls.n	8006df0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d0f0      	beq.n	8006dde <USB_CoreReset+0x36>

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e1c:	f005 fabe 	bl	800c39c <USBD_static_malloc>
 8006e20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32b0      	adds	r2, #176	; 0xb0
 8006e32:	2100      	movs	r1, #0
 8006e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e0d4      	b.n	8006fe6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f005 faee 	bl	800c424 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32b0      	adds	r2, #176	; 0xb0
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	; 0xb0
 8006e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d138      	bne.n	8006ee6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e74:	4b5e      	ldr	r3, [pc, #376]	; (8006ff0 <USBD_CDC_Init+0x1e4>)
 8006e76:	7819      	ldrb	r1, [r3, #0]
 8006e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f005 f969 	bl	800c156 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e84:	4b5a      	ldr	r3, [pc, #360]	; (8006ff0 <USBD_CDC_Init+0x1e4>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 020f 	and.w	r2, r3, #15
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e9e:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f005 f954 	bl	800c156 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006eae:	4b51      	ldr	r3, [pc, #324]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f003 020f 	and.w	r2, r3, #15
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006eca:	4b4b      	ldr	r3, [pc, #300]	; (8006ff8 <USBD_CDC_Init+0x1ec>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 020f 	and.w	r2, r3, #15
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	3326      	adds	r3, #38	; 0x26
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e035      	b.n	8006f52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ee6:	4b42      	ldr	r3, [pc, #264]	; (8006ff0 <USBD_CDC_Init+0x1e4>)
 8006ee8:	7819      	ldrb	r1, [r3, #0]
 8006eea:	2340      	movs	r3, #64	; 0x40
 8006eec:	2202      	movs	r2, #2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f005 f931 	bl	800c156 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ef4:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <USBD_CDC_Init+0x1e4>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 020f 	and.w	r2, r3, #15
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f0e:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	2340      	movs	r3, #64	; 0x40
 8006f14:	2202      	movs	r2, #2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f005 f91d 	bl	800c156 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f1c:	4b35      	ldr	r3, [pc, #212]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f34:	2201      	movs	r2, #1
 8006f36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f38:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <USBD_CDC_Init+0x1ec>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3326      	adds	r3, #38	; 0x26
 8006f4e:	2210      	movs	r2, #16
 8006f50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f52:	4b29      	ldr	r3, [pc, #164]	; (8006ff8 <USBD_CDC_Init+0x1ec>)
 8006f54:	7819      	ldrb	r1, [r3, #0]
 8006f56:	2308      	movs	r3, #8
 8006f58:	2203      	movs	r2, #3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f005 f8fb 	bl	800c156 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f60:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <USBD_CDC_Init+0x1ec>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3324      	adds	r3, #36	; 0x24
 8006f76:	2201      	movs	r2, #1
 8006f78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	33b0      	adds	r3, #176	; 0xb0
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e018      	b.n	8006fe6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7c1b      	ldrb	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006fbe:	7819      	ldrb	r1, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f005 f9b2 	bl	800c334 <USBD_LL_PrepareReceive>
 8006fd0:	e008      	b.n	8006fe4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <USBD_CDC_Init+0x1e8>)
 8006fd4:	7819      	ldrb	r1, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f005 f9a8 	bl	800c334 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000093 	.word	0x20000093
 8006ff4:	20000094 	.word	0x20000094
 8006ff8:	20000095 	.word	0x20000095

08006ffc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007008:	4b3a      	ldr	r3, [pc, #232]	; (80070f4 <USBD_CDC_DeInit+0xf8>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f005 f8c7 	bl	800c1a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007014:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <USBD_CDC_DeInit+0xf8>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3324      	adds	r3, #36	; 0x24
 800702a:	2200      	movs	r2, #0
 800702c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800702e:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <USBD_CDC_DeInit+0xfc>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f005 f8b4 	bl	800c1a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800703a:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <USBD_CDC_DeInit+0xfc>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 020f 	and.w	r2, r3, #15
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007056:	4b29      	ldr	r3, [pc, #164]	; (80070fc <USBD_CDC_DeInit+0x100>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f005 f8a0 	bl	800c1a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007062:	4b26      	ldr	r3, [pc, #152]	; (80070fc <USBD_CDC_DeInit+0x100>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3324      	adds	r3, #36	; 0x24
 8007078:	2200      	movs	r2, #0
 800707a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <USBD_CDC_DeInit+0x100>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 020f 	and.w	r2, r3, #15
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	3326      	adds	r3, #38	; 0x26
 8007092:	2200      	movs	r2, #0
 8007094:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32b0      	adds	r2, #176	; 0xb0
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01f      	beq.n	80070e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	33b0      	adds	r3, #176	; 0xb0
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	32b0      	adds	r2, #176	; 0xb0
 80070c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f005 f974 	bl	800c3b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32b0      	adds	r2, #176	; 0xb0
 80070da:	2100      	movs	r1, #0
 80070dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000093 	.word	0x20000093
 80070f8:	20000094 	.word	0x20000094
 80070fc:	20000095 	.word	0x20000095

08007100 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	32b0      	adds	r2, #176	; 0xb0
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	e0bf      	b.n	80072b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007138:	2b00      	cmp	r3, #0
 800713a:	d050      	beq.n	80071de <USBD_CDC_Setup+0xde>
 800713c:	2b20      	cmp	r3, #32
 800713e:	f040 80af 	bne.w	80072a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03a      	beq.n	80071c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b25b      	sxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	da1b      	bge.n	800718c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	33b0      	adds	r3, #176	; 0xb0
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800716a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	88d2      	ldrh	r2, [r2, #6]
 8007170:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b07      	cmp	r3, #7
 8007178:	bf28      	it	cs
 800717a:	2307      	movcs	r3, #7
 800717c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	89fa      	ldrh	r2, [r7, #14]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fd49 	bl	8008c1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800718a:	e090      	b.n	80072ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785a      	ldrb	r2, [r3, #1]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	2b3f      	cmp	r3, #63	; 0x3f
 800719c:	d803      	bhi.n	80071a6 <USBD_CDC_Setup+0xa6>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	e000      	b.n	80071a8 <USBD_CDC_Setup+0xa8>
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071ae:	6939      	ldr	r1, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071b6:	461a      	mov	r2, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fd5b 	bl	8008c74 <USBD_CtlPrepareRx>
      break;
 80071be:	e076      	b.n	80072ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	33b0      	adds	r3, #176	; 0xb0
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	7850      	ldrb	r0, [r2, #1]
 80071d6:	2200      	movs	r2, #0
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	4798      	blx	r3
      break;
 80071dc:	e067      	b.n	80072ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b0b      	cmp	r3, #11
 80071e4:	d851      	bhi.n	800728a <USBD_CDC_Setup+0x18a>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <USBD_CDC_Setup+0xec>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	08007299 	.word	0x08007299
 80071f4:	0800728b 	.word	0x0800728b
 80071f8:	0800728b 	.word	0x0800728b
 80071fc:	0800728b 	.word	0x0800728b
 8007200:	0800728b 	.word	0x0800728b
 8007204:	0800728b 	.word	0x0800728b
 8007208:	0800728b 	.word	0x0800728b
 800720c:	0800728b 	.word	0x0800728b
 8007210:	0800728b 	.word	0x0800728b
 8007214:	08007247 	.word	0x08007247
 8007218:	08007271 	.word	0x08007271
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b03      	cmp	r3, #3
 8007226:	d107      	bne.n	8007238 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007228:	f107 030a 	add.w	r3, r7, #10
 800722c:	2202      	movs	r2, #2
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fcf3 	bl	8008c1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007236:	e032      	b.n	800729e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc7d 	bl	8008b3a <USBD_CtlError>
            ret = USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	75fb      	strb	r3, [r7, #23]
          break;
 8007244:	e02b      	b.n	800729e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b03      	cmp	r3, #3
 8007250:	d107      	bne.n	8007262 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007252:	f107 030d 	add.w	r3, r7, #13
 8007256:	2201      	movs	r2, #1
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fcde 	bl	8008c1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007260:	e01d      	b.n	800729e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fc68 	bl	8008b3a <USBD_CtlError>
            ret = USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	75fb      	strb	r3, [r7, #23]
          break;
 800726e:	e016      	b.n	800729e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b03      	cmp	r3, #3
 800727a:	d00f      	beq.n	800729c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fc5b 	bl	8008b3a <USBD_CtlError>
            ret = USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007288:	e008      	b.n	800729c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fc54 	bl	8008b3a <USBD_CtlError>
          ret = USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	75fb      	strb	r3, [r7, #23]
          break;
 8007296:	e002      	b.n	800729e <USBD_CDC_Setup+0x19e>
          break;
 8007298:	bf00      	nop
 800729a:	e008      	b.n	80072ae <USBD_CDC_Setup+0x1ae>
          break;
 800729c:	bf00      	nop
      }
      break;
 800729e:	e006      	b.n	80072ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fc49 	bl	8008b3a <USBD_CtlError>
      ret = USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	75fb      	strb	r3, [r7, #23]
      break;
 80072ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32b0      	adds	r2, #176	; 0xb0
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072de:	2303      	movs	r3, #3
 80072e0:	e065      	b.n	80073ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	32b0      	adds	r2, #176	; 0xb0
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	f003 020f 	and.w	r2, r3, #15
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	3318      	adds	r3, #24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02f      	beq.n	800736c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	f003 020f 	and.w	r2, r3, #15
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	3318      	adds	r3, #24
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	f003 010f 	and.w	r1, r3, #15
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	460b      	mov	r3, r1
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	440b      	add	r3, r1
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4403      	add	r3, r0
 8007334:	331c      	adds	r3, #28
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	fbb2 f1f3 	udiv	r1, r2, r3
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007342:	2b00      	cmp	r3, #0
 8007344:	d112      	bne.n	800736c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3318      	adds	r3, #24
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800735e:	78f9      	ldrb	r1, [r7, #3]
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f004 ffc4 	bl	800c2f2 <USBD_LL_Transmit>
 800736a:	e01f      	b.n	80073ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	33b0      	adds	r3, #176	; 0xb0
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	33b0      	adds	r3, #176	; 0xb0
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073a8:	78fa      	ldrb	r2, [r7, #3]
 80073aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	32b0      	adds	r2, #176	; 0xb0
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32b0      	adds	r2, #176	; 0xb0
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e01a      	b.n	800741e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f004 ffc2 	bl	800c376 <USBD_LL_GetRxDataSize>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	33b0      	adds	r3, #176	; 0xb0
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007418:	4611      	mov	r1, r2
 800741a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	32b0      	adds	r2, #176	; 0xb0
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e025      	b.n	8007494 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	33b0      	adds	r3, #176	; 0xb0
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01a      	beq.n	8007492 <USBD_CDC_EP0_RxReady+0x6c>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007462:	2bff      	cmp	r3, #255	; 0xff
 8007464:	d015      	beq.n	8007492 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	33b0      	adds	r3, #176	; 0xb0
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800747e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007486:	b292      	uxth	r2, r2
 8007488:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	22ff      	movs	r2, #255	; 0xff
 800748e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074a4:	2182      	movs	r1, #130	; 0x82
 80074a6:	4818      	ldr	r0, [pc, #96]	; (8007508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074a8:	f000 fd0f 	bl	8007eca <USBD_GetEpDesc>
 80074ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074ae:	2101      	movs	r1, #1
 80074b0:	4815      	ldr	r0, [pc, #84]	; (8007508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074b2:	f000 fd0a 	bl	8007eca <USBD_GetEpDesc>
 80074b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074b8:	2181      	movs	r1, #129	; 0x81
 80074ba:	4813      	ldr	r0, [pc, #76]	; (8007508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074bc:	f000 fd05 	bl	8007eca <USBD_GetEpDesc>
 80074c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2210      	movs	r2, #16
 80074cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074dc:	711a      	strb	r2, [r3, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f0:	711a      	strb	r2, [r3, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2243      	movs	r2, #67	; 0x43
 80074fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000050 	.word	0x20000050

0800750c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007514:	2182      	movs	r1, #130	; 0x82
 8007516:	4818      	ldr	r0, [pc, #96]	; (8007578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007518:	f000 fcd7 	bl	8007eca <USBD_GetEpDesc>
 800751c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800751e:	2101      	movs	r1, #1
 8007520:	4815      	ldr	r0, [pc, #84]	; (8007578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007522:	f000 fcd2 	bl	8007eca <USBD_GetEpDesc>
 8007526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007528:	2181      	movs	r1, #129	; 0x81
 800752a:	4813      	ldr	r0, [pc, #76]	; (8007578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800752c:	f000 fccd 	bl	8007eca <USBD_GetEpDesc>
 8007530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2210      	movs	r2, #16
 800753c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2200      	movs	r2, #0
 8007548:	711a      	strb	r2, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f042 0202 	orr.w	r2, r2, #2
 8007550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	711a      	strb	r2, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f042 0202 	orr.w	r2, r2, #2
 8007564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2243      	movs	r2, #67	; 0x43
 800756a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000050 	.word	0x20000050

0800757c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007584:	2182      	movs	r1, #130	; 0x82
 8007586:	4818      	ldr	r0, [pc, #96]	; (80075e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007588:	f000 fc9f 	bl	8007eca <USBD_GetEpDesc>
 800758c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800758e:	2101      	movs	r1, #1
 8007590:	4815      	ldr	r0, [pc, #84]	; (80075e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007592:	f000 fc9a 	bl	8007eca <USBD_GetEpDesc>
 8007596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007598:	2181      	movs	r1, #129	; 0x81
 800759a:	4813      	ldr	r0, [pc, #76]	; (80075e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800759c:	f000 fc95 	bl	8007eca <USBD_GetEpDesc>
 80075a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2210      	movs	r2, #16
 80075ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075bc:	711a      	strb	r2, [r3, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d0:	711a      	strb	r2, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2243      	movs	r2, #67	; 0x43
 80075da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075dc:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000050 	.word	0x20000050

080075ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220a      	movs	r2, #10
 80075f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075fa:	4b03      	ldr	r3, [pc, #12]	; (8007608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	2000000c 	.word	0x2000000c

0800760c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	e009      	b.n	8007634 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	33b0      	adds	r3, #176	; 0xb0
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	32b0      	adds	r2, #176	; 0xb0
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007662:	2303      	movs	r3, #3
 8007664:	e008      	b.n	8007678 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32b0      	adds	r2, #176	; 0xb0
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e004      	b.n	80076b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	32b0      	adds	r2, #176	; 0xb0
 80076d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32b0      	adds	r2, #176	; 0xb0
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e018      	b.n	8007720 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7c1b      	ldrb	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <USBD_CDC_ReceivePacket+0x68>)
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f004 fe15 	bl	800c334 <USBD_LL_PrepareReceive>
 800770a:	e008      	b.n	800771e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <USBD_CDC_ReceivePacket+0x68>)
 800770e:	7819      	ldrb	r1, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007716:	2340      	movs	r3, #64	; 0x40
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f004 fe0b 	bl	800c334 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000094 	.word	0x20000094

0800772c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	4613      	mov	r3, r2
 8007738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e01f      	b.n	8007784 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	79fa      	ldrb	r2, [r7, #7]
 8007776:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f004 fc85 	bl	800c088 <USBD_LL_Init>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e025      	b.n	80077f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	32ae      	adds	r2, #174	; 0xae
 80077b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00f      	beq.n	80077e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	32ae      	adds	r2, #174	; 0xae
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f107 020e 	add.w	r2, r7, #14
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	4602      	mov	r2, r0
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f004 fc8d 	bl	800c120 <USBD_LL_Start>
 8007806:	4603      	mov	r3, r0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	4611      	mov	r1, r2
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007884:	2303      	movs	r3, #3
 8007886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 f90e 	bl	8008ac6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d01a      	beq.n	8007904 <USBD_LL_SetupStage+0x72>
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d822      	bhi.n	8007918 <USBD_LL_SetupStage+0x86>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <USBD_LL_SetupStage+0x4a>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00a      	beq.n	80078f0 <USBD_LL_SetupStage+0x5e>
 80078da:	e01d      	b.n	8007918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fb65 	bl	8007fb4 <USBD_StdDevReq>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	e020      	b.n	8007932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fbcd 	bl	8008098 <USBD_StdItfReq>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
      break;
 8007902:	e016      	b.n	8007932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc2f 	bl	8008170 <USBD_StdEPReq>
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
      break;
 8007916:	e00c      	b.n	8007932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800791e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007922:	b2db      	uxtb	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f004 fc5a 	bl	800c1e0 <USBD_LL_StallEP>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	bf00      	nop
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	460b      	mov	r3, r1
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d16e      	bne.n	8007a32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800795a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007962:	2b03      	cmp	r3, #3
 8007964:	f040 8098 	bne.w	8007a98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	429a      	cmp	r2, r3
 8007972:	d913      	bls.n	800799c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	1ad2      	subs	r2, r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	4293      	cmp	r3, r2
 800798c:	bf28      	it	cs
 800798e:	4613      	movcs	r3, r2
 8007990:	461a      	mov	r2, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f001 f98a 	bl	8008cae <USBD_CtlContinueRx>
 800799a:	e07d      	b.n	8007a98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d014      	beq.n	80079d4 <USBD_LL_DataOutStage+0x98>
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d81d      	bhi.n	80079ea <USBD_LL_DataOutStage+0xae>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <USBD_LL_DataOutStage+0x7c>
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d003      	beq.n	80079be <USBD_LL_DataOutStage+0x82>
 80079b6:	e018      	b.n	80079ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75bb      	strb	r3, [r7, #22]
            break;
 80079bc:	e018      	b.n	80079f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fa64 	bl	8007e96 <USBD_CoreFindIF>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75bb      	strb	r3, [r7, #22]
            break;
 80079d2:	e00d      	b.n	80079f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fa66 	bl	8007eb0 <USBD_CoreFindEP>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75bb      	strb	r3, [r7, #22]
            break;
 80079e8:	e002      	b.n	80079f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75bb      	strb	r3, [r7, #22]
            break;
 80079ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079f0:	7dbb      	ldrb	r3, [r7, #22]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d119      	bne.n	8007a2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d113      	bne.n	8007a2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a02:	7dba      	ldrb	r2, [r7, #22]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	32ae      	adds	r2, #174	; 0xae
 8007a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a12:	7dba      	ldrb	r2, [r7, #22]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a1a:	7dba      	ldrb	r2, [r7, #22]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f001 f950 	bl	8008cd0 <USBD_CtlSendStatus>
 8007a30:	e032      	b.n	8007a98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fa37 	bl	8007eb0 <USBD_CoreFindEP>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a46:	7dbb      	ldrb	r3, [r7, #22]
 8007a48:	2bff      	cmp	r3, #255	; 0xff
 8007a4a:	d025      	beq.n	8007a98 <USBD_LL_DataOutStage+0x15c>
 8007a4c:	7dbb      	ldrb	r3, [r7, #22]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d122      	bne.n	8007a98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d117      	bne.n	8007a8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a5e:	7dba      	ldrb	r2, [r7, #22]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	32ae      	adds	r2, #174	; 0xae
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00f      	beq.n	8007a8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a6e:	7dba      	ldrb	r2, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a76:	7dba      	ldrb	r2, [r7, #22]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	32ae      	adds	r2, #174	; 0xae
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	7afa      	ldrb	r2, [r7, #11]
 8007a84:	4611      	mov	r1, r2
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	4798      	blx	r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	e000      	b.n	8007a9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	607a      	str	r2, [r7, #4]
 8007aae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d16f      	bne.n	8007b96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d15a      	bne.n	8007b7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d914      	bls.n	8007afc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f001 f8b2 	bl	8008c52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aee:	2300      	movs	r3, #0
 8007af0:	2200      	movs	r2, #0
 8007af2:	2100      	movs	r1, #0
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f004 fc1d 	bl	800c334 <USBD_LL_PrepareReceive>
 8007afa:	e03f      	b.n	8007b7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d11c      	bne.n	8007b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d316      	bcc.n	8007b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d20f      	bcs.n	8007b42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f001 f893 	bl	8008c52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b34:	2300      	movs	r3, #0
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f004 fbfa 	bl	800c334 <USBD_LL_PrepareReceive>
 8007b40:	e01c      	b.n	8007b7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d10f      	bne.n	8007b6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b6e:	2180      	movs	r1, #128	; 0x80
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f004 fb35 	bl	800c1e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f001 f8bd 	bl	8008cf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d03a      	beq.n	8007bfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff fe42 	bl	8007810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b94:	e032      	b.n	8007bfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f985 	bl	8007eb0 <USBD_CoreFindEP>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	2bff      	cmp	r3, #255	; 0xff
 8007bae:	d025      	beq.n	8007bfc <USBD_LL_DataInStage+0x15a>
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d122      	bne.n	8007bfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d11c      	bne.n	8007bfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bc2:	7dfa      	ldrb	r2, [r7, #23]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	32ae      	adds	r2, #174	; 0xae
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d014      	beq.n	8007bfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bd2:	7dfa      	ldrb	r2, [r7, #23]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	32ae      	adds	r2, #174	; 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	7afa      	ldrb	r2, [r7, #11]
 8007be8:	4611      	mov	r1, r2
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	4798      	blx	r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bf2:	7dbb      	ldrb	r3, [r7, #22]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007bf8:	7dbb      	ldrb	r3, [r7, #22]
 8007bfa:	e000      	b.n	8007bfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d014      	beq.n	8007c6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00e      	beq.n	8007c6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	6852      	ldr	r2, [r2, #4]
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f004 fa6f 	bl	800c156 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2240      	movs	r2, #64	; 0x40
 8007c84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2180      	movs	r1, #128	; 0x80
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f004 fa61 	bl	800c156 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2240      	movs	r2, #64	; 0x40
 8007c9e:	621a      	str	r2, [r3, #32]

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d006      	beq.n	8007cec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d106      	bne.n	8007d24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d110      	bne.n	8007d68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	32ae      	adds	r2, #174	; 0xae
 8007d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e01c      	b.n	8007dce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d115      	bne.n	8007dcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32ae      	adds	r2, #174	; 0xae
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	32ae      	adds	r2, #174	; 0xae
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e01c      	b.n	8007e32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d115      	bne.n	8007e30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32ae      	adds	r2, #174	; 0xae
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	; 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ea2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ebc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b086      	sub	sp, #24
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d920      	bls.n	8007f34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007efa:	e013      	b.n	8007f24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007efc:	f107 030a 	add.w	r3, r7, #10
 8007f00:	4619      	mov	r1, r3
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f000 f81b 	bl	8007f3e <USBD_GetNextDesc>
 8007f08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d108      	bne.n	8007f24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	789b      	ldrb	r3, [r3, #2]
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d008      	beq.n	8007f32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	897b      	ldrh	r3, [r7, #10]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d8e5      	bhi.n	8007efc <USBD_GetEpDesc+0x32>
 8007f30:	e000      	b.n	8007f34 <USBD_GetEpDesc+0x6a>
          break;
 8007f32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f34:	693b      	ldr	r3, [r7, #16]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	881a      	ldrh	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4413      	add	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f96:	8a3b      	ldrh	r3, [r7, #16]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	b21a      	sxth	r2, r3
 8007f9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d005      	beq.n	8007fda <USBD_StdDevReq+0x26>
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d857      	bhi.n	8008082 <USBD_StdDevReq+0xce>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00f      	beq.n	8007ff6 <USBD_StdDevReq+0x42>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d153      	bne.n	8008082 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32ae      	adds	r2, #174	; 0xae
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff4:	e04a      	b.n	800808c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d83b      	bhi.n	8008076 <USBD_StdDevReq+0xc2>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <USBD_StdDevReq+0x50>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008059 	.word	0x08008059
 8008008:	0800806d 	.word	0x0800806d
 800800c:	08008077 	.word	0x08008077
 8008010:	08008063 	.word	0x08008063
 8008014:	08008077 	.word	0x08008077
 8008018:	08008037 	.word	0x08008037
 800801c:	0800802d 	.word	0x0800802d
 8008020:	08008077 	.word	0x08008077
 8008024:	0800804f 	.word	0x0800804f
 8008028:	08008041 	.word	0x08008041
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa3c 	bl	80084ac <USBD_GetDescriptor>
          break;
 8008034:	e024      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fba1 	bl	8008780 <USBD_SetAddress>
          break;
 800803e:	e01f      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fbe0 	bl	8008808 <USBD_SetConfig>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
          break;
 800804c:	e018      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fc83 	bl	800895c <USBD_GetConfig>
          break;
 8008056:	e013      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fcb4 	bl	80089c8 <USBD_GetStatus>
          break;
 8008060:	e00e      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fce3 	bl	8008a30 <USBD_SetFeature>
          break;
 800806a:	e009      	b.n	8008080 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fd07 	bl	8008a82 <USBD_ClrFeature>
          break;
 8008074:	e004      	b.n	8008080 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fd5e 	bl	8008b3a <USBD_CtlError>
          break;
 800807e:	bf00      	nop
      }
      break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd58 	bl	8008b3a <USBD_CtlError>
      break;
 800808a:	bf00      	nop
  }

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d005      	beq.n	80080be <USBD_StdItfReq+0x26>
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d852      	bhi.n	800815c <USBD_StdItfReq+0xc4>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <USBD_StdItfReq+0x26>
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d14e      	bne.n	800815c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d840      	bhi.n	800814e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	889b      	ldrh	r3, [r3, #4]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d836      	bhi.n	8008144 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fed9 	bl	8007e96 <USBD_CoreFindIF>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2bff      	cmp	r3, #255	; 0xff
 80080ec:	d01d      	beq.n	800812a <USBD_StdItfReq+0x92>
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d11a      	bne.n	800812a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080f4:	7bba      	ldrb	r2, [r7, #14]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	32ae      	adds	r2, #174	; 0xae
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00f      	beq.n	8008124 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008104:	7bba      	ldrb	r2, [r7, #14]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800810c:	7bba      	ldrb	r2, [r7, #14]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	; 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008122:	e004      	b.n	800812e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008124:	2303      	movs	r3, #3
 8008126:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008128:	e001      	b.n	800812e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d110      	bne.n	8008158 <USBD_StdItfReq+0xc0>
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10d      	bne.n	8008158 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fdc7 	bl	8008cd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008142:	e009      	b.n	8008158 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fcf7 	bl	8008b3a <USBD_CtlError>
          break;
 800814c:	e004      	b.n	8008158 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fcf2 	bl	8008b3a <USBD_CtlError>
          break;
 8008156:	e000      	b.n	800815a <USBD_StdItfReq+0xc2>
          break;
 8008158:	bf00      	nop
      }
      break;
 800815a:	e004      	b.n	8008166 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fceb 	bl	8008b3a <USBD_CtlError>
      break;
 8008164:	bf00      	nop
  }

  return ret;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	889b      	ldrh	r3, [r3, #4]
 8008182:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800818c:	2b40      	cmp	r3, #64	; 0x40
 800818e:	d007      	beq.n	80081a0 <USBD_StdEPReq+0x30>
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	f200 817f 	bhi.w	8008494 <USBD_StdEPReq+0x324>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d02a      	beq.n	80081f0 <USBD_StdEPReq+0x80>
 800819a:	2b20      	cmp	r3, #32
 800819c:	f040 817a 	bne.w	8008494 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fe83 	bl	8007eb0 <USBD_CoreFindEP>
 80081aa:	4603      	mov	r3, r0
 80081ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ae:	7b7b      	ldrb	r3, [r7, #13]
 80081b0:	2bff      	cmp	r3, #255	; 0xff
 80081b2:	f000 8174 	beq.w	800849e <USBD_StdEPReq+0x32e>
 80081b6:	7b7b      	ldrb	r3, [r7, #13]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 8170 	bne.w	800849e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081be:	7b7a      	ldrb	r2, [r7, #13]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081c6:	7b7a      	ldrb	r2, [r7, #13]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32ae      	adds	r2, #174	; 0xae
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 8163 	beq.w	800849e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081d8:	7b7a      	ldrb	r2, [r7, #13]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	32ae      	adds	r2, #174	; 0xae
 80081de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ee:	e156      	b.n	800849e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d008      	beq.n	800820a <USBD_StdEPReq+0x9a>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	f300 8145 	bgt.w	8008488 <USBD_StdEPReq+0x318>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 809b 	beq.w	800833a <USBD_StdEPReq+0x1ca>
 8008204:	2b01      	cmp	r3, #1
 8008206:	d03c      	beq.n	8008282 <USBD_StdEPReq+0x112>
 8008208:	e13e      	b.n	8008488 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d002      	beq.n	800821c <USBD_StdEPReq+0xac>
 8008216:	2b03      	cmp	r3, #3
 8008218:	d016      	beq.n	8008248 <USBD_StdEPReq+0xd8>
 800821a:	e02c      	b.n	8008276 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <USBD_StdEPReq+0xce>
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d00a      	beq.n	800823e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f003 ffd7 	bl	800c1e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008232:	2180      	movs	r1, #128	; 0x80
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f003 ffd3 	bl	800c1e0 <USBD_LL_StallEP>
 800823a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800823c:	e020      	b.n	8008280 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc7a 	bl	8008b3a <USBD_CtlError>
              break;
 8008246:	e01b      	b.n	8008280 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10e      	bne.n	800826e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <USBD_StdEPReq+0xfe>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d008      	beq.n	800826e <USBD_StdEPReq+0xfe>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	88db      	ldrh	r3, [r3, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f003 ffb9 	bl	800c1e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fd2e 	bl	8008cd0 <USBD_CtlSendStatus>

              break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc5e 	bl	8008b3a <USBD_CtlError>
              break;
 800827e:	bf00      	nop
          }
          break;
 8008280:	e107      	b.n	8008492 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d002      	beq.n	8008294 <USBD_StdEPReq+0x124>
 800828e:	2b03      	cmp	r3, #3
 8008290:	d016      	beq.n	80082c0 <USBD_StdEPReq+0x150>
 8008292:	e04b      	b.n	800832c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <USBD_StdEPReq+0x146>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d00a      	beq.n	80082b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f003 ff9b 	bl	800c1e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f003 ff97 	bl	800c1e0 <USBD_LL_StallEP>
 80082b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082b4:	e040      	b.n	8008338 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc3e 	bl	8008b3a <USBD_CtlError>
              break;
 80082be:	e03b      	b.n	8008338 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	885b      	ldrh	r3, [r3, #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d136      	bne.n	8008336 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f003 ffa1 	bl	800c21e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fcf7 	bl	8008cd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff fde2 	bl	8007eb0 <USBD_CoreFindEP>
 80082ec:	4603      	mov	r3, r0
 80082ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082f0:	7b7b      	ldrb	r3, [r7, #13]
 80082f2:	2bff      	cmp	r3, #255	; 0xff
 80082f4:	d01f      	beq.n	8008336 <USBD_StdEPReq+0x1c6>
 80082f6:	7b7b      	ldrb	r3, [r7, #13]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11c      	bne.n	8008336 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082fc:	7b7a      	ldrb	r2, [r7, #13]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008304:	7b7a      	ldrb	r2, [r7, #13]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32ae      	adds	r2, #174	; 0xae
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d010      	beq.n	8008336 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008314:	7b7a      	ldrb	r2, [r7, #13]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	; 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800832a:	e004      	b.n	8008336 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fc03 	bl	8008b3a <USBD_CtlError>
              break;
 8008334:	e000      	b.n	8008338 <USBD_StdEPReq+0x1c8>
              break;
 8008336:	bf00      	nop
          }
          break;
 8008338:	e0ab      	b.n	8008492 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d002      	beq.n	800834c <USBD_StdEPReq+0x1dc>
 8008346:	2b03      	cmp	r3, #3
 8008348:	d032      	beq.n	80083b0 <USBD_StdEPReq+0x240>
 800834a:	e097      	b.n	800847c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <USBD_StdEPReq+0x1f2>
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b80      	cmp	r3, #128	; 0x80
 8008356:	d004      	beq.n	8008362 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fbed 	bl	8008b3a <USBD_CtlError>
                break;
 8008360:	e091      	b.n	8008486 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008366:	2b00      	cmp	r3, #0
 8008368:	da0b      	bge.n	8008382 <USBD_StdEPReq+0x212>
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	3310      	adds	r3, #16
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	3304      	adds	r3, #4
 8008380:	e00b      	b.n	800839a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	3304      	adds	r3, #4
 800839a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2202      	movs	r2, #2
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc37 	bl	8008c1c <USBD_CtlSendData>
              break;
 80083ae:	e06a      	b.n	8008486 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da11      	bge.n	80083dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	f003 020f 	and.w	r2, r3, #15
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	3324      	adds	r3, #36	; 0x24
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d117      	bne.n	8008402 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbb0 	bl	8008b3a <USBD_CtlError>
                  break;
 80083da:	e054      	b.n	8008486 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 020f 	and.w	r2, r3, #15
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fb9d 	bl	8008b3a <USBD_CtlError>
                  break;
 8008400:	e041      	b.n	8008486 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	da0b      	bge.n	8008422 <USBD_StdEPReq+0x2b2>
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	3310      	adds	r3, #16
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	e00b      	b.n	800843a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <USBD_StdEPReq+0x2d8>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d103      	bne.n	8008450 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e00e      	b.n	800846e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f003 ff01 	bl	800c25c <USBD_LL_IsStallEP>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e002      	b.n	800846e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2202      	movs	r2, #2
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fbd1 	bl	8008c1c <USBD_CtlSendData>
              break;
 800847a:	e004      	b.n	8008486 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fb5b 	bl	8008b3a <USBD_CtlError>
              break;
 8008484:	bf00      	nop
          }
          break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb55 	bl	8008b3a <USBD_CtlError>
          break;
 8008490:	bf00      	nop
      }
      break;
 8008492:	e005      	b.n	80084a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb4f 	bl	8008b3a <USBD_CtlError>
      break;
 800849c:	e000      	b.n	80084a0 <USBD_StdEPReq+0x330>
      break;
 800849e:	bf00      	nop
  }

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	f200 8128 	bhi.w	8008722 <USBD_GetDescriptor+0x276>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <USBD_GetDescriptor+0x2c>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	0800854d 	.word	0x0800854d
 80084e4:	08008723 	.word	0x08008723
 80084e8:	08008723 	.word	0x08008723
 80084ec:	080086c3 	.word	0x080086c3
 80084f0:	080086ef 	.word	0x080086ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
      break;
 800850a:	e112      	b.n	8008732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7c1b      	ldrb	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f107 0208 	add.w	r2, r7, #8
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	2202      	movs	r2, #2
 800852c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800852e:	e100      	b.n	8008732 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008538:	f107 0208 	add.w	r2, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	2202      	movs	r2, #2
 8008548:	701a      	strb	r2, [r3, #0]
      break;
 800854a:	e0f2      	b.n	8008732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	885b      	ldrh	r3, [r3, #2]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b05      	cmp	r3, #5
 8008554:	f200 80ac 	bhi.w	80086b0 <USBD_GetDescriptor+0x204>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <USBD_GetDescriptor+0xb4>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008579 	.word	0x08008579
 8008564:	080085ad 	.word	0x080085ad
 8008568:	080085e1 	.word	0x080085e1
 800856c:	08008615 	.word	0x08008615
 8008570:	08008649 	.word	0x08008649
 8008574:	0800867d 	.word	0x0800867d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00b      	beq.n	800859c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	7c12      	ldrb	r2, [r2, #16]
 8008590:	f107 0108 	add.w	r1, r7, #8
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
 8008598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800859a:	e091      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 facb 	bl	8008b3a <USBD_CtlError>
            err++;
 80085a4:	7afb      	ldrb	r3, [r7, #11]
 80085a6:	3301      	adds	r3, #1
 80085a8:	72fb      	strb	r3, [r7, #11]
          break;
 80085aa:	e089      	b.n	80086c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	7c12      	ldrb	r2, [r2, #16]
 80085c4:	f107 0108 	add.w	r1, r7, #8
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
 80085cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ce:	e077      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fab1 	bl	8008b3a <USBD_CtlError>
            err++;
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	3301      	adds	r3, #1
 80085dc:	72fb      	strb	r3, [r7, #11]
          break;
 80085de:	e06f      	b.n	80086c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7c12      	ldrb	r2, [r2, #16]
 80085f8:	f107 0108 	add.w	r1, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008602:	e05d      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa97 	bl	8008b3a <USBD_CtlError>
            err++;
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	3301      	adds	r3, #1
 8008610:	72fb      	strb	r3, [r7, #11]
          break;
 8008612:	e055      	b.n	80086c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7c12      	ldrb	r2, [r2, #16]
 800862c:	f107 0108 	add.w	r1, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008636:	e043      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa7d 	bl	8008b3a <USBD_CtlError>
            err++;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	3301      	adds	r3, #1
 8008644:	72fb      	strb	r3, [r7, #11]
          break;
 8008646:	e03b      	b.n	80086c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7c12      	ldrb	r2, [r2, #16]
 8008660:	f107 0108 	add.w	r1, r7, #8
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866a:	e029      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa63 	bl	8008b3a <USBD_CtlError>
            err++;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	72fb      	strb	r3, [r7, #11]
          break;
 800867a:	e021      	b.n	80086c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	7c12      	ldrb	r2, [r2, #16]
 8008694:	f107 0108 	add.w	r1, r7, #8
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
 800869c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869e:	e00f      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa49 	bl	8008b3a <USBD_CtlError>
            err++;
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	3301      	adds	r3, #1
 80086ac:	72fb      	strb	r3, [r7, #11]
          break;
 80086ae:	e007      	b.n	80086c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa41 	bl	8008b3a <USBD_CtlError>
          err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086be:	bf00      	nop
      }
      break;
 80086c0:	e037      	b.n	8008732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7c1b      	ldrb	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d2:	f107 0208 	add.w	r2, r7, #8
 80086d6:	4610      	mov	r0, r2
 80086d8:	4798      	blx	r3
 80086da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086dc:	e029      	b.n	8008732 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa2a 	bl	8008b3a <USBD_CtlError>
        err++;
 80086e6:	7afb      	ldrb	r3, [r7, #11]
 80086e8:	3301      	adds	r3, #1
 80086ea:	72fb      	strb	r3, [r7, #11]
      break;
 80086ec:	e021      	b.n	8008732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7c1b      	ldrb	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10d      	bne.n	8008712 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f107 0208 	add.w	r2, r7, #8
 8008702:	4610      	mov	r0, r2
 8008704:	4798      	blx	r3
 8008706:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	2207      	movs	r2, #7
 800870e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008710:	e00f      	b.n	8008732 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fa10 	bl	8008b3a <USBD_CtlError>
        err++;
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	3301      	adds	r3, #1
 800871e:	72fb      	strb	r3, [r7, #11]
      break;
 8008720:	e007      	b.n	8008732 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa08 	bl	8008b3a <USBD_CtlError>
      err++;
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	3301      	adds	r3, #1
 800872e:	72fb      	strb	r3, [r7, #11]
      break;
 8008730:	bf00      	nop
  }

  if (err != 0U)
 8008732:	7afb      	ldrb	r3, [r7, #11]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11e      	bne.n	8008776 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	88db      	ldrh	r3, [r3, #6]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d016      	beq.n	800876e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00e      	beq.n	8008764 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	88da      	ldrh	r2, [r3, #6]
 800874a:	893b      	ldrh	r3, [r7, #8]
 800874c:	4293      	cmp	r3, r2
 800874e:	bf28      	it	cs
 8008750:	4613      	movcs	r3, r2
 8008752:	b29b      	uxth	r3, r3
 8008754:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	461a      	mov	r2, r3
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa5d 	bl	8008c1c <USBD_CtlSendData>
 8008762:	e009      	b.n	8008778 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f9e7 	bl	8008b3a <USBD_CtlError>
 800876c:	e004      	b.n	8008778 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 faae 	bl	8008cd0 <USBD_CtlSendStatus>
 8008774:	e000      	b.n	8008778 <USBD_GetDescriptor+0x2cc>
    return;
 8008776:	bf00      	nop
  }
}
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop

08008780 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	889b      	ldrh	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d131      	bne.n	80087f6 <USBD_SetAddress+0x76>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	88db      	ldrh	r3, [r3, #6]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d12d      	bne.n	80087f6 <USBD_SetAddress+0x76>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	885b      	ldrh	r3, [r3, #2]
 800879e:	2b7f      	cmp	r3, #127	; 0x7f
 80087a0:	d829      	bhi.n	80087f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	885b      	ldrh	r3, [r3, #2]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d104      	bne.n	80087c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f9bc 	bl	8008b3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	e01d      	b.n	8008800 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	7bfa      	ldrb	r2, [r7, #15]
 80087c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f003 fd6f 	bl	800c2b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa7a 	bl	8008cd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ea:	e009      	b.n	8008800 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f4:	e004      	b.n	8008800 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f99e 	bl	8008b3a <USBD_CtlError>
  }
}
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	b2da      	uxtb	r2, r3
 800881c:	4b4e      	ldr	r3, [pc, #312]	; (8008958 <USBD_SetConfig+0x150>)
 800881e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008820:	4b4d      	ldr	r3, [pc, #308]	; (8008958 <USBD_SetConfig+0x150>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d905      	bls.n	8008834 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f985 	bl	8008b3a <USBD_CtlError>
    return USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	e08c      	b.n	800894e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d002      	beq.n	8008846 <USBD_SetConfig+0x3e>
 8008840:	2b03      	cmp	r3, #3
 8008842:	d029      	beq.n	8008898 <USBD_SetConfig+0x90>
 8008844:	e075      	b.n	8008932 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008846:	4b44      	ldr	r3, [pc, #272]	; (8008958 <USBD_SetConfig+0x150>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d020      	beq.n	8008890 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800884e:	4b42      	ldr	r3, [pc, #264]	; (8008958 <USBD_SetConfig+0x150>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008858:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <USBD_SetConfig+0x150>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fe ffe1 	bl	8007826 <USBD_SetClassConfig>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f962 	bl	8008b3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2202      	movs	r2, #2
 800887a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800887e:	e065      	b.n	800894c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa25 	bl	8008cd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2203      	movs	r2, #3
 800888a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800888e:	e05d      	b.n	800894c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fa1d 	bl	8008cd0 <USBD_CtlSendStatus>
      break;
 8008896:	e059      	b.n	800894c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008898:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <USBD_SetConfig+0x150>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d112      	bne.n	80088c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088a8:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <USBD_SetConfig+0x150>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088b2:	4b29      	ldr	r3, [pc, #164]	; (8008958 <USBD_SetConfig+0x150>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fe ffd0 	bl	800785e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa06 	bl	8008cd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088c4:	e042      	b.n	800894c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088c6:	4b24      	ldr	r3, [pc, #144]	; (8008958 <USBD_SetConfig+0x150>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d02a      	beq.n	800892a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7fe ffbe 	bl	800785e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088e2:	4b1d      	ldr	r3, [pc, #116]	; (8008958 <USBD_SetConfig+0x150>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <USBD_SetConfig+0x150>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fe ff97 	bl	8007826 <USBD_SetClassConfig>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f918 	bl	8008b3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fe ffa3 	bl	800785e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008920:	e014      	b.n	800894c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f9d4 	bl	8008cd0 <USBD_CtlSendStatus>
      break;
 8008928:	e010      	b.n	800894c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9d0 	bl	8008cd0 <USBD_CtlSendStatus>
      break;
 8008930:	e00c      	b.n	800894c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f900 	bl	8008b3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <USBD_SetConfig+0x150>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7fe ff8c 	bl	800785e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
      break;
 800894a:	bf00      	nop
  }

  return ret;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000468 	.word	0x20000468

0800895c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d004      	beq.n	8008978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8e2 	bl	8008b3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008976:	e023      	b.n	80089c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	dc02      	bgt.n	800898a <USBD_GetConfig+0x2e>
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc03      	bgt.n	8008990 <USBD_GetConfig+0x34>
 8008988:	e015      	b.n	80089b6 <USBD_GetConfig+0x5a>
 800898a:	2b03      	cmp	r3, #3
 800898c:	d00b      	beq.n	80089a6 <USBD_GetConfig+0x4a>
 800898e:	e012      	b.n	80089b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3308      	adds	r3, #8
 800899a:	2201      	movs	r2, #1
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f93c 	bl	8008c1c <USBD_CtlSendData>
        break;
 80089a4:	e00c      	b.n	80089c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3304      	adds	r3, #4
 80089aa:	2201      	movs	r2, #1
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f934 	bl	8008c1c <USBD_CtlSendData>
        break;
 80089b4:	e004      	b.n	80089c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f8be 	bl	8008b3a <USBD_CtlError>
        break;
 80089be:	bf00      	nop
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d81e      	bhi.n	8008a1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	88db      	ldrh	r3, [r3, #6]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d004      	beq.n	80089f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f8a5 	bl	8008b3a <USBD_CtlError>
        break;
 80089f0:	e01a      	b.n	8008a28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f043 0202 	orr.w	r2, r3, #2
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	330c      	adds	r3, #12
 8008a12:	2202      	movs	r2, #2
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f900 	bl	8008c1c <USBD_CtlSendData>
      break;
 8008a1c:	e004      	b.n	8008a28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f88a 	bl	8008b3a <USBD_CtlError>
      break;
 8008a26:	bf00      	nop
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	885b      	ldrh	r3, [r3, #2]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d107      	bne.n	8008a52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f940 	bl	8008cd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a50:	e013      	b.n	8008a7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	885b      	ldrh	r3, [r3, #2]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d10b      	bne.n	8008a72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	889b      	ldrh	r3, [r3, #4]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f930 	bl	8008cd0 <USBD_CtlSendStatus>
}
 8008a70:	e003      	b.n	8008a7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f860 	bl	8008b3a <USBD_CtlError>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d80b      	bhi.n	8008ab2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d10c      	bne.n	8008abc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f910 	bl	8008cd0 <USBD_CtlSendStatus>
      }
      break;
 8008ab0:	e004      	b.n	8008abc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f840 	bl	8008b3a <USBD_CtlError>
      break;
 8008aba:	e000      	b.n	8008abe <USBD_ClrFeature+0x3c>
      break;
 8008abc:	bf00      	nop
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff fa41 	bl	8007f78 <SWAPBYTE>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fa34 	bl	8007f78 <SWAPBYTE>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3301      	adds	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff fa27 	bl	8007f78 <SWAPBYTE>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	80da      	strh	r2, [r3, #6]
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b44:	2180      	movs	r1, #128	; 0x80
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f003 fb4a 	bl	800c1e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f003 fb46 	bl	800c1e0 <USBD_LL_StallEP>
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d036      	beq.n	8008be0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b76:	6938      	ldr	r0, [r7, #16]
 8008b78:	f000 f836 	bl	8008be8 <USBD_GetLen>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	3301      	adds	r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	4413      	add	r3, r2
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bac:	e013      	b.n	8008bd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	613b      	str	r3, [r7, #16]
    idx++;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	4413      	add	r3, r2
 8008bcc:	2200      	movs	r2, #0
 8008bce:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e7      	bne.n	8008bae <USBD_GetString+0x52>
 8008bde:	e000      	b.n	8008be2 <USBD_GetString+0x86>
    return;
 8008be0:	bf00      	nop
  }
}
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bf8:	e005      	b.n	8008c06 <USBD_GetLen+0x1e>
  {
    len++;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f5      	bne.n	8008bfa <USBD_GetLen+0x12>
  }

  return len;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	2100      	movs	r1, #0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f003 fb55 	bl	800c2f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	2100      	movs	r1, #0
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f003 fb44 	bl	800c2f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2203      	movs	r2, #3
 8008c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f003 fb48 	bl	800c334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f003 fb37 	bl	800c334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2204      	movs	r2, #4
 8008cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f003 fb03 	bl	800c2f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2205      	movs	r2, #5
 8008d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d06:	2300      	movs	r3, #0
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f003 fb11 	bl	800c334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <__NVIC_SetPriority>:
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	db0a      	blt.n	8008d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	490c      	ldr	r1, [pc, #48]	; (8008d68 <__NVIC_SetPriority+0x4c>)
 8008d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3a:	0112      	lsls	r2, r2, #4
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	440b      	add	r3, r1
 8008d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d44:	e00a      	b.n	8008d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4908      	ldr	r1, [pc, #32]	; (8008d6c <__NVIC_SetPriority+0x50>)
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	3b04      	subs	r3, #4
 8008d54:	0112      	lsls	r2, r2, #4
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	440b      	add	r3, r1
 8008d5a:	761a      	strb	r2, [r3, #24]
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	e000e100 	.word	0xe000e100
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <SysTick_Handler+0x1c>)
 8008d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008d78:	f001 fdfa 	bl	800a970 <xTaskGetSchedulerState>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d001      	beq.n	8008d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d82:	f002 fbe1 	bl	800b548 <xPortSysTickHandler>
  }
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	e000e010 	.word	0xe000e010

08008d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d94:	2100      	movs	r1, #0
 8008d96:	f06f 0004 	mvn.w	r0, #4
 8008d9a:	f7ff ffbf 	bl	8008d1c <__NVIC_SetPriority>
#endif
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008daa:	f3ef 8305 	mrs	r3, IPSR
 8008dae:	603b      	str	r3, [r7, #0]
  return(result);
 8008db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008db6:	f06f 0305 	mvn.w	r3, #5
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e00c      	b.n	8008dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <osKernelInitialize+0x44>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d105      	bne.n	8008dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dc6:	4b08      	ldr	r3, [pc, #32]	; (8008de8 <osKernelInitialize+0x44>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	607b      	str	r3, [r7, #4]
 8008dd0:	e002      	b.n	8008dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008dd8:	687b      	ldr	r3, [r7, #4]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	2000046c 	.word	0x2000046c

08008dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df2:	f3ef 8305 	mrs	r3, IPSR
 8008df6:	603b      	str	r3, [r7, #0]
  return(result);
 8008df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008dfe:	f06f 0305 	mvn.w	r3, #5
 8008e02:	607b      	str	r3, [r7, #4]
 8008e04:	e010      	b.n	8008e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e06:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <osKernelStart+0x48>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d109      	bne.n	8008e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e0e:	f7ff ffbf 	bl	8008d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e12:	4b08      	ldr	r3, [pc, #32]	; (8008e34 <osKernelStart+0x48>)
 8008e14:	2202      	movs	r2, #2
 8008e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e18:	f001 f93c 	bl	800a094 <vTaskStartScheduler>
      stat = osOK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	607b      	str	r3, [r7, #4]
 8008e20:	e002      	b.n	8008e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e28:	687b      	ldr	r3, [r7, #4]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	2000046c 	.word	0x2000046c

08008e38 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e3e:	f3ef 8305 	mrs	r3, IPSR
 8008e42:	603b      	str	r3, [r7, #0]
  return(result);
 8008e44:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008e4a:	f001 fa4f 	bl	800a2ec <xTaskGetTickCountFromISR>
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	e002      	b.n	8008e58 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008e52:	f001 fa3b 	bl	800a2cc <xTaskGetTickCount>
 8008e56:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008e58:	687b      	ldr	r3, [r7, #4]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b08e      	sub	sp, #56	; 0x38
 8008e66:	af04      	add	r7, sp, #16
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e72:	f3ef 8305 	mrs	r3, IPSR
 8008e76:	617b      	str	r3, [r7, #20]
  return(result);
 8008e78:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d17e      	bne.n	8008f7c <osThreadNew+0x11a>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d07b      	beq.n	8008f7c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e88:	2318      	movs	r3, #24
 8008e8a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d045      	beq.n	8008f28 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <osThreadNew+0x48>
        name = attr->name;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <osThreadNew+0x6e>
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2b38      	cmp	r3, #56	; 0x38
 8008ec2:	d805      	bhi.n	8008ed0 <osThreadNew+0x6e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <osThreadNew+0x72>
        return (NULL);
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e054      	b.n	8008f7e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	089b      	lsrs	r3, r3, #2
 8008ee2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00e      	beq.n	8008f0a <osThreadNew+0xa8>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2ba7      	cmp	r3, #167	; 0xa7
 8008ef2:	d90a      	bls.n	8008f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <osThreadNew+0xa8>
        mem = 1;
 8008f04:	2301      	movs	r3, #1
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e010      	b.n	8008f2c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <osThreadNew+0xca>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d108      	bne.n	8008f2c <osThreadNew+0xca>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <osThreadNew+0xca>
          mem = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	e001      	b.n	8008f2c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d110      	bne.n	8008f54 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f3a:	9202      	str	r2, [sp, #8]
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6a3a      	ldr	r2, [r7, #32]
 8008f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fe39 	bl	8009bc0 <xTaskCreateStatic>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	e013      	b.n	8008f7c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d110      	bne.n	8008f7c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	f107 0310 	add.w	r3, r7, #16
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 fe84 	bl	8009c7a <xTaskCreate>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d001      	beq.n	8008f7c <osThreadNew+0x11a>
            hTask = NULL;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f7c:	693b      	ldr	r3, [r7, #16]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f8e:	f3ef 8305 	mrs	r3, IPSR
 8008f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <osDelay+0x1c>
    stat = osErrorISR;
 8008f9a:	f06f 0305 	mvn.w	r3, #5
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e007      	b.n	8008fb2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 f83d 	bl	800a02c <vTaskDelay>
    }
  }

  return (stat);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc4:	f3ef 8305 	mrs	r3, IPSR
 8008fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fca:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008fd0:	f06f 0305 	mvn.w	r3, #5
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	e019      	b.n	800900c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008fdc:	f001 f976 	bl	800a2cc <xTaskGetTickCount>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <osDelayUntil+0x4a>
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db06      	blt.n	8009006 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	6939      	ldr	r1, [r7, #16]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 ff96 	bl	8009f30 <vTaskDelayUntil>
 8009004:	e002      	b.n	800900c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009006:	f06f 0303 	mvn.w	r3, #3
 800900a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800900c:	697b      	ldr	r3, [r7, #20]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a07      	ldr	r2, [pc, #28]	; (8009044 <vApplicationGetIdleTaskMemory+0x2c>)
 8009028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4a06      	ldr	r2, [pc, #24]	; (8009048 <vApplicationGetIdleTaskMemory+0x30>)
 800902e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2280      	movs	r2, #128	; 0x80
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000470 	.word	0x20000470
 8009048:	20000518 	.word	0x20000518

0800904c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4a07      	ldr	r2, [pc, #28]	; (8009078 <vApplicationGetTimerTaskMemory+0x2c>)
 800905c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	4a06      	ldr	r2, [pc, #24]	; (800907c <vApplicationGetTimerTaskMemory+0x30>)
 8009062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800906a:	601a      	str	r2, [r3, #0]
}
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000718 	.word	0x20000718
 800907c:	200007c0 	.word	0x200007c0

08009080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f103 0208 	add.w	r2, r3, #8
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f103 0208 	add.w	r2, r3, #8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f103 0208 	add.w	r2, r3, #8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009138:	d103      	bne.n	8009142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e00c      	b.n	800915c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3308      	adds	r3, #8
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e002      	b.n	8009150 <vListInsert+0x2e>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	d2f6      	bcs.n	800914a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	bf00      	nop
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6892      	ldr	r2, [r2, #8]
 80091aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6852      	ldr	r2, [r2, #4]
 80091b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d103      	bne.n	80091c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009212:	f002 f907 	bl	800b424 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009222:	fb01 f303 	mul.w	r3, r1, r3
 8009226:	441a      	add	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	3b01      	subs	r3, #1
 8009244:	68f9      	ldr	r1, [r7, #12]
 8009246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	441a      	add	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	22ff      	movs	r2, #255	; 0xff
 8009256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d114      	bne.n	8009292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01a      	beq.n	80092a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3310      	adds	r3, #16
 8009274:	4618      	mov	r0, r3
 8009276:	f001 f9b9 	bl	800a5ec <xTaskRemoveFromEventList>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009280:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <xQueueGenericReset+0xcc>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e009      	b.n	80092a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3310      	adds	r3, #16
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fef2 	bl	8009080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff feed 	bl	8009080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092a6:	f002 f8ed 	bl	800b484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092aa:	2301      	movs	r3, #1
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	; 0x38
 80092bc:	af02      	add	r7, sp, #8
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <xQueueGenericCreateStatic+0x52>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <xQueueGenericCreateStatic+0x56>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <xQueueGenericCreateStatic+0x58>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	623b      	str	r3, [r7, #32]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <xQueueGenericCreateStatic+0x7e>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <xQueueGenericCreateStatic+0x82>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <xQueueGenericCreateStatic+0x84>
 800933a:	2300      	movs	r3, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	61fb      	str	r3, [r7, #28]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009356:	2350      	movs	r3, #80	; 0x50
 8009358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b50      	cmp	r3, #80	; 0x50
 800935e:	d00a      	beq.n	8009376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	61bb      	str	r3, [r7, #24]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00d      	beq.n	800939e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800938a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f805 	bl	80093a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800939e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	; 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d103      	bne.n	80093c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	e002      	b.n	80093ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093d6:	2101      	movs	r1, #1
 80093d8:	69b8      	ldr	r0, [r7, #24]
 80093da:	f7ff ff05 	bl	80091e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08e      	sub	sp, #56	; 0x38
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093fe:	2300      	movs	r3, #0
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <xQueueGenericSend+0x32>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d103      	bne.n	8009430 <xQueueGenericSend+0x40>
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <xQueueGenericSend+0x44>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <xQueueGenericSend+0x46>
 8009434:	2300      	movs	r3, #0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <xQueueGenericSend+0x60>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b02      	cmp	r3, #2
 8009454:	d103      	bne.n	800945e <xQueueGenericSend+0x6e>
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <xQueueGenericSend+0x72>
 800945e:	2301      	movs	r3, #1
 8009460:	e000      	b.n	8009464 <xQueueGenericSend+0x74>
 8009462:	2300      	movs	r3, #0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <xQueueGenericSend+0x8e>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	623b      	str	r3, [r7, #32]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800947e:	f001 fa77 	bl	800a970 <xTaskGetSchedulerState>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <xQueueGenericSend+0x9e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <xQueueGenericSend+0xa2>
 800948e:	2301      	movs	r3, #1
 8009490:	e000      	b.n	8009494 <xQueueGenericSend+0xa4>
 8009492:	2300      	movs	r3, #0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xQueueGenericSend+0xbe>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	61fb      	str	r3, [r7, #28]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094ae:	f001 ffb9 	bl	800b424 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d302      	bcc.n	80094c4 <xQueueGenericSend+0xd4>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d129      	bne.n	8009518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ca:	f000 fa0b 	bl	80098e4 <prvCopyDataToQueue>
 80094ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	3324      	adds	r3, #36	; 0x24
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f885 	bl	800a5ec <xTaskRemoveFromEventList>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d013      	beq.n	8009510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094e8:	4b3f      	ldr	r3, [pc, #252]	; (80095e8 <xQueueGenericSend+0x1f8>)
 80094ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	e00a      	b.n	8009510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009500:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <xQueueGenericSend+0x1f8>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009510:	f001 ffb8 	bl	800b484 <vPortExitCritical>
				return pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	e063      	b.n	80095e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800951e:	f001 ffb1 	bl	800b484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009522:	2300      	movs	r3, #0
 8009524:	e05c      	b.n	80095e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	4618      	mov	r0, r3
 8009532:	f001 f8bf 	bl	800a6b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800953a:	f001 ffa3 	bl	800b484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800953e:	f000 fe19 	bl	800a174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009542:	f001 ff6f 	bl	800b424 <vPortEnterCritical>
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009552:	d103      	bne.n	800955c <xQueueGenericSend+0x16c>
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009562:	b25b      	sxtb	r3, r3
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009568:	d103      	bne.n	8009572 <xQueueGenericSend+0x182>
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009572:	f001 ff87 	bl	800b484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009576:	1d3a      	adds	r2, r7, #4
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f8ae 	bl	800a6e0 <xTaskCheckForTimeOut>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d124      	bne.n	80095d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800958a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958c:	f000 faa2 	bl	8009ad4 <prvIsQueueFull>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d018      	beq.n	80095c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	3310      	adds	r3, #16
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 ffd4 	bl	800a54c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a6:	f000 fa2d 	bl	8009a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095aa:	f000 fdf1 	bl	800a190 <xTaskResumeAll>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f af7c 	bne.w	80094ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <xQueueGenericSend+0x1f8>)
 80095b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	e772      	b.n	80094ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ca:	f000 fa1b 	bl	8009a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ce:	f000 fddf 	bl	800a190 <xTaskResumeAll>
 80095d2:	e76c      	b.n	80094ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095d6:	f000 fa15 	bl	8009a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095da:	f000 fdd9 	bl	800a190 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3738      	adds	r7, #56	; 0x38
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b090      	sub	sp, #64	; 0x40
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <xQueueGenericSendFromISR+0x3c>
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <xQueueGenericSendFromISR+0x40>
 8009628:	2301      	movs	r3, #1
 800962a:	e000      	b.n	800962e <xQueueGenericSendFromISR+0x42>
 800962c:	2300      	movs	r3, #0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d103      	bne.n	8009656 <xQueueGenericSendFromISR+0x6a>
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <xQueueGenericSendFromISR+0x6e>
 8009656:	2301      	movs	r3, #1
 8009658:	e000      	b.n	800965c <xQueueGenericSendFromISR+0x70>
 800965a:	2300      	movs	r3, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	623b      	str	r3, [r7, #32]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009676:	f001 ffb7 	bl	800b5e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800967a:	f3ef 8211 	mrs	r2, BASEPRI
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	61fa      	str	r2, [r7, #28]
 8009690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d302      	bcc.n	80096a8 <xQueueGenericSendFromISR+0xbc>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d12f      	bne.n	8009708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096be:	f000 f911 	bl	80098e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ca:	d112      	bne.n	80096f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d016      	beq.n	8009702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	3324      	adds	r3, #36	; 0x24
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 ff87 	bl	800a5ec <xTaskRemoveFromEventList>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00e      	beq.n	8009702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e007      	b.n	8009702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096f6:	3301      	adds	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	b25a      	sxtb	r2, r3
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009702:	2301      	movs	r3, #1
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009706:	e001      	b.n	800970c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800970c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800971a:	4618      	mov	r0, r3
 800971c:	3740      	adds	r7, #64	; 0x40
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08c      	sub	sp, #48	; 0x30
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009730:	2300      	movs	r3, #0
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <xQueueReceive+0x30>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	623b      	str	r3, [r7, #32]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <xQueueReceive+0x3e>
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <xQueueReceive+0x42>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueReceive+0x44>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <xQueueReceive+0x5e>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	61fb      	str	r3, [r7, #28]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009782:	f001 f8f5 	bl	800a970 <xTaskGetSchedulerState>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <xQueueReceive+0x6e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <xQueueReceive+0x72>
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <xQueueReceive+0x74>
 8009796:	2300      	movs	r3, #0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xQueueReceive+0x8e>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	61bb      	str	r3, [r7, #24]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097b2:	f001 fe37 	bl	800b424 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01f      	beq.n	8009802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c6:	f000 f8f7 	bl	80099b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00f      	beq.n	80097fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	3310      	adds	r3, #16
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 ff04 	bl	800a5ec <xTaskRemoveFromEventList>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097ea:	4b3d      	ldr	r3, [pc, #244]	; (80098e0 <xQueueReceive+0x1bc>)
 80097ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097fa:	f001 fe43 	bl	800b484 <vPortExitCritical>
				return pdPASS;
 80097fe:	2301      	movs	r3, #1
 8009800:	e069      	b.n	80098d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009808:	f001 fe3c 	bl	800b484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800980c:	2300      	movs	r3, #0
 800980e:	e062      	b.n	80098d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009816:	f107 0310 	add.w	r3, r7, #16
 800981a:	4618      	mov	r0, r3
 800981c:	f000 ff4a 	bl	800a6b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009824:	f001 fe2e 	bl	800b484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009828:	f000 fca4 	bl	800a174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800982c:	f001 fdfa 	bl	800b424 <vPortEnterCritical>
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009836:	b25b      	sxtb	r3, r3
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983c:	d103      	bne.n	8009846 <xQueueReceive+0x122>
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800984c:	b25b      	sxtb	r3, r3
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009852:	d103      	bne.n	800985c <xQueueReceive+0x138>
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985c:	f001 fe12 	bl	800b484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009860:	1d3a      	adds	r2, r7, #4
 8009862:	f107 0310 	add.w	r3, r7, #16
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f000 ff39 	bl	800a6e0 <xTaskCheckForTimeOut>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d123      	bne.n	80098bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009876:	f000 f917 	bl	8009aa8 <prvIsQueueEmpty>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d017      	beq.n	80098b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fe5f 	bl	800a54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800988e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009890:	f000 f8b8 	bl	8009a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009894:	f000 fc7c 	bl	800a190 <xTaskResumeAll>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d189      	bne.n	80097b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800989e:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <xQueueReceive+0x1bc>)
 80098a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	e780      	b.n	80097b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098b2:	f000 f8a7 	bl	8009a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b6:	f000 fc6b 	bl	800a190 <xTaskResumeAll>
 80098ba:	e77a      	b.n	80097b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098be:	f000 f8a1 	bl	8009a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c2:	f000 fc65 	bl	800a190 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098c8:	f000 f8ee 	bl	8009aa8 <prvIsQueueEmpty>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f43f af6f 	beq.w	80097b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3730      	adds	r7, #48	; 0x30
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10d      	bne.n	800991e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d14d      	bne.n	80099a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f84c 	bl	800a9ac <xTaskPriorityDisinherit>
 8009914:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	609a      	str	r2, [r3, #8]
 800991c:	e043      	b.n	80099a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d119      	bne.n	8009958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6858      	ldr	r0, [r3, #4]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	461a      	mov	r2, r3
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	f002 fdfc 	bl	800c52c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	441a      	add	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	d32b      	bcc.n	80099a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	e026      	b.n	80099a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68d8      	ldr	r0, [r3, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	461a      	mov	r2, r3
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	f002 fde2 	bl	800c52c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	425b      	negs	r3, r3
 8009972:	441a      	add	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d207      	bcs.n	8009994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	425b      	negs	r3, r3
 800998e:	441a      	add	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d105      	bne.n	80099a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099ae:	697b      	ldr	r3, [r7, #20]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d018      	beq.n	80099fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	441a      	add	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d303      	bcc.n	80099ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68d9      	ldr	r1, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f4:	461a      	mov	r2, r3
 80099f6:	6838      	ldr	r0, [r7, #0]
 80099f8:	f002 fd98 	bl	800c52c <memcpy>
	}
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a0c:	f001 fd0a 	bl	800b424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a18:	e011      	b.n	8009a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d012      	beq.n	8009a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3324      	adds	r3, #36	; 0x24
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fde0 	bl	800a5ec <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a32:	f000 feb7 	bl	800a7a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dce9      	bgt.n	8009a1a <prvUnlockQueue+0x16>
 8009a46:	e000      	b.n	8009a4a <prvUnlockQueue+0x46>
					break;
 8009a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a52:	f001 fd17 	bl	800b484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a56:	f001 fce5 	bl	800b424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a62:	e011      	b.n	8009a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d012      	beq.n	8009a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3310      	adds	r3, #16
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fdbb 	bl	800a5ec <xTaskRemoveFromEventList>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a7c:	f000 fe92 	bl	800a7a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dce9      	bgt.n	8009a64 <prvUnlockQueue+0x60>
 8009a90:	e000      	b.n	8009a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a9c:	f001 fcf2 	bl	800b484 <vPortExitCritical>
}
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ab0:	f001 fcb8 	bl	800b424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009abc:	2301      	movs	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	e001      	b.n	8009ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ac6:	f001 fcdd 	bl	800b484 <vPortExitCritical>

	return xReturn;
 8009aca:	68fb      	ldr	r3, [r7, #12]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009adc:	f001 fca2 	bl	800b424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d102      	bne.n	8009af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009aec:	2301      	movs	r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e001      	b.n	8009af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009af6:	f001 fcc5 	bl	800b484 <vPortExitCritical>

	return xReturn;
 8009afa:	68fb      	ldr	r3, [r7, #12]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e014      	b.n	8009b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b14:	4a0f      	ldr	r2, [pc, #60]	; (8009b54 <vQueueAddToRegistry+0x50>)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10b      	bne.n	8009b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b20:	490c      	ldr	r1, [pc, #48]	; (8009b54 <vQueueAddToRegistry+0x50>)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b2a:	4a0a      	ldr	r2, [pc, #40]	; (8009b54 <vQueueAddToRegistry+0x50>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b36:	e006      	b.n	8009b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b07      	cmp	r3, #7
 8009b42:	d9e7      	bls.n	8009b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000bc0 	.word	0x20000bc0

08009b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b68:	f001 fc5c 	bl	800b424 <vPortEnterCritical>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b72:	b25b      	sxtb	r3, r3
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b78:	d103      	bne.n	8009b82 <vQueueWaitForMessageRestricted+0x2a>
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b88:	b25b      	sxtb	r3, r3
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b8e:	d103      	bne.n	8009b98 <vQueueWaitForMessageRestricted+0x40>
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b98:	f001 fc74 	bl	800b484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3324      	adds	r3, #36	; 0x24
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	68b9      	ldr	r1, [r7, #8]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fcf1 	bl	800a594 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bb2:	6978      	ldr	r0, [r7, #20]
 8009bb4:	f7ff ff26 	bl	8009a04 <prvUnlockQueue>
	}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	623b      	str	r3, [r7, #32]
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	61fb      	str	r3, [r7, #28]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c06:	23a8      	movs	r3, #168	; 0xa8
 8009c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2ba8      	cmp	r3, #168	; 0xa8
 8009c0e:	d00a      	beq.n	8009c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61bb      	str	r3, [r7, #24]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d01e      	beq.n	8009c6c <xTaskCreateStatic+0xac>
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d01b      	beq.n	8009c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c46:	2300      	movs	r3, #0
 8009c48:	9303      	str	r3, [sp, #12]
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	f107 0314 	add.w	r3, r7, #20
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f850 	bl	8009d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c66:	f000 f8f3 	bl	8009e50 <prvAddNewTaskToReadyList>
 8009c6a:	e001      	b.n	8009c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c70:	697b      	ldr	r3, [r7, #20]
	}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3728      	adds	r7, #40	; 0x28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08c      	sub	sp, #48	; 0x30
 8009c7e:	af04      	add	r7, sp, #16
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c8a:	88fb      	ldrh	r3, [r7, #6]
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 fcea 	bl	800b668 <pvPortMalloc>
 8009c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00e      	beq.n	8009cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c9c:	20a8      	movs	r0, #168	; 0xa8
 8009c9e:	f001 fce3 	bl	800b668 <pvPortMalloc>
 8009ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb0:	e005      	b.n	8009cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cb2:	6978      	ldr	r0, [r7, #20]
 8009cb4:	f001 fda4 	bl	800b800 <vPortFree>
 8009cb8:	e001      	b.n	8009cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d017      	beq.n	8009cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9303      	str	r3, [sp, #12]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	9302      	str	r3, [sp, #8]
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f80e 	bl	8009d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ce8:	69f8      	ldr	r0, [r7, #28]
 8009cea:	f000 f8b1 	bl	8009e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	e002      	b.n	8009cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	21a5      	movs	r1, #165	; 0xa5
 8009d1e:	f002 fb81 	bl	800c424 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	617b      	str	r3, [r7, #20]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d01f      	beq.n	8009da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d62:	2300      	movs	r3, #0
 8009d64:	61fb      	str	r3, [r7, #28]
 8009d66:	e012      	b.n	8009d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	7819      	ldrb	r1, [r3, #0]
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	3334      	adds	r3, #52	; 0x34
 8009d78:	460a      	mov	r2, r1
 8009d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	4413      	add	r3, r2
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	2b0f      	cmp	r3, #15
 8009d92:	d9e9      	bls.n	8009d68 <prvInitialiseNewTask+0x64>
 8009d94:	e000      	b.n	8009d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009da0:	e003      	b.n	8009daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	2b37      	cmp	r3, #55	; 0x37
 8009dae:	d901      	bls.n	8009db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009db0:	2337      	movs	r3, #55	; 0x37
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff f978 	bl	80090c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	3318      	adds	r3, #24
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff f973 	bl	80090c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	3354      	adds	r3, #84	; 0x54
 8009e04:	224c      	movs	r2, #76	; 0x4c
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f002 fb0b 	bl	800c424 <memset>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	4a0c      	ldr	r2, [pc, #48]	; (8009e44 <prvInitialiseNewTask+0x140>)
 8009e12:	659a      	str	r2, [r3, #88]	; 0x58
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	4a0c      	ldr	r2, [pc, #48]	; (8009e48 <prvInitialiseNewTask+0x144>)
 8009e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	4a0b      	ldr	r2, [pc, #44]	; (8009e4c <prvInitialiseNewTask+0x148>)
 8009e1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	68f9      	ldr	r1, [r7, #12]
 8009e24:	69b8      	ldr	r0, [r7, #24]
 8009e26:	f001 f9d1 	bl	800b1cc <pxPortInitialiseStack>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e3c:	bf00      	nop
 8009e3e:	3720      	adds	r7, #32
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20006a34 	.word	0x20006a34
 8009e48:	20006a9c 	.word	0x20006a9c
 8009e4c:	20006b04 	.word	0x20006b04

08009e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e58:	f001 fae4 	bl	800b424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3301      	adds	r3, #1
 8009e62:	4a2c      	ldr	r2, [pc, #176]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e66:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e6e:	4a2a      	ldr	r2, [pc, #168]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e74:	4b27      	ldr	r3, [pc, #156]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d110      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e7c:	f000 fcb6 	bl	800a7ec <prvInitialiseTaskLists>
 8009e80:	e00d      	b.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e82:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d109      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d802      	bhi.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e9e:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a1e      	ldr	r2, [pc, #120]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d903      	bls.n	8009ec4 <prvAddNewTaskToReadyList+0x74>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	4a18      	ldr	r2, [pc, #96]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvAddNewTaskToReadyList+0xd8>)
 8009ed2:	441a      	add	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f7ff f8fd 	bl	80090da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 fad0 	bl	800b484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d207      	bcs.n	8009f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <prvAddNewTaskToReadyList+0xdc>)
 8009efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200010d4 	.word	0x200010d4
 8009f18:	20000c00 	.word	0x20000c00
 8009f1c:	200010e0 	.word	0x200010e0
 8009f20:	200010f0 	.word	0x200010f0
 8009f24:	200010dc 	.word	0x200010dc
 8009f28:	20000c04 	.word	0x20000c04
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <vTaskDelayUntil+0x2a>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	617b      	str	r3, [r7, #20]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <vTaskDelayUntil+0x46>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	613b      	str	r3, [r7, #16]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009f76:	4b2a      	ldr	r3, [pc, #168]	; (800a020 <vTaskDelayUntil+0xf0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <vTaskDelayUntil+0x64>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60fb      	str	r3, [r7, #12]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009f94:	f000 f8ee 	bl	800a174 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009f98:	4b22      	ldr	r3, [pc, #136]	; (800a024 <vTaskDelayUntil+0xf4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6a3a      	ldr	r2, [r7, #32]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d20b      	bcs.n	8009fca <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d211      	bcs.n	8009fe0 <vTaskDelayUntil+0xb0>
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d90d      	bls.n	8009fe0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc8:	e00a      	b.n	8009fe0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d303      	bcc.n	8009fdc <vTaskDelayUntil+0xac>
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d901      	bls.n	8009fe0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69fa      	ldr	r2, [r7, #28]
 8009fe4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d006      	beq.n	8009ffa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fd47 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009ffa:	f000 f8c9 	bl	800a190 <xTaskResumeAll>
 8009ffe:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d107      	bne.n	800a016 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a006:	4b08      	ldr	r3, [pc, #32]	; (800a028 <vTaskDelayUntil+0xf8>)
 800a008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a016:	bf00      	nop
 800a018:	3728      	adds	r7, #40	; 0x28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	200010fc 	.word	0x200010fc
 800a024:	200010d8 	.word	0x200010d8
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d017      	beq.n	800a06e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <vTaskDelay+0x60>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00a      	beq.n	800a05c <vTaskDelay+0x30>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60bb      	str	r3, [r7, #8]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a05c:	f000 f88a 	bl	800a174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fd10 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a068:	f000 f892 	bl	800a190 <xTaskResumeAll>
 800a06c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <vTaskDelay+0x64>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200010fc 	.word	0x200010fc
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0a2:	463a      	mov	r2, r7
 800a0a4:	1d39      	adds	r1, r7, #4
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe ffb4 	bl	8009018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	9202      	str	r2, [sp, #8]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	4924      	ldr	r1, [pc, #144]	; (800a154 <vTaskStartScheduler+0xc0>)
 800a0c4:	4824      	ldr	r0, [pc, #144]	; (800a158 <vTaskStartScheduler+0xc4>)
 800a0c6:	f7ff fd7b 	bl	8009bc0 <xTaskCreateStatic>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4a23      	ldr	r2, [pc, #140]	; (800a15c <vTaskStartScheduler+0xc8>)
 800a0ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0d0:	4b22      	ldr	r3, [pc, #136]	; (800a15c <vTaskStartScheduler+0xc8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	e001      	b.n	800a0e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d102      	bne.n	800a0ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0e8:	f000 fd22 	bl	800ab30 <xTimerCreateTimerTask>
 800a0ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d11b      	bne.n	800a12c <vTaskStartScheduler+0x98>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	613b      	str	r3, [r7, #16]
}
 800a106:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <vTaskStartScheduler+0xcc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3354      	adds	r3, #84	; 0x54
 800a10e:	4a15      	ldr	r2, [pc, #84]	; (800a164 <vTaskStartScheduler+0xd0>)
 800a110:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <vTaskStartScheduler+0xd4>)
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a118:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a11a:	4b14      	ldr	r3, [pc, #80]	; (800a16c <vTaskStartScheduler+0xd8>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a120:	4b13      	ldr	r3, [pc, #76]	; (800a170 <vTaskStartScheduler+0xdc>)
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a126:	f001 f8db 	bl	800b2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a12a:	e00e      	b.n	800a14a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a132:	d10a      	bne.n	800a14a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	60fb      	str	r3, [r7, #12]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <vTaskStartScheduler+0xb4>
}
 800a14a:	bf00      	nop
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	0800c628 	.word	0x0800c628
 800a158:	0800a7bd 	.word	0x0800a7bd
 800a15c:	200010f8 	.word	0x200010f8
 800a160:	20000c00 	.word	0x20000c00
 800a164:	2000014c 	.word	0x2000014c
 800a168:	200010f4 	.word	0x200010f4
 800a16c:	200010e0 	.word	0x200010e0
 800a170:	200010d8 	.word	0x200010d8

0800a174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <vTaskSuspendAll+0x18>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3301      	adds	r3, #1
 800a17e:	4a03      	ldr	r2, [pc, #12]	; (800a18c <vTaskSuspendAll+0x18>)
 800a180:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a182:	bf00      	nop
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	200010fc 	.word	0x200010fc

0800a190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a19e:	4b42      	ldr	r3, [pc, #264]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	603b      	str	r3, [r7, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1bc:	f001 f932 	bl	800b424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1c0:	4b39      	ldr	r3, [pc, #228]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	4a38      	ldr	r2, [pc, #224]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ca:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d162      	bne.n	800a298 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1d2:	4b36      	ldr	r3, [pc, #216]	; (800a2ac <xTaskResumeAll+0x11c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d05e      	beq.n	800a298 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1da:	e02f      	b.n	800a23c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1dc:	4b34      	ldr	r3, [pc, #208]	; (800a2b0 <xTaskResumeAll+0x120>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe ffd3 	bl	8009194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe ffce 	bl	8009194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	4b2d      	ldr	r3, [pc, #180]	; (800a2b4 <xTaskResumeAll+0x124>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <xTaskResumeAll+0x7c>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <xTaskResumeAll+0x124>)
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4a27      	ldr	r2, [pc, #156]	; (800a2b8 <xTaskResumeAll+0x128>)
 800a21a:	441a      	add	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fe ff59 	bl	80090da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <xTaskResumeAll+0x12c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	429a      	cmp	r2, r3
 800a234:	d302      	bcc.n	800a23c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a236:	4b22      	ldr	r3, [pc, #136]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a238:	2201      	movs	r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <xTaskResumeAll+0x120>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1cb      	bne.n	800a1dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a24a:	f000 fb71 	bl	800a930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a24e:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <xTaskResumeAll+0x134>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d010      	beq.n	800a27c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a25a:	f000 f859 	bl	800a310 <xTaskIncrementTick>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a266:	2201      	movs	r2, #1
 800a268:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f1      	bne.n	800a25a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <xTaskResumeAll+0x134>)
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a284:	2301      	movs	r3, #1
 800a286:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <xTaskResumeAll+0x138>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a298:	f001 f8f4 	bl	800b484 <vPortExitCritical>

	return xAlreadyYielded;
 800a29c:	68bb      	ldr	r3, [r7, #8]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200010fc 	.word	0x200010fc
 800a2ac:	200010d4 	.word	0x200010d4
 800a2b0:	20001094 	.word	0x20001094
 800a2b4:	200010dc 	.word	0x200010dc
 800a2b8:	20000c04 	.word	0x20000c04
 800a2bc:	20000c00 	.word	0x20000c00
 800a2c0:	200010e8 	.word	0x200010e8
 800a2c4:	200010e4 	.word	0x200010e4
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <xTaskGetTickCount+0x1c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2d8:	687b      	ldr	r3, [r7, #4]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	200010d8 	.word	0x200010d8

0800a2ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2f2:	f001 f979 	bl	800b5e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a2fa:	4b04      	ldr	r3, [pc, #16]	; (800a30c <xTaskGetTickCountFromISR+0x20>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a300:	683b      	ldr	r3, [r7, #0]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	200010d8 	.word	0x200010d8

0800a310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a31a:	4b4f      	ldr	r3, [pc, #316]	; (800a458 <xTaskIncrementTick+0x148>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 808f 	bne.w	800a442 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a324:	4b4d      	ldr	r3, [pc, #308]	; (800a45c <xTaskIncrementTick+0x14c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a32c:	4a4b      	ldr	r2, [pc, #300]	; (800a45c <xTaskIncrementTick+0x14c>)
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d120      	bne.n	800a37a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a338:	4b49      	ldr	r3, [pc, #292]	; (800a460 <xTaskIncrementTick+0x150>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <xTaskIncrementTick+0x48>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	603b      	str	r3, [r7, #0]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xTaskIncrementTick+0x46>
 800a358:	4b41      	ldr	r3, [pc, #260]	; (800a460 <xTaskIncrementTick+0x150>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	4b41      	ldr	r3, [pc, #260]	; (800a464 <xTaskIncrementTick+0x154>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a3f      	ldr	r2, [pc, #252]	; (800a460 <xTaskIncrementTick+0x150>)
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	4a3f      	ldr	r2, [pc, #252]	; (800a464 <xTaskIncrementTick+0x154>)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	4b3e      	ldr	r3, [pc, #248]	; (800a468 <xTaskIncrementTick+0x158>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3301      	adds	r3, #1
 800a372:	4a3d      	ldr	r2, [pc, #244]	; (800a468 <xTaskIncrementTick+0x158>)
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	f000 fadb 	bl	800a930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a37a:	4b3c      	ldr	r3, [pc, #240]	; (800a46c <xTaskIncrementTick+0x15c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	429a      	cmp	r2, r3
 800a382:	d349      	bcc.n	800a418 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a384:	4b36      	ldr	r3, [pc, #216]	; (800a460 <xTaskIncrementTick+0x150>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d104      	bne.n	800a398 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38e:	4b37      	ldr	r3, [pc, #220]	; (800a46c <xTaskIncrementTick+0x15c>)
 800a390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a394:	601a      	str	r2, [r3, #0]
					break;
 800a396:	e03f      	b.n	800a418 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a398:	4b31      	ldr	r3, [pc, #196]	; (800a460 <xTaskIncrementTick+0x150>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d203      	bcs.n	800a3b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3b0:	4a2e      	ldr	r2, [pc, #184]	; (800a46c <xTaskIncrementTick+0x15c>)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3b6:	e02f      	b.n	800a418 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe fee9 	bl	8009194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	3318      	adds	r3, #24
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe fee0 	bl	8009194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <xTaskIncrementTick+0x160>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d903      	bls.n	800a3e8 <xTaskIncrementTick+0xd8>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	4a22      	ldr	r2, [pc, #136]	; (800a470 <xTaskIncrementTick+0x160>)
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4a1f      	ldr	r2, [pc, #124]	; (800a474 <xTaskIncrementTick+0x164>)
 800a3f6:	441a      	add	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4610      	mov	r0, r2
 800a400:	f7fe fe6b 	bl	80090da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <xTaskIncrementTick+0x168>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	429a      	cmp	r2, r3
 800a410:	d3b8      	bcc.n	800a384 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a412:	2301      	movs	r3, #1
 800a414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a416:	e7b5      	b.n	800a384 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a418:	4b17      	ldr	r3, [pc, #92]	; (800a478 <xTaskIncrementTick+0x168>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	4915      	ldr	r1, [pc, #84]	; (800a474 <xTaskIncrementTick+0x164>)
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d901      	bls.n	800a434 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a430:	2301      	movs	r3, #1
 800a432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a434:	4b11      	ldr	r3, [pc, #68]	; (800a47c <xTaskIncrementTick+0x16c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d007      	beq.n	800a44c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e004      	b.n	800a44c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a442:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <xTaskIncrementTick+0x170>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	4a0d      	ldr	r2, [pc, #52]	; (800a480 <xTaskIncrementTick+0x170>)
 800a44a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a44c:	697b      	ldr	r3, [r7, #20]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	200010fc 	.word	0x200010fc
 800a45c:	200010d8 	.word	0x200010d8
 800a460:	2000108c 	.word	0x2000108c
 800a464:	20001090 	.word	0x20001090
 800a468:	200010ec 	.word	0x200010ec
 800a46c:	200010f4 	.word	0x200010f4
 800a470:	200010dc 	.word	0x200010dc
 800a474:	20000c04 	.word	0x20000c04
 800a478:	20000c00 	.word	0x20000c00
 800a47c:	200010e8 	.word	0x200010e8
 800a480:	200010e4 	.word	0x200010e4

0800a484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a48a:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <vTaskSwitchContext+0xb0>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a492:	4b29      	ldr	r3, [pc, #164]	; (800a538 <vTaskSwitchContext+0xb4>)
 800a494:	2201      	movs	r2, #1
 800a496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a498:	e046      	b.n	800a528 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a49a:	4b27      	ldr	r3, [pc, #156]	; (800a538 <vTaskSwitchContext+0xb4>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a0:	4b26      	ldr	r3, [pc, #152]	; (800a53c <vTaskSwitchContext+0xb8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	e010      	b.n	800a4ca <vTaskSwitchContext+0x46>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	607b      	str	r3, [r7, #4]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <vTaskSwitchContext+0x3e>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	491d      	ldr	r1, [pc, #116]	; (800a540 <vTaskSwitchContext+0xbc>)
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0e4      	beq.n	800a4a8 <vTaskSwitchContext+0x24>
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4a15      	ldr	r2, [pc, #84]	; (800a540 <vTaskSwitchContext+0xbc>)
 800a4ea:	4413      	add	r3, r2
 800a4ec:	60bb      	str	r3, [r7, #8]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	3308      	adds	r3, #8
 800a500:	429a      	cmp	r2, r3
 800a502:	d104      	bne.n	800a50e <vTaskSwitchContext+0x8a>
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	4a0b      	ldr	r2, [pc, #44]	; (800a544 <vTaskSwitchContext+0xc0>)
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	4a08      	ldr	r2, [pc, #32]	; (800a53c <vTaskSwitchContext+0xb8>)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <vTaskSwitchContext+0xc0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3354      	adds	r3, #84	; 0x54
 800a524:	4a08      	ldr	r2, [pc, #32]	; (800a548 <vTaskSwitchContext+0xc4>)
 800a526:	6013      	str	r3, [r2, #0]
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	200010fc 	.word	0x200010fc
 800a538:	200010e8 	.word	0x200010e8
 800a53c:	200010dc 	.word	0x200010dc
 800a540:	20000c04 	.word	0x20000c04
 800a544:	20000c00 	.word	0x20000c00
 800a548:	2000014c 	.word	0x2000014c

0800a54c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60fb      	str	r3, [r7, #12]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <vTaskPlaceOnEventList+0x44>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3318      	adds	r3, #24
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7fe fdd1 	bl	8009122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a580:	2101      	movs	r1, #1
 800a582:	6838      	ldr	r0, [r7, #0]
 800a584:	f000 fa80 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000c00 	.word	0x20000c00

0800a594 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10a      	bne.n	800a5bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	617b      	str	r3, [r7, #20]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7fe fd88 	bl	80090da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	68b8      	ldr	r0, [r7, #8]
 800a5da:	f000 fa55 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
	}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000c00 	.word	0x20000c00

0800a5ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	60fb      	str	r3, [r7, #12]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3318      	adds	r3, #24
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fdb9 	bl	8009194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a622:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <xTaskRemoveFromEventList+0xb0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d11d      	bne.n	800a666 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fdb0 	bl	8009194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <xTaskRemoveFromEventList+0xb4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d903      	bls.n	800a648 <xTaskRemoveFromEventList+0x5c>
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	4a16      	ldr	r2, [pc, #88]	; (800a6a0 <xTaskRemoveFromEventList+0xb4>)
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <xTaskRemoveFromEventList+0xb8>)
 800a656:	441a      	add	r2, r3
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	3304      	adds	r3, #4
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f7fe fd3b 	bl	80090da <vListInsertEnd>
 800a664:	e005      	b.n	800a672 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	3318      	adds	r3, #24
 800a66a:	4619      	mov	r1, r3
 800a66c:	480e      	ldr	r0, [pc, #56]	; (800a6a8 <xTaskRemoveFromEventList+0xbc>)
 800a66e:	f7fe fd34 	bl	80090da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <xTaskRemoveFromEventList+0xc0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d905      	bls.n	800a68c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <xTaskRemoveFromEventList+0xc4>)
 800a686:	2201      	movs	r2, #1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e001      	b.n	800a690 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a690:	697b      	ldr	r3, [r7, #20]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	200010fc 	.word	0x200010fc
 800a6a0:	200010dc 	.word	0x200010dc
 800a6a4:	20000c04 	.word	0x20000c04
 800a6a8:	20001094 	.word	0x20001094
 800a6ac:	20000c00 	.word	0x20000c00
 800a6b0:	200010e8 	.word	0x200010e8

0800a6b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <vTaskInternalSetTimeOutState+0x24>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <vTaskInternalSetTimeOutState+0x28>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	605a      	str	r2, [r3, #4]
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	200010ec 	.word	0x200010ec
 800a6dc:	200010d8 	.word	0x200010d8

0800a6e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	613b      	str	r3, [r7, #16]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	60fb      	str	r3, [r7, #12]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a722:	f000 fe7f 	bl	800b424 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a726:	4b1d      	ldr	r3, [pc, #116]	; (800a79c <xTaskCheckForTimeOut+0xbc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a73e:	d102      	bne.n	800a746 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a740:	2300      	movs	r3, #0
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	e023      	b.n	800a78e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <xTaskCheckForTimeOut+0xc0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d007      	beq.n	800a762 <xTaskCheckForTimeOut+0x82>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d302      	bcc.n	800a762 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	61fb      	str	r3, [r7, #28]
 800a760:	e015      	b.n	800a78e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d20b      	bcs.n	800a784 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	1ad2      	subs	r2, r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff ff9b 	bl	800a6b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	61fb      	str	r3, [r7, #28]
 800a782:	e004      	b.n	800a78e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2200      	movs	r2, #0
 800a788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a78e:	f000 fe79 	bl	800b484 <vPortExitCritical>

	return xReturn;
 800a792:	69fb      	ldr	r3, [r7, #28]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3720      	adds	r7, #32
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200010d8 	.word	0x200010d8
 800a7a0:	200010ec 	.word	0x200010ec

0800a7a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <vTaskMissedYield+0x14>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]
}
 800a7ae:	bf00      	nop
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	200010e8 	.word	0x200010e8

0800a7bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7c4:	f000 f852 	bl	800a86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7c8:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <prvIdleTask+0x28>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d9f9      	bls.n	800a7c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7d0:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <prvIdleTask+0x2c>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7e0:	e7f0      	b.n	800a7c4 <prvIdleTask+0x8>
 800a7e2:	bf00      	nop
 800a7e4:	20000c04 	.word	0x20000c04
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
 800a7f6:	e00c      	b.n	800a812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4a12      	ldr	r2, [pc, #72]	; (800a84c <prvInitialiseTaskLists+0x60>)
 800a804:	4413      	add	r3, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fc3a 	bl	8009080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3301      	adds	r3, #1
 800a810:	607b      	str	r3, [r7, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b37      	cmp	r3, #55	; 0x37
 800a816:	d9ef      	bls.n	800a7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a818:	480d      	ldr	r0, [pc, #52]	; (800a850 <prvInitialiseTaskLists+0x64>)
 800a81a:	f7fe fc31 	bl	8009080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a81e:	480d      	ldr	r0, [pc, #52]	; (800a854 <prvInitialiseTaskLists+0x68>)
 800a820:	f7fe fc2e 	bl	8009080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a824:	480c      	ldr	r0, [pc, #48]	; (800a858 <prvInitialiseTaskLists+0x6c>)
 800a826:	f7fe fc2b 	bl	8009080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a82a:	480c      	ldr	r0, [pc, #48]	; (800a85c <prvInitialiseTaskLists+0x70>)
 800a82c:	f7fe fc28 	bl	8009080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a830:	480b      	ldr	r0, [pc, #44]	; (800a860 <prvInitialiseTaskLists+0x74>)
 800a832:	f7fe fc25 	bl	8009080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <prvInitialiseTaskLists+0x78>)
 800a838:	4a05      	ldr	r2, [pc, #20]	; (800a850 <prvInitialiseTaskLists+0x64>)
 800a83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <prvInitialiseTaskLists+0x7c>)
 800a83e:	4a05      	ldr	r2, [pc, #20]	; (800a854 <prvInitialiseTaskLists+0x68>)
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000c04 	.word	0x20000c04
 800a850:	20001064 	.word	0x20001064
 800a854:	20001078 	.word	0x20001078
 800a858:	20001094 	.word	0x20001094
 800a85c:	200010a8 	.word	0x200010a8
 800a860:	200010c0 	.word	0x200010c0
 800a864:	2000108c 	.word	0x2000108c
 800a868:	20001090 	.word	0x20001090

0800a86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a872:	e019      	b.n	800a8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a874:	f000 fdd6 	bl	800b424 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a878:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <prvCheckTasksWaitingTermination+0x50>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3304      	adds	r3, #4
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fc85 	bl	8009194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <prvCheckTasksWaitingTermination+0x54>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3b01      	subs	r3, #1
 800a890:	4a0b      	ldr	r2, [pc, #44]	; (800a8c0 <prvCheckTasksWaitingTermination+0x54>)
 800a892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a894:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <prvCheckTasksWaitingTermination+0x58>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3b01      	subs	r3, #1
 800a89a:	4a0a      	ldr	r2, [pc, #40]	; (800a8c4 <prvCheckTasksWaitingTermination+0x58>)
 800a89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a89e:	f000 fdf1 	bl	800b484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f810 	bl	800a8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <prvCheckTasksWaitingTermination+0x58>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e1      	bne.n	800a874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	200010a8 	.word	0x200010a8
 800a8c0:	200010d4 	.word	0x200010d4
 800a8c4:	200010bc 	.word	0x200010bc

0800a8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3354      	adds	r3, #84	; 0x54
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fdad 	bl	800c434 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d108      	bne.n	800a8f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 ff89 	bl	800b800 <vPortFree>
				vPortFree( pxTCB );
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 ff86 	bl	800b800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8f4:	e018      	b.n	800a928 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d103      	bne.n	800a908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 ff7d 	bl	800b800 <vPortFree>
	}
 800a906:	e00f      	b.n	800a928 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d00a      	beq.n	800a928 <prvDeleteTCB+0x60>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60fb      	str	r3, [r7, #12]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <prvDeleteTCB+0x5e>
	}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvResetNextTaskUnblockTime+0x38>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <prvResetNextTaskUnblockTime+0x3c>)
 800a942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a948:	e008      	b.n	800a95c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <prvResetNextTaskUnblockTime+0x38>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	4a04      	ldr	r2, [pc, #16]	; (800a96c <prvResetNextTaskUnblockTime+0x3c>)
 800a95a:	6013      	str	r3, [r2, #0]
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	2000108c 	.word	0x2000108c
 800a96c:	200010f4 	.word	0x200010f4

0800a970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <xTaskGetSchedulerState+0x34>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a97e:	2301      	movs	r3, #1
 800a980:	607b      	str	r3, [r7, #4]
 800a982:	e008      	b.n	800a996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a984:	4b08      	ldr	r3, [pc, #32]	; (800a9a8 <xTaskGetSchedulerState+0x38>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a98c:	2302      	movs	r3, #2
 800a98e:	607b      	str	r3, [r7, #4]
 800a990:	e001      	b.n	800a996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a992:	2300      	movs	r3, #0
 800a994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a996:	687b      	ldr	r3, [r7, #4]
	}
 800a998:	4618      	mov	r0, r3
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	200010e0 	.word	0x200010e0
 800a9a8:	200010fc 	.word	0x200010fc

0800a9ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d056      	beq.n	800aa70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9c2:	4b2e      	ldr	r3, [pc, #184]	; (800aa7c <xTaskPriorityDisinherit+0xd0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d00a      	beq.n	800a9e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	60fb      	str	r3, [r7, #12]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10a      	bne.n	800aa00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	60bb      	str	r3, [r7, #8]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa04:	1e5a      	subs	r2, r3, #1
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d02c      	beq.n	800aa70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d128      	bne.n	800aa70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fbb6 	bl	8009194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <xTaskPriorityDisinherit+0xd4>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d903      	bls.n	800aa50 <xTaskPriorityDisinherit+0xa4>
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <xTaskPriorityDisinherit+0xd4>)
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <xTaskPriorityDisinherit+0xd8>)
 800aa5e:	441a      	add	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7fe fb37 	bl	80090da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa70:	697b      	ldr	r3, [r7, #20]
	}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3718      	adds	r7, #24
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000c00 	.word	0x20000c00
 800aa80:	200010dc 	.word	0x200010dc
 800aa84:	20000c04 	.word	0x20000c04

0800aa88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa92:	4b21      	ldr	r3, [pc, #132]	; (800ab18 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa98:	4b20      	ldr	r3, [pc, #128]	; (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fb78 	bl	8009194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaaa:	d10a      	bne.n	800aac2 <prvAddCurrentTaskToDelayedList+0x3a>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab2:	4b1a      	ldr	r3, [pc, #104]	; (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4819      	ldr	r0, [pc, #100]	; (800ab20 <prvAddCurrentTaskToDelayedList+0x98>)
 800aabc:	f7fe fb0d 	bl	80090da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aac0:	e026      	b.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4413      	add	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d209      	bcs.n	800aaee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aada:	4b12      	ldr	r3, [pc, #72]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7fe fb1b 	bl	8009122 <vListInsert>
}
 800aaec:	e010      	b.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaee:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fe fb11 	bl	8009122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d202      	bcs.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab0a:	4a08      	ldr	r2, [pc, #32]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6013      	str	r3, [r2, #0]
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	200010d8 	.word	0x200010d8
 800ab1c:	20000c00 	.word	0x20000c00
 800ab20:	200010c0 	.word	0x200010c0
 800ab24:	20001090 	.word	0x20001090
 800ab28:	2000108c 	.word	0x2000108c
 800ab2c:	200010f4 	.word	0x200010f4

0800ab30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	; 0x28
 800ab34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab3a:	f000 fb07 	bl	800b14c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab3e:	4b1c      	ldr	r3, [pc, #112]	; (800abb0 <xTimerCreateTimerTask+0x80>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d021      	beq.n	800ab8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab4e:	1d3a      	adds	r2, r7, #4
 800ab50:	f107 0108 	add.w	r1, r7, #8
 800ab54:	f107 030c 	add.w	r3, r7, #12
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe fa77 	bl	800904c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	9202      	str	r2, [sp, #8]
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	2302      	movs	r3, #2
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	460a      	mov	r2, r1
 800ab70:	4910      	ldr	r1, [pc, #64]	; (800abb4 <xTimerCreateTimerTask+0x84>)
 800ab72:	4811      	ldr	r0, [pc, #68]	; (800abb8 <xTimerCreateTimerTask+0x88>)
 800ab74:	f7ff f824 	bl	8009bc0 <xTaskCreateStatic>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4a10      	ldr	r2, [pc, #64]	; (800abbc <xTimerCreateTimerTask+0x8c>)
 800ab7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <xTimerCreateTimerTask+0x8c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab86:	2301      	movs	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	613b      	str	r3, [r7, #16]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aba6:	697b      	ldr	r3, [r7, #20]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20001130 	.word	0x20001130
 800abb4:	0800c630 	.word	0x0800c630
 800abb8:	0800acf5 	.word	0x0800acf5
 800abbc:	20001134 	.word	0x20001134

0800abc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08a      	sub	sp, #40	; 0x28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abce:	2300      	movs	r3, #0
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xTimerGenericCommand+0x2e>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	623b      	str	r3, [r7, #32]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abee:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <xTimerGenericCommand+0x98>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d02a      	beq.n	800ac4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b05      	cmp	r3, #5
 800ac06:	dc18      	bgt.n	800ac3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac08:	f7ff feb2 	bl	800a970 <xTaskGetSchedulerState>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d109      	bne.n	800ac26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <xTimerGenericCommand+0x98>)
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f107 0110 	add.w	r1, r7, #16
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1e:	f7fe fbe7 	bl	80093f0 <xQueueGenericSend>
 800ac22:	6278      	str	r0, [r7, #36]	; 0x24
 800ac24:	e012      	b.n	800ac4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <xTimerGenericCommand+0x98>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f107 0110 	add.w	r1, r7, #16
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2200      	movs	r2, #0
 800ac32:	f7fe fbdd 	bl	80093f0 <xQueueGenericSend>
 800ac36:	6278      	str	r0, [r7, #36]	; 0x24
 800ac38:	e008      	b.n	800ac4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac3a:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <xTimerGenericCommand+0x98>)
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f107 0110 	add.w	r1, r7, #16
 800ac42:	2300      	movs	r3, #0
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	f7fe fcd1 	bl	80095ec <xQueueGenericSendFromISR>
 800ac4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3728      	adds	r7, #40	; 0x28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20001130 	.word	0x20001130

0800ac5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac66:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <prvProcessExpiredTimer+0x94>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	3304      	adds	r3, #4
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe fa8d 	bl	8009194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d022      	beq.n	800acce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	699a      	ldr	r2, [r3, #24]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	18d1      	adds	r1, r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	6978      	ldr	r0, [r7, #20]
 800ac96:	f000 f8d1 	bl	800ae3c <prvInsertTimerInActiveList>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d01f      	beq.n	800ace0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aca0:	2300      	movs	r3, #0
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	2300      	movs	r3, #0
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	2100      	movs	r1, #0
 800acaa:	6978      	ldr	r0, [r7, #20]
 800acac:	f7ff ff88 	bl	800abc0 <xTimerGenericCommand>
 800acb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d113      	bne.n	800ace0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	60fb      	str	r3, [r7, #12]
}
 800acca:	bf00      	nop
 800accc:	e7fe      	b.n	800accc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acd4:	f023 0301 	bic.w	r3, r3, #1
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	4798      	blx	r3
}
 800ace8:	bf00      	nop
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20001128 	.word	0x20001128

0800acf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acfc:	f107 0308 	add.w	r3, r7, #8
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 f857 	bl	800adb4 <prvGetNextExpireTime>
 800ad06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f803 	bl	800ad18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad12:	f000 f8d5 	bl	800aec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad16:	e7f1      	b.n	800acfc <prvTimerTask+0x8>

0800ad18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad22:	f7ff fa27 	bl	800a174 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad26:	f107 0308 	add.w	r3, r7, #8
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f866 	bl	800adfc <prvSampleTimeNow>
 800ad30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d130      	bne.n	800ad9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <prvProcessTimerOrBlockTask+0x3c>
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d806      	bhi.n	800ad54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad46:	f7ff fa23 	bl	800a190 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff85 	bl	800ac5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad52:	e024      	b.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d008      	beq.n	800ad6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad5a:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <prvProcessTimerOrBlockTask+0x90>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <prvProcessTimerOrBlockTask+0x50>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <prvProcessTimerOrBlockTask+0x52>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad6c:	4b0f      	ldr	r3, [pc, #60]	; (800adac <prvProcessTimerOrBlockTask+0x94>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f7fe feed 	bl	8009b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad7e:	f7ff fa07 	bl	800a190 <xTaskResumeAll>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad88:	4b09      	ldr	r3, [pc, #36]	; (800adb0 <prvProcessTimerOrBlockTask+0x98>)
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	f3bf 8f6f 	isb	sy
}
 800ad98:	e001      	b.n	800ad9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad9a:	f7ff f9f9 	bl	800a190 <xTaskResumeAll>
}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	2000112c 	.word	0x2000112c
 800adac:	20001130 	.word	0x20001130
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <prvGetNextExpireTime+0x44>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <prvGetNextExpireTime+0x16>
 800adc6:	2201      	movs	r2, #1
 800adc8:	e000      	b.n	800adcc <prvGetNextExpireTime+0x18>
 800adca:	2200      	movs	r2, #0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <prvGetNextExpireTime+0x44>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e001      	b.n	800ade8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ade8:	68fb      	ldr	r3, [r7, #12]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	20001128 	.word	0x20001128

0800adfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae04:	f7ff fa62 	bl	800a2cc <xTaskGetTickCount>
 800ae08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <prvSampleTimeNow+0x3c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d205      	bcs.n	800ae20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae14:	f000 f936 	bl	800b084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e002      	b.n	800ae26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae26:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <prvSampleTimeNow+0x3c>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20001138 	.word	0x20001138

0800ae3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d812      	bhi.n	800ae88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d302      	bcc.n	800ae76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae70:	2301      	movs	r3, #1
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e01b      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <prvInsertTimerInActiveList+0x7c>)
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f7fe f94e 	bl	8009122 <vListInsert>
 800ae86:	e012      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d206      	bcs.n	800ae9e <prvInsertTimerInActiveList+0x62>
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e007      	b.n	800aeae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae9e:	4b07      	ldr	r3, [pc, #28]	; (800aebc <prvInsertTimerInActiveList+0x80>)
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f7fe f93a 	bl	8009122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aeae:	697b      	ldr	r3, [r7, #20]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	2000112c 	.word	0x2000112c
 800aebc:	20001128 	.word	0x20001128

0800aec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08e      	sub	sp, #56	; 0x38
 800aec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aec6:	e0ca      	b.n	800b05e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	da18      	bge.n	800af00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aece:	1d3b      	adds	r3, r7, #4
 800aed0:	3304      	adds	r3, #4
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	61fb      	str	r3, [r7, #28]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef6:	6850      	ldr	r0, [r2, #4]
 800aef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefa:	6892      	ldr	r2, [r2, #8]
 800aefc:	4611      	mov	r1, r2
 800aefe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f2c0 80ab 	blt.w	800b05e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	3304      	adds	r3, #4
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe f93b 	bl	8009194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af1e:	463b      	mov	r3, r7
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ff6b 	bl	800adfc <prvSampleTimeNow>
 800af26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b09      	cmp	r3, #9
 800af2c:	f200 8096 	bhi.w	800b05c <prvProcessReceivedCommands+0x19c>
 800af30:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <prvProcessReceivedCommands+0x78>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800af61 	.word	0x0800af61
 800af3c:	0800af61 	.word	0x0800af61
 800af40:	0800af61 	.word	0x0800af61
 800af44:	0800afd5 	.word	0x0800afd5
 800af48:	0800afe9 	.word	0x0800afe9
 800af4c:	0800b033 	.word	0x0800b033
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af61 	.word	0x0800af61
 800af58:	0800afd5 	.word	0x0800afd5
 800af5c:	0800afe9 	.word	0x0800afe9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af66:	f043 0301 	orr.w	r3, r3, #1
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	18d1      	adds	r1, r2, r3
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af80:	f7ff ff5c 	bl	800ae3c <prvInsertTimerInActiveList>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d069      	beq.n	800b05e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d05e      	beq.n	800b05e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	441a      	add	r2, r3
 800afa8:	2300      	movs	r3, #0
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	2300      	movs	r3, #0
 800afae:	2100      	movs	r1, #0
 800afb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afb2:	f7ff fe05 	bl	800abc0 <xTimerGenericCommand>
 800afb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d14f      	bne.n	800b05e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	61bb      	str	r3, [r7, #24]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afe6:	e03a      	b.n	800b05e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afee:	f043 0301 	orr.w	r3, r3, #1
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	617b      	str	r3, [r7, #20]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	18d1      	adds	r1, r2, r3
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b02c:	f7ff ff06 	bl	800ae3c <prvInsertTimerInActiveList>
					break;
 800b030:	e015      	b.n	800b05e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b038:	f003 0302 	and.w	r3, r3, #2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d103      	bne.n	800b048 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b042:	f000 fbdd 	bl	800b800 <vPortFree>
 800b046:	e00a      	b.n	800b05e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b04e:	f023 0301 	bic.w	r3, r3, #1
 800b052:	b2da      	uxtb	r2, r3
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b05a:	e000      	b.n	800b05e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b05c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b05e:	4b08      	ldr	r3, [pc, #32]	; (800b080 <prvProcessReceivedCommands+0x1c0>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	1d39      	adds	r1, r7, #4
 800b064:	2200      	movs	r2, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fb5c 	bl	8009724 <xQueueReceive>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f47f af2a 	bne.w	800aec8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	3730      	adds	r7, #48	; 0x30
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20001130 	.word	0x20001130

0800b084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b08a:	e048      	b.n	800b11e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b08c:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b096:	4b2b      	ldr	r3, [pc, #172]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe f875 	bl	8009194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d02e      	beq.n	800b11e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d90e      	bls.n	800b0f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0de:	4b19      	ldr	r3, [pc, #100]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	f7fe f81a 	bl	8009122 <vListInsert>
 800b0ee:	e016      	b.n	800b11e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff fd60 	bl	800abc0 <xTimerGenericCommand>
 800b100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	603b      	str	r3, [r7, #0]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1b1      	bne.n	800b08c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b128:	4b06      	ldr	r3, [pc, #24]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <prvSwitchTimerLists+0xc4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a04      	ldr	r2, [pc, #16]	; (800b144 <prvSwitchTimerLists+0xc0>)
 800b134:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b136:	4a04      	ldr	r2, [pc, #16]	; (800b148 <prvSwitchTimerLists+0xc4>)
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6013      	str	r3, [r2, #0]
}
 800b13c:	bf00      	nop
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	20001128 	.word	0x20001128
 800b148:	2000112c 	.word	0x2000112c

0800b14c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b152:	f000 f967 	bl	800b424 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b156:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <prvCheckForValidListAndQueue+0x60>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d120      	bne.n	800b1a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b15e:	4814      	ldr	r0, [pc, #80]	; (800b1b0 <prvCheckForValidListAndQueue+0x64>)
 800b160:	f7fd ff8e 	bl	8009080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b164:	4813      	ldr	r0, [pc, #76]	; (800b1b4 <prvCheckForValidListAndQueue+0x68>)
 800b166:	f7fd ff8b 	bl	8009080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b16a:	4b13      	ldr	r3, [pc, #76]	; (800b1b8 <prvCheckForValidListAndQueue+0x6c>)
 800b16c:	4a10      	ldr	r2, [pc, #64]	; (800b1b0 <prvCheckForValidListAndQueue+0x64>)
 800b16e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b170:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <prvCheckForValidListAndQueue+0x70>)
 800b172:	4a10      	ldr	r2, [pc, #64]	; (800b1b4 <prvCheckForValidListAndQueue+0x68>)
 800b174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b176:	2300      	movs	r3, #0
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <prvCheckForValidListAndQueue+0x74>)
 800b17c:	4a11      	ldr	r2, [pc, #68]	; (800b1c4 <prvCheckForValidListAndQueue+0x78>)
 800b17e:	2110      	movs	r1, #16
 800b180:	200a      	movs	r0, #10
 800b182:	f7fe f899 	bl	80092b8 <xQueueGenericCreateStatic>
 800b186:	4603      	mov	r3, r0
 800b188:	4a08      	ldr	r2, [pc, #32]	; (800b1ac <prvCheckForValidListAndQueue+0x60>)
 800b18a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b18c:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <prvCheckForValidListAndQueue+0x60>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b194:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <prvCheckForValidListAndQueue+0x60>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	490b      	ldr	r1, [pc, #44]	; (800b1c8 <prvCheckForValidListAndQueue+0x7c>)
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fcb2 	bl	8009b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1a0:	f000 f970 	bl	800b484 <vPortExitCritical>
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20001130 	.word	0x20001130
 800b1b0:	20001100 	.word	0x20001100
 800b1b4:	20001114 	.word	0x20001114
 800b1b8:	20001128 	.word	0x20001128
 800b1bc:	2000112c 	.word	0x2000112c
 800b1c0:	200011dc 	.word	0x200011dc
 800b1c4:	2000113c 	.word	0x2000113c
 800b1c8:	0800c638 	.word	0x0800c638

0800b1cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3b04      	subs	r3, #4
 800b1dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3b04      	subs	r3, #4
 800b1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f023 0201 	bic.w	r2, r3, #1
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3b04      	subs	r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1fc:	4a0c      	ldr	r2, [pc, #48]	; (800b230 <pxPortInitialiseStack+0x64>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3b14      	subs	r3, #20
 800b206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3b04      	subs	r3, #4
 800b212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f06f 0202 	mvn.w	r2, #2
 800b21a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3b20      	subs	r3, #32
 800b220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b222:	68fb      	ldr	r3, [r7, #12]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	0800b235 	.word	0x0800b235

0800b234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b23e:	4b12      	ldr	r3, [pc, #72]	; (800b288 <prvTaskExitError+0x54>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b246:	d00a      	beq.n	800b25e <prvTaskExitError+0x2a>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	60fb      	str	r3, [r7, #12]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <prvTaskExitError+0x28>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60bb      	str	r3, [r7, #8]
}
 800b270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b272:	bf00      	nop
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0fc      	beq.n	800b274 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000098 	.word	0x20000098
 800b28c:	00000000 	.word	0x00000000

0800b290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <pxCurrentTCBConst2>)
 800b292:	6819      	ldr	r1, [r3, #0]
 800b294:	6808      	ldr	r0, [r1, #0]
 800b296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29a:	f380 8809 	msr	PSP, r0
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f380 8811 	msr	BASEPRI, r0
 800b2aa:	4770      	bx	lr
 800b2ac:	f3af 8000 	nop.w

0800b2b0 <pxCurrentTCBConst2>:
 800b2b0:	20000c00 	.word	0x20000c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop

0800b2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2b8:	4808      	ldr	r0, [pc, #32]	; (800b2dc <prvPortStartFirstTask+0x24>)
 800b2ba:	6800      	ldr	r0, [r0, #0]
 800b2bc:	6800      	ldr	r0, [r0, #0]
 800b2be:	f380 8808 	msr	MSP, r0
 800b2c2:	f04f 0000 	mov.w	r0, #0
 800b2c6:	f380 8814 	msr	CONTROL, r0
 800b2ca:	b662      	cpsie	i
 800b2cc:	b661      	cpsie	f
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	df00      	svc	0
 800b2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2da:	bf00      	nop
 800b2dc:	e000ed08 	.word	0xe000ed08

0800b2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2e6:	4b46      	ldr	r3, [pc, #280]	; (800b400 <xPortStartScheduler+0x120>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a46      	ldr	r2, [pc, #280]	; (800b404 <xPortStartScheduler+0x124>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d10a      	bne.n	800b306 <xPortStartScheduler+0x26>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	613b      	str	r3, [r7, #16]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b306:	4b3e      	ldr	r3, [pc, #248]	; (800b400 <xPortStartScheduler+0x120>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a3f      	ldr	r2, [pc, #252]	; (800b408 <xPortStartScheduler+0x128>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d10a      	bne.n	800b326 <xPortStartScheduler+0x46>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	60fb      	str	r3, [r7, #12]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b326:	4b39      	ldr	r3, [pc, #228]	; (800b40c <xPortStartScheduler+0x12c>)
 800b328:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	22ff      	movs	r2, #255	; 0xff
 800b336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	4b31      	ldr	r3, [pc, #196]	; (800b410 <xPortStartScheduler+0x130>)
 800b34c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b34e:	4b31      	ldr	r3, [pc, #196]	; (800b414 <xPortStartScheduler+0x134>)
 800b350:	2207      	movs	r2, #7
 800b352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b354:	e009      	b.n	800b36a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b356:	4b2f      	ldr	r3, [pc, #188]	; (800b414 <xPortStartScheduler+0x134>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	4a2d      	ldr	r2, [pc, #180]	; (800b414 <xPortStartScheduler+0x134>)
 800b35e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	b2db      	uxtb	r3, r3
 800b368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b372:	2b80      	cmp	r3, #128	; 0x80
 800b374:	d0ef      	beq.n	800b356 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b376:	4b27      	ldr	r3, [pc, #156]	; (800b414 <xPortStartScheduler+0x134>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f1c3 0307 	rsb	r3, r3, #7
 800b37e:	2b04      	cmp	r3, #4
 800b380:	d00a      	beq.n	800b398 <xPortStartScheduler+0xb8>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	60bb      	str	r3, [r7, #8]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b398:	4b1e      	ldr	r3, [pc, #120]	; (800b414 <xPortStartScheduler+0x134>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	4a1d      	ldr	r2, [pc, #116]	; (800b414 <xPortStartScheduler+0x134>)
 800b3a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <xPortStartScheduler+0x134>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3aa:	4a1a      	ldr	r2, [pc, #104]	; (800b414 <xPortStartScheduler+0x134>)
 800b3ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3b6:	4b18      	ldr	r3, [pc, #96]	; (800b418 <xPortStartScheduler+0x138>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a17      	ldr	r2, [pc, #92]	; (800b418 <xPortStartScheduler+0x138>)
 800b3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3c2:	4b15      	ldr	r3, [pc, #84]	; (800b418 <xPortStartScheduler+0x138>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a14      	ldr	r2, [pc, #80]	; (800b418 <xPortStartScheduler+0x138>)
 800b3c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3ce:	f000 f8dd 	bl	800b58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3d2:	4b12      	ldr	r3, [pc, #72]	; (800b41c <xPortStartScheduler+0x13c>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3d8:	f000 f8fc 	bl	800b5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3dc:	4b10      	ldr	r3, [pc, #64]	; (800b420 <xPortStartScheduler+0x140>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a0f      	ldr	r2, [pc, #60]	; (800b420 <xPortStartScheduler+0x140>)
 800b3e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3e8:	f7ff ff66 	bl	800b2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3ec:	f7ff f84a 	bl	800a484 <vTaskSwitchContext>
	prvTaskExitError();
 800b3f0:	f7ff ff20 	bl	800b234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	e000ed00 	.word	0xe000ed00
 800b404:	410fc271 	.word	0x410fc271
 800b408:	410fc270 	.word	0x410fc270
 800b40c:	e000e400 	.word	0xe000e400
 800b410:	2000122c 	.word	0x2000122c
 800b414:	20001230 	.word	0x20001230
 800b418:	e000ed20 	.word	0xe000ed20
 800b41c:	20000098 	.word	0x20000098
 800b420:	e000ef34 	.word	0xe000ef34

0800b424 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	607b      	str	r3, [r7, #4]
}
 800b43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b43e:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <vPortEnterCritical+0x58>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	4a0d      	ldr	r2, [pc, #52]	; (800b47c <vPortEnterCritical+0x58>)
 800b446:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <vPortEnterCritical+0x58>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d10f      	bne.n	800b470 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b450:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <vPortEnterCritical+0x5c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <vPortEnterCritical+0x4c>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	603b      	str	r3, [r7, #0]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <vPortEnterCritical+0x4a>
	}
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	20000098 	.word	0x20000098
 800b480:	e000ed04 	.word	0xe000ed04

0800b484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b48a:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <vPortExitCritical+0x50>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <vPortExitCritical+0x24>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	607b      	str	r3, [r7, #4]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <vPortExitCritical+0x50>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	4a09      	ldr	r2, [pc, #36]	; (800b4d4 <vPortExitCritical+0x50>)
 800b4b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4b2:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <vPortExitCritical+0x50>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d105      	bne.n	800b4c6 <vPortExitCritical+0x42>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	f383 8811 	msr	BASEPRI, r3
}
 800b4c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20000098 	.word	0x20000098
	...

0800b4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4e0:	f3ef 8009 	mrs	r0, PSP
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	4b15      	ldr	r3, [pc, #84]	; (800b540 <pxCurrentTCBConst>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	f01e 0f10 	tst.w	lr, #16
 800b4f0:	bf08      	it	eq
 800b4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fa:	6010      	str	r0, [r2, #0]
 800b4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b504:	f380 8811 	msr	BASEPRI, r0
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f7fe ffb8 	bl	800a484 <vTaskSwitchContext>
 800b514:	f04f 0000 	mov.w	r0, #0
 800b518:	f380 8811 	msr	BASEPRI, r0
 800b51c:	bc09      	pop	{r0, r3}
 800b51e:	6819      	ldr	r1, [r3, #0]
 800b520:	6808      	ldr	r0, [r1, #0]
 800b522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b526:	f01e 0f10 	tst.w	lr, #16
 800b52a:	bf08      	it	eq
 800b52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b530:	f380 8809 	msr	PSP, r0
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	f3af 8000 	nop.w

0800b540 <pxCurrentTCBConst>:
 800b540:	20000c00 	.word	0x20000c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop

0800b548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b562:	f7fe fed5 	bl	800a310 <xTaskIncrementTick>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <xPortSysTickHandler+0x40>)
 800b56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	2300      	movs	r3, #0
 800b576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	f383 8811 	msr	BASEPRI, r3
}
 800b57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <vPortSetupTimerInterrupt+0x34>)
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b596:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <vPortSetupTimerInterrupt+0x38>)
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b59c:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <vPortSetupTimerInterrupt+0x3c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0a      	ldr	r2, [pc, #40]	; (800b5cc <vPortSetupTimerInterrupt+0x40>)
 800b5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a6:	099b      	lsrs	r3, r3, #6
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <vPortSetupTimerInterrupt+0x44>)
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5ae:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <vPortSetupTimerInterrupt+0x34>)
 800b5b0:	2207      	movs	r2, #7
 800b5b2:	601a      	str	r2, [r3, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	e000e010 	.word	0xe000e010
 800b5c4:	e000e018 	.word	0xe000e018
 800b5c8:	20000000 	.word	0x20000000
 800b5cc:	10624dd3 	.word	0x10624dd3
 800b5d0:	e000e014 	.word	0xe000e014

0800b5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5e4 <vPortEnableVFP+0x10>
 800b5d8:	6801      	ldr	r1, [r0, #0]
 800b5da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5de:	6001      	str	r1, [r0, #0]
 800b5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5e2:	bf00      	nop
 800b5e4:	e000ed88 	.word	0xe000ed88

0800b5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5ee:	f3ef 8305 	mrs	r3, IPSR
 800b5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b0f      	cmp	r3, #15
 800b5f8:	d914      	bls.n	800b624 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5fa:	4a17      	ldr	r2, [pc, #92]	; (800b658 <vPortValidateInterruptPriority+0x70>)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b604:	4b15      	ldr	r3, [pc, #84]	; (800b65c <vPortValidateInterruptPriority+0x74>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	7afa      	ldrb	r2, [r7, #11]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d20a      	bcs.n	800b624 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	607b      	str	r3, [r7, #4]
}
 800b620:	bf00      	nop
 800b622:	e7fe      	b.n	800b622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <vPortValidateInterruptPriority+0x78>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b62c:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <vPortValidateInterruptPriority+0x7c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d90a      	bls.n	800b64a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	603b      	str	r3, [r7, #0]
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <vPortValidateInterruptPriority+0x60>
	}
 800b64a:	bf00      	nop
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	e000e3f0 	.word	0xe000e3f0
 800b65c:	2000122c 	.word	0x2000122c
 800b660:	e000ed0c 	.word	0xe000ed0c
 800b664:	20001230 	.word	0x20001230

0800b668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08a      	sub	sp, #40	; 0x28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b674:	f7fe fd7e 	bl	800a174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b678:	4b5b      	ldr	r3, [pc, #364]	; (800b7e8 <pvPortMalloc+0x180>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b680:	f000 f920 	bl	800b8c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b684:	4b59      	ldr	r3, [pc, #356]	; (800b7ec <pvPortMalloc+0x184>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4013      	ands	r3, r2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f040 8093 	bne.w	800b7b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01d      	beq.n	800b6d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b698:	2208      	movs	r2, #8
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d014      	beq.n	800b6d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f023 0307 	bic.w	r3, r3, #7
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	617b      	str	r3, [r7, #20]
}
 800b6d0:	bf00      	nop
 800b6d2:	e7fe      	b.n	800b6d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d06e      	beq.n	800b7b8 <pvPortMalloc+0x150>
 800b6da:	4b45      	ldr	r3, [pc, #276]	; (800b7f0 <pvPortMalloc+0x188>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d869      	bhi.n	800b7b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6e4:	4b43      	ldr	r3, [pc, #268]	; (800b7f4 <pvPortMalloc+0x18c>)
 800b6e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6e8:	4b42      	ldr	r3, [pc, #264]	; (800b7f4 <pvPortMalloc+0x18c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ee:	e004      	b.n	800b6fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d903      	bls.n	800b70c <pvPortMalloc+0xa4>
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f1      	bne.n	800b6f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b70c:	4b36      	ldr	r3, [pc, #216]	; (800b7e8 <pvPortMalloc+0x180>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b712:	429a      	cmp	r2, r3
 800b714:	d050      	beq.n	800b7b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2208      	movs	r2, #8
 800b71c:	4413      	add	r3, r2
 800b71e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	2308      	movs	r3, #8
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	429a      	cmp	r2, r3
 800b736:	d91f      	bls.n	800b778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4413      	add	r3, r2
 800b73e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <pvPortMalloc+0xf8>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	613b      	str	r3, [r7, #16]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b772:	69b8      	ldr	r0, [r7, #24]
 800b774:	f000 f908 	bl	800b988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b778:	4b1d      	ldr	r3, [pc, #116]	; (800b7f0 <pvPortMalloc+0x188>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	4a1b      	ldr	r2, [pc, #108]	; (800b7f0 <pvPortMalloc+0x188>)
 800b784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b786:	4b1a      	ldr	r3, [pc, #104]	; (800b7f0 <pvPortMalloc+0x188>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b1b      	ldr	r3, [pc, #108]	; (800b7f8 <pvPortMalloc+0x190>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d203      	bcs.n	800b79a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b792:	4b17      	ldr	r3, [pc, #92]	; (800b7f0 <pvPortMalloc+0x188>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a18      	ldr	r2, [pc, #96]	; (800b7f8 <pvPortMalloc+0x190>)
 800b798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <pvPortMalloc+0x184>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7ae:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <pvPortMalloc+0x194>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	4a11      	ldr	r2, [pc, #68]	; (800b7fc <pvPortMalloc+0x194>)
 800b7b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7b8:	f7fe fcea 	bl	800a190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <pvPortMalloc+0x174>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60fb      	str	r3, [r7, #12]
}
 800b7d8:	bf00      	nop
 800b7da:	e7fe      	b.n	800b7da <pvPortMalloc+0x172>
	return pvReturn;
 800b7dc:	69fb      	ldr	r3, [r7, #28]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3728      	adds	r7, #40	; 0x28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20004e3c 	.word	0x20004e3c
 800b7ec:	20004e50 	.word	0x20004e50
 800b7f0:	20004e40 	.word	0x20004e40
 800b7f4:	20004e34 	.word	0x20004e34
 800b7f8:	20004e44 	.word	0x20004e44
 800b7fc:	20004e48 	.word	0x20004e48

0800b800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d04d      	beq.n	800b8ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b812:	2308      	movs	r3, #8
 800b814:	425b      	negs	r3, r3
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	4b24      	ldr	r3, [pc, #144]	; (800b8b8 <vPortFree+0xb8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4013      	ands	r3, r2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10a      	bne.n	800b844 <vPortFree+0x44>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	60fb      	str	r3, [r7, #12]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00a      	beq.n	800b862 <vPortFree+0x62>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	60bb      	str	r3, [r7, #8]
}
 800b85e:	bf00      	nop
 800b860:	e7fe      	b.n	800b860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <vPortFree+0xb8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4013      	ands	r3, r2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01e      	beq.n	800b8ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11a      	bne.n	800b8ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	4b0e      	ldr	r3, [pc, #56]	; (800b8b8 <vPortFree+0xb8>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	43db      	mvns	r3, r3
 800b882:	401a      	ands	r2, r3
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b888:	f7fe fc74 	bl	800a174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <vPortFree+0xbc>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4413      	add	r3, r2
 800b896:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <vPortFree+0xbc>)
 800b898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f000 f874 	bl	800b988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <vPortFree+0xc0>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	4a06      	ldr	r2, [pc, #24]	; (800b8c0 <vPortFree+0xc0>)
 800b8a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8aa:	f7fe fc71 	bl	800a190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8ae:	bf00      	nop
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20004e50 	.word	0x20004e50
 800b8bc:	20004e40 	.word	0x20004e40
 800b8c0:	20004e4c 	.word	0x20004e4c

0800b8c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8d0:	4b27      	ldr	r3, [pc, #156]	; (800b970 <prvHeapInit+0xac>)
 800b8d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00c      	beq.n	800b8f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3307      	adds	r3, #7
 800b8e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0307 	bic.w	r3, r3, #7
 800b8ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	4a1f      	ldr	r2, [pc, #124]	; (800b970 <prvHeapInit+0xac>)
 800b8f4:	4413      	add	r3, r2
 800b8f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8fc:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <prvHeapInit+0xb0>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b902:	4b1c      	ldr	r3, [pc, #112]	; (800b974 <prvHeapInit+0xb0>)
 800b904:	2200      	movs	r2, #0
 800b906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4413      	add	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b910:	2208      	movs	r2, #8
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	1a9b      	subs	r3, r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0307 	bic.w	r3, r3, #7
 800b91e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4a15      	ldr	r2, [pc, #84]	; (800b978 <prvHeapInit+0xb4>)
 800b924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b926:	4b14      	ldr	r3, [pc, #80]	; (800b978 <prvHeapInit+0xb4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2200      	movs	r2, #0
 800b92c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <prvHeapInit+0xb4>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2200      	movs	r2, #0
 800b934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	1ad2      	subs	r2, r2, r3
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b944:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <prvHeapInit+0xb4>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	4a0a      	ldr	r2, [pc, #40]	; (800b97c <prvHeapInit+0xb8>)
 800b952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	4a09      	ldr	r2, [pc, #36]	; (800b980 <prvHeapInit+0xbc>)
 800b95a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b95c:	4b09      	ldr	r3, [pc, #36]	; (800b984 <prvHeapInit+0xc0>)
 800b95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b962:	601a      	str	r2, [r3, #0]
}
 800b964:	bf00      	nop
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	20001234 	.word	0x20001234
 800b974:	20004e34 	.word	0x20004e34
 800b978:	20004e3c 	.word	0x20004e3c
 800b97c:	20004e44 	.word	0x20004e44
 800b980:	20004e40 	.word	0x20004e40
 800b984:	20004e50 	.word	0x20004e50

0800b988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b990:	4b28      	ldr	r3, [pc, #160]	; (800ba34 <prvInsertBlockIntoFreeList+0xac>)
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e002      	b.n	800b99c <prvInsertBlockIntoFreeList+0x14>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d8f7      	bhi.n	800b996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d108      	bne.n	800b9ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	441a      	add	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	441a      	add	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d118      	bne.n	800ba10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <prvInsertBlockIntoFreeList+0xb0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d00d      	beq.n	800ba06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	441a      	add	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e008      	b.n	800ba18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba06:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <prvInsertBlockIntoFreeList+0xb0>)
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	e003      	b.n	800ba18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d002      	beq.n	800ba26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba26:	bf00      	nop
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20004e34 	.word	0x20004e34
 800ba38:	20004e3c 	.word	0x20004e3c

0800ba3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba40:	2200      	movs	r2, #0
 800ba42:	4912      	ldr	r1, [pc, #72]	; (800ba8c <MX_USB_DEVICE_Init+0x50>)
 800ba44:	4812      	ldr	r0, [pc, #72]	; (800ba90 <MX_USB_DEVICE_Init+0x54>)
 800ba46:	f7fb fe71 	bl	800772c <USBD_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba50:	f7f5 f8c8 	bl	8000be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba54:	490f      	ldr	r1, [pc, #60]	; (800ba94 <MX_USB_DEVICE_Init+0x58>)
 800ba56:	480e      	ldr	r0, [pc, #56]	; (800ba90 <MX_USB_DEVICE_Init+0x54>)
 800ba58:	f7fb fe98 	bl	800778c <USBD_RegisterClass>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba62:	f7f5 f8bf 	bl	8000be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba66:	490c      	ldr	r1, [pc, #48]	; (800ba98 <MX_USB_DEVICE_Init+0x5c>)
 800ba68:	4809      	ldr	r0, [pc, #36]	; (800ba90 <MX_USB_DEVICE_Init+0x54>)
 800ba6a:	f7fb fdcf 	bl	800760c <USBD_CDC_RegisterInterface>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba74:	f7f5 f8b6 	bl	8000be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba78:	4805      	ldr	r0, [pc, #20]	; (800ba90 <MX_USB_DEVICE_Init+0x54>)
 800ba7a:	f7fb febd 	bl	80077f8 <USBD_Start>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba84:	f7f5 f8ae 	bl	8000be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba88:	bf00      	nop
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	200000b0 	.word	0x200000b0
 800ba90:	20004e54 	.word	0x20004e54
 800ba94:	20000018 	.word	0x20000018
 800ba98:	2000009c 	.word	0x2000009c

0800ba9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800baa0:	2200      	movs	r2, #0
 800baa2:	4905      	ldr	r1, [pc, #20]	; (800bab8 <CDC_Init_FS+0x1c>)
 800baa4:	4805      	ldr	r0, [pc, #20]	; (800babc <CDC_Init_FS+0x20>)
 800baa6:	f7fb fdcb 	bl	8007640 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baaa:	4905      	ldr	r1, [pc, #20]	; (800bac0 <CDC_Init_FS+0x24>)
 800baac:	4803      	ldr	r0, [pc, #12]	; (800babc <CDC_Init_FS+0x20>)
 800baae:	f7fb fde9 	bl	8007684 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bab2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20005930 	.word	0x20005930
 800babc:	20004e54 	.word	0x20004e54
 800bac0:	20005130 	.word	0x20005130

0800bac4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bac8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baca:	4618      	mov	r0, r3
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
 800bae0:	4613      	mov	r3, r2
 800bae2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	2b23      	cmp	r3, #35	; 0x23
 800bae8:	d84a      	bhi.n	800bb80 <CDC_Control_FS+0xac>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <CDC_Control_FS+0x1c>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb81 	.word	0x0800bb81
 800baf4:	0800bb81 	.word	0x0800bb81
 800baf8:	0800bb81 	.word	0x0800bb81
 800bafc:	0800bb81 	.word	0x0800bb81
 800bb00:	0800bb81 	.word	0x0800bb81
 800bb04:	0800bb81 	.word	0x0800bb81
 800bb08:	0800bb81 	.word	0x0800bb81
 800bb0c:	0800bb81 	.word	0x0800bb81
 800bb10:	0800bb81 	.word	0x0800bb81
 800bb14:	0800bb81 	.word	0x0800bb81
 800bb18:	0800bb81 	.word	0x0800bb81
 800bb1c:	0800bb81 	.word	0x0800bb81
 800bb20:	0800bb81 	.word	0x0800bb81
 800bb24:	0800bb81 	.word	0x0800bb81
 800bb28:	0800bb81 	.word	0x0800bb81
 800bb2c:	0800bb81 	.word	0x0800bb81
 800bb30:	0800bb81 	.word	0x0800bb81
 800bb34:	0800bb81 	.word	0x0800bb81
 800bb38:	0800bb81 	.word	0x0800bb81
 800bb3c:	0800bb81 	.word	0x0800bb81
 800bb40:	0800bb81 	.word	0x0800bb81
 800bb44:	0800bb81 	.word	0x0800bb81
 800bb48:	0800bb81 	.word	0x0800bb81
 800bb4c:	0800bb81 	.word	0x0800bb81
 800bb50:	0800bb81 	.word	0x0800bb81
 800bb54:	0800bb81 	.word	0x0800bb81
 800bb58:	0800bb81 	.word	0x0800bb81
 800bb5c:	0800bb81 	.word	0x0800bb81
 800bb60:	0800bb81 	.word	0x0800bb81
 800bb64:	0800bb81 	.word	0x0800bb81
 800bb68:	0800bb81 	.word	0x0800bb81
 800bb6c:	0800bb81 	.word	0x0800bb81
 800bb70:	0800bb81 	.word	0x0800bb81
 800bb74:	0800bb81 	.word	0x0800bb81
 800bb78:	0800bb81 	.word	0x0800bb81
 800bb7c:	0800bb81 	.word	0x0800bb81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb80:	bf00      	nop
  }

  return (USBD_OK);
 800bb82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb9a:	6879      	ldr	r1, [r7, #4]
 800bb9c:	4805      	ldr	r0, [pc, #20]	; (800bbb4 <CDC_Receive_FS+0x24>)
 800bb9e:	f7fb fd71 	bl	8007684 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bba2:	4804      	ldr	r0, [pc, #16]	; (800bbb4 <CDC_Receive_FS+0x24>)
 800bba4:	f7fb fd8c 	bl	80076c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bba8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20004e54 	.word	0x20004e54

0800bbb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bbca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	6039      	str	r1, [r7, #0]
 800bbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2212      	movs	r2, #18
 800bbec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbee:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	200000cc 	.word	0x200000cc

0800bc00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2204      	movs	r2, #4
 800bc10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc12:	4b03      	ldr	r3, [pc, #12]	; (800bc20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	200000e0 	.word	0x200000e0

0800bc24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc30:	79fb      	ldrb	r3, [r7, #7]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d105      	bne.n	800bc42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4907      	ldr	r1, [pc, #28]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc3a:	4808      	ldr	r0, [pc, #32]	; (800bc5c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc3c:	f7fc ff8e 	bl	8008b5c <USBD_GetString>
 800bc40:	e004      	b.n	800bc4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4904      	ldr	r1, [pc, #16]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc46:	4805      	ldr	r0, [pc, #20]	; (800bc5c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc48:	f7fc ff88 	bl	8008b5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc4c:	4b02      	ldr	r3, [pc, #8]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20006130 	.word	0x20006130
 800bc5c:	0800c640 	.word	0x0800c640

0800bc60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	6039      	str	r1, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	4904      	ldr	r1, [pc, #16]	; (800bc80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc70:	4804      	ldr	r0, [pc, #16]	; (800bc84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc72:	f7fc ff73 	bl	8008b5c <USBD_GetString>
  return USBD_StrDesc;
 800bc76:	4b02      	ldr	r3, [pc, #8]	; (800bc80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20006130 	.word	0x20006130
 800bc84:	0800c658 	.word	0x0800c658

0800bc88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	221a      	movs	r2, #26
 800bc98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc9a:	f000 f843 	bl	800bd24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc9e:	4b02      	ldr	r3, [pc, #8]	; (800bca8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	200000e4 	.word	0x200000e4

0800bcac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	6039      	str	r1, [r7, #0]
 800bcb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d105      	bne.n	800bcca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	4907      	ldr	r1, [pc, #28]	; (800bce0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcc2:	4808      	ldr	r0, [pc, #32]	; (800bce4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcc4:	f7fc ff4a 	bl	8008b5c <USBD_GetString>
 800bcc8:	e004      	b.n	800bcd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4904      	ldr	r1, [pc, #16]	; (800bce0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcce:	4805      	ldr	r0, [pc, #20]	; (800bce4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcd0:	f7fc ff44 	bl	8008b5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20006130 	.word	0x20006130
 800bce4:	0800c66c 	.word	0x0800c66c

0800bce8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4907      	ldr	r1, [pc, #28]	; (800bd1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcfe:	4808      	ldr	r0, [pc, #32]	; (800bd20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd00:	f7fc ff2c 	bl	8008b5c <USBD_GetString>
 800bd04:	e004      	b.n	800bd10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	4904      	ldr	r1, [pc, #16]	; (800bd1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd0a:	4805      	ldr	r0, [pc, #20]	; (800bd20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd0c:	f7fc ff26 	bl	8008b5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20006130 	.word	0x20006130
 800bd20:	0800c678 	.word	0x0800c678

0800bd24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <Get_SerialNum+0x44>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd30:	4b0e      	ldr	r3, [pc, #56]	; (800bd6c <Get_SerialNum+0x48>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd36:	4b0e      	ldr	r3, [pc, #56]	; (800bd70 <Get_SerialNum+0x4c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4413      	add	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d009      	beq.n	800bd5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	4909      	ldr	r1, [pc, #36]	; (800bd74 <Get_SerialNum+0x50>)
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 f814 	bl	800bd7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd54:	2204      	movs	r2, #4
 800bd56:	4908      	ldr	r1, [pc, #32]	; (800bd78 <Get_SerialNum+0x54>)
 800bd58:	68b8      	ldr	r0, [r7, #8]
 800bd5a:	f000 f80f 	bl	800bd7c <IntToUnicode>
  }
}
 800bd5e:	bf00      	nop
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	1fff7a10 	.word	0x1fff7a10
 800bd6c:	1fff7a14 	.word	0x1fff7a14
 800bd70:	1fff7a18 	.word	0x1fff7a18
 800bd74:	200000e6 	.word	0x200000e6
 800bd78:	200000f6 	.word	0x200000f6

0800bd7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd8e:	2300      	movs	r3, #0
 800bd90:	75fb      	strb	r3, [r7, #23]
 800bd92:	e027      	b.n	800bde4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	0f1b      	lsrs	r3, r3, #28
 800bd98:	2b09      	cmp	r3, #9
 800bd9a:	d80b      	bhi.n	800bdb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	0f1b      	lsrs	r3, r3, #28
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	4619      	mov	r1, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	440b      	add	r3, r1
 800bdac:	3230      	adds	r2, #48	; 0x30
 800bdae:	b2d2      	uxtb	r2, r2
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	e00a      	b.n	800bdca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	0f1b      	lsrs	r3, r3, #28
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3237      	adds	r2, #55	; 0x37
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	4413      	add	r3, r2
 800bdda:	2200      	movs	r2, #0
 800bddc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	3301      	adds	r3, #1
 800bde2:	75fb      	strb	r3, [r7, #23]
 800bde4:	7dfa      	ldrb	r2, [r7, #23]
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d3d3      	bcc.n	800bd94 <IntToUnicode+0x18>
  }
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	; 0x28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be04:	f107 0314 	add.w	r3, r7, #20
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	609a      	str	r2, [r3, #8]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be1c:	d13a      	bne.n	800be94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be1e:	2300      	movs	r3, #0
 800be20:	613b      	str	r3, [r7, #16]
 800be22:	4b1e      	ldr	r3, [pc, #120]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	4a1d      	ldr	r2, [pc, #116]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be28:	f043 0301 	orr.w	r3, r3, #1
 800be2c:	6313      	str	r3, [r2, #48]	; 0x30
 800be2e:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800be3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be40:	2302      	movs	r3, #2
 800be42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be44:	2300      	movs	r3, #0
 800be46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be48:	2303      	movs	r3, #3
 800be4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be4c:	230a      	movs	r3, #10
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be50:	f107 0314 	add.w	r3, r7, #20
 800be54:	4619      	mov	r1, r3
 800be56:	4812      	ldr	r0, [pc, #72]	; (800bea0 <HAL_PCD_MspInit+0xa4>)
 800be58:	f7f6 f906 	bl	8002068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be5c:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be60:	4a0e      	ldr	r2, [pc, #56]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be66:	6353      	str	r3, [r2, #52]	; 0x34
 800be68:	2300      	movs	r3, #0
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	4b0b      	ldr	r3, [pc, #44]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be70:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be76:	6453      	str	r3, [r2, #68]	; 0x44
 800be78:	4b08      	ldr	r3, [pc, #32]	; (800be9c <HAL_PCD_MspInit+0xa0>)
 800be7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be80:	60fb      	str	r3, [r7, #12]
 800be82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800be84:	2200      	movs	r2, #0
 800be86:	2105      	movs	r1, #5
 800be88:	2043      	movs	r0, #67	; 0x43
 800be8a:	f7f5 fdd9 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be8e:	2043      	movs	r0, #67	; 0x43
 800be90:	f7f5 fdf2 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be94:	bf00      	nop
 800be96:	3728      	adds	r7, #40	; 0x28
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	40023800 	.word	0x40023800
 800bea0:	40020000 	.word	0x40020000

0800bea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7fb fce9 	bl	8007892 <USBD_LL_SetupStage>
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	6879      	ldr	r1, [r7, #4]
 800bede:	4613      	mov	r3, r2
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	4413      	add	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	440b      	add	r3, r1
 800bee8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	78fb      	ldrb	r3, [r7, #3]
 800bef0:	4619      	mov	r1, r3
 800bef2:	f7fb fd23 	bl	800793c <USBD_LL_DataOutStage>
}
 800bef6:	bf00      	nop
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800bf10:	78fa      	ldrb	r2, [r7, #3]
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	4613      	mov	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	3320      	adds	r3, #32
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	78fb      	ldrb	r3, [r7, #3]
 800bf24:	4619      	mov	r1, r3
 800bf26:	f7fb fdbc 	bl	8007aa2 <USBD_LL_DataInStage>
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fb fef6 	bl	8007d32 <USBD_LL_SOF>
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf56:	2301      	movs	r3, #1
 800bf58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	79db      	ldrb	r3, [r3, #7]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]
 800bf66:	e008      	b.n	800bf7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	79db      	ldrb	r3, [r3, #7]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d102      	bne.n	800bf76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bf70:	2301      	movs	r3, #1
 800bf72:	73fb      	strb	r3, [r7, #15]
 800bf74:	e001      	b.n	800bf7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bf76:	f7f4 fe35 	bl	8000be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bf80:	7bfa      	ldrb	r2, [r7, #15]
 800bf82:	4611      	mov	r1, r2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fb fe90 	bl	8007caa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fb fe38 	bl	8007c06 <USBD_LL_Reset>
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fb fe8b 	bl	8007cca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfc6:	f043 0301 	orr.w	r3, r3, #1
 800bfca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7adb      	ldrb	r3, [r3, #11]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfd4:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <HAL_PCD_SuspendCallback+0x48>)
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	4a03      	ldr	r2, [pc, #12]	; (800bfe8 <HAL_PCD_SuspendCallback+0x48>)
 800bfda:	f043 0306 	orr.w	r3, r3, #6
 800bfde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	e000ed00 	.word	0xe000ed00

0800bfec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fb fe81 	bl	8007d02 <USBD_LL_Resume>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c01a:	78fa      	ldrb	r2, [r7, #3]
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fb fed9 	bl	8007dd6 <USBD_LL_IsoOUTIncomplete>
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c03e:	78fa      	ldrb	r2, [r7, #3]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7fb fe95 	bl	8007d72 <USBD_LL_IsoINIncomplete>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fb feeb 	bl	8007e3a <USBD_LL_DevConnected>
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fb fee8 	bl	8007e50 <USBD_LL_DevDisconnected>
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d13c      	bne.n	800c112 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c098:	4a20      	ldr	r2, [pc, #128]	; (800c11c <USBD_LL_Init+0x94>)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <USBD_LL_Init+0x94>)
 800c0a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0a8:	4b1c      	ldr	r3, [pc, #112]	; (800c11c <USBD_LL_Init+0x94>)
 800c0aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c0ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c0b0:	4b1a      	ldr	r3, [pc, #104]	; (800c11c <USBD_LL_Init+0x94>)
 800c0b2:	2204      	movs	r2, #4
 800c0b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c0b6:	4b19      	ldr	r3, [pc, #100]	; (800c11c <USBD_LL_Init+0x94>)
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0bc:	4b17      	ldr	r3, [pc, #92]	; (800c11c <USBD_LL_Init+0x94>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c0c2:	4b16      	ldr	r3, [pc, #88]	; (800c11c <USBD_LL_Init+0x94>)
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0c8:	4b14      	ldr	r3, [pc, #80]	; (800c11c <USBD_LL_Init+0x94>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <USBD_LL_Init+0x94>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c0d4:	4b11      	ldr	r3, [pc, #68]	; (800c11c <USBD_LL_Init+0x94>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c0da:	4b10      	ldr	r3, [pc, #64]	; (800c11c <USBD_LL_Init+0x94>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c0e0:	4b0e      	ldr	r3, [pc, #56]	; (800c11c <USBD_LL_Init+0x94>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0e6:	480d      	ldr	r0, [pc, #52]	; (800c11c <USBD_LL_Init+0x94>)
 800c0e8:	f7f6 f99d 	bl	8002426 <HAL_PCD_Init>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c0f2:	f7f4 fd77 	bl	8000be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c0f6:	2180      	movs	r1, #128	; 0x80
 800c0f8:	4808      	ldr	r0, [pc, #32]	; (800c11c <USBD_LL_Init+0x94>)
 800c0fa:	f7f7 fbc8 	bl	800388e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c0fe:	2240      	movs	r2, #64	; 0x40
 800c100:	2100      	movs	r1, #0
 800c102:	4806      	ldr	r0, [pc, #24]	; (800c11c <USBD_LL_Init+0x94>)
 800c104:	f7f7 fb7c 	bl	8003800 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c108:	2280      	movs	r2, #128	; 0x80
 800c10a:	2101      	movs	r1, #1
 800c10c:	4803      	ldr	r0, [pc, #12]	; (800c11c <USBD_LL_Init+0x94>)
 800c10e:	f7f7 fb77 	bl	8003800 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	20006330 	.word	0x20006330

0800c120 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c136:	4618      	mov	r0, r3
 800c138:	f7f6 fa84 	bl	8002644 <HAL_PCD_Start>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f942 	bl	800c3cc <USBD_Get_USB_Status>
 800c148:	4603      	mov	r3, r0
 800c14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	461a      	mov	r2, r3
 800c164:	4603      	mov	r3, r0
 800c166:	70fb      	strb	r3, [r7, #3]
 800c168:	460b      	mov	r3, r1
 800c16a:	70bb      	strb	r3, [r7, #2]
 800c16c:	4613      	mov	r3, r2
 800c16e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c17e:	78bb      	ldrb	r3, [r7, #2]
 800c180:	883a      	ldrh	r2, [r7, #0]
 800c182:	78f9      	ldrb	r1, [r7, #3]
 800c184:	f7f6 ff58 	bl	8003038 <HAL_PCD_EP_Open>
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 f91c 	bl	800c3cc <USBD_Get_USB_Status>
 800c194:	4603      	mov	r3, r0
 800c196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c198:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1bc:	78fa      	ldrb	r2, [r7, #3]
 800c1be:	4611      	mov	r1, r2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7f6 ffa1 	bl	8003108 <HAL_PCD_EP_Close>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ca:	7bfb      	ldrb	r3, [r7, #15]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 f8fd 	bl	800c3cc <USBD_Get_USB_Status>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1fa:	78fa      	ldrb	r2, [r7, #3]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7f7 f859 	bl	80032b6 <HAL_PCD_EP_SetStall>
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f8de 	bl	800c3cc <USBD_Get_USB_Status>
 800c210:	4603      	mov	r3, r0
 800c212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c214:	7bbb      	ldrb	r3, [r7, #14]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7f7 f89d 	bl	800337c <HAL_PCD_EP_ClrStall>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 f8bf 	bl	800c3cc <USBD_Get_USB_Status>
 800c24e:	4603      	mov	r3, r0
 800c250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c252:	7bbb      	ldrb	r3, [r7, #14]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c26e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c274:	2b00      	cmp	r3, #0
 800c276:	da0b      	bge.n	800c290 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c278:	78fb      	ldrb	r3, [r7, #3]
 800c27a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c27e:	68f9      	ldr	r1, [r7, #12]
 800c280:	4613      	mov	r3, r2
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	440b      	add	r3, r1
 800c28a:	3316      	adds	r3, #22
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	e00b      	b.n	800c2a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c296:	68f9      	ldr	r1, [r7, #12]
 800c298:	4613      	mov	r3, r2
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c2a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f6 fe8c 	bl	8002ff0 <HAL_PCD_SetAddress>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f874 	bl	800c3cc <USBD_Get_USB_Status>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b086      	sub	sp, #24
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
 800c2fe:	460b      	mov	r3, r1
 800c300:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c310:	7af9      	ldrb	r1, [r7, #11]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	f7f6 ff94 	bl	8003242 <HAL_PCD_EP_Transmit>
 800c31a:	4603      	mov	r3, r0
 800c31c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	4618      	mov	r0, r3
 800c322:	f000 f853 	bl	800c3cc <USBD_Get_USB_Status>
 800c326:	4603      	mov	r3, r0
 800c328:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c32a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	607a      	str	r2, [r7, #4]
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	460b      	mov	r3, r1
 800c342:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c352:	7af9      	ldrb	r1, [r7, #11]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	f7f6 ff20 	bl	800319c <HAL_PCD_EP_Receive>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f832 	bl	800c3cc <USBD_Get_USB_Status>
 800c368:	4603      	mov	r3, r0
 800c36a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c36c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c388:	78fa      	ldrb	r2, [r7, #3]
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f6 ff40 	bl	8003212 <HAL_PCD_EP_GetRxCount>
 800c392:	4603      	mov	r3, r0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3a4:	4b03      	ldr	r3, [pc, #12]	; (800c3b4 <USBD_static_malloc+0x18>)
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	20006814 	.word	0x20006814

0800c3b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]

}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d817      	bhi.n	800c410 <USBD_Get_USB_Status+0x44>
 800c3e0:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <USBD_Get_USB_Status+0x1c>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c3ff 	.word	0x0800c3ff
 800c3f0:	0800c405 	.word	0x0800c405
 800c3f4:	0800c40b 	.word	0x0800c40b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c3fc:	e00b      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3fe:	2303      	movs	r3, #3
 800c400:	73fb      	strb	r3, [r7, #15]
    break;
 800c402:	e008      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
    break;
 800c408:	e005      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c40a:	2303      	movs	r3, #3
 800c40c:	73fb      	strb	r3, [r7, #15]
    break;
 800c40e:	e002      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	bf00      	nop
  }
  return usb_status;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <memset>:
 800c424:	4402      	add	r2, r0
 800c426:	4603      	mov	r3, r0
 800c428:	4293      	cmp	r3, r2
 800c42a:	d100      	bne.n	800c42e <memset+0xa>
 800c42c:	4770      	bx	lr
 800c42e:	f803 1b01 	strb.w	r1, [r3], #1
 800c432:	e7f9      	b.n	800c428 <memset+0x4>

0800c434 <_reclaim_reent>:
 800c434:	4b29      	ldr	r3, [pc, #164]	; (800c4dc <_reclaim_reent+0xa8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4283      	cmp	r3, r0
 800c43a:	b570      	push	{r4, r5, r6, lr}
 800c43c:	4604      	mov	r4, r0
 800c43e:	d04b      	beq.n	800c4d8 <_reclaim_reent+0xa4>
 800c440:	69c3      	ldr	r3, [r0, #28]
 800c442:	b143      	cbz	r3, 800c456 <_reclaim_reent+0x22>
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d144      	bne.n	800c4d4 <_reclaim_reent+0xa0>
 800c44a:	69e3      	ldr	r3, [r4, #28]
 800c44c:	6819      	ldr	r1, [r3, #0]
 800c44e:	b111      	cbz	r1, 800c456 <_reclaim_reent+0x22>
 800c450:	4620      	mov	r0, r4
 800c452:	f000 f879 	bl	800c548 <_free_r>
 800c456:	6961      	ldr	r1, [r4, #20]
 800c458:	b111      	cbz	r1, 800c460 <_reclaim_reent+0x2c>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f874 	bl	800c548 <_free_r>
 800c460:	69e1      	ldr	r1, [r4, #28]
 800c462:	b111      	cbz	r1, 800c46a <_reclaim_reent+0x36>
 800c464:	4620      	mov	r0, r4
 800c466:	f000 f86f 	bl	800c548 <_free_r>
 800c46a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c46c:	b111      	cbz	r1, 800c474 <_reclaim_reent+0x40>
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f86a 	bl	800c548 <_free_r>
 800c474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c476:	b111      	cbz	r1, 800c47e <_reclaim_reent+0x4a>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f865 	bl	800c548 <_free_r>
 800c47e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c480:	b111      	cbz	r1, 800c488 <_reclaim_reent+0x54>
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f860 	bl	800c548 <_free_r>
 800c488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c48a:	b111      	cbz	r1, 800c492 <_reclaim_reent+0x5e>
 800c48c:	4620      	mov	r0, r4
 800c48e:	f000 f85b 	bl	800c548 <_free_r>
 800c492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c494:	b111      	cbz	r1, 800c49c <_reclaim_reent+0x68>
 800c496:	4620      	mov	r0, r4
 800c498:	f000 f856 	bl	800c548 <_free_r>
 800c49c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c49e:	b111      	cbz	r1, 800c4a6 <_reclaim_reent+0x72>
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f000 f851 	bl	800c548 <_free_r>
 800c4a6:	6a23      	ldr	r3, [r4, #32]
 800c4a8:	b1b3      	cbz	r3, 800c4d8 <_reclaim_reent+0xa4>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4b0:	4718      	bx	r3
 800c4b2:	5949      	ldr	r1, [r1, r5]
 800c4b4:	b941      	cbnz	r1, 800c4c8 <_reclaim_reent+0x94>
 800c4b6:	3504      	adds	r5, #4
 800c4b8:	69e3      	ldr	r3, [r4, #28]
 800c4ba:	2d80      	cmp	r5, #128	; 0x80
 800c4bc:	68d9      	ldr	r1, [r3, #12]
 800c4be:	d1f8      	bne.n	800c4b2 <_reclaim_reent+0x7e>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 f841 	bl	800c548 <_free_r>
 800c4c6:	e7c0      	b.n	800c44a <_reclaim_reent+0x16>
 800c4c8:	680e      	ldr	r6, [r1, #0]
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 f83c 	bl	800c548 <_free_r>
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	e7ef      	b.n	800c4b4 <_reclaim_reent+0x80>
 800c4d4:	2500      	movs	r5, #0
 800c4d6:	e7ef      	b.n	800c4b8 <_reclaim_reent+0x84>
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	bf00      	nop
 800c4dc:	2000014c 	.word	0x2000014c

0800c4e0 <__libc_init_array>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	4d0d      	ldr	r5, [pc, #52]	; (800c518 <__libc_init_array+0x38>)
 800c4e4:	4c0d      	ldr	r4, [pc, #52]	; (800c51c <__libc_init_array+0x3c>)
 800c4e6:	1b64      	subs	r4, r4, r5
 800c4e8:	10a4      	asrs	r4, r4, #2
 800c4ea:	2600      	movs	r6, #0
 800c4ec:	42a6      	cmp	r6, r4
 800c4ee:	d109      	bne.n	800c504 <__libc_init_array+0x24>
 800c4f0:	4d0b      	ldr	r5, [pc, #44]	; (800c520 <__libc_init_array+0x40>)
 800c4f2:	4c0c      	ldr	r4, [pc, #48]	; (800c524 <__libc_init_array+0x44>)
 800c4f4:	f000 f880 	bl	800c5f8 <_init>
 800c4f8:	1b64      	subs	r4, r4, r5
 800c4fa:	10a4      	asrs	r4, r4, #2
 800c4fc:	2600      	movs	r6, #0
 800c4fe:	42a6      	cmp	r6, r4
 800c500:	d105      	bne.n	800c50e <__libc_init_array+0x2e>
 800c502:	bd70      	pop	{r4, r5, r6, pc}
 800c504:	f855 3b04 	ldr.w	r3, [r5], #4
 800c508:	4798      	blx	r3
 800c50a:	3601      	adds	r6, #1
 800c50c:	e7ee      	b.n	800c4ec <__libc_init_array+0xc>
 800c50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c512:	4798      	blx	r3
 800c514:	3601      	adds	r6, #1
 800c516:	e7f2      	b.n	800c4fe <__libc_init_array+0x1e>
 800c518:	0800c6d4 	.word	0x0800c6d4
 800c51c:	0800c6d4 	.word	0x0800c6d4
 800c520:	0800c6d4 	.word	0x0800c6d4
 800c524:	0800c6d8 	.word	0x0800c6d8

0800c528 <__retarget_lock_acquire_recursive>:
 800c528:	4770      	bx	lr

0800c52a <__retarget_lock_release_recursive>:
 800c52a:	4770      	bx	lr

0800c52c <memcpy>:
 800c52c:	440a      	add	r2, r1
 800c52e:	4291      	cmp	r1, r2
 800c530:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c534:	d100      	bne.n	800c538 <memcpy+0xc>
 800c536:	4770      	bx	lr
 800c538:	b510      	push	{r4, lr}
 800c53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c542:	4291      	cmp	r1, r2
 800c544:	d1f9      	bne.n	800c53a <memcpy+0xe>
 800c546:	bd10      	pop	{r4, pc}

0800c548 <_free_r>:
 800c548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c54a:	2900      	cmp	r1, #0
 800c54c:	d044      	beq.n	800c5d8 <_free_r+0x90>
 800c54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c552:	9001      	str	r0, [sp, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f1a1 0404 	sub.w	r4, r1, #4
 800c55a:	bfb8      	it	lt
 800c55c:	18e4      	addlt	r4, r4, r3
 800c55e:	f000 f83f 	bl	800c5e0 <__malloc_lock>
 800c562:	4a1e      	ldr	r2, [pc, #120]	; (800c5dc <_free_r+0x94>)
 800c564:	9801      	ldr	r0, [sp, #4]
 800c566:	6813      	ldr	r3, [r2, #0]
 800c568:	b933      	cbnz	r3, 800c578 <_free_r+0x30>
 800c56a:	6063      	str	r3, [r4, #4]
 800c56c:	6014      	str	r4, [r2, #0]
 800c56e:	b003      	add	sp, #12
 800c570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c574:	f000 b83a 	b.w	800c5ec <__malloc_unlock>
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d908      	bls.n	800c58e <_free_r+0x46>
 800c57c:	6825      	ldr	r5, [r4, #0]
 800c57e:	1961      	adds	r1, r4, r5
 800c580:	428b      	cmp	r3, r1
 800c582:	bf01      	itttt	eq
 800c584:	6819      	ldreq	r1, [r3, #0]
 800c586:	685b      	ldreq	r3, [r3, #4]
 800c588:	1949      	addeq	r1, r1, r5
 800c58a:	6021      	streq	r1, [r4, #0]
 800c58c:	e7ed      	b.n	800c56a <_free_r+0x22>
 800c58e:	461a      	mov	r2, r3
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	b10b      	cbz	r3, 800c598 <_free_r+0x50>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d9fa      	bls.n	800c58e <_free_r+0x46>
 800c598:	6811      	ldr	r1, [r2, #0]
 800c59a:	1855      	adds	r5, r2, r1
 800c59c:	42a5      	cmp	r5, r4
 800c59e:	d10b      	bne.n	800c5b8 <_free_r+0x70>
 800c5a0:	6824      	ldr	r4, [r4, #0]
 800c5a2:	4421      	add	r1, r4
 800c5a4:	1854      	adds	r4, r2, r1
 800c5a6:	42a3      	cmp	r3, r4
 800c5a8:	6011      	str	r1, [r2, #0]
 800c5aa:	d1e0      	bne.n	800c56e <_free_r+0x26>
 800c5ac:	681c      	ldr	r4, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	6053      	str	r3, [r2, #4]
 800c5b2:	440c      	add	r4, r1
 800c5b4:	6014      	str	r4, [r2, #0]
 800c5b6:	e7da      	b.n	800c56e <_free_r+0x26>
 800c5b8:	d902      	bls.n	800c5c0 <_free_r+0x78>
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	e7d6      	b.n	800c56e <_free_r+0x26>
 800c5c0:	6825      	ldr	r5, [r4, #0]
 800c5c2:	1961      	adds	r1, r4, r5
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf04      	itt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	6063      	str	r3, [r4, #4]
 800c5ce:	bf04      	itt	eq
 800c5d0:	1949      	addeq	r1, r1, r5
 800c5d2:	6021      	streq	r1, [r4, #0]
 800c5d4:	6054      	str	r4, [r2, #4]
 800c5d6:	e7ca      	b.n	800c56e <_free_r+0x26>
 800c5d8:	b003      	add	sp, #12
 800c5da:	bd30      	pop	{r4, r5, pc}
 800c5dc:	20006b70 	.word	0x20006b70

0800c5e0 <__malloc_lock>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	; (800c5e8 <__malloc_lock+0x8>)
 800c5e2:	f7ff bfa1 	b.w	800c528 <__retarget_lock_acquire_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	20006b6c 	.word	0x20006b6c

0800c5ec <__malloc_unlock>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__malloc_unlock+0x8>)
 800c5ee:	f7ff bf9c 	b.w	800c52a <__retarget_lock_release_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20006b6c 	.word	0x20006b6c

0800c5f8 <_init>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr

0800c604 <_fini>:
 800c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c606:	bf00      	nop
 800c608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60a:	bc08      	pop	{r3}
 800c60c:	469e      	mov	lr, r3
 800c60e:	4770      	bx	lr
