
SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a58  08004a58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a60  08004a60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b799  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002535  00000000  00000000  0002b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b08  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000082a  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024638  00000000  00000000  0002f082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e79f  00000000  00000000  000536ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf3eb  00000000  00000000  00061e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b20  00000000  00000000  00131244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00133d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004a14 	.word	0x08004a14

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004a14 	.word	0x08004a14

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
 8000502:	4b4d      	ldr	r3, [pc, #308]	; (8000638 <MX_GPIO_Init+0x150>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a4c      	ldr	r2, [pc, #304]	; (8000638 <MX_GPIO_Init+0x150>)
 8000508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <MX_GPIO_Init+0x150>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	4b46      	ldr	r3, [pc, #280]	; (8000638 <MX_GPIO_Init+0x150>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a45      	ldr	r2, [pc, #276]	; (8000638 <MX_GPIO_Init+0x150>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <MX_GPIO_Init+0x150>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <MX_GPIO_Init+0x150>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <MX_GPIO_Init+0x150>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <MX_GPIO_Init+0x150>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b38      	ldr	r3, [pc, #224]	; (8000638 <MX_GPIO_Init+0x150>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a37      	ldr	r2, [pc, #220]	; (8000638 <MX_GPIO_Init+0x150>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b35      	ldr	r3, [pc, #212]	; (8000638 <MX_GPIO_Init+0x150>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_GPIO_Init+0x150>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a30      	ldr	r2, [pc, #192]	; (8000638 <MX_GPIO_Init+0x150>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <MX_GPIO_Init+0x150>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_GPIO_Init+0x150>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a29      	ldr	r2, [pc, #164]	; (8000638 <MX_GPIO_Init+0x150>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_GPIO_Init+0x150>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0310 	and.w	r3, r3, #16
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_GPIO_Init+0x150>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <MX_GPIO_Init+0x150>)
 80005b0:	f043 0320 	orr.w	r3, r3, #32
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <MX_GPIO_Init+0x150>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0320 	and.w	r3, r3, #32
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0x154>)
 80005ca:	f000 fdff 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <MX_GPIO_Init+0x158>)
 80005d6:	f000 fdf9 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80005da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <MX_GPIO_Init+0x154>)
 80005f4:	f000 fc3e 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0x158>)
 8000612:	f000 fc2f 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_EXTI_Pin;
 8000616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0x154>)
 800062c:	f000 fc22 	bl	8000e74 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40021000 	.word	0x40021000
 8000640:	40021400 	.word	0x40021400

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fa4e 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f80a 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f7ff ff4a 	bl	80004e8 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000654:	f000 f876 	bl	8000744 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000658:	f003 ff9e 	bl	8004598 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800065c:	f000 f9a0 	bl	80009a0 <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x1c>
	...

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f9a1 	bl	80049ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006d4:	2306      	movs	r3, #6
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d8:	23a8      	movs	r3, #168	; 0xa8
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fd89 	bl	8001200 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f820 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ffb0 	bl	800167c <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 f809 	bl	8000738 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <MX_SDIO_SD_Init+0x40>)
 800074c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <MX_SDIO_SD_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028
 8000784:	40012c00 	.word	0x40012c00

08000788 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <HAL_SD_MspInit+0xd0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d152      	bne.n	8000850 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <HAL_SD_MspInit+0xd4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80007fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000802:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000810:	230c      	movs	r3, #12
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <HAL_SD_MspInit+0xd8>)
 800081c:	f000 fb2a 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000820:	2304      	movs	r3, #4
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000830:	230c      	movs	r3, #12
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_SD_MspInit+0xdc>)
 800083c:	f000 fb1a 	bl	8000e74 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2031      	movs	r0, #49	; 0x31
 8000846:	f000 fabc 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800084a:	2031      	movs	r0, #49	; 0x31
 800084c:	f000 fad5 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40023800 	.word	0x40023800
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f942 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <SDIO_IRQHandler+0x10>)
 8000912:	f001 fc17 	bl	8002144 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000028 	.word	0x20000028

08000920 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART6_IRQHandler+0x10>)
 8000926:	f002 fc89 	bl	800323c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000ac 	.word	0x200000ac

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <SystemInit+0x60>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <SystemInit+0x60>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <SystemInit+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <SystemInit+0x64>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <SystemInit+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <SystemInit+0x64>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <SystemInit+0x64>)
 8000960:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <SystemInit+0x64>)
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <SystemInit+0x68>)
 800096e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <SystemInit+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <SystemInit+0x64>)
 8000976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SystemInit+0x60>)
 8000984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000988:	609a      	str	r2, [r3, #8]
#endif
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	40023800 	.word	0x40023800
 800099c:	24003010 	.word	0x24003010

080009a0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART6_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART6_UART_Init+0x4c>)
 80009d8:	f002 fbe3 	bl	80031a2 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f7ff fea9 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000ac 	.word	0x200000ac
 80009f0:	40011400 	.word	0x40011400

080009f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_UART_MspInit+0x94>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d134      	bne.n	8000a80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8000a4e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a60:	2308      	movs	r3, #8
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4809      	ldr	r0, [pc, #36]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a6c:	f000 fa02 	bl	8000e74 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2047      	movs	r0, #71	; 0x47
 8000a76:	f000 f9a4 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a7a:	2047      	movs	r0, #71	; 0x47
 8000a7c:	f000 f9bd 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40011400 	.word	0x40011400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021800 	.word	0x40021800

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr  r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ff39 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 ff83 	bl	80049cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fdbd 	bl	8000644 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000ad0:	08004a68 	.word	0x08004a68
  ldr  r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ae0:	20000104 	.word	0x20000104

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f94b 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fea4 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f963 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 f92b 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000ec 	.word	0x200000ec

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000ec 	.word	0x200000ec

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <NVIC_EnableIRQ+0x30>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da0b      	bge.n	8000cd8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <NVIC_SetPriority+0x4c>)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 030f 	and.w	r3, r3, #15
 8000ccc:	3b04      	subs	r3, #4
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd6:	e009      	b.n	8000cec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <NVIC_SetPriority+0x50>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff2d 	bl	8000c14 <NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff42 	bl	8000c5c <NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff35 	bl	8000c78 <NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d004      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e00c      	b.n	8000e66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2205      	movs	r2, #5
 8000e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e177      	b.n	8001180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8166 	bne.w	800117a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x4a>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	69b9      	ldr	r1, [r7, #24]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d00b      	beq.n	8000f5a <HAL_GPIO_Init+0xe6>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80c0 	beq.w	800117a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a65      	ldr	r2, [pc, #404]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HAL_GPIO_Init+0x324>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a61      	ldr	r2, [pc, #388]	; (800119c <HAL_GPIO_Init+0x328>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a58      	ldr	r2, [pc, #352]	; (80011a0 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d037      	beq.n	80010b2 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <HAL_GPIO_Init+0x330>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d031      	beq.n	80010ae <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a56      	ldr	r2, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x334>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x22a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x34c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x21a>
 800108a:	2309      	movs	r3, #9
 800108c:	e012      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800108e:	230a      	movs	r3, #10
 8001090:	e010      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001092:	2308      	movs	r3, #8
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001096:	2307      	movs	r3, #7
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x328>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f6:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_GPIO_Init+0x354>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae84 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021c00 	.word	0x40021c00
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40022400 	.word	0x40022400
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e22a      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e205      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc7c 	bl	8000bb4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc78 	bl	8000bb4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1ca      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc68 	bl	8000bb4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc64 	bl	8000bb4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1b6      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e18a      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc1d 	bl	8000bb4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc19 	bl	8000bb4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e16b      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbfc 	bl	8000bb4 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fbf8 	bl	8000bb4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e14a      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fbdc 	bl	8000bb4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fbd8 	bl	8000bb4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e12a      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fbc5 	bl	8000bb4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fbc1 	bl	8000bb4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e113      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb81 	bl	8000bb4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fb7d 	bl	8000bb4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0cf      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb42 	bl	8000bb4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fb3e 	bl	8000bb4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e08e      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fb2c 	bl	8000bb4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fb28 	bl	8000bb4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e078      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d064      	beq.n	8001666 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d05c      	beq.n	8001662 <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d141      	bne.n	8001634 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fafd 	bl	8000bb4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff faf9 	bl	8000bb4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e04b      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	019b      	lsls	r3, r3, #6
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	3b01      	subs	r3, #1
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	061b      	lsls	r3, r3, #24
 8001600:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fad2 	bl	8000bb4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff face 	bl	8000bb4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e020      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x414>
 8001632:	e018      	b.n	8001666 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fabb 	bl	8000bb4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fab7 	bl	8000bb4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e009      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x442>
 8001660:	e001      	b.n	8001666 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0ca      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b67      	ldr	r3, [pc, #412]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b64      	ldr	r3, [pc, #400]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b6      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b52      	ldr	r3, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494c      	ldr	r1, [pc, #304]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07d      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06d      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e065      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4933      	ldr	r1, [pc, #204]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa22 	bl	8000bb4 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa1e 	bl	8000bb4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04d      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_RCC_ClockConfig+0x1b4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e030      	b.n	8001826 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4915      	ldr	r1, [pc, #84]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490d      	ldr	r1, [pc, #52]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f81d 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff f984 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	08004a2c 	.word	0x08004a2c
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b090      	sub	sp, #64	; 0x40
 8001846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d00d      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x40>
 8001864:	2b08      	cmp	r3, #8
 8001866:	f200 80a1 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x34>
 800186e:	2b04      	cmp	r3, #4
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x3a>
 8001872:	e09b      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001878:	e09b      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800187e:	e098      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	2200      	movs	r2, #0
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	627a      	str	r2, [r7, #36]	; 0x24
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018a8:	2100      	movs	r1, #0
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ac:	fb03 f201 	mul.w	r2, r3, r1
 80018b0:	2300      	movs	r3, #0
 80018b2:	fb00 f303 	mul.w	r3, r0, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ba:	fba0 1202 	umull	r1, r2, r0, r2
 80018be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c0:	460a      	mov	r2, r1
 80018c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c6:	4413      	add	r3, r2
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018cc:	2200      	movs	r2, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	61fa      	str	r2, [r7, #28]
 80018d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018da:	f7fe fc87 	bl	80001ec <__aeabi_uldivmod>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4613      	mov	r3, r2
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e6:	e053      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	617a      	str	r2, [r7, #20]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018fa:	f04f 0b00 	mov.w	fp, #0
 80018fe:	4652      	mov	r2, sl
 8001900:	465b      	mov	r3, fp
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ebb2 080a 	subs.w	r8, r2, sl
 800191a:	eb63 090b 	sbc.w	r9, r3, fp
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800192a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800192e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001932:	ebb2 0408 	subs.w	r4, r2, r8
 8001936:	eb63 0509 	sbc.w	r5, r3, r9
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	00eb      	lsls	r3, r5, #3
 8001944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001948:	00e2      	lsls	r2, r4, #3
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	eb14 030a 	adds.w	r3, r4, sl
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	eb45 030b 	adc.w	r3, r5, fp
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	2200      	movs	r2, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001984:	f7fe fc32 	bl	80001ec <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3740      	adds	r7, #64	; 0x40
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	00b71b00 	.word	0x00b71b00

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff0 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08004a3c 	.word	0x08004a3c

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffdc 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0b5b      	lsrs	r3, r3, #13
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4903      	ldr	r1, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08004a3c 	.word	0x08004a3c

08001a34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e01d      	b.n	8001a82 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fe95 	bl	8000788 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f810 	bl	8001a8c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001aac:	2376      	movs	r3, #118	; 0x76
 8001aae:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681d      	ldr	r5, [r3, #0]
 8001ab4:	466c      	mov	r4, sp
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f002 f805 	bl	8003ad8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_SD_InitCard+0xb4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f846 	bl	8003b6a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_SD_InitCard+0xb4>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff f871 	bl	8000bcc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f001 f8d6 	bl	8002c9c <SD_PowerON>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e013      	b.n	8001b38 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fff9 	bl	8002b08 <SD_InitCard>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b40:	422580a0 	.word	0x422580a0

08001b44 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b08f      	sub	sp, #60	; 0x3c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff f82d 	bl	8000bb4 <HAL_GetTick>
 8001b5a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e177      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f040 816a 	bne.w	8001e5c <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	441a      	add	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d907      	bls.n	8001bac <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e15e      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	025b      	lsls	r3, r3, #9
 8001bc8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f85d 	bl	8003c92 <SDMMC_CmdBlockLength>
 8001bd8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e133      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c06:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001c0e:	2390      	movs	r3, #144	; 0x90
 8001c10:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f107 0210 	add.w	r2, r7, #16
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 f806 	bl	8003c3a <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d90a      	bls.n	8001c4a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2202      	movs	r2, #2
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 f86e 	bl	8003d22 <SDMMC_CmdReadMultiBlock>
 8001c46:	6378      	str	r0, [r7, #52]	; 0x34
 8001c48:	e009      	b.n	8001c5e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f83f 	bl	8003cda <SDMMC_CmdReadSingleBlock>
 8001c5c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d04a      	beq.n	8001cfa <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0f1      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d016      	beq.n	8001cc2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
 8001c98:	e00d      	b.n	8001cb6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca4:	18d4      	adds	r4, r2, r3
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	f001 ff41 	bl	8003b2e <SDIO_ReadFIFO>
 8001cac:	4603      	mov	r3, r0
 8001cae:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	2b07      	cmp	r3, #7
 8001cba:	d9ee      	bls.n	8001c9a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_SD_ReadBlocks+0x194>
 8001cc8:	f7fe ff74 	bl	8000bb4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d810      	bhi.n	8001cfa <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0b7      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d00:	f240 332a 	movw	r3, #810	; 0x32a
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0bd      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_SD_ReadBlocks+0x216>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d91d      	bls.n	8001d5a <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d019      	beq.n	8001d5a <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 f866 	bl	8003dfc <SDMMC_CmdStopTransfer>
 8001d30:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e087      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	f043 0208 	orr.w	r2, r3, #8
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06f      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e057      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d037      	beq.n	8001e38 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	f043 0220 	orr.w	r2, r3, #32
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e03f      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 fe9d 	bl	8003b2e <SDIO_ReadFIFO>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_SD_ReadBlocks+0x2d2>
 8001e06:	f7fe fed5 	bl	8000bb4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d810      	bhi.n	8001e38 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e018      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1d1      	bne.n	8001dea <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e006      	b.n	8001e6a <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	373c      	adds	r7, #60	; 0x3c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b08e      	sub	sp, #56	; 0x38
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7fe fe96 	bl	8000bb4 <HAL_GetTick>
 8001e88:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e148      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 813b 	bne.w	800212c <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d907      	bls.n	8001eda <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e12f      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 fec6 	bl	8003c92 <SDMMC_CmdBlockLength>
 8001f06:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e104      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d90a      	bls.n	8001f4c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 ff35 	bl	8003db2 <SDMMC_CmdWriteMultiBlock>
 8001f48:	6378      	str	r0, [r7, #52]	; 0x34
 8001f4a:	e009      	b.n	8001f60 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 ff06 	bl	8003d6a <SDMMC_CmdWriteSingleBlock>
 8001f5e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0d8      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f94:	2390      	movs	r3, #144	; 0x90
 8001f96:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f107 0210 	add.w	r2, r7, #16
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fe43 	bl	8003c3a <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fb4:	e037      	b.n	8002026 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d014      	beq.n	8001fee <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc8:	e00b      	b.n	8001fe2 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f001 fdb6 	bl	8003b48 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	3301      	adds	r3, #1
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	2b07      	cmp	r3, #7
 8001fe6:	d9f0      	bls.n	8001fca <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	3320      	adds	r3, #32
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_SD_WriteBlocks+0x192>
 8001ff4:	f7fe fdde 	bl	8000bb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002000:	429a      	cmp	r2, r3
 8002002:	d810      	bhi.n	8002026 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002014:	431a      	orrs	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e089      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202c:	f240 331a 	movw	r3, #794	; 0x31a
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0bf      	beq.n	8001fb6 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_SD_WriteBlocks+0x214>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d91d      	bls.n	8002086 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	2b03      	cmp	r3, #3
 8002050:	d019      	beq.n	8002086 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fed0 	bl	8003dfc <SDMMC_CmdStopTransfer>
 800205c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	2b00      	cmp	r3, #0
 8002062:	d010      	beq.n	8002086 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	431a      	orrs	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e059      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	f043 0208 	orr.w	r2, r3, #8
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e041      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e029      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e011      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e006      	b.n	800213a <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3738      	adds	r7, #56	; 0x38
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 808d 	beq.w	800227a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03a      	beq.n	8002200 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_SD_IRQHandler+0x5e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d011      	beq.n	80021c6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 fe28 	bl	8003dfc <SDMMC_CmdStopTransfer>
 80021ac:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f925 	bl	8002410 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_SD_IRQHandler+0xac>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f002 fa77 	bl	80046e4 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80021f6:	e103      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f002 fa69 	bl	80046d0 <HAL_SD_TxCpltCallback>
}
 80021fe:	e0ff      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80f9 	beq.w	8002400 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d011      	beq.n	800223e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fdec 	bl	8003dfc <SDMMC_CmdStopTransfer>
 8002224:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f8e9 	bl	8002410 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80da 	bne.w	8002400 <HAL_SD_IRQHandler+0x2bc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 80d3 	bne.w	8002400 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f002 fa2c 	bl	80046d0 <HAL_SD_TxCpltCallback>
}
 8002278:	e0c2      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 ff5f 	bl	8003156 <SD_Write_IT>
}
 8002298:	e0b2      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 ff27 	bl	8003106 <SD_Read_IT>
}
 80022b8:	e0a2      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c0:	f240 233a 	movw	r3, #570	; 0x23a
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 809a 	beq.w	8002400 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	f043 0202 	orr.w	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	f043 0208 	orr.w	r2, r3, #8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	f043 0208 	orr.w	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002366:	f023 0302 	bic.w	r3, r3, #2
 800236a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	2b00      	cmp	r3, #0
 8002376:	d036      	beq.n	80023e6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d011      	beq.n	80023a4 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_SD_IRQHandler+0x2c4>)
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fd4e 	bl	8000e2e <HAL_DMA_Abort_IT>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d033      	beq.n	8002400 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fb37 	bl	8002a10 <SD_DMATxAbort>
}
 80023a2:	e02d      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d011      	beq.n	80023d0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_SD_IRQHandler+0x2c8>)
 80023b2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fd38 	bl	8000e2e <HAL_DMA_Abort_IT>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01d      	beq.n	8002400 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fb5f 	bl	8002a8c <SD_DMARxAbort>
}
 80023ce:	e017      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f002 f96c 	bl	80046bc <HAL_SD_AbortCallback>
}
 80023e4:	e00c      	b.n	8002400 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f808 	bl	8002410 <HAL_SD_ErrorCallback>
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	08002a11 	.word	0x08002a11
 800240c:	08002a8d 	.word	0x08002a8d

08002410 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002436:	0e1b      	lsrs	r3, r3, #24
 8002438:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	b2da      	uxtb	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	b2da      	uxtb	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b2db      	uxtb	r3, r3
 8002482:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002490:	b2db      	uxtb	r3, r3
 8002492:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a0:	0e1b      	lsrs	r3, r3, #24
 80024a2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	88db      	ldrh	r3, [r3, #6]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	09db      	lsrs	r3, r3, #7
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8087 	bne.w	800264a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254c:	b2db      	uxtb	r3, r3
 800254e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	431a      	orrs	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002562:	0e1b      	lsrs	r3, r3, #24
 8002564:	b2db      	uxtb	r3, r3
 8002566:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	431a      	orrs	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	b2da      	uxtb	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	b2da      	uxtb	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0306 	and.w	r3, r3, #6
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	09db      	lsrs	r3, r3, #7
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7e1b      	ldrb	r3, [r3, #24]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3302      	adds	r3, #2
 800260a:	2201      	movs	r2, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002614:	fb03 f202 	mul.w	r2, r3, r2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7a1b      	ldrb	r3, [r3, #8]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	2301      	movs	r3, #1
 8002626:	fa03 f202 	lsl.w	r2, r3, r2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002636:	0a52      	lsrs	r2, r2, #9
 8002638:	fb03 f202 	mul.w	r2, r3, r2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	661a      	str	r2, [r3, #96]	; 0x60
 8002648:	e04d      	b.n	80026e6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	2b01      	cmp	r3, #1
 8002650:	d138      	bne.n	80026c4 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002656:	b2db      	uxtb	r3, r3
 8002658:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	0e1b      	lsrs	r3, r3, #24
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	431a      	orrs	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	b2db      	uxtb	r3, r3
 8002686:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	431a      	orrs	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	b2db      	uxtb	r3, r3
 800269c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	3301      	adds	r3, #1
 80026a4:	029a      	lsls	r2, r3, #10
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b8:	659a      	str	r2, [r3, #88]	; 0x58
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	661a      	str	r2, [r3, #96]	; 0x60
 80026c2:	e010      	b.n	80026e6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0c1      	b.n	800286a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002702:	b2da      	uxtb	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270c:	b2db      	uxtb	r3, r3
 800270e:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7e9b      	ldrb	r3, [r3, #26]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	09db      	lsrs	r3, r3, #7
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002732:	b2da      	uxtb	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	0e1b      	lsrs	r3, r3, #24
 800273e:	b2db      	uxtb	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	09db      	lsrs	r3, r3, #7
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	b2da      	uxtb	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	b2da      	uxtb	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	b2da      	uxtb	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7fdb      	ldrb	r3, [r3, #31]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	09db      	lsrs	r3, r3, #7
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	b2da      	uxtb	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	b2da      	uxtb	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	b2db      	uxtb	r3, r3
 800284c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002858:	b2da      	uxtb	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80028ce:	b5b0      	push	{r4, r5, r7, lr}
 80028d0:	b08e      	sub	sp, #56	; 0x38
 80028d2:	af04      	add	r7, sp, #16
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2203      	movs	r2, #3
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d02e      	beq.n	800294a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	d106      	bne.n	8002902 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002900:	e029      	b.n	8002956 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	d10a      	bne.n	8002920 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa98 	bl	8002e40 <SD_WideBus_Enable>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
 800291e:	e01a      	b.n	8002956 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fad7 	bl	8002eda <SD_WideBus_Disable>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
 800293a:	e00c      	b.n	8002956 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
 8002948:	e005      	b.n	8002956 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e024      	b.n	80029be <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681d      	ldr	r5, [r3, #0]
 800299a:	466c      	mov	r4, sp
 800299c:	f107 0318 	add.w	r3, r7, #24
 80029a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ae:	4628      	mov	r0, r5
 80029b0:	f001 f892 	bl	8003ad8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}

080029c6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80029ce:	2304      	movs	r3, #4
 80029d0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa03 	bl	8002dec <SD_SendStatus>
 80029e6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0a5b      	lsrs	r3, r3, #9
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d127      	bne.n	8002a84 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff ffc6 	bl	80029c6 <HAL_SD_GetCardState>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d002      	beq.n	8002a58 <SD_DMATxAbort+0x48>
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d115      	bne.n	8002a84 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 f9cd 	bl	8003dfc <SDMMC_CmdStopTransfer>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 fe20 	bl	80046bc <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8002a7c:	e002      	b.n	8002a84 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fcc6 	bl	8002410 <HAL_SD_ErrorCallback>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d127      	bne.n	8002b00 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff ff88 	bl	80029c6 <HAL_SD_GetCardState>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d002      	beq.n	8002ad4 <SD_DMARxAbort+0x48>
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d115      	bne.n	8002b00 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 f98f 	bl	8003dfc <SDMMC_CmdStopTransfer>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f001 fde2 	bl	80046bc <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8002af8:	e002      	b.n	8002b00 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff fc88 	bl	8002410 <HAL_SD_ErrorCallback>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b094      	sub	sp, #80	; 0x50
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002b14:	2301      	movs	r3, #1
 8002b16:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f832 	bl	8003b86 <SDIO_GetPowerState>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b2c:	e0b2      	b.n	8002c94 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d02f      	beq.n	8002b96 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 fa78 	bl	8004030 <SDMMC_CmdSendCID>
 8002b40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <SD_InitCard+0x44>
    {
      return errorstate;
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	e0a3      	b.n	8002c94 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 f85c 	bl	8003c10 <SDIO_GetResponse>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2104      	movs	r1, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f853 	bl	8003c10 <SDIO_GetResponse>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2108      	movs	r1, #8
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f84a 	bl	8003c10 <SDIO_GetResponse>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	210c      	movs	r1, #12
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f841 	bl	8003c10 <SDIO_GetResponse>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d00d      	beq.n	8002bba <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f107 020e 	add.w	r2, r7, #14
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fa82 	bl	80040b2 <SDMMC_CmdSetRelAdd>
 8002bae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <SD_InitCard+0xb2>
    {
      return errorstate;
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb8:	e06c      	b.n	8002c94 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d036      	beq.n	8002c30 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f001 fa4a 	bl	8004070 <SDMMC_CmdSendCSD>
 8002bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be6:	e055      	b.n	8002c94 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f80e 	bl	8003c10 <SDIO_GetResponse>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2104      	movs	r1, #4
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 f805 	bl	8003c10 <SDIO_GetResponse>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2108      	movs	r1, #8
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fffc 	bl	8003c10 <SDIO_GetResponse>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	210c      	movs	r1, #12
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fff3 	bl	8003c10 <SDIO_GetResponse>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2104      	movs	r1, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 ffea 	bl	8003c10 <SDIO_GetResponse>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0d1a      	lsrs	r2, r3, #20
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fbea 	bl	8002424 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4615      	mov	r5, r2
 8002c60:	4622      	mov	r2, r4
 8002c62:	462b      	mov	r3, r5
 8002c64:	4608      	mov	r0, r1
 8002c66:	f001 f8ed 	bl	8003e44 <SDMMC_CmdSelDesel>
 8002c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <SD_InitCard+0x16e>
  {
    return errorstate;
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	e00e      	b.n	8002c94 <SD_InitCard+0x18c>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681d      	ldr	r5, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	466c      	mov	r4, sp
 8002c7e:	f103 0210 	add.w	r2, r3, #16
 8002c82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c88:	3304      	adds	r3, #4
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 ff23 	bl	8003ad8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3740      	adds	r7, #64	; 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}

08002c9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f8e8 	bl	8003e8e <SDMMC_CmdGoIdleState>
 8002cbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SD_PowerON+0x2e>
  {
    return errorstate;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e08c      	b.n	8002de4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 f8fd 	bl	8003ece <SDMMC_CmdOperCond>
 8002cd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03d      	beq.n	8002d58 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002ce2:	e032      	b.n	8002d4a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d102      	bne.n	8002cf8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf6:	e075      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 f906 	bl	8003f10 <SDMMC_CmdAppCommand>
 8002d04:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d10:	e068      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f91d 	bl	8003f58 <SDMMC_CmdAppOperCommand>
 8002d1e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d2a:	e05b      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 ff6c 	bl	8003c10 <SDIO_GetResponse>
 8002d38:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	0fdb      	lsrs	r3, r3, #31
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <SD_PowerON+0xaa>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <SD_PowerON+0xac>
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0c9      	beq.n	8002ce4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
 8002d56:	e044      	b.n	8002de2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002d5e:	e031      	b.n	8002dc4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	60ba      	str	r2, [r7, #8]
 8002d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d102      	bne.n	8002d74 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d72:	e037      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f8c8 	bl	8003f10 <SDMMC_CmdAppCommand>
 8002d80:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <SD_PowerON+0xf0>
      {
        return errorstate;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	e02b      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 f8df 	bl	8003f58 <SDMMC_CmdAppOperCommand>
 8002d9a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <SD_PowerON+0x10a>
      {
        return errorstate;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e01e      	b.n	8002de4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ff2f 	bl	8003c10 <SDIO_GetResponse>
 8002db2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	0fdb      	lsrs	r3, r3, #31
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <SD_PowerON+0x124>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <SD_PowerON+0x126>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ca      	beq.n	8002d60 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8002dda:	e002      	b.n	8002de2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e04:	e018      	b.n	8002e38 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f001 f970 	bl	80040f8 <SDMMC_CmdSendStatus>
 8002e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	e009      	b.n	8002e38 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fef0 	bl	8003c10 <SDIO_GetResponse>
 8002e30:	4602      	mov	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fed8 	bl	8003c10 <SDIO_GetResponse>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e6a:	d102      	bne.n	8002e72 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e70:	e02f      	b.n	8002ed2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e72:	f107 030c 	add.w	r3, r7, #12
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f87b 	bl	8002f74 <SD_FindSCR>
 8002e7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	e023      	b.n	8002ed2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01c      	beq.n	8002ece <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f001 f835 	bl	8003f10 <SDMMC_CmdAppCommand>
 8002ea6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	e00f      	b.n	8002ed2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 f872 	bl	8003fa2 <SDMMC_CmdBusWidth>
 8002ebe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e003      	b.n	8002ed2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e001      	b.n	8002ed2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ece:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fe8b 	bl	8003c10 <SDIO_GetResponse>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f04:	d102      	bne.n	8002f0c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f0a:	e02f      	b.n	8002f6c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f82e 	bl	8002f74 <SD_FindSCR>
 8002f18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e023      	b.n	8002f6c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01c      	beq.n	8002f68 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 ffe8 	bl	8003f10 <SDMMC_CmdAppCommand>
 8002f40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	e00f      	b.n	8002f6c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f825 	bl	8003fa2 <SDMMC_CmdBusWidth>
 8002f58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	e003      	b.n	8002f6c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e001      	b.n	8002f6c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08f      	sub	sp, #60	; 0x3c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002f82:	f7fd fe17 	bl	8000bb4 <HAL_GetTick>
 8002f86:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2108      	movs	r1, #8
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fe79 	bl	8003c92 <SDMMC_CmdBlockLength>
 8002fa0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <SD_FindSCR+0x38>
  {
    return errorstate;
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	e0a8      	b.n	80030fe <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f000 ffa9 	bl	8003f10 <SDMMC_CmdAppCommand>
 8002fbe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <SD_FindSCR+0x56>
  {
    return errorstate;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	e099      	b.n	80030fe <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fce:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002fd4:	2330      	movs	r3, #48	; 0x30
 8002fd6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f107 0214 	add.w	r2, r7, #20
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fe23 	bl	8003c3a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fff6 	bl	8003fea <SDMMC_CmdSendSCR>
 8002ffe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2b00      	cmp	r3, #0
 8003004:	d022      	beq.n	800304c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	e079      	b.n	80030fe <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	f107 020c 	add.w	r2, r7, #12
 8003024:	18d4      	adds	r4, r2, r3
 8003026:	4608      	mov	r0, r1
 8003028:	f000 fd81 	bl	8003b2e <SDIO_ReadFIFO>
 800302c:	4603      	mov	r3, r0
 800302e:	6023      	str	r3, [r4, #0]
      index++;
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	3301      	adds	r3, #1
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003036:	f7fd fdbd 	bl	8000bb4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d102      	bne.n	800304c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003046:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800304a:	e058      	b.n	80030fe <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003052:	f240 432a 	movw	r3, #1066	; 0x42a
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0d6      	beq.n	800300a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003072:	2308      	movs	r3, #8
 8003074:	e043      	b.n	80030fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800308c:	2302      	movs	r3, #2
 800308e:	e036      	b.n	80030fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2220      	movs	r2, #32
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e029      	b.n	80030fe <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	061a      	lsls	r2, r3, #24
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030c0:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80030ca:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80030d6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80030d8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	061a      	lsls	r2, r3, #24
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030e6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80030f0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	0e1b      	lsrs	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	373c      	adds	r7, #60	; 0x3c
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}

08003106 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003106:	b590      	push	{r4, r7, lr}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e00d      	b.n	800313a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	18d4      	adds	r4, r2, r3
 800312a:	4608      	mov	r0, r1
 800312c:	f000 fcff 	bl	8003b2e <SDIO_ReadFIFO>
 8003130:	4603      	mov	r3, r0
 8003132:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b07      	cmp	r3, #7
 800313e:	d9ee      	bls.n	800311e <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f103 0220 	add.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e00b      	b.n	8003186 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f000 fce4 	bl	8003b48 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b07      	cmp	r3, #7
 800318a:	d9f0      	bls.n	800316e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f103 0220 	add.w	r2, r3, #32
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e03f      	b.n	8003234 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd fc13 	bl	80009f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2224      	movs	r2, #36	; 0x24
 80031d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa5a 	bl	80036a0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_UART_IRQHandler+0x52>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f990 	bl	80035ac <UART_Receive_IT>
      return;
 800328c:	e0cb      	b.n	8003426 <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80ab 	beq.w	80033ec <HAL_UART_IRQHandler+0x1b0>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_UART_IRQHandler+0x70>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a0 	beq.w	80033ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_UART_IRQHandler+0x90>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_UART_IRQHandler+0xb0>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	f043 0202 	orr.w	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_UART_IRQHandler+0xd0>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0xf0>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	f043 0208 	orr.w	r2, r3, #8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d077      	beq.n	8003424 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_UART_IRQHandler+0x112>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f92f 	bl	80035ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <HAL_UART_IRQHandler+0x13a>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d031      	beq.n	80033da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f878 	bl	800346c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d023      	beq.n	80033d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003398:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	4a21      	ldr	r2, [pc, #132]	; (800342c <HAL_UART_IRQHandler+0x1f0>)
 80033a8:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fd3d 	bl	8000e2e <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00e      	b.n	80033e8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f844 	bl	8003458 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00a      	b.n	80033e8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f840 	bl	8003458 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e006      	b.n	80033e8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f83c 	bl	8003458 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033e6:	e01d      	b.n	8003424 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	bf00      	nop
    return;
 80033ea:	e01b      	b.n	8003424 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_UART_IRQHandler+0x1cc>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f865 	bl	80034d0 <UART_Transmit_IT>
    return;
 8003406:	e00e      	b.n	8003426 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_UART_IRQHandler+0x1ea>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8ad 	bl	800357c <UART_EndTransmit_IT>
    return;
 8003422:	e000      	b.n	8003426 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003424:	bf00      	nop
  }
}
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	080034a9 	.word	0x080034a9

08003430 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003482:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ffc8 	bl	8003458 <HAL_UART_ErrorCallback>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b21      	cmp	r3, #33	; 0x21
 80034e2:	d144      	bne.n	800356e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d11a      	bne.n	8003524 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003502:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]
 8003516:	e00e      	b.n	8003536 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]
 8003522:	e008      	b.n	8003536 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6211      	str	r1, [r2, #32]
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4619      	mov	r1, r3
 8003544:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10f      	bne.n	800356a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003558:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003568:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff47 	bl	8003430 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b22      	cmp	r3, #34	; 0x22
 80035be:	d169      	bne.n	8003694 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d123      	bne.n	8003612 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
 80035f4:	e029      	b.n	800364a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
 8003610:	e01b      	b.n	800364a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6858      	ldr	r0, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6291      	str	r1, [r2, #40]	; 0x28
 800362a:	b2c2      	uxtb	r2, r0
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e00c      	b.n	800364a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	1c58      	adds	r0, r3, #1
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	6288      	str	r0, [r1, #40]	; 0x28
 8003642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29b      	uxth	r3, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4619      	mov	r1, r3
 8003658:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800366c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fedc 	bl	8003444 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e002      	b.n	8003696 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036dc:	f023 030c 	bic.w	r3, r3, #12
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003730:	f040 80e4 	bne.w	80038fc <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4aab      	ldr	r2, [pc, #684]	; (80039e8 <UART_SetConfig+0x348>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <UART_SetConfig+0xa8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4aaa      	ldr	r2, [pc, #680]	; (80039ec <UART_SetConfig+0x34c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d16c      	bne.n	8003822 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003748:	f7fe f960 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 800374c:	4602      	mov	r2, r0
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	4aa3      	ldr	r2, [pc, #652]	; (80039f0 <UART_SetConfig+0x350>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	011c      	lsls	r4, r3, #4
 800376c:	f7fe f94e 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8003770:	4602      	mov	r2, r0
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009a      	lsls	r2, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fbb2 f5f3 	udiv	r5, r2, r3
 8003786:	f7fe f941 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 800378a:	4602      	mov	r2, r0
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009a      	lsls	r2, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	4a93      	ldr	r2, [pc, #588]	; (80039f0 <UART_SetConfig+0x350>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2264      	movs	r2, #100	; 0x64
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	1aeb      	subs	r3, r5, r3
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	3332      	adds	r3, #50	; 0x32
 80037b4:	4a8e      	ldr	r2, [pc, #568]	; (80039f0 <UART_SetConfig+0x350>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c2:	441c      	add	r4, r3
 80037c4:	f7fe f922 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fbb2 f5f3 	udiv	r5, r2, r3
 80037de:	f7fe f915 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <UART_SetConfig+0x350>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2264      	movs	r2, #100	; 0x64
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	1aeb      	subs	r3, r5, r3
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	3332      	adds	r3, #50	; 0x32
 800380c:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <UART_SetConfig+0x350>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 0207 	and.w	r2, r3, #7
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4422      	add	r2, r4
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e154      	b.n	8003acc <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003822:	f7fe f8df 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003826:	4602      	mov	r2, r0
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	4a6c      	ldr	r2, [pc, #432]	; (80039f0 <UART_SetConfig+0x350>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	011c      	lsls	r4, r3, #4
 8003846:	f7fe f8cd 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 800384a:	4602      	mov	r2, r0
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009a      	lsls	r2, r3, #2
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003860:	f7fe f8c0 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003864:	4602      	mov	r2, r0
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009a      	lsls	r2, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <UART_SetConfig+0x350>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	2264      	movs	r2, #100	; 0x64
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	1aeb      	subs	r3, r5, r3
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	3332      	adds	r3, #50	; 0x32
 800388e:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <UART_SetConfig+0x350>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800389c:	441c      	add	r4, r3
 800389e:	f7fe f8a1 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009a      	lsls	r2, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80038b8:	f7fe f894 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009a      	lsls	r2, r3, #2
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4a47      	ldr	r2, [pc, #284]	; (80039f0 <UART_SetConfig+0x350>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2264      	movs	r2, #100	; 0x64
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	1aeb      	subs	r3, r5, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <UART_SetConfig+0x350>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4422      	add	r2, r4
 80038f8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80038fa:	e0e7      	b.n	8003acc <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a39      	ldr	r2, [pc, #228]	; (80039e8 <UART_SetConfig+0x348>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <UART_SetConfig+0x270>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <UART_SetConfig+0x34c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d171      	bne.n	80039f4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003910:	f7fe f87c 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8003914:	4602      	mov	r2, r0
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009a      	lsls	r2, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <UART_SetConfig+0x350>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	011c      	lsls	r4, r3, #4
 8003934:	f7fe f86a 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8003938:	4602      	mov	r2, r0
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	fbb2 f5f3 	udiv	r5, r2, r3
 800394e:	f7fe f85d 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8003952:	4602      	mov	r2, r0
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <UART_SetConfig+0x350>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2264      	movs	r2, #100	; 0x64
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	1aeb      	subs	r3, r5, r3
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <UART_SetConfig+0x350>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	441c      	add	r4, r3
 800398a:	f7fe f83f 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 800398e:	4602      	mov	r2, r0
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80039a4:	f7fe f832 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <UART_SetConfig+0x350>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2264      	movs	r2, #100	; 0x64
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	1aeb      	subs	r3, r5, r3
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	3332      	adds	r3, #50	; 0x32
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <UART_SetConfig+0x350>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4422      	add	r2, r4
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	e071      	b.n	8003acc <UART_SetConfig+0x42c>
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039f4:	f7fd fff6 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <UART_SetConfig+0x434>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	011c      	lsls	r4, r3, #4
 8003a18:	f7fd ffe4 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a32:	f7fd ffd7 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <UART_SetConfig+0x434>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2264      	movs	r2, #100	; 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	1aeb      	subs	r3, r5, r3
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	3332      	adds	r3, #50	; 0x32
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <UART_SetConfig+0x434>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6c:	441c      	add	r4, r3
 8003a6e:	f7fd ffb9 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a88:	f7fd ffac 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	441a      	add	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <UART_SetConfig+0x434>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2264      	movs	r2, #100	; 0x64
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	1aeb      	subs	r3, r5, r3
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	3332      	adds	r3, #50	; 0x32
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <UART_SetConfig+0x434>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4422      	add	r2, r4
 8003ac8:	609a      	str	r2, [r3, #8]
}
 8003aca:	e7ff      	b.n	8003acc <UART_SetConfig+0x42c>
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad4:	51eb851f 	.word	0x51eb851f

08003ad8 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003ad8:	b084      	sub	sp, #16
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	f107 001c 	add.w	r0, r7, #28
 8003ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003aee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003af0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003af2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003af6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003afa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003afe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003b02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	b004      	add	sp, #16
 8003b2c:	4770      	bx	lr

08003b2e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2203      	movs	r2, #3
 8003b76:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0303 	and.w	r3, r3, #3
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bc0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003bc6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003bcc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003bdc:	f023 030f 	bic.w	r3, r3, #15
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	b2db      	uxtb	r3, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3314      	adds	r3, #20
 8003c22:	461a      	mov	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
}  
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c60:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003c66:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003c6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0

}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b088      	sub	sp, #32
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff70 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa63 	bl	8004194 <SDMMC_GetCmdResp1>
 8003cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003cec:	2311      	movs	r3, #17
 8003cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cf0:	2340      	movs	r3, #64	; 0x40
 8003cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff4c 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	2111      	movs	r1, #17
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa3f 	bl	8004194 <SDMMC_GetCmdResp1>
 8003d16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d18:	69fb      	ldr	r3, [r7, #28]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b088      	sub	sp, #32
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003d34:	2312      	movs	r3, #18
 8003d36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d44:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff28 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	2112      	movs	r1, #18
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa1b 	bl	8004194 <SDMMC_GetCmdResp1>
 8003d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d60:	69fb      	ldr	r3, [r7, #28]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b088      	sub	sp, #32
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003d7c:	2318      	movs	r3, #24
 8003d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d8c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff04 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	2118      	movs	r1, #24
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f9f7 	bl	8004194 <SDMMC_GetCmdResp1>
 8003da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003da8:	69fb      	ldr	r3, [r7, #28]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b088      	sub	sp, #32
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003dc4:	2319      	movs	r3, #25
 8003dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fee0 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	2119      	movs	r1, #25
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9d3 	bl	8004194 <SDMMC_GetCmdResp1>
 8003dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003df0:	69fb      	ldr	r3, [r7, #28]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e10:	2340      	movs	r3, #64	; 0x40
 8003e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff febc 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003e2a:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <SDMMC_CmdStopTransfer+0x44>)
 8003e2c:	210c      	movs	r1, #12
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9b0 	bl	8004194 <SDMMC_GetCmdResp1>
 8003e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e36:	69fb      	ldr	r3, [r7, #28]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	05f5e100 	.word	0x05f5e100

08003e44 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e5c:	2340      	movs	r3, #64	; 0x40
 8003e5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e68:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e6a:	f107 0310 	add.w	r3, r7, #16
 8003e6e:	4619      	mov	r1, r3
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff fe96 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	2107      	movs	r1, #7
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f989 	bl	8004194 <SDMMC_GetCmdResp1>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eae:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fe73 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f93f 	bl	8004140 <SDMMC_GetCmdError>
 8003ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003eda:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ee4:	2340      	movs	r3, #64	; 0x40
 8003ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fe52 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb10 	bl	8004524 <SDMMC_GetCmdResp7>
 8003f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f06:	69fb      	ldr	r3, [r7, #28]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003f22:	2337      	movs	r3, #55	; 0x37
 8003f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f32:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f34:	f107 0308 	add.w	r3, r7, #8
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fe31 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	2137      	movs	r1, #55	; 0x37
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f924 	bl	8004194 <SDMMC_GetCmdResp1>
 8003f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003f72:	2329      	movs	r3, #41	; 0x29
 8003f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f82:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe09 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fa25 	bl	80043e0 <SDMMC_GetCmdResp3>
 8003f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f98:	69fb      	ldr	r3, [r7, #28]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b088      	sub	sp, #32
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003fb4:	2306      	movs	r3, #6
 8003fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fde8 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	2106      	movs	r1, #6
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8db 	bl	8004194 <SDMMC_GetCmdResp1>
 8003fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b088      	sub	sp, #32
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003ffa:	2333      	movs	r3, #51	; 0x33
 8003ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fdc5 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	2133      	movs	r1, #51	; 0x33
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8b8 	bl	8004194 <SDMMC_GetCmdResp1>
 8004024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004026:	69fb      	ldr	r3, [r7, #28]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004040:	2302      	movs	r3, #2
 8004042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004044:	23c0      	movs	r3, #192	; 0xc0
 8004046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800404c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004050:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fda2 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f97e 	bl	8004360 <SDMMC_GetCmdResp2>
 8004064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004066:	69fb      	ldr	r3, [r7, #28]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004082:	2309      	movs	r3, #9
 8004084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004086:	23c0      	movs	r3, #192	; 0xc0
 8004088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800408e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004092:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fd81 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f95d 	bl	8004360 <SDMMC_GetCmdResp2>
 80040a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040a8:	69fb      	ldr	r3, [r7, #28]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b088      	sub	sp, #32
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80040c4:	2303      	movs	r3, #3
 80040c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fd60 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	2103      	movs	r1, #3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9ae 	bl	8004448 <SDMMC_GetCmdResp6>
 80040ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ee:	69fb      	ldr	r3, [r7, #28]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800410a:	230d      	movs	r3, #13
 800410c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fd3d 	bl	8003ba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	210d      	movs	r1, #13
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f830 	bl	8004194 <SDMMC_GetCmdResp1>
 8004134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004136:	69fb      	ldr	r3, [r7, #28]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004140:	b490      	push	{r4, r7}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <SDMMC_GetCmdError+0x4c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a10      	ldr	r2, [pc, #64]	; (8004190 <SDMMC_GetCmdError+0x50>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0a5b      	lsrs	r3, r3, #9
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800415c:	4623      	mov	r3, r4
 800415e:	1e5c      	subs	r4, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004168:	e00a      	b.n	8004180 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f2      	beq.n	800415c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bc90      	pop	{r4, r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000000 	.word	0x20000000
 8004190:	10624dd3 	.word	0x10624dd3

08004194 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	460b      	mov	r3, r1
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041a2:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <SDMMC_GetCmdResp1+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	; (8004358 <SDMMC_GetCmdResp1+0x1c4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	0a5b      	lsrs	r3, r3, #9
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80041b4:	4623      	mov	r3, r4
 80041b6:	1e5c      	subs	r4, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041c0:	e0c3      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f2      	beq.n	80041b4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2204      	movs	r2, #4
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041e0:	2304      	movs	r3, #4
 80041e2:	e0b2      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0a7      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fcfb 	bl	8003bf6 <SDIO_GetCommandResponse>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	4293      	cmp	r3, r2
 8004208:	d001      	beq.n	800420e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800420a:	2301      	movs	r3, #1
 800420c:	e09d      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004216:	2100      	movs	r1, #0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff fcf9 	bl	8003c10 <SDIO_GetResponse>
 800421e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4b4e      	ldr	r3, [pc, #312]	; (800435c <SDMMC_GetCmdResp1+0x1c8>)
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800422a:	2300      	movs	r3, #0
 800422c:	e08d      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	da02      	bge.n	800423a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004238:	e087      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	e080      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	e079      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004264:	e071      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	e069      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004284:	e061      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004294:	e059      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a4:	e051      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b4:	e049      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042c4:	e041      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80042d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d4:	e039      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e4:	e031      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042f4:	e029      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004304:	e021      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004310:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004314:	e019      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004324:	e011      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004330:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004334:	e009      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004340:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004344:	e001      	b.n	800434a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000
 8004358:	10624dd3 	.word	0x10624dd3
 800435c:	fdffe008 	.word	0xfdffe008

08004360 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004360:	b490      	push	{r4, r7}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <SDMMC_GetCmdResp2+0x78>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <SDMMC_GetCmdResp2+0x7c>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0a5b      	lsrs	r3, r3, #9
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800437c:	4623      	mov	r3, r4
 800437e:	1e5c      	subs	r4, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004388:	e020      	b.n	80043cc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f2      	beq.n	800437c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043a8:	2304      	movs	r3, #4
 80043aa:	e00f      	b.n	80043cc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043be:	2301      	movs	r3, #1
 80043c0:	e004      	b.n	80043cc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc90      	pop	{r4, r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000
 80043dc:	10624dd3 	.word	0x10624dd3

080043e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80043e0:	b490      	push	{r4, r7}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <SDMMC_GetCmdResp3+0x60>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <SDMMC_GetCmdResp3+0x64>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0a5b      	lsrs	r3, r3, #9
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80043fc:	4623      	mov	r3, r4
 80043fe:	1e5c      	subs	r4, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004408:	e015      	b.n	8004436 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f2      	beq.n	80043fc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004428:	2304      	movs	r3, #4
 800442a:	e004      	b.n	8004436 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bc90      	pop	{r4, r7}
 800443e:	4770      	bx	lr
 8004440:	20000000 	.word	0x20000000
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	460b      	mov	r3, r1
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <SDMMC_GetCmdResp6+0xd4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a31      	ldr	r2, [pc, #196]	; (8004520 <SDMMC_GetCmdResp6+0xd8>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	0a5b      	lsrs	r3, r3, #9
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800446a:	4623      	mov	r3, r4
 800446c:	1e5c      	subs	r4, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004476:	e04c      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f2      	beq.n	800446a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2204      	movs	r2, #4
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004496:	2304      	movs	r3, #4
 8004498:	e03b      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e030      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fba0 	bl	8003bf6 <SDIO_GetCommandResponse>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461a      	mov	r2, r3
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	4293      	cmp	r3, r2
 80044be:	d001      	beq.n	80044c4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e026      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80044cc:	2100      	movs	r1, #0
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fb9e 	bl	8003c10 <SDIO_GetResponse>
 80044d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e011      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80044f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044fc:	e009      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800450c:	e001      	b.n	8004512 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800450e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004524:	b490      	push	{r4, r7}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800452c:	4b18      	ldr	r3, [pc, #96]	; (8004590 <SDMMC_GetCmdResp7+0x6c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a18      	ldr	r2, [pc, #96]	; (8004594 <SDMMC_GetCmdResp7+0x70>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0a5b      	lsrs	r3, r3, #9
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004540:	4623      	mov	r3, r4
 8004542:	1e5c      	subs	r4, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800454c:	e01a      	b.n	8004584 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f2      	beq.n	8004540 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800456c:	2304      	movs	r3, #4
 800456e:	e009      	b.n	8004584 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004582:	2300      	movs	r3, #0
  
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bc90      	pop	{r4, r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000000 	.word	0x20000000
 8004594:	10624dd3 	.word	0x10624dd3

08004598 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800459c:	4904      	ldr	r1, [pc, #16]	; (80045b0 <MX_FATFS_Init+0x18>)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <MX_FATFS_Init+0x1c>)
 80045a0:	f000 f9fc 	bl	800499c <FATFS_LinkDriver>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <MX_FATFS_Init+0x20>)
 80045aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200000f4 	.word	0x200000f4
 80045b4:	08004a44 	.word	0x08004a44
 80045b8:	200000f0 	.word	0x200000f0

080045bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80045c6:	f000 f8ac 	bl	8004722 <BSP_SD_IsDetected>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e012      	b.n	80045fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <BSP_SD_Init+0x48>)
 80045d6:	f7fd fa2d 	bl	8001a34 <HAL_SD_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80045e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045e8:	4806      	ldr	r0, [pc, #24]	; (8004604 <BSP_SD_Init+0x48>)
 80045ea:	f7fe f970 	bl	80028ce <HAL_SD_ConfigWideBusOperation>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80045f8:	79fb      	ldrb	r3, [r7, #7]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000028 	.word	0x20000028

08004608 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <BSP_SD_ReadBlocks+0x38>)
 8004626:	f7fd fa8d 	bl	8001b44 <HAL_SD_ReadBlocks>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000028 	.word	0x20000028

08004644 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	4806      	ldr	r0, [pc, #24]	; (800467c <BSP_SD_WriteBlocks+0x38>)
 8004662:	f7fd fc06 	bl	8001e72 <HAL_SD_WriteBlocks>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000028 	.word	0x20000028

08004680 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <BSP_SD_GetCardState+0x1c>)
 8004686:	f7fe f99e 	bl	80029c6 <HAL_SD_GetCardState>
 800468a:	4603      	mov	r3, r0
 800468c:	2b04      	cmp	r3, #4
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
}
 8004696:	4618      	mov	r0, r3
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000028 	.word	0x20000028

080046a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4803      	ldr	r0, [pc, #12]	; (80046b8 <BSP_SD_GetCardInfo+0x18>)
 80046ac:	f7fe f8e3 	bl	8002876 <HAL_SD_GetCardInfo>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000028 	.word	0x20000028

080046bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80046c4:	f000 f818 	bl	80046f8 <BSP_SD_AbortCallback>
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80046d8:	f000 f815 	bl	8004706 <BSP_SD_WriteCpltCallback>
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80046ec:	f000 f812 	bl	8004714 <BSP_SD_ReadCpltCallback>
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0

}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0

}
 800470a:	bf00      	nop
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0

}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004728:	2301      	movs	r3, #1
 800472a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	b2db      	uxtb	r3, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <SD_CheckStatus+0x38>)
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800474c:	f7ff ff98 	bl	8004680 <BSP_SD_GetCardState>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <SD_CheckStatus+0x38>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b04      	ldr	r3, [pc, #16]	; (8004774 <SD_CheckStatus+0x38>)
 8004764:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004766:	4b03      	ldr	r3, [pc, #12]	; (8004774 <SD_CheckStatus+0x38>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000009 	.word	0x20000009

08004778 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <SD_initialize+0x38>)
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004788:	f7ff ff18 	bl	80045bc <BSP_SD_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ffd1 	bl	800473c <SD_CheckStatus>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <SD_initialize+0x38>)
 80047a0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80047a2:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <SD_initialize+0x38>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000009 	.word	0x20000009

080047b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ffbb 	bl	800473c <SD_CheckStatus>
 80047c6:	4603      	mov	r3, r0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff ff0b 	bl	8004608 <BSP_SD_ReadBlocks>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80047f8:	bf00      	nop
 80047fa:	f7ff ff41 	bl	8004680 <BSP_SD_GetCardState>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1fa      	bne.n	80047fa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f7ff ff08 	bl	8004644 <BSP_SD_WriteBlocks>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800483a:	bf00      	nop
 800483c:	f7ff ff20 	bl	8004680 <BSP_SD_GetCardState>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1fa      	bne.n	800483c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	603a      	str	r2, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
 8004860:	460b      	mov	r3, r1
 8004862:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800486a:	4b25      	ldr	r3, [pc, #148]	; (8004900 <SD_ioctl+0xac>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <SD_ioctl+0x28>
 8004878:	2303      	movs	r3, #3
 800487a:	e03c      	b.n	80048f6 <SD_ioctl+0xa2>

  switch (cmd)
 800487c:	79bb      	ldrb	r3, [r7, #6]
 800487e:	2b03      	cmp	r3, #3
 8004880:	d834      	bhi.n	80048ec <SD_ioctl+0x98>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <SD_ioctl+0x34>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	08004899 	.word	0x08004899
 800488c:	080048a1 	.word	0x080048a1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048d3 	.word	0x080048d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800489e:	e028      	b.n	80048f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fefb 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80048b6:	e01c      	b.n	80048f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff feef 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80048d0:	e00f      	b.n	80048f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80048d2:	f107 030c 	add.w	r3, r7, #12
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fee2 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	0a5a      	lsrs	r2, r3, #9
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80048ea:	e002      	b.n	80048f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80048f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3730      	adds	r7, #48	; 0x30
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000009 	.word	0x20000009

08004904 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 800491c:	7a5b      	ldrb	r3, [r3, #9]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d131      	bne.n	8004988 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 8004926:	7a5b      	ldrb	r3, [r3, #9]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004932:	4b19      	ldr	r3, [pc, #100]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 8004934:	7a5b      	ldrb	r3, [r3, #9]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 8004944:	7a5b      	ldrb	r3, [r3, #9]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 800494c:	4413      	add	r3, r2
 800494e:	79fa      	ldrb	r2, [r7, #7]
 8004950:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 8004954:	7a5b      	ldrb	r3, [r3, #9]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	b2d1      	uxtb	r1, r2
 800495c:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <FATFS_LinkDriverEx+0x94>)
 800495e:	7251      	strb	r1, [r2, #9]
 8004960:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004962:	7dbb      	ldrb	r3, [r7, #22]
 8004964:	3330      	adds	r3, #48	; 0x30
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3301      	adds	r3, #1
 8004970:	223a      	movs	r2, #58	; 0x3a
 8004972:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3302      	adds	r3, #2
 8004978:	222f      	movs	r2, #47	; 0x2f
 800497a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3303      	adds	r3, #3
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
}
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	200000f8 	.word	0x200000f8

0800499c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80049a6:	2200      	movs	r2, #0
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffaa 	bl	8004904 <FATFS_LinkDriverEx>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <memset>:
 80049ba:	4402      	add	r2, r0
 80049bc:	4603      	mov	r3, r0
 80049be:	4293      	cmp	r3, r2
 80049c0:	d100      	bne.n	80049c4 <memset+0xa>
 80049c2:	4770      	bx	lr
 80049c4:	f803 1b01 	strb.w	r1, [r3], #1
 80049c8:	e7f9      	b.n	80049be <memset+0x4>
	...

080049cc <__libc_init_array>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4d0d      	ldr	r5, [pc, #52]	; (8004a04 <__libc_init_array+0x38>)
 80049d0:	4c0d      	ldr	r4, [pc, #52]	; (8004a08 <__libc_init_array+0x3c>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	2600      	movs	r6, #0
 80049d8:	42a6      	cmp	r6, r4
 80049da:	d109      	bne.n	80049f0 <__libc_init_array+0x24>
 80049dc:	4d0b      	ldr	r5, [pc, #44]	; (8004a0c <__libc_init_array+0x40>)
 80049de:	4c0c      	ldr	r4, [pc, #48]	; (8004a10 <__libc_init_array+0x44>)
 80049e0:	f000 f818 	bl	8004a14 <_init>
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	2600      	movs	r6, #0
 80049ea:	42a6      	cmp	r6, r4
 80049ec:	d105      	bne.n	80049fa <__libc_init_array+0x2e>
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f4:	4798      	blx	r3
 80049f6:	3601      	adds	r6, #1
 80049f8:	e7ee      	b.n	80049d8 <__libc_init_array+0xc>
 80049fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fe:	4798      	blx	r3
 8004a00:	3601      	adds	r6, #1
 8004a02:	e7f2      	b.n	80049ea <__libc_init_array+0x1e>
 8004a04:	08004a60 	.word	0x08004a60
 8004a08:	08004a60 	.word	0x08004a60
 8004a0c:	08004a60 	.word	0x08004a60
 8004a10:	08004a64 	.word	0x08004a64

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
